/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { CommunicationRole, CommunicationRole$ } from "./communicationrole";
import {
    ParticipantEngagementStatus,
    ParticipantEngagementStatus$,
} from "./participantengagementstatus";
import { z } from "zod";

export type Participants = {
    userId?: string | undefined;
    displayName?: string | undefined;
    joinedAt?: Date | undefined;
    status?: ParticipantEngagementStatus | undefined;
    type?: CommunicationRole | undefined;
};

/** @internal */
export namespace Participants$ {
    export type Inbound = {
        userId?: string | undefined;
        displayName?: string | undefined;
        joinedAt?: string | undefined;
        status?: ParticipantEngagementStatus | undefined;
        type?: CommunicationRole | undefined;
    };

    export const inboundSchema: z.ZodType<Participants, z.ZodTypeDef, Inbound> = z
        .object({
            userId: z.string().optional(),
            displayName: z.string().optional(),
            joinedAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            status: ParticipantEngagementStatus$.optional(),
            type: CommunicationRole$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.userId === undefined ? null : { userId: v.userId }),
                ...(v.displayName === undefined ? null : { displayName: v.displayName }),
                ...(v.joinedAt === undefined ? null : { joinedAt: v.joinedAt }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });

    export type Outbound = {
        userId?: string | undefined;
        displayName?: string | undefined;
        joinedAt?: string | undefined;
        status?: ParticipantEngagementStatus | undefined;
        type?: CommunicationRole | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Participants> = z
        .object({
            userId: z.string().optional(),
            displayName: z.string().optional(),
            joinedAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            status: ParticipantEngagementStatus$.optional(),
            type: CommunicationRole$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.userId === undefined ? null : { userId: v.userId }),
                ...(v.displayName === undefined ? null : { displayName: v.displayName }),
                ...(v.joinedAt === undefined ? null : { joinedAt: v.joinedAt }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });
}
