/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { CustomAttributes, CustomAttributes$ } from "./customattributes";
import { z } from "zod";

export enum BrandsStatus {
    Active = "active",
    Inactive = "inactive",
}

export type Brands = {
    id?: string | undefined;
    name?: string | undefined;
    description?: string | undefined;
    logo?: string | undefined;
    website?: string | undefined;
    established?: Date | undefined;
    country?: string | undefined;
    status?: BrandsStatus | undefined;
    customFields?: Array<CustomAttributes> | undefined;
    createdAt?: Date | undefined;
    updatedAt?: Date | undefined;
    modifyToken?: string | undefined;
};

/** @internal */
export const BrandsStatus$ = z.nativeEnum(BrandsStatus);

/** @internal */
export namespace Brands$ {
    export type Inbound = {
        id?: string | undefined;
        name?: string | undefined;
        description?: string | undefined;
        logo?: string | undefined;
        website?: string | undefined;
        established?: string | undefined;
        country?: string | undefined;
        status?: BrandsStatus | undefined;
        customFields?: Array<CustomAttributes$.Inbound> | undefined;
        createdAt?: string | undefined;
        updatedAt?: string | undefined;
        modifyToken?: string | undefined;
    };

    export const inboundSchema: z.ZodType<Brands, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            name: z.string().optional(),
            description: z.string().optional(),
            logo: z.string().optional(),
            website: z.string().optional(),
            established: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            country: z.string().optional(),
            status: BrandsStatus$.optional(),
            customFields: z.array(CustomAttributes$?.inboundSchema).optional(),
            createdAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            updatedAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            modifyToken: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.logo === undefined ? null : { logo: v.logo }),
                ...(v.website === undefined ? null : { website: v.website }),
                ...(v.established === undefined ? null : { established: v.established }),
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.modifyToken === undefined ? null : { modifyToken: v.modifyToken }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        name?: string | undefined;
        description?: string | undefined;
        logo?: string | undefined;
        website?: string | undefined;
        established?: string | undefined;
        country?: string | undefined;
        status?: BrandsStatus | undefined;
        customFields?: Array<CustomAttributes$.Outbound> | undefined;
        createdAt?: string | undefined;
        updatedAt?: string | undefined;
        modifyToken?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Brands> = z
        .object({
            id: z.string().optional(),
            name: z.string().optional(),
            description: z.string().optional(),
            logo: z.string().optional(),
            website: z.string().optional(),
            established: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            country: z.string().optional(),
            status: BrandsStatus$.optional(),
            customFields: z.array(CustomAttributes$?.outboundSchema).optional(),
            createdAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            updatedAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            modifyToken: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.logo === undefined ? null : { logo: v.logo }),
                ...(v.website === undefined ? null : { website: v.website }),
                ...(v.established === undefined ? null : { established: v.established }),
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.modifyToken === undefined ? null : { modifyToken: v.modifyToken }),
            };
        });
}
