/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type KeyValues = {
    key?: string | undefined;
    value?: string | undefined;
};

/** @internal */
export namespace KeyValues$ {
    export type Inbound = {
        key?: string | undefined;
        value?: string | undefined;
    };

    export const inboundSchema: z.ZodType<KeyValues, z.ZodTypeDef, Inbound> = z
        .object({
            key: z.string().optional(),
            value: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.key === undefined ? null : { key: v.key }),
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });

    export type Outbound = {
        key?: string | undefined;
        value?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, KeyValues> = z
        .object({
            key: z.string().optional(),
            value: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.key === undefined ? null : { key: v.key }),
                ...(v.value === undefined ? null : { value: v.value }),
            };
        });
}
