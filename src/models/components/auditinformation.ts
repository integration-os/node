/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { AuditOpinionType, AuditOpinionType$ } from "./auditopiniontype";
import { z } from "zod";

export type AuditInformation = {
    auditorName?: string | undefined;
    auditOpinion?: AuditOpinionType | undefined;
    auditDate?: Date | undefined;
    notes?: string | undefined;
};

/** @internal */
export namespace AuditInformation$ {
    export type Inbound = {
        auditorName?: string | undefined;
        auditOpinion?: AuditOpinionType | undefined;
        auditDate?: string | undefined;
        notes?: string | undefined;
    };

    export const inboundSchema: z.ZodType<AuditInformation, z.ZodTypeDef, Inbound> = z
        .object({
            auditorName: z.string().optional(),
            auditOpinion: AuditOpinionType$.optional(),
            auditDate: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            notes: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.auditorName === undefined ? null : { auditorName: v.auditorName }),
                ...(v.auditOpinion === undefined ? null : { auditOpinion: v.auditOpinion }),
                ...(v.auditDate === undefined ? null : { auditDate: v.auditDate }),
                ...(v.notes === undefined ? null : { notes: v.notes }),
            };
        });

    export type Outbound = {
        auditorName?: string | undefined;
        auditOpinion?: AuditOpinionType | undefined;
        auditDate?: string | undefined;
        notes?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AuditInformation> = z
        .object({
            auditorName: z.string().optional(),
            auditOpinion: AuditOpinionType$.optional(),
            auditDate: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            notes: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.auditorName === undefined ? null : { auditorName: v.auditorName }),
                ...(v.auditOpinion === undefined ? null : { auditOpinion: v.auditOpinion }),
                ...(v.auditDate === undefined ? null : { auditDate: v.auditDate }),
                ...(v.notes === undefined ? null : { notes: v.notes }),
            };
        });
}
