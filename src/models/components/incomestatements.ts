/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { IncomeTaxExpenseDetails, IncomeTaxExpenseDetails$ } from "./incometaxexpensedetails";
import { KeyValues, KeyValues$ } from "./keyvalues";
import { OperatingExpensesDetails, OperatingExpensesDetails$ } from "./operatingexpensesdetails";
import { RevenueDetails, RevenueDetails$ } from "./revenuedetails";
import { ShareholderEquityDetails, ShareholderEquityDetails$ } from "./shareholderequitydetails";
import { z } from "zod";

export enum IncomeStatementsCurrency {
    Aed = "AED",
    Afn = "AFN",
    All = "ALL",
    Amd = "AMD",
    Ang = "ANG",
    Aoa = "AOA",
    Ars = "ARS",
    Aud = "AUD",
    Awg = "AWG",
    Azn = "AZN",
    Bam = "BAM",
    Bbd = "BBD",
    Bdt = "BDT",
    Bgn = "BGN",
    Bhd = "BHD",
    Bif = "BIF",
    Bmd = "BMD",
    Bnd = "BND",
    Bob = "BOB",
    Brl = "BRL",
    Bsd = "BSD",
    Btn = "BTN",
    Bwp = "BWP",
    Byn = "BYN",
    Bzd = "BZD",
    Cad = "CAD",
    Cdf = "CDF",
    Chf = "CHF",
    Clp = "CLP",
    Cny = "CNY",
    Cop = "COP",
    Crc = "CRC",
    Cuc = "CUC",
    Cup = "CUP",
    Cve = "CVE",
    Czk = "CZK",
    Djf = "DJF",
    Dkk = "DKK",
    Dop = "DOP",
    Dzd = "DZD",
    Egp = "EGP",
    Ern = "ERN",
    Etb = "ETB",
    Eur = "EUR",
    Fjd = "FJD",
    Fkp = "FKP",
    Fok = "FOK",
    Gbp = "GBP",
    Gel = "GEL",
    Ggp = "GGP",
    Ghs = "GHS",
    Gip = "GIP",
    Gmd = "GMD",
    Gnf = "GNF",
    Gtq = "GTQ",
    Gyd = "GYD",
    Hkd = "HKD",
    Hnl = "HNL",
    Hrk = "HRK",
    Htg = "HTG",
    Huf = "HUF",
    Idr = "IDR",
    Ils = "ILS",
    Imp = "IMP",
    Inr = "INR",
    Iqd = "IQD",
    Irr = "IRR",
    Isk = "ISK",
    Jep = "JEP",
    Jmd = "JMD",
    Jod = "JOD",
    Jpy = "JPY",
    Kes = "KES",
    Kgs = "KGS",
    Khr = "KHR",
    Kid = "KID",
    Kmf = "KMF",
    Kpw = "KPW",
    Krw = "KRW",
    Kwd = "KWD",
    Kyd = "KYD",
    Kzt = "KZT",
    Lak = "LAK",
    Lbp = "LBP",
    Lkr = "LKR",
    Lrd = "LRD",
    Lsl = "LSL",
    Lyd = "LYD",
    Mad = "MAD",
    Mdl = "MDL",
    Mga = "MGA",
    Mkd = "MKD",
    Mmk = "MMK",
    Mnt = "MNT",
    Mop = "MOP",
    Mru = "MRU",
    Mur = "MUR",
    Mvr = "MVR",
    Mwk = "MWK",
    Mxn = "MXN",
    Myr = "MYR",
    Mzn = "MZN",
    Nad = "NAD",
    Ngn = "NGN",
    Nio = "NIO",
    Nok = "NOK",
    Npr = "NPR",
    Nzd = "NZD",
    Omr = "OMR",
    Pab = "PAB",
    Pen = "PEN",
    Pgk = "PGK",
    Php = "PHP",
    Pkr = "PKR",
    Pln = "PLN",
    Pyg = "PYG",
    Qar = "QAR",
    Ron = "RON",
    Rsd = "RSD",
    Rub = "RUB",
    Rwf = "RWF",
    Sar = "SAR",
    Sbd = "SBD",
    Scr = "SCR",
    Sdg = "SDG",
    Sek = "SEK",
    Sgd = "SGD",
    Shp = "SHP",
    Sll = "SLL",
    Sos = "SOS",
    Srd = "SRD",
    Ssp = "SSP",
    Stn = "STN",
    Syp = "SYP",
    Szl = "SZL",
    Thb = "THB",
    Tjs = "TJS",
    Tmt = "TMT",
    Tnd = "TND",
    Top = "TOP",
    Try = "TRY",
    Ttd = "TTD",
    Tvd = "TVD",
    Twd = "TWD",
    Tzs = "TZS",
    Uah = "UAH",
    Ugx = "UGX",
    Usd = "USD",
    Uyu = "UYU",
    Uzs = "UZS",
    Ves = "VES",
    Vnd = "VND",
    Vuv = "VUV",
    Wst = "WST",
    Xaf = "XAF",
    Xcd = "XCD",
    Xdr = "XDR",
    Xof = "XOF",
    Xpf = "XPF",
    Yer = "YER",
    Zar = "ZAR",
    Zmw = "ZMW",
    Zwl = "ZWL",
}

export type IncomeStatements = {
    id?: string | undefined;
    period?: string | undefined;
    currency?: IncomeStatementsCurrency | undefined;
    exchangeRate?: number | undefined;
    revenue?: RevenueDetails | undefined;
    costOfGoodsSold?: number | undefined;
    grossProfit?: number | undefined;
    operatingExpenses?: OperatingExpensesDetails | undefined;
    operatingIncome?: number | undefined;
    interestExpense?: number | undefined;
    depreciationAndAmortization?: number | undefined;
    ebitda?: number | undefined;
    incomeBeforeTax?: number | undefined;
    incomeTaxExpense?: IncomeTaxExpenseDetails | undefined;
    netIncome?: number | undefined;
    shareholderEquity?: ShareholderEquityDetails | undefined;
    profitMargins?: number | undefined;
    accountSummary?: Array<KeyValues> | undefined;
    createdAt?: Date | undefined;
    updatedAt?: Date | undefined;
    modifyToken?: string | undefined;
};

/** @internal */
export const IncomeStatementsCurrency$ = z.nativeEnum(IncomeStatementsCurrency);

/** @internal */
export namespace IncomeStatements$ {
    export type Inbound = {
        id?: string | undefined;
        period?: string | undefined;
        currency?: IncomeStatementsCurrency | undefined;
        exchangeRate?: number | undefined;
        revenue?: RevenueDetails$.Inbound | undefined;
        costOfGoodsSold?: number | undefined;
        grossProfit?: number | undefined;
        operatingExpenses?: OperatingExpensesDetails$.Inbound | undefined;
        operatingIncome?: number | undefined;
        interestExpense?: number | undefined;
        depreciationAndAmortization?: number | undefined;
        ebitda?: number | undefined;
        incomeBeforeTax?: number | undefined;
        incomeTaxExpense?: IncomeTaxExpenseDetails$.Inbound | undefined;
        netIncome?: number | undefined;
        shareholderEquity?: ShareholderEquityDetails$.Inbound | undefined;
        profitMargins?: number | undefined;
        accountSummary?: Array<KeyValues$.Inbound> | undefined;
        createdAt?: string | undefined;
        updatedAt?: string | undefined;
        modifyToken?: string | undefined;
    };

    export const inboundSchema: z.ZodType<IncomeStatements, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            period: z.string().optional(),
            currency: IncomeStatementsCurrency$.optional(),
            exchangeRate: z.number().optional(),
            revenue: RevenueDetails$?.inboundSchema.optional(),
            costOfGoodsSold: z.number().optional(),
            grossProfit: z.number().optional(),
            operatingExpenses: OperatingExpensesDetails$?.inboundSchema.optional(),
            operatingIncome: z.number().optional(),
            interestExpense: z.number().optional(),
            depreciationAndAmortization: z.number().optional(),
            ebitda: z.number().optional(),
            incomeBeforeTax: z.number().optional(),
            incomeTaxExpense: IncomeTaxExpenseDetails$?.inboundSchema.optional(),
            netIncome: z.number().optional(),
            shareholderEquity: ShareholderEquityDetails$?.inboundSchema.optional(),
            profitMargins: z.number().optional(),
            accountSummary: z.array(KeyValues$?.inboundSchema).optional(),
            createdAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            updatedAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            modifyToken: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.period === undefined ? null : { period: v.period }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.exchangeRate === undefined ? null : { exchangeRate: v.exchangeRate }),
                ...(v.revenue === undefined ? null : { revenue: v.revenue }),
                ...(v.costOfGoodsSold === undefined
                    ? null
                    : { costOfGoodsSold: v.costOfGoodsSold }),
                ...(v.grossProfit === undefined ? null : { grossProfit: v.grossProfit }),
                ...(v.operatingExpenses === undefined
                    ? null
                    : { operatingExpenses: v.operatingExpenses }),
                ...(v.operatingIncome === undefined
                    ? null
                    : { operatingIncome: v.operatingIncome }),
                ...(v.interestExpense === undefined
                    ? null
                    : { interestExpense: v.interestExpense }),
                ...(v.depreciationAndAmortization === undefined
                    ? null
                    : { depreciationAndAmortization: v.depreciationAndAmortization }),
                ...(v.ebitda === undefined ? null : { ebitda: v.ebitda }),
                ...(v.incomeBeforeTax === undefined
                    ? null
                    : { incomeBeforeTax: v.incomeBeforeTax }),
                ...(v.incomeTaxExpense === undefined
                    ? null
                    : { incomeTaxExpense: v.incomeTaxExpense }),
                ...(v.netIncome === undefined ? null : { netIncome: v.netIncome }),
                ...(v.shareholderEquity === undefined
                    ? null
                    : { shareholderEquity: v.shareholderEquity }),
                ...(v.profitMargins === undefined ? null : { profitMargins: v.profitMargins }),
                ...(v.accountSummary === undefined ? null : { accountSummary: v.accountSummary }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.modifyToken === undefined ? null : { modifyToken: v.modifyToken }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        period?: string | undefined;
        currency?: IncomeStatementsCurrency | undefined;
        exchangeRate?: number | undefined;
        revenue?: RevenueDetails$.Outbound | undefined;
        costOfGoodsSold?: number | undefined;
        grossProfit?: number | undefined;
        operatingExpenses?: OperatingExpensesDetails$.Outbound | undefined;
        operatingIncome?: number | undefined;
        interestExpense?: number | undefined;
        depreciationAndAmortization?: number | undefined;
        ebitda?: number | undefined;
        incomeBeforeTax?: number | undefined;
        incomeTaxExpense?: IncomeTaxExpenseDetails$.Outbound | undefined;
        netIncome?: number | undefined;
        shareholderEquity?: ShareholderEquityDetails$.Outbound | undefined;
        profitMargins?: number | undefined;
        accountSummary?: Array<KeyValues$.Outbound> | undefined;
        createdAt?: string | undefined;
        updatedAt?: string | undefined;
        modifyToken?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, IncomeStatements> = z
        .object({
            id: z.string().optional(),
            period: z.string().optional(),
            currency: IncomeStatementsCurrency$.optional(),
            exchangeRate: z.number().optional(),
            revenue: RevenueDetails$?.outboundSchema.optional(),
            costOfGoodsSold: z.number().optional(),
            grossProfit: z.number().optional(),
            operatingExpenses: OperatingExpensesDetails$?.outboundSchema.optional(),
            operatingIncome: z.number().optional(),
            interestExpense: z.number().optional(),
            depreciationAndAmortization: z.number().optional(),
            ebitda: z.number().optional(),
            incomeBeforeTax: z.number().optional(),
            incomeTaxExpense: IncomeTaxExpenseDetails$?.outboundSchema.optional(),
            netIncome: z.number().optional(),
            shareholderEquity: ShareholderEquityDetails$?.outboundSchema.optional(),
            profitMargins: z.number().optional(),
            accountSummary: z.array(KeyValues$?.outboundSchema).optional(),
            createdAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            updatedAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            modifyToken: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.period === undefined ? null : { period: v.period }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.exchangeRate === undefined ? null : { exchangeRate: v.exchangeRate }),
                ...(v.revenue === undefined ? null : { revenue: v.revenue }),
                ...(v.costOfGoodsSold === undefined
                    ? null
                    : { costOfGoodsSold: v.costOfGoodsSold }),
                ...(v.grossProfit === undefined ? null : { grossProfit: v.grossProfit }),
                ...(v.operatingExpenses === undefined
                    ? null
                    : { operatingExpenses: v.operatingExpenses }),
                ...(v.operatingIncome === undefined
                    ? null
                    : { operatingIncome: v.operatingIncome }),
                ...(v.interestExpense === undefined
                    ? null
                    : { interestExpense: v.interestExpense }),
                ...(v.depreciationAndAmortization === undefined
                    ? null
                    : { depreciationAndAmortization: v.depreciationAndAmortization }),
                ...(v.ebitda === undefined ? null : { ebitda: v.ebitda }),
                ...(v.incomeBeforeTax === undefined
                    ? null
                    : { incomeBeforeTax: v.incomeBeforeTax }),
                ...(v.incomeTaxExpense === undefined
                    ? null
                    : { incomeTaxExpense: v.incomeTaxExpense }),
                ...(v.netIncome === undefined ? null : { netIncome: v.netIncome }),
                ...(v.shareholderEquity === undefined
                    ? null
                    : { shareholderEquity: v.shareholderEquity }),
                ...(v.profitMargins === undefined ? null : { profitMargins: v.profitMargins }),
                ...(v.accountSummary === undefined ? null : { accountSummary: v.accountSummary }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.modifyToken === undefined ? null : { modifyToken: v.modifyToken }),
            };
        });
}
