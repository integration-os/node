/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Addresses, Addresses$ } from "./addresses";
import { Contacts, Contacts$ } from "./contacts";
import { z } from "zod";

export enum InventoryLocationsType {
    Warehouse = "WAREHOUSE",
    RetailStore = "RETAIL_STORE",
    DistributionCenter = "DISTRIBUTION_CENTER",
    DropShipper = "DROP_SHIPPER",
    Other = "OTHER",
}

export type InventoryLocations = {
    locationId?: string | undefined;
    name?: string | undefined;
    address?: Addresses | undefined;
    contactInformation?: Array<Contacts> | undefined;
    type?: InventoryLocationsType | undefined;
    quantity?: number | undefined;
    operationalHours?: string | undefined;
    isActive?: boolean | undefined;
    createdAt?: Date | undefined;
    updatedAt?: Date | undefined;
    deleted?: boolean | undefined;
    modifyToken?: string | undefined;
};

/** @internal */
export const InventoryLocationsType$ = z.nativeEnum(InventoryLocationsType);

/** @internal */
export namespace InventoryLocations$ {
    export type Inbound = {
        locationId?: string | undefined;
        name?: string | undefined;
        address?: Addresses$.Inbound | undefined;
        contactInformation?: Array<Contacts$.Inbound> | undefined;
        type?: InventoryLocationsType | undefined;
        quantity?: number | undefined;
        operationalHours?: string | undefined;
        isActive?: boolean | undefined;
        createdAt?: string | undefined;
        updatedAt?: string | undefined;
        deleted?: boolean | undefined;
        modifyToken?: string | undefined;
    };

    export const inboundSchema: z.ZodType<InventoryLocations, z.ZodTypeDef, Inbound> = z
        .object({
            locationId: z.string().optional(),
            name: z.string().optional(),
            address: Addresses$?.inboundSchema.optional(),
            contactInformation: z.array(Contacts$?.inboundSchema).optional(),
            type: InventoryLocationsType$.optional(),
            quantity: z.number().optional(),
            operationalHours: z.string().optional(),
            isActive: z.boolean().optional(),
            createdAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            updatedAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            deleted: z.boolean().optional(),
            modifyToken: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.locationId === undefined ? null : { locationId: v.locationId }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.address === undefined ? null : { address: v.address }),
                ...(v.contactInformation === undefined
                    ? null
                    : { contactInformation: v.contactInformation }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.quantity === undefined ? null : { quantity: v.quantity }),
                ...(v.operationalHours === undefined
                    ? null
                    : { operationalHours: v.operationalHours }),
                ...(v.isActive === undefined ? null : { isActive: v.isActive }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
                ...(v.modifyToken === undefined ? null : { modifyToken: v.modifyToken }),
            };
        });

    export type Outbound = {
        locationId?: string | undefined;
        name?: string | undefined;
        address?: Addresses$.Outbound | undefined;
        contactInformation?: Array<Contacts$.Outbound> | undefined;
        type?: InventoryLocationsType | undefined;
        quantity?: number | undefined;
        operationalHours?: string | undefined;
        isActive?: boolean | undefined;
        createdAt?: string | undefined;
        updatedAt?: string | undefined;
        deleted?: boolean | undefined;
        modifyToken?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, InventoryLocations> = z
        .object({
            locationId: z.string().optional(),
            name: z.string().optional(),
            address: Addresses$?.outboundSchema.optional(),
            contactInformation: z.array(Contacts$?.outboundSchema).optional(),
            type: InventoryLocationsType$.optional(),
            quantity: z.number().optional(),
            operationalHours: z.string().optional(),
            isActive: z.boolean().optional(),
            createdAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            updatedAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            deleted: z.boolean().optional(),
            modifyToken: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.locationId === undefined ? null : { locationId: v.locationId }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.address === undefined ? null : { address: v.address }),
                ...(v.contactInformation === undefined
                    ? null
                    : { contactInformation: v.contactInformation }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.quantity === undefined ? null : { quantity: v.quantity }),
                ...(v.operationalHours === undefined
                    ? null
                    : { operationalHours: v.operationalHours }),
                ...(v.isActive === undefined ? null : { isActive: v.isActive }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
                ...(v.modifyToken === undefined ? null : { modifyToken: v.modifyToken }),
            };
        });
}
