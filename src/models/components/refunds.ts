/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Currency, Currency$ } from "./currency";
import { TransactionStatus, TransactionStatus$ } from "./transactionstatus";
import { z } from "zod";

export type Refunds = {
    id?: string | undefined;
    paymentId?: string | undefined;
    amount?: number | undefined;
    currency?: Currency | undefined;
    reason?: string | undefined;
    status?: TransactionStatus | undefined;
    createdAt?: Date | undefined;
    updatedAt?: Date | undefined;
};

/** @internal */
export namespace Refunds$ {
    export type Inbound = {
        id?: string | undefined;
        paymentId?: string | undefined;
        amount?: number | undefined;
        currency?: Currency | undefined;
        reason?: string | undefined;
        status?: TransactionStatus | undefined;
        createdAt?: string | undefined;
        updatedAt?: string | undefined;
    };

    export const inboundSchema: z.ZodType<Refunds, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            paymentId: z.string().optional(),
            amount: z.number().optional(),
            currency: Currency$.optional(),
            reason: z.string().optional(),
            status: TransactionStatus$.optional(),
            createdAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            updatedAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.paymentId === undefined ? null : { paymentId: v.paymentId }),
                ...(v.amount === undefined ? null : { amount: v.amount }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.reason === undefined ? null : { reason: v.reason }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        paymentId?: string | undefined;
        amount?: number | undefined;
        currency?: Currency | undefined;
        reason?: string | undefined;
        status?: TransactionStatus | undefined;
        createdAt?: string | undefined;
        updatedAt?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Refunds> = z
        .object({
            id: z.string().optional(),
            paymentId: z.string().optional(),
            amount: z.number().optional(),
            currency: Currency$.optional(),
            reason: z.string().optional(),
            status: TransactionStatus$.optional(),
            createdAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            updatedAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.paymentId === undefined ? null : { paymentId: v.paymentId }),
                ...(v.amount === undefined ? null : { amount: v.amount }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.reason === undefined ? null : { reason: v.reason }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
            };
        });
}
