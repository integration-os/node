/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Currency, Currency$ } from "./currency";
import { InvoiceAdjustmentType, InvoiceAdjustmentType$ } from "./invoiceadjustmenttype";
import { Metadata, Metadata$ } from "./metadata";
import { z } from "zod";

export type InvoiceAdjustments = {
    id?: string | undefined;
    type?: InvoiceAdjustmentType | undefined;
    amount?: number | undefined;
    description?: string | undefined;
    currency?: Currency | undefined;
    appliedToInvoiceItemId?: string | undefined;
    createdAt?: Date | undefined;
    updatedAt?: Date | undefined;
    active?: boolean | undefined;
    deleted?: boolean | undefined;
    metadata?: Metadata | undefined;
};

/** @internal */
export namespace InvoiceAdjustments$ {
    export type Inbound = {
        id?: string | undefined;
        type?: InvoiceAdjustmentType | undefined;
        amount?: number | undefined;
        description?: string | undefined;
        currency?: Currency | undefined;
        appliedToInvoiceItemId?: string | undefined;
        createdAt?: string | undefined;
        updatedAt?: string | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
        metadata?: Metadata$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<InvoiceAdjustments, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            type: InvoiceAdjustmentType$.optional(),
            amount: z.number().optional(),
            description: z.string().optional(),
            currency: Currency$.optional(),
            appliedToInvoiceItemId: z.string().optional(),
            createdAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            updatedAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
            metadata: Metadata$?.inboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.amount === undefined ? null : { amount: v.amount }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.appliedToInvoiceItemId === undefined
                    ? null
                    : { appliedToInvoiceItemId: v.appliedToInvoiceItemId }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        type?: InvoiceAdjustmentType | undefined;
        amount?: number | undefined;
        description?: string | undefined;
        currency?: Currency | undefined;
        appliedToInvoiceItemId?: string | undefined;
        createdAt?: string | undefined;
        updatedAt?: string | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
        metadata?: Metadata$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, InvoiceAdjustments> = z
        .object({
            id: z.string().optional(),
            type: InvoiceAdjustmentType$.optional(),
            amount: z.number().optional(),
            description: z.string().optional(),
            currency: Currency$.optional(),
            appliedToInvoiceItemId: z.string().optional(),
            createdAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            updatedAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
            metadata: Metadata$?.outboundSchema.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.amount === undefined ? null : { amount: v.amount }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.appliedToInvoiceItemId === undefined
                    ? null
                    : { appliedToInvoiceItemId: v.appliedToInvoiceItemId }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
            };
        });
}
