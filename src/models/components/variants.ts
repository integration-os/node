/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Dimensions, Dimensions$ } from "./dimensions";
import { ItemAvailabilityStatus, ItemAvailabilityStatus$ } from "./itemavailabilitystatus";
import { z } from "zod";

export type Variants = {
    id?: string | undefined;
    productId?: string | undefined;
    title?: string | undefined;
    sku?: string | undefined;
    price?: number | undefined;
    compareAtPrice?: number | undefined;
    inventoryQuantity?: number | undefined;
    weight?: number | undefined;
    weightUnit?: string | undefined;
    requiresShipping?: boolean | undefined;
    taxable?: boolean | undefined;
    barcode?: string | undefined;
    imageId?: number | undefined;
    dimensions?: Dimensions | undefined;
    createdAt?: Date | undefined;
    updatedAt?: Date | undefined;
    status?: ItemAvailabilityStatus | undefined;
    active?: boolean | undefined;
    deleted?: boolean | undefined;
};

/** @internal */
export namespace Variants$ {
    export type Inbound = {
        id?: string | undefined;
        productId?: string | undefined;
        title?: string | undefined;
        sku?: string | undefined;
        price?: number | undefined;
        compareAtPrice?: number | undefined;
        inventoryQuantity?: number | undefined;
        weight?: number | undefined;
        weightUnit?: string | undefined;
        requiresShipping?: boolean | undefined;
        taxable?: boolean | undefined;
        barcode?: string | undefined;
        imageId?: number | undefined;
        dimensions?: Dimensions$.Inbound | undefined;
        createdAt?: string | undefined;
        updatedAt?: string | undefined;
        status?: ItemAvailabilityStatus | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<Variants, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            productId: z.string().optional(),
            title: z.string().optional(),
            sku: z.string().optional(),
            price: z.number().optional(),
            compareAtPrice: z.number().optional(),
            inventoryQuantity: z.number().optional(),
            weight: z.number().optional(),
            weightUnit: z.string().optional(),
            requiresShipping: z.boolean().optional(),
            taxable: z.boolean().optional(),
            barcode: z.string().optional(),
            imageId: z.number().optional(),
            dimensions: Dimensions$?.inboundSchema.optional(),
            createdAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            updatedAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            status: ItemAvailabilityStatus$.optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.productId === undefined ? null : { productId: v.productId }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.sku === undefined ? null : { sku: v.sku }),
                ...(v.price === undefined ? null : { price: v.price }),
                ...(v.compareAtPrice === undefined ? null : { compareAtPrice: v.compareAtPrice }),
                ...(v.inventoryQuantity === undefined
                    ? null
                    : { inventoryQuantity: v.inventoryQuantity }),
                ...(v.weight === undefined ? null : { weight: v.weight }),
                ...(v.weightUnit === undefined ? null : { weightUnit: v.weightUnit }),
                ...(v.requiresShipping === undefined
                    ? null
                    : { requiresShipping: v.requiresShipping }),
                ...(v.taxable === undefined ? null : { taxable: v.taxable }),
                ...(v.barcode === undefined ? null : { barcode: v.barcode }),
                ...(v.imageId === undefined ? null : { imageId: v.imageId }),
                ...(v.dimensions === undefined ? null : { dimensions: v.dimensions }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        productId?: string | undefined;
        title?: string | undefined;
        sku?: string | undefined;
        price?: number | undefined;
        compareAtPrice?: number | undefined;
        inventoryQuantity?: number | undefined;
        weight?: number | undefined;
        weightUnit?: string | undefined;
        requiresShipping?: boolean | undefined;
        taxable?: boolean | undefined;
        barcode?: string | undefined;
        imageId?: number | undefined;
        dimensions?: Dimensions$.Outbound | undefined;
        createdAt?: string | undefined;
        updatedAt?: string | undefined;
        status?: ItemAvailabilityStatus | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Variants> = z
        .object({
            id: z.string().optional(),
            productId: z.string().optional(),
            title: z.string().optional(),
            sku: z.string().optional(),
            price: z.number().optional(),
            compareAtPrice: z.number().optional(),
            inventoryQuantity: z.number().optional(),
            weight: z.number().optional(),
            weightUnit: z.string().optional(),
            requiresShipping: z.boolean().optional(),
            taxable: z.boolean().optional(),
            barcode: z.string().optional(),
            imageId: z.number().optional(),
            dimensions: Dimensions$?.outboundSchema.optional(),
            createdAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            updatedAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            status: ItemAvailabilityStatus$.optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.productId === undefined ? null : { productId: v.productId }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.sku === undefined ? null : { sku: v.sku }),
                ...(v.price === undefined ? null : { price: v.price }),
                ...(v.compareAtPrice === undefined ? null : { compareAtPrice: v.compareAtPrice }),
                ...(v.inventoryQuantity === undefined
                    ? null
                    : { inventoryQuantity: v.inventoryQuantity }),
                ...(v.weight === undefined ? null : { weight: v.weight }),
                ...(v.weightUnit === undefined ? null : { weightUnit: v.weightUnit }),
                ...(v.requiresShipping === undefined
                    ? null
                    : { requiresShipping: v.requiresShipping }),
                ...(v.taxable === undefined ? null : { taxable: v.taxable }),
                ...(v.barcode === undefined ? null : { barcode: v.barcode }),
                ...(v.imageId === undefined ? null : { imageId: v.imageId }),
                ...(v.dimensions === undefined ? null : { dimensions: v.dimensions }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });
}
