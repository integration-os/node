/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Metadata, Metadata$ } from "./metadata";
import { Users, Users$ } from "./users";
import { z } from "zod";

export type Comments = {
    commentId?: string | undefined;
    author?: Users | undefined;
    text?: string | undefined;
    parentId?: string | undefined;
    likes?: number | undefined;
    flagged?: boolean | undefined;
    metadata?: Array<Metadata> | undefined;
    createdAt?: Date | undefined;
    updatedAt?: Date | undefined;
    active?: boolean | undefined;
    deleted?: boolean | undefined;
    modifyToken?: string | undefined;
};

/** @internal */
export namespace Comments$ {
    export type Inbound = {
        commentId?: string | undefined;
        author?: Users$.Inbound | undefined;
        text?: string | undefined;
        parentId?: string | undefined;
        likes?: number | undefined;
        flagged?: boolean | undefined;
        metadata?: Array<Metadata$.Inbound> | undefined;
        createdAt?: string | undefined;
        updatedAt?: string | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
        modifyToken?: string | undefined;
    };

    export const inboundSchema: z.ZodType<Comments, z.ZodTypeDef, Inbound> = z
        .object({
            commentId: z.string().optional(),
            author: Users$?.inboundSchema.optional(),
            text: z.string().optional(),
            parentId: z.string().optional(),
            likes: z.number().optional(),
            flagged: z.boolean().optional(),
            metadata: z.array(Metadata$?.inboundSchema).optional(),
            createdAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            updatedAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
            modifyToken: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.commentId === undefined ? null : { commentId: v.commentId }),
                ...(v.author === undefined ? null : { author: v.author }),
                ...(v.text === undefined ? null : { text: v.text }),
                ...(v.parentId === undefined ? null : { parentId: v.parentId }),
                ...(v.likes === undefined ? null : { likes: v.likes }),
                ...(v.flagged === undefined ? null : { flagged: v.flagged }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
                ...(v.modifyToken === undefined ? null : { modifyToken: v.modifyToken }),
            };
        });

    export type Outbound = {
        commentId?: string | undefined;
        author?: Users$.Outbound | undefined;
        text?: string | undefined;
        parentId?: string | undefined;
        likes?: number | undefined;
        flagged?: boolean | undefined;
        metadata?: Array<Metadata$.Outbound> | undefined;
        createdAt?: string | undefined;
        updatedAt?: string | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
        modifyToken?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Comments> = z
        .object({
            commentId: z.string().optional(),
            author: Users$?.outboundSchema.optional(),
            text: z.string().optional(),
            parentId: z.string().optional(),
            likes: z.number().optional(),
            flagged: z.boolean().optional(),
            metadata: z.array(Metadata$?.outboundSchema).optional(),
            createdAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            updatedAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
            modifyToken: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.commentId === undefined ? null : { commentId: v.commentId }),
                ...(v.author === undefined ? null : { author: v.author }),
                ...(v.text === undefined ? null : { text: v.text }),
                ...(v.parentId === undefined ? null : { parentId: v.parentId }),
                ...(v.likes === undefined ? null : { likes: v.likes }),
                ...(v.flagged === undefined ? null : { flagged: v.flagged }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
                ...(v.modifyToken === undefined ? null : { modifyToken: v.modifyToken }),
            };
        });
}
