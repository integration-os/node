/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { UserOrGroup, UserOrGroup$ } from "./userorgroup";
import { z } from "zod";

export enum AccessControlType {
    Rbac = "RBAC",
    Abac = "ABAC",
    Custom = "Custom",
    None = "None",
}

export enum IdentifierType {
    String = "String",
    Number = "Number",
}

export type Permissions = {
    canView?: Array<string> | undefined;
    canEdit?: Array<string> | undefined;
    canDelete?: Array<string> | undefined;
    roles?: Array<string> | undefined;
    accessControlType?: AccessControlType | undefined;
    assigneeDetails?: UserOrGroup | undefined;
    identifierType?: IdentifierType | undefined;
};

/** @internal */
export const AccessControlType$ = z.nativeEnum(AccessControlType);

/** @internal */
export const IdentifierType$ = z.nativeEnum(IdentifierType);

/** @internal */
export namespace Permissions$ {
    export type Inbound = {
        canView?: Array<string> | undefined;
        canEdit?: Array<string> | undefined;
        canDelete?: Array<string> | undefined;
        roles?: Array<string> | undefined;
        accessControlType?: AccessControlType | undefined;
        assigneeDetails?: UserOrGroup$.Inbound | undefined;
        identifierType?: IdentifierType | undefined;
    };

    export const inboundSchema: z.ZodType<Permissions, z.ZodTypeDef, Inbound> = z
        .object({
            canView: z.array(z.string()).optional(),
            canEdit: z.array(z.string()).optional(),
            canDelete: z.array(z.string()).optional(),
            roles: z.array(z.string()).optional(),
            accessControlType: AccessControlType$.optional(),
            assigneeDetails: UserOrGroup$?.inboundSchema.optional(),
            identifierType: IdentifierType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.canView === undefined ? null : { canView: v.canView }),
                ...(v.canEdit === undefined ? null : { canEdit: v.canEdit }),
                ...(v.canDelete === undefined ? null : { canDelete: v.canDelete }),
                ...(v.roles === undefined ? null : { roles: v.roles }),
                ...(v.accessControlType === undefined
                    ? null
                    : { accessControlType: v.accessControlType }),
                ...(v.assigneeDetails === undefined
                    ? null
                    : { assigneeDetails: v.assigneeDetails }),
                ...(v.identifierType === undefined ? null : { identifierType: v.identifierType }),
            };
        });

    export type Outbound = {
        canView?: Array<string> | undefined;
        canEdit?: Array<string> | undefined;
        canDelete?: Array<string> | undefined;
        roles?: Array<string> | undefined;
        accessControlType?: AccessControlType | undefined;
        assigneeDetails?: UserOrGroup$.Outbound | undefined;
        identifierType?: IdentifierType | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Permissions> = z
        .object({
            canView: z.array(z.string()).optional(),
            canEdit: z.array(z.string()).optional(),
            canDelete: z.array(z.string()).optional(),
            roles: z.array(z.string()).optional(),
            accessControlType: AccessControlType$.optional(),
            assigneeDetails: UserOrGroup$?.outboundSchema.optional(),
            identifierType: IdentifierType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.canView === undefined ? null : { canView: v.canView }),
                ...(v.canEdit === undefined ? null : { canEdit: v.canEdit }),
                ...(v.canDelete === undefined ? null : { canDelete: v.canDelete }),
                ...(v.roles === undefined ? null : { roles: v.roles }),
                ...(v.accessControlType === undefined
                    ? null
                    : { accessControlType: v.accessControlType }),
                ...(v.assigneeDetails === undefined
                    ? null
                    : { assigneeDetails: v.assigneeDetails }),
                ...(v.identifierType === undefined ? null : { identifierType: v.identifierType }),
            };
        });
}
