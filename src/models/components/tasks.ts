/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Attachments, Attachments$ } from "./attachments";
import { Comments, Comments$ } from "./comments";
import { CustomAttributes, CustomAttributes$ } from "./customattributes";
import { Notifications, Notifications$ } from "./notifications";
import { Users, Users$ } from "./users";
import { z } from "zod";

export enum TasksStatus {
    Todo = "Todo",
    InProgress = "In Progress",
    Done = "Done",
    Blocked = "Blocked",
    OnHold = "On Hold",
}

export enum Priority {
    Low = "Low",
    Medium = "Medium",
    High = "High",
    Urgent = "Urgent",
}

export type Tasks = {
    id?: string | undefined;
    title?: string | undefined;
    description?: string | undefined;
    status?: TasksStatus | undefined;
    priority?: Priority | undefined;
    dueDate?: Date | undefined;
    dueTimezone?: string | undefined;
    assignee?: Users | undefined;
    createdBy?: Users | undefined;
    createdAt?: Date | undefined;
    updatedAt?: Date | undefined;
    labels?: Array<string> | undefined;
    comments?: Array<Comments> | undefined;
    attachments?: Array<Attachments> | undefined;
    timeEstimate?: string | undefined;
    timeLogged?: string | undefined;
    subTaskIds?: Array<string> | undefined;
    parentTaskId?: string | undefined;
    dependOnTaskIds?: Array<string> | undefined;
    relatedToTaskId?: Array<string> | undefined;
    repeat?: string | undefined;
    customFields?: Array<CustomAttributes> | undefined;
    watchers?: Array<Users> | undefined;
    completionPercentage?: number | undefined;
    notifications?: Array<Notifications> | undefined;
};

/** @internal */
export const TasksStatus$ = z.nativeEnum(TasksStatus);

/** @internal */
export const Priority$ = z.nativeEnum(Priority);

/** @internal */
export namespace Tasks$ {
    export type Inbound = {
        id?: string | undefined;
        title?: string | undefined;
        description?: string | undefined;
        status?: TasksStatus | undefined;
        priority?: Priority | undefined;
        dueDate?: string | undefined;
        dueTimezone?: string | undefined;
        assignee?: Users$.Inbound | undefined;
        createdBy?: Users$.Inbound | undefined;
        createdAt?: string | undefined;
        updatedAt?: string | undefined;
        labels?: Array<string> | undefined;
        comments?: Array<Comments$.Inbound> | undefined;
        attachments?: Array<Attachments$.Inbound> | undefined;
        timeEstimate?: string | undefined;
        timeLogged?: string | undefined;
        subTaskIds?: Array<string> | undefined;
        parentTaskId?: string | undefined;
        dependOnTaskIds?: Array<string> | undefined;
        relatedToTaskId?: Array<string> | undefined;
        repeat?: string | undefined;
        customFields?: Array<CustomAttributes$.Inbound> | undefined;
        watchers?: Array<Users$.Inbound> | undefined;
        completionPercentage?: number | undefined;
        notifications?: Array<Notifications$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<Tasks, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            title: z.string().optional(),
            description: z.string().optional(),
            status: TasksStatus$.optional(),
            priority: Priority$.optional(),
            dueDate: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            dueTimezone: z.string().optional(),
            assignee: Users$?.inboundSchema.optional(),
            createdBy: Users$?.inboundSchema.optional(),
            createdAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            updatedAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            labels: z.array(z.string()).optional(),
            comments: z.array(Comments$?.inboundSchema).optional(),
            attachments: z.array(Attachments$?.inboundSchema).optional(),
            timeEstimate: z.string().optional(),
            timeLogged: z.string().optional(),
            subTaskIds: z.array(z.string()).optional(),
            parentTaskId: z.string().optional(),
            dependOnTaskIds: z.array(z.string()).optional(),
            relatedToTaskId: z.array(z.string()).optional(),
            repeat: z.string().optional(),
            customFields: z.array(CustomAttributes$?.inboundSchema).optional(),
            watchers: z.array(Users$?.inboundSchema).optional(),
            completionPercentage: z.number().optional(),
            notifications: z.array(Notifications$?.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.priority === undefined ? null : { priority: v.priority }),
                ...(v.dueDate === undefined ? null : { dueDate: v.dueDate }),
                ...(v.dueTimezone === undefined ? null : { dueTimezone: v.dueTimezone }),
                ...(v.assignee === undefined ? null : { assignee: v.assignee }),
                ...(v.createdBy === undefined ? null : { createdBy: v.createdBy }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.labels === undefined ? null : { labels: v.labels }),
                ...(v.comments === undefined ? null : { comments: v.comments }),
                ...(v.attachments === undefined ? null : { attachments: v.attachments }),
                ...(v.timeEstimate === undefined ? null : { timeEstimate: v.timeEstimate }),
                ...(v.timeLogged === undefined ? null : { timeLogged: v.timeLogged }),
                ...(v.subTaskIds === undefined ? null : { subTaskIds: v.subTaskIds }),
                ...(v.parentTaskId === undefined ? null : { parentTaskId: v.parentTaskId }),
                ...(v.dependOnTaskIds === undefined
                    ? null
                    : { dependOnTaskIds: v.dependOnTaskIds }),
                ...(v.relatedToTaskId === undefined
                    ? null
                    : { relatedToTaskId: v.relatedToTaskId }),
                ...(v.repeat === undefined ? null : { repeat: v.repeat }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                ...(v.watchers === undefined ? null : { watchers: v.watchers }),
                ...(v.completionPercentage === undefined
                    ? null
                    : { completionPercentage: v.completionPercentage }),
                ...(v.notifications === undefined ? null : { notifications: v.notifications }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        title?: string | undefined;
        description?: string | undefined;
        status?: TasksStatus | undefined;
        priority?: Priority | undefined;
        dueDate?: string | undefined;
        dueTimezone?: string | undefined;
        assignee?: Users$.Outbound | undefined;
        createdBy?: Users$.Outbound | undefined;
        createdAt?: string | undefined;
        updatedAt?: string | undefined;
        labels?: Array<string> | undefined;
        comments?: Array<Comments$.Outbound> | undefined;
        attachments?: Array<Attachments$.Outbound> | undefined;
        timeEstimate?: string | undefined;
        timeLogged?: string | undefined;
        subTaskIds?: Array<string> | undefined;
        parentTaskId?: string | undefined;
        dependOnTaskIds?: Array<string> | undefined;
        relatedToTaskId?: Array<string> | undefined;
        repeat?: string | undefined;
        customFields?: Array<CustomAttributes$.Outbound> | undefined;
        watchers?: Array<Users$.Outbound> | undefined;
        completionPercentage?: number | undefined;
        notifications?: Array<Notifications$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Tasks> = z
        .object({
            id: z.string().optional(),
            title: z.string().optional(),
            description: z.string().optional(),
            status: TasksStatus$.optional(),
            priority: Priority$.optional(),
            dueDate: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            dueTimezone: z.string().optional(),
            assignee: Users$?.outboundSchema.optional(),
            createdBy: Users$?.outboundSchema.optional(),
            createdAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            updatedAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            labels: z.array(z.string()).optional(),
            comments: z.array(Comments$?.outboundSchema).optional(),
            attachments: z.array(Attachments$?.outboundSchema).optional(),
            timeEstimate: z.string().optional(),
            timeLogged: z.string().optional(),
            subTaskIds: z.array(z.string()).optional(),
            parentTaskId: z.string().optional(),
            dependOnTaskIds: z.array(z.string()).optional(),
            relatedToTaskId: z.array(z.string()).optional(),
            repeat: z.string().optional(),
            customFields: z.array(CustomAttributes$?.outboundSchema).optional(),
            watchers: z.array(Users$?.outboundSchema).optional(),
            completionPercentage: z.number().optional(),
            notifications: z.array(Notifications$?.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.priority === undefined ? null : { priority: v.priority }),
                ...(v.dueDate === undefined ? null : { dueDate: v.dueDate }),
                ...(v.dueTimezone === undefined ? null : { dueTimezone: v.dueTimezone }),
                ...(v.assignee === undefined ? null : { assignee: v.assignee }),
                ...(v.createdBy === undefined ? null : { createdBy: v.createdBy }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.labels === undefined ? null : { labels: v.labels }),
                ...(v.comments === undefined ? null : { comments: v.comments }),
                ...(v.attachments === undefined ? null : { attachments: v.attachments }),
                ...(v.timeEstimate === undefined ? null : { timeEstimate: v.timeEstimate }),
                ...(v.timeLogged === undefined ? null : { timeLogged: v.timeLogged }),
                ...(v.subTaskIds === undefined ? null : { subTaskIds: v.subTaskIds }),
                ...(v.parentTaskId === undefined ? null : { parentTaskId: v.parentTaskId }),
                ...(v.dependOnTaskIds === undefined
                    ? null
                    : { dependOnTaskIds: v.dependOnTaskIds }),
                ...(v.relatedToTaskId === undefined
                    ? null
                    : { relatedToTaskId: v.relatedToTaskId }),
                ...(v.repeat === undefined ? null : { repeat: v.repeat }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                ...(v.watchers === undefined ? null : { watchers: v.watchers }),
                ...(v.completionPercentage === undefined
                    ? null
                    : { completionPercentage: v.completionPercentage }),
                ...(v.notifications === undefined ? null : { notifications: v.notifications }),
            };
        });
}
