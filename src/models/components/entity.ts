/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export enum EntityType {
    User = "User",
    Project = "Project",
    Message = "Message",
    Other = "Other",
}

export type Entity = {
    entityId?: string | undefined;
    entityType?: EntityType | undefined;
    attributes?: Array<string> | undefined;
    modifyToken?: string | undefined;
};

/** @internal */
export const EntityType$ = z.nativeEnum(EntityType);

/** @internal */
export namespace Entity$ {
    export type Inbound = {
        entityId?: string | undefined;
        entityType?: EntityType | undefined;
        attributes?: Array<string> | undefined;
        modifyToken?: string | undefined;
    };

    export const inboundSchema: z.ZodType<Entity, z.ZodTypeDef, Inbound> = z
        .object({
            entityId: z.string().optional(),
            entityType: EntityType$.optional(),
            attributes: z.array(z.string()).optional(),
            modifyToken: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.entityId === undefined ? null : { entityId: v.entityId }),
                ...(v.entityType === undefined ? null : { entityType: v.entityType }),
                ...(v.attributes === undefined ? null : { attributes: v.attributes }),
                ...(v.modifyToken === undefined ? null : { modifyToken: v.modifyToken }),
            };
        });

    export type Outbound = {
        entityId?: string | undefined;
        entityType?: EntityType | undefined;
        attributes?: Array<string> | undefined;
        modifyToken?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Entity> = z
        .object({
            entityId: z.string().optional(),
            entityType: EntityType$.optional(),
            attributes: z.array(z.string()).optional(),
            modifyToken: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.entityId === undefined ? null : { entityId: v.entityId }),
                ...(v.entityType === undefined ? null : { entityType: v.entityType }),
                ...(v.attributes === undefined ? null : { attributes: v.attributes }),
                ...(v.modifyToken === undefined ? null : { modifyToken: v.modifyToken }),
            };
        });
}
