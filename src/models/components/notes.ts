/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Attachments, Attachments$ } from "./attachments";
import { Users, Users$ } from "./users";
import { z } from "zod";

export enum NotesPriority {
    Low = "low",
    Medium = "medium",
    High = "high",
}

export enum Visibility {
    Private = "private",
    Public = "public",
    Shared = "shared",
}

export enum NotesStatus {
    Active = "active",
    Archived = "archived",
}

export type Notes = {
    id?: string | undefined;
    title?: string | undefined;
    content?: string | undefined;
    createdAt?: Date | undefined;
    updatedAt?: Date | undefined;
    lastAccessed?: Date | undefined;
    reminder?: Date | undefined;
    color?: string | undefined;
    priority?: NotesPriority | undefined;
    author?: Users | undefined;
    tags?: Array<string> | undefined;
    attachments?: Array<Attachments> | undefined;
    sharedWith?: Array<Users> | undefined;
    visibility?: Visibility | undefined;
    status?: NotesStatus | undefined;
    metadata?: Array<string> | undefined;
};

/** @internal */
export const NotesPriority$ = z.nativeEnum(NotesPriority);

/** @internal */
export const Visibility$ = z.nativeEnum(Visibility);

/** @internal */
export const NotesStatus$ = z.nativeEnum(NotesStatus);

/** @internal */
export namespace Notes$ {
    export type Inbound = {
        id?: string | undefined;
        title?: string | undefined;
        content?: string | undefined;
        createdAt?: string | undefined;
        updatedAt?: string | undefined;
        lastAccessed?: string | undefined;
        reminder?: string | undefined;
        color?: string | undefined;
        priority?: NotesPriority | undefined;
        author?: Users$.Inbound | undefined;
        tags?: Array<string> | undefined;
        attachments?: Array<Attachments$.Inbound> | undefined;
        sharedWith?: Array<Users$.Inbound> | undefined;
        visibility?: Visibility | undefined;
        status?: NotesStatus | undefined;
        metadata?: Array<string> | undefined;
    };

    export const inboundSchema: z.ZodType<Notes, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            title: z.string().optional(),
            content: z.string().optional(),
            createdAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            updatedAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            lastAccessed: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            reminder: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            color: z.string().optional(),
            priority: NotesPriority$.optional(),
            author: Users$?.inboundSchema.optional(),
            tags: z.array(z.string()).optional(),
            attachments: z.array(Attachments$?.inboundSchema).optional(),
            sharedWith: z.array(Users$?.inboundSchema).optional(),
            visibility: Visibility$.optional(),
            status: NotesStatus$.optional(),
            metadata: z.array(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.content === undefined ? null : { content: v.content }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.lastAccessed === undefined ? null : { lastAccessed: v.lastAccessed }),
                ...(v.reminder === undefined ? null : { reminder: v.reminder }),
                ...(v.color === undefined ? null : { color: v.color }),
                ...(v.priority === undefined ? null : { priority: v.priority }),
                ...(v.author === undefined ? null : { author: v.author }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
                ...(v.attachments === undefined ? null : { attachments: v.attachments }),
                ...(v.sharedWith === undefined ? null : { sharedWith: v.sharedWith }),
                ...(v.visibility === undefined ? null : { visibility: v.visibility }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        title?: string | undefined;
        content?: string | undefined;
        createdAt?: string | undefined;
        updatedAt?: string | undefined;
        lastAccessed?: string | undefined;
        reminder?: string | undefined;
        color?: string | undefined;
        priority?: NotesPriority | undefined;
        author?: Users$.Outbound | undefined;
        tags?: Array<string> | undefined;
        attachments?: Array<Attachments$.Outbound> | undefined;
        sharedWith?: Array<Users$.Outbound> | undefined;
        visibility?: Visibility | undefined;
        status?: NotesStatus | undefined;
        metadata?: Array<string> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Notes> = z
        .object({
            id: z.string().optional(),
            title: z.string().optional(),
            content: z.string().optional(),
            createdAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            updatedAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            lastAccessed: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            reminder: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            color: z.string().optional(),
            priority: NotesPriority$.optional(),
            author: Users$?.outboundSchema.optional(),
            tags: z.array(z.string()).optional(),
            attachments: z.array(Attachments$?.outboundSchema).optional(),
            sharedWith: z.array(Users$?.outboundSchema).optional(),
            visibility: Visibility$.optional(),
            status: NotesStatus$.optional(),
            metadata: z.array(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.content === undefined ? null : { content: v.content }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.lastAccessed === undefined ? null : { lastAccessed: v.lastAccessed }),
                ...(v.reminder === undefined ? null : { reminder: v.reminder }),
                ...(v.color === undefined ? null : { color: v.color }),
                ...(v.priority === undefined ? null : { priority: v.priority }),
                ...(v.author === undefined ? null : { author: v.author }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
                ...(v.attachments === undefined ? null : { attachments: v.attachments }),
                ...(v.sharedWith === undefined ? null : { sharedWith: v.sharedWith }),
                ...(v.visibility === undefined ? null : { visibility: v.visibility }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
            };
        });
}
