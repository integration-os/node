/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { EmailCategoryType, EmailCategoryType$ } from "./emailcategorytype";
import { z } from "zod";

export type Emails = {
    email?: string | undefined;
    type?: EmailCategoryType | undefined;
};

/** @internal */
export namespace Emails$ {
    export type Inbound = {
        email?: string | undefined;
        type?: EmailCategoryType | undefined;
    };

    export const inboundSchema: z.ZodType<Emails, z.ZodTypeDef, Inbound> = z
        .object({
            email: z.string().optional(),
            type: EmailCategoryType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });

    export type Outbound = {
        email?: string | undefined;
        type?: EmailCategoryType | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Emails> = z
        .object({
            email: z.string().optional(),
            type: EmailCategoryType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });
}
