/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ChatType, ChatType$ } from "./chattype";
import { ConversationStatus, ConversationStatus$ } from "./conversationstatus";
import { Messages, Messages$ } from "./messages";
import { Participants, Participants$ } from "./participants";
import { z } from "zod";

export type Chats = {
    id?: string | undefined;
    participants?: Array<Participants> | undefined;
    messages?: Array<Messages> | undefined;
    title?: string | undefined;
    createdAt?: Date | undefined;
    updatedAt?: Date | undefined;
    type?: ChatType | undefined;
    status?: ConversationStatus | undefined;
    unreadCount?: number | undefined;
    isPinned?: boolean | undefined;
    lastMessage?: Messages | undefined;
    metadata?: string | undefined;
    lastReadMessageId?: string | undefined;
    modifyToken?: string | undefined;
};

/** @internal */
export namespace Chats$ {
    export type Inbound = {
        id?: string | undefined;
        participants?: Array<Participants$.Inbound> | undefined;
        messages?: Array<Messages$.Inbound> | undefined;
        title?: string | undefined;
        createdAt?: string | undefined;
        updatedAt?: string | undefined;
        type?: ChatType | undefined;
        status?: ConversationStatus | undefined;
        unreadCount?: number | undefined;
        isPinned?: boolean | undefined;
        lastMessage?: Messages$.Inbound | undefined;
        metadata?: string | undefined;
        lastReadMessageId?: string | undefined;
        modifyToken?: string | undefined;
    };

    export const inboundSchema: z.ZodType<Chats, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            participants: z.array(Participants$?.inboundSchema).optional(),
            messages: z.array(Messages$?.inboundSchema).optional(),
            title: z.string().optional(),
            createdAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            updatedAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            type: ChatType$.optional(),
            status: ConversationStatus$.optional(),
            unreadCount: z.number().optional(),
            isPinned: z.boolean().optional(),
            lastMessage: Messages$?.inboundSchema.optional(),
            metadata: z.string().optional(),
            lastReadMessageId: z.string().optional(),
            modifyToken: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.participants === undefined ? null : { participants: v.participants }),
                ...(v.messages === undefined ? null : { messages: v.messages }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.unreadCount === undefined ? null : { unreadCount: v.unreadCount }),
                ...(v.isPinned === undefined ? null : { isPinned: v.isPinned }),
                ...(v.lastMessage === undefined ? null : { lastMessage: v.lastMessage }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                ...(v.lastReadMessageId === undefined
                    ? null
                    : { lastReadMessageId: v.lastReadMessageId }),
                ...(v.modifyToken === undefined ? null : { modifyToken: v.modifyToken }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        participants?: Array<Participants$.Outbound> | undefined;
        messages?: Array<Messages$.Outbound> | undefined;
        title?: string | undefined;
        createdAt?: string | undefined;
        updatedAt?: string | undefined;
        type?: ChatType | undefined;
        status?: ConversationStatus | undefined;
        unreadCount?: number | undefined;
        isPinned?: boolean | undefined;
        lastMessage?: Messages$.Outbound | undefined;
        metadata?: string | undefined;
        lastReadMessageId?: string | undefined;
        modifyToken?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Chats> = z
        .object({
            id: z.string().optional(),
            participants: z.array(Participants$?.outboundSchema).optional(),
            messages: z.array(Messages$?.outboundSchema).optional(),
            title: z.string().optional(),
            createdAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            updatedAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            type: ChatType$.optional(),
            status: ConversationStatus$.optional(),
            unreadCount: z.number().optional(),
            isPinned: z.boolean().optional(),
            lastMessage: Messages$?.outboundSchema.optional(),
            metadata: z.string().optional(),
            lastReadMessageId: z.string().optional(),
            modifyToken: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.participants === undefined ? null : { participants: v.participants }),
                ...(v.messages === undefined ? null : { messages: v.messages }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.unreadCount === undefined ? null : { unreadCount: v.unreadCount }),
                ...(v.isPinned === undefined ? null : { isPinned: v.isPinned }),
                ...(v.lastMessage === undefined ? null : { lastMessage: v.lastMessage }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                ...(v.lastReadMessageId === undefined
                    ? null
                    : { lastReadMessageId: v.lastReadMessageId }),
                ...(v.modifyToken === undefined ? null : { modifyToken: v.modifyToken }),
            };
        });
}
