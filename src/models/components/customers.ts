/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Addresses, Addresses$ } from "./addresses";
import { SocialProfiles, SocialProfiles$ } from "./socialprofiles";
import { z } from "zod";

export enum Status {
    Active = "active",
    Inactive = "inactive",
    Archived = "archived",
}

export enum CustomerType {
    Retail = "retail",
    Wholesale = "wholesale",
}

export enum PreferredContactMethod {
    Email = "email",
    Phone = "phone",
    Mail = "mail",
    Sms = "sms",
}

export type Customers = {
    id?: string | undefined;
    title?: string | undefined;
    fullName?: string | undefined;
    firstName?: string | undefined;
    middleName?: string | undefined;
    lastName?: string | undefined;
    email?: string | undefined;
    phoneNumber?: string | undefined;
    dateOfBirth?: Date | undefined;
    addresses?: Array<Addresses> | undefined;
    defaultAddress?: Addresses | undefined;
    company?: string | undefined;
    companyId?: string | undefined;
    currency?: string | undefined;
    notes?: string | undefined;
    createdAt?: Date | undefined;
    updatedAt?: Date | undefined;
    status?: Status | undefined;
    customerSegment?: string | undefined;
    customerType?: CustomerType | undefined;
    loyaltyProgramMembership?: string | undefined;
    preferredContactMethod?: PreferredContactMethod | undefined;
    tags?: Array<string> | undefined;
    metadata?: string | undefined;
    socialProfiles?: Array<SocialProfiles> | undefined;
    source?: string | undefined;
};

/** @internal */
export const Status$ = z.nativeEnum(Status);

/** @internal */
export const CustomerType$ = z.nativeEnum(CustomerType);

/** @internal */
export const PreferredContactMethod$ = z.nativeEnum(PreferredContactMethod);

/** @internal */
export namespace Customers$ {
    export type Inbound = {
        id?: string | undefined;
        title?: string | undefined;
        fullName?: string | undefined;
        firstName?: string | undefined;
        middleName?: string | undefined;
        lastName?: string | undefined;
        email?: string | undefined;
        phoneNumber?: string | undefined;
        dateOfBirth?: string | undefined;
        addresses?: Array<Addresses$.Inbound> | undefined;
        defaultAddress?: Addresses$.Inbound | undefined;
        company?: string | undefined;
        companyId?: string | undefined;
        currency?: string | undefined;
        notes?: string | undefined;
        createdAt?: string | undefined;
        updatedAt?: string | undefined;
        status?: Status | undefined;
        customerSegment?: string | undefined;
        customerType?: CustomerType | undefined;
        loyaltyProgramMembership?: string | undefined;
        preferredContactMethod?: PreferredContactMethod | undefined;
        tags?: Array<string> | undefined;
        metadata?: string | undefined;
        socialProfiles?: Array<SocialProfiles$.Inbound> | undefined;
        source?: string | undefined;
    };

    export const inboundSchema: z.ZodType<Customers, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            title: z.string().optional(),
            fullName: z.string().optional(),
            firstName: z.string().optional(),
            middleName: z.string().optional(),
            lastName: z.string().optional(),
            email: z.string().optional(),
            phoneNumber: z.string().optional(),
            dateOfBirth: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            addresses: z.array(Addresses$?.inboundSchema).optional(),
            defaultAddress: Addresses$?.inboundSchema.optional(),
            company: z.string().optional(),
            companyId: z.string().optional(),
            currency: z.string().optional(),
            notes: z.string().optional(),
            createdAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            updatedAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            status: Status$.optional(),
            customerSegment: z.string().optional(),
            customerType: CustomerType$.optional(),
            loyaltyProgramMembership: z.string().optional(),
            preferredContactMethod: PreferredContactMethod$.optional(),
            tags: z.array(z.string()).optional(),
            metadata: z.string().optional(),
            socialProfiles: z.array(SocialProfiles$?.inboundSchema).optional(),
            source: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.fullName === undefined ? null : { fullName: v.fullName }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.middleName === undefined ? null : { middleName: v.middleName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.phoneNumber === undefined ? null : { phoneNumber: v.phoneNumber }),
                ...(v.dateOfBirth === undefined ? null : { dateOfBirth: v.dateOfBirth }),
                ...(v.addresses === undefined ? null : { addresses: v.addresses }),
                ...(v.defaultAddress === undefined ? null : { defaultAddress: v.defaultAddress }),
                ...(v.company === undefined ? null : { company: v.company }),
                ...(v.companyId === undefined ? null : { companyId: v.companyId }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.notes === undefined ? null : { notes: v.notes }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.customerSegment === undefined
                    ? null
                    : { customerSegment: v.customerSegment }),
                ...(v.customerType === undefined ? null : { customerType: v.customerType }),
                ...(v.loyaltyProgramMembership === undefined
                    ? null
                    : { loyaltyProgramMembership: v.loyaltyProgramMembership }),
                ...(v.preferredContactMethod === undefined
                    ? null
                    : { preferredContactMethod: v.preferredContactMethod }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                ...(v.socialProfiles === undefined ? null : { socialProfiles: v.socialProfiles }),
                ...(v.source === undefined ? null : { source: v.source }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        title?: string | undefined;
        fullName?: string | undefined;
        firstName?: string | undefined;
        middleName?: string | undefined;
        lastName?: string | undefined;
        email?: string | undefined;
        phoneNumber?: string | undefined;
        dateOfBirth?: string | undefined;
        addresses?: Array<Addresses$.Outbound> | undefined;
        defaultAddress?: Addresses$.Outbound | undefined;
        company?: string | undefined;
        companyId?: string | undefined;
        currency?: string | undefined;
        notes?: string | undefined;
        createdAt?: string | undefined;
        updatedAt?: string | undefined;
        status?: Status | undefined;
        customerSegment?: string | undefined;
        customerType?: CustomerType | undefined;
        loyaltyProgramMembership?: string | undefined;
        preferredContactMethod?: PreferredContactMethod | undefined;
        tags?: Array<string> | undefined;
        metadata?: string | undefined;
        socialProfiles?: Array<SocialProfiles$.Outbound> | undefined;
        source?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Customers> = z
        .object({
            id: z.string().optional(),
            title: z.string().optional(),
            fullName: z.string().optional(),
            firstName: z.string().optional(),
            middleName: z.string().optional(),
            lastName: z.string().optional(),
            email: z.string().optional(),
            phoneNumber: z.string().optional(),
            dateOfBirth: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            addresses: z.array(Addresses$?.outboundSchema).optional(),
            defaultAddress: Addresses$?.outboundSchema.optional(),
            company: z.string().optional(),
            companyId: z.string().optional(),
            currency: z.string().optional(),
            notes: z.string().optional(),
            createdAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            updatedAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            status: Status$.optional(),
            customerSegment: z.string().optional(),
            customerType: CustomerType$.optional(),
            loyaltyProgramMembership: z.string().optional(),
            preferredContactMethod: PreferredContactMethod$.optional(),
            tags: z.array(z.string()).optional(),
            metadata: z.string().optional(),
            socialProfiles: z.array(SocialProfiles$?.outboundSchema).optional(),
            source: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.fullName === undefined ? null : { fullName: v.fullName }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.middleName === undefined ? null : { middleName: v.middleName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.phoneNumber === undefined ? null : { phoneNumber: v.phoneNumber }),
                ...(v.dateOfBirth === undefined ? null : { dateOfBirth: v.dateOfBirth }),
                ...(v.addresses === undefined ? null : { addresses: v.addresses }),
                ...(v.defaultAddress === undefined ? null : { defaultAddress: v.defaultAddress }),
                ...(v.company === undefined ? null : { company: v.company }),
                ...(v.companyId === undefined ? null : { companyId: v.companyId }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.notes === undefined ? null : { notes: v.notes }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.customerSegment === undefined
                    ? null
                    : { customerSegment: v.customerSegment }),
                ...(v.customerType === undefined ? null : { customerType: v.customerType }),
                ...(v.loyaltyProgramMembership === undefined
                    ? null
                    : { loyaltyProgramMembership: v.loyaltyProgramMembership }),
                ...(v.preferredContactMethod === undefined
                    ? null
                    : { preferredContactMethod: v.preferredContactMethod }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                ...(v.socialProfiles === undefined ? null : { socialProfiles: v.socialProfiles }),
                ...(v.source === undefined ? null : { source: v.source }),
            };
        });
}
