/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ParticipantType, ParticipantType$ } from "./participanttype";
import { z } from "zod";

export type UserOrGroup = {
    identifier?: string | undefined;
    displayName?: string | undefined;
    type?: ParticipantType | undefined;
};

/** @internal */
export namespace UserOrGroup$ {
    export type Inbound = {
        identifier?: string | undefined;
        displayName?: string | undefined;
        type?: ParticipantType | undefined;
    };

    export const inboundSchema: z.ZodType<UserOrGroup, z.ZodTypeDef, Inbound> = z
        .object({
            identifier: z.string().optional(),
            displayName: z.string().optional(),
            type: ParticipantType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.identifier === undefined ? null : { identifier: v.identifier }),
                ...(v.displayName === undefined ? null : { displayName: v.displayName }),
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });

    export type Outbound = {
        identifier?: string | undefined;
        displayName?: string | undefined;
        type?: ParticipantType | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, UserOrGroup> = z
        .object({
            identifier: z.string().optional(),
            displayName: z.string().optional(),
            type: ParticipantType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.identifier === undefined ? null : { identifier: v.identifier }),
                ...(v.displayName === undefined ? null : { displayName: v.displayName }),
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });
}
