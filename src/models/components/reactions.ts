/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export enum ReactionsType {
    Like = "like",
    Dislike = "dislike",
    Laugh = "laugh",
    Sad = "sad",
    Angry = "angry",
    Love = "love",
    Bookmark = "bookmark",
}

export type Reactions = {
    userId?: string | undefined;
    messageId?: string | undefined;
    chatId?: string | undefined;
    type?: ReactionsType | undefined;
    createdAt?: Date | undefined;
    modifyToken?: string | undefined;
};

/** @internal */
export const ReactionsType$ = z.nativeEnum(ReactionsType);

/** @internal */
export namespace Reactions$ {
    export type Inbound = {
        userId?: string | undefined;
        messageId?: string | undefined;
        chatId?: string | undefined;
        type?: ReactionsType | undefined;
        createdAt?: string | undefined;
        modifyToken?: string | undefined;
    };

    export const inboundSchema: z.ZodType<Reactions, z.ZodTypeDef, Inbound> = z
        .object({
            userId: z.string().optional(),
            messageId: z.string().optional(),
            chatId: z.string().optional(),
            type: ReactionsType$.optional(),
            createdAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            modifyToken: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.userId === undefined ? null : { userId: v.userId }),
                ...(v.messageId === undefined ? null : { messageId: v.messageId }),
                ...(v.chatId === undefined ? null : { chatId: v.chatId }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.modifyToken === undefined ? null : { modifyToken: v.modifyToken }),
            };
        });

    export type Outbound = {
        userId?: string | undefined;
        messageId?: string | undefined;
        chatId?: string | undefined;
        type?: ReactionsType | undefined;
        createdAt?: string | undefined;
        modifyToken?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Reactions> = z
        .object({
            userId: z.string().optional(),
            messageId: z.string().optional(),
            chatId: z.string().optional(),
            type: ReactionsType$.optional(),
            createdAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            modifyToken: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.userId === undefined ? null : { userId: v.userId }),
                ...(v.messageId === undefined ? null : { messageId: v.messageId }),
                ...(v.chatId === undefined ? null : { chatId: v.chatId }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.modifyToken === undefined ? null : { modifyToken: v.modifyToken }),
            };
        });
}
