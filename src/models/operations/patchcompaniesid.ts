/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export enum PatchCompaniesIdType {
    Home = "home",
    Work = "work",
    Other = "other",
}

export type PatchCompaniesIdGeoLocation = {
    latitude?: number | undefined;
    longitude?: number | undefined;
    altitude?: number | undefined;
    accuracy?: number | undefined;
    altitudeAccuracy?: number | undefined;
    heading?: number | undefined;
    speed?: number | undefined;
    timestamp?: number | undefined;
};

export enum PatchCompaniesIdFieldType {
    Text = "text",
    Number = "number",
    Date = "date",
    Boolean = "boolean",
    Enum = "enum",
    Json = "json",
    Array = "array",
}

export type PatchCompaniesIdCustomFields = {
    id?: string | undefined;
    fieldName?: string | undefined;
    fieldValue?: string | undefined;
    fieldType?: PatchCompaniesIdFieldType | undefined;
};

export type Address = {
    id?: string | undefined;
    contactId?: string | undefined;
    accountId?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    name?: string | undefined;
    companyName?: string | undefined;
    email?: string | undefined;
    phone?: string | undefined;
    street?: string | undefined;
    addressLine2?: string | undefined;
    city?: string | undefined;
    province?: string | undefined;
    region?: string | undefined;
    postalCode?: string | undefined;
    postalCodeExtension?: string | undefined;
    country?: string | undefined;
    countryCode?: string | undefined;
    type?: PatchCompaniesIdType | undefined;
    geoLocation?: PatchCompaniesIdGeoLocation | undefined;
    customFields?: Array<PatchCompaniesIdCustomFields> | undefined;
    subdivisionCode?: string | undefined;
};

export enum PatchCompaniesIdCompaniesType {
    Facebook = "facebook",
    Twitter = "twitter",
    Linkedin = "linkedin",
    Instagram = "instagram",
    Tiktok = "tiktok",
    Pinterest = "pinterest",
    Youtube = "youtube",
    Other = "other",
}

export type PatchCompaniesIdAdditionalInfo = {};

export type PatchCompaniesIdSocialProfiles = {
    type?: PatchCompaniesIdCompaniesType | undefined;
    username?: string | undefined;
    displayName?: string | undefined;
    url?: string | undefined;
    avatarUrl?: string | undefined;
    email?: string | undefined;
    additionalInfo?: PatchCompaniesIdAdditionalInfo | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    active?: boolean | undefined;
    deleted?: boolean | undefined;
};

export type PatchCompaniesIdAddress = {};

export type PatchCompaniesIdAddresses = {};

export type Notes = {};

export type PatchCompaniesIdCompaniesSocialProfiles = {};

export type PatchCompaniesIdCompaniesCustomFields = {};

export type AdditionalContacts = {
    id?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    company?: string | undefined;
    email?: string | undefined;
    emails?: Array<string> | undefined;
    phone?: string | undefined;
    phones?: Array<string> | undefined;
    address?: PatchCompaniesIdAddress | undefined;
    addresses?: Array<PatchCompaniesIdAddresses> | undefined;
    birthday?: number | undefined;
    relationship?: string | undefined;
    note?: string | undefined;
    notes?: Notes | undefined;
    tags?: Array<string> | undefined;
    websites?: Array<string> | undefined;
    socialProfiles?: Array<PatchCompaniesIdCompaniesSocialProfiles> | undefined;
    customFields?: Array<PatchCompaniesIdCompaniesCustomFields> | undefined;
};

export type PatchCompaniesIdRequestBody = {
    id?: number | undefined;
    name?: string | undefined;
    legalName?: string | undefined;
    type?: string | undefined;
    industry?: string | undefined;
    address?: Address | undefined;
    phone?: string | undefined;
    email?: string | undefined;
    website?: string | undefined;
    foundedDate?: number | undefined;
    numberOfEmployees?: number | undefined;
    revenue?: number | undefined;
    revenueCurrency?: string | undefined;
    tags?: Array<string> | undefined;
    socialProfiles?: Array<PatchCompaniesIdSocialProfiles> | undefined;
    logo?: string | undefined;
    description?: string | undefined;
    stockSymbol?: string | undefined;
    parentCompanyId?: string | undefined;
    additionalContacts?: Array<AdditionalContacts> | undefined;
    incorporationCountry?: string | undefined;
    incorporationDate?: number | undefined;
    taxId?: string | undefined;
    regulatoryStatus?: string | undefined;
    dunsNumber?: string | undefined;
};

export type PatchCompaniesIdRequest = {
    /**
     * The id of the model
     */
    id: string;
    /**
     * IntegrationOS API key
     */
    xIntegrationosSecret: string;
    /**
     * The unique identifier of a Connected Account
     */
    xIntegrationosConnectionKey: string;
    requestBody?: PatchCompaniesIdRequestBody | undefined;
};

export enum PatchCompaniesIdStatusCode {
    TwoHundred = 200,
    FourHundred = 400,
    FiveHundred = 500,
}

export type PatchCompaniesIdUnified = {
    count?: number | undefined;
};

export type PatchCompaniesIdPassthrough = {};

export type PatchCompaniesIdCache = {
    hit?: boolean | undefined;
    ttl?: number | undefined;
    key?: string | undefined;
};

export type PatchCompaniesIdMeta = {
    timestamp?: number | undefined;
    latency?: number | undefined;
    platformRateLimitRemaining?: number | undefined;
    rateLimitRemaining?: number | undefined;
    cache?: PatchCompaniesIdCache | undefined;
    transactionKey?: string | undefined;
    txn?: string | undefined;
    platform?: string | undefined;
    platformVersion?: string | undefined;
    connectionDefinitionKey?: string | undefined;
    action?: string | undefined;
    commonModel?: string | undefined;
    commonModelVersion?: string | undefined;
    connectionKey?: string | undefined;
    hash?: string | undefined;
    heartbeats?: Array<string> | undefined;
    totalTransactions?: number | undefined;
};

/**
 * Successful response
 */
export type PatchCompaniesIdResponseBody = {
    status?: string | undefined;
    statusCode?: PatchCompaniesIdStatusCode | undefined;
    unified?: PatchCompaniesIdUnified | undefined;
    passthrough?: PatchCompaniesIdPassthrough | undefined;
    meta?: PatchCompaniesIdMeta | undefined;
};

export type PatchCompaniesIdResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Successful response
     */
    object?: PatchCompaniesIdResponseBody | undefined;
};

/** @internal */
export const PatchCompaniesIdType$ = z.nativeEnum(PatchCompaniesIdType);

/** @internal */
export namespace PatchCompaniesIdGeoLocation$ {
    export type Inbound = {
        latitude?: number | undefined;
        longitude?: number | undefined;
        altitude?: number | undefined;
        accuracy?: number | undefined;
        altitudeAccuracy?: number | undefined;
        heading?: number | undefined;
        speed?: number | undefined;
        timestamp?: number | undefined;
    };

    export const inboundSchema: z.ZodType<PatchCompaniesIdGeoLocation, z.ZodTypeDef, Inbound> = z
        .object({
            latitude: z.number().optional(),
            longitude: z.number().optional(),
            altitude: z.number().optional(),
            accuracy: z.number().optional(),
            altitudeAccuracy: z.number().optional(),
            heading: z.number().optional(),
            speed: z.number().optional(),
            timestamp: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.latitude === undefined ? null : { latitude: v.latitude }),
                ...(v.longitude === undefined ? null : { longitude: v.longitude }),
                ...(v.altitude === undefined ? null : { altitude: v.altitude }),
                ...(v.accuracy === undefined ? null : { accuracy: v.accuracy }),
                ...(v.altitudeAccuracy === undefined
                    ? null
                    : { altitudeAccuracy: v.altitudeAccuracy }),
                ...(v.heading === undefined ? null : { heading: v.heading }),
                ...(v.speed === undefined ? null : { speed: v.speed }),
                ...(v.timestamp === undefined ? null : { timestamp: v.timestamp }),
            };
        });

    export type Outbound = {
        latitude?: number | undefined;
        longitude?: number | undefined;
        altitude?: number | undefined;
        accuracy?: number | undefined;
        altitudeAccuracy?: number | undefined;
        heading?: number | undefined;
        speed?: number | undefined;
        timestamp?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchCompaniesIdGeoLocation> = z
        .object({
            latitude: z.number().optional(),
            longitude: z.number().optional(),
            altitude: z.number().optional(),
            accuracy: z.number().optional(),
            altitudeAccuracy: z.number().optional(),
            heading: z.number().optional(),
            speed: z.number().optional(),
            timestamp: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.latitude === undefined ? null : { latitude: v.latitude }),
                ...(v.longitude === undefined ? null : { longitude: v.longitude }),
                ...(v.altitude === undefined ? null : { altitude: v.altitude }),
                ...(v.accuracy === undefined ? null : { accuracy: v.accuracy }),
                ...(v.altitudeAccuracy === undefined
                    ? null
                    : { altitudeAccuracy: v.altitudeAccuracy }),
                ...(v.heading === undefined ? null : { heading: v.heading }),
                ...(v.speed === undefined ? null : { speed: v.speed }),
                ...(v.timestamp === undefined ? null : { timestamp: v.timestamp }),
            };
        });
}

/** @internal */
export const PatchCompaniesIdFieldType$ = z.nativeEnum(PatchCompaniesIdFieldType);

/** @internal */
export namespace PatchCompaniesIdCustomFields$ {
    export type Inbound = {
        id?: string | undefined;
        fieldName?: string | undefined;
        fieldValue?: string | undefined;
        fieldType?: PatchCompaniesIdFieldType | undefined;
    };

    export const inboundSchema: z.ZodType<PatchCompaniesIdCustomFields, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            fieldName: z.string().optional(),
            fieldValue: z.string().optional(),
            fieldType: PatchCompaniesIdFieldType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fieldName === undefined ? null : { fieldName: v.fieldName }),
                ...(v.fieldValue === undefined ? null : { fieldValue: v.fieldValue }),
                ...(v.fieldType === undefined ? null : { fieldType: v.fieldType }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        fieldName?: string | undefined;
        fieldValue?: string | undefined;
        fieldType?: PatchCompaniesIdFieldType | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchCompaniesIdCustomFields> = z
        .object({
            id: z.string().optional(),
            fieldName: z.string().optional(),
            fieldValue: z.string().optional(),
            fieldType: PatchCompaniesIdFieldType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fieldName === undefined ? null : { fieldName: v.fieldName }),
                ...(v.fieldValue === undefined ? null : { fieldValue: v.fieldValue }),
                ...(v.fieldType === undefined ? null : { fieldType: v.fieldType }),
            };
        });
}

/** @internal */
export namespace Address$ {
    export type Inbound = {
        id?: string | undefined;
        contactId?: string | undefined;
        accountId?: string | undefined;
        firstName?: string | undefined;
        lastName?: string | undefined;
        name?: string | undefined;
        companyName?: string | undefined;
        email?: string | undefined;
        phone?: string | undefined;
        street?: string | undefined;
        addressLine2?: string | undefined;
        city?: string | undefined;
        province?: string | undefined;
        region?: string | undefined;
        postalCode?: string | undefined;
        postalCodeExtension?: string | undefined;
        country?: string | undefined;
        countryCode?: string | undefined;
        type?: PatchCompaniesIdType | undefined;
        geoLocation?: PatchCompaniesIdGeoLocation$.Inbound | undefined;
        customFields?: Array<PatchCompaniesIdCustomFields$.Inbound> | undefined;
        subdivisionCode?: string | undefined;
    };

    export const inboundSchema: z.ZodType<Address, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            contactId: z.string().optional(),
            accountId: z.string().optional(),
            firstName: z.string().optional(),
            lastName: z.string().optional(),
            name: z.string().optional(),
            companyName: z.string().optional(),
            email: z.string().optional(),
            phone: z.string().optional(),
            street: z.string().optional(),
            addressLine2: z.string().optional(),
            city: z.string().optional(),
            province: z.string().optional(),
            region: z.string().optional(),
            postalCode: z.string().optional(),
            postalCodeExtension: z.string().optional(),
            country: z.string().optional(),
            countryCode: z.string().optional(),
            type: PatchCompaniesIdType$.optional(),
            geoLocation: z.lazy(() => PatchCompaniesIdGeoLocation$.inboundSchema).optional(),
            customFields: z
                .array(z.lazy(() => PatchCompaniesIdCustomFields$.inboundSchema))
                .optional(),
            subdivisionCode: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.contactId === undefined ? null : { contactId: v.contactId }),
                ...(v.accountId === undefined ? null : { accountId: v.accountId }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.companyName === undefined ? null : { companyName: v.companyName }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.phone === undefined ? null : { phone: v.phone }),
                ...(v.street === undefined ? null : { street: v.street }),
                ...(v.addressLine2 === undefined ? null : { addressLine2: v.addressLine2 }),
                ...(v.city === undefined ? null : { city: v.city }),
                ...(v.province === undefined ? null : { province: v.province }),
                ...(v.region === undefined ? null : { region: v.region }),
                ...(v.postalCode === undefined ? null : { postalCode: v.postalCode }),
                ...(v.postalCodeExtension === undefined
                    ? null
                    : { postalCodeExtension: v.postalCodeExtension }),
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.countryCode === undefined ? null : { countryCode: v.countryCode }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.geoLocation === undefined ? null : { geoLocation: v.geoLocation }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                ...(v.subdivisionCode === undefined
                    ? null
                    : { subdivisionCode: v.subdivisionCode }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        contactId?: string | undefined;
        accountId?: string | undefined;
        firstName?: string | undefined;
        lastName?: string | undefined;
        name?: string | undefined;
        companyName?: string | undefined;
        email?: string | undefined;
        phone?: string | undefined;
        street?: string | undefined;
        addressLine2?: string | undefined;
        city?: string | undefined;
        province?: string | undefined;
        region?: string | undefined;
        postalCode?: string | undefined;
        postalCodeExtension?: string | undefined;
        country?: string | undefined;
        countryCode?: string | undefined;
        type?: PatchCompaniesIdType | undefined;
        geoLocation?: PatchCompaniesIdGeoLocation$.Outbound | undefined;
        customFields?: Array<PatchCompaniesIdCustomFields$.Outbound> | undefined;
        subdivisionCode?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Address> = z
        .object({
            id: z.string().optional(),
            contactId: z.string().optional(),
            accountId: z.string().optional(),
            firstName: z.string().optional(),
            lastName: z.string().optional(),
            name: z.string().optional(),
            companyName: z.string().optional(),
            email: z.string().optional(),
            phone: z.string().optional(),
            street: z.string().optional(),
            addressLine2: z.string().optional(),
            city: z.string().optional(),
            province: z.string().optional(),
            region: z.string().optional(),
            postalCode: z.string().optional(),
            postalCodeExtension: z.string().optional(),
            country: z.string().optional(),
            countryCode: z.string().optional(),
            type: PatchCompaniesIdType$.optional(),
            geoLocation: z.lazy(() => PatchCompaniesIdGeoLocation$.outboundSchema).optional(),
            customFields: z
                .array(z.lazy(() => PatchCompaniesIdCustomFields$.outboundSchema))
                .optional(),
            subdivisionCode: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.contactId === undefined ? null : { contactId: v.contactId }),
                ...(v.accountId === undefined ? null : { accountId: v.accountId }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.companyName === undefined ? null : { companyName: v.companyName }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.phone === undefined ? null : { phone: v.phone }),
                ...(v.street === undefined ? null : { street: v.street }),
                ...(v.addressLine2 === undefined ? null : { addressLine2: v.addressLine2 }),
                ...(v.city === undefined ? null : { city: v.city }),
                ...(v.province === undefined ? null : { province: v.province }),
                ...(v.region === undefined ? null : { region: v.region }),
                ...(v.postalCode === undefined ? null : { postalCode: v.postalCode }),
                ...(v.postalCodeExtension === undefined
                    ? null
                    : { postalCodeExtension: v.postalCodeExtension }),
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.countryCode === undefined ? null : { countryCode: v.countryCode }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.geoLocation === undefined ? null : { geoLocation: v.geoLocation }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                ...(v.subdivisionCode === undefined
                    ? null
                    : { subdivisionCode: v.subdivisionCode }),
            };
        });
}

/** @internal */
export const PatchCompaniesIdCompaniesType$ = z.nativeEnum(PatchCompaniesIdCompaniesType);

/** @internal */
export namespace PatchCompaniesIdAdditionalInfo$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<PatchCompaniesIdAdditionalInfo, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchCompaniesIdAdditionalInfo> =
        z.object({});
}

/** @internal */
export namespace PatchCompaniesIdSocialProfiles$ {
    export type Inbound = {
        type?: PatchCompaniesIdCompaniesType | undefined;
        username?: string | undefined;
        displayName?: string | undefined;
        url?: string | undefined;
        avatarUrl?: string | undefined;
        email?: string | undefined;
        additionalInfo?: PatchCompaniesIdAdditionalInfo$.Inbound | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<PatchCompaniesIdSocialProfiles, z.ZodTypeDef, Inbound> = z
        .object({
            type: PatchCompaniesIdCompaniesType$.optional(),
            username: z.string().optional(),
            displayName: z.string().optional(),
            url: z.string().optional(),
            avatarUrl: z.string().optional(),
            email: z.string().optional(),
            additionalInfo: z.lazy(() => PatchCompaniesIdAdditionalInfo$.inboundSchema).optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.username === undefined ? null : { username: v.username }),
                ...(v.displayName === undefined ? null : { displayName: v.displayName }),
                ...(v.url === undefined ? null : { url: v.url }),
                ...(v.avatarUrl === undefined ? null : { avatarUrl: v.avatarUrl }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.additionalInfo === undefined ? null : { additionalInfo: v.additionalInfo }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });

    export type Outbound = {
        type?: PatchCompaniesIdCompaniesType | undefined;
        username?: string | undefined;
        displayName?: string | undefined;
        url?: string | undefined;
        avatarUrl?: string | undefined;
        email?: string | undefined;
        additionalInfo?: PatchCompaniesIdAdditionalInfo$.Outbound | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchCompaniesIdSocialProfiles> =
        z
            .object({
                type: PatchCompaniesIdCompaniesType$.optional(),
                username: z.string().optional(),
                displayName: z.string().optional(),
                url: z.string().optional(),
                avatarUrl: z.string().optional(),
                email: z.string().optional(),
                additionalInfo: z
                    .lazy(() => PatchCompaniesIdAdditionalInfo$.outboundSchema)
                    .optional(),
                createdAt: z.number().optional(),
                updatedAt: z.number().optional(),
                active: z.boolean().optional(),
                deleted: z.boolean().optional(),
            })
            .transform((v) => {
                return {
                    ...(v.type === undefined ? null : { type: v.type }),
                    ...(v.username === undefined ? null : { username: v.username }),
                    ...(v.displayName === undefined ? null : { displayName: v.displayName }),
                    ...(v.url === undefined ? null : { url: v.url }),
                    ...(v.avatarUrl === undefined ? null : { avatarUrl: v.avatarUrl }),
                    ...(v.email === undefined ? null : { email: v.email }),
                    ...(v.additionalInfo === undefined
                        ? null
                        : { additionalInfo: v.additionalInfo }),
                    ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                    ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                    ...(v.active === undefined ? null : { active: v.active }),
                    ...(v.deleted === undefined ? null : { deleted: v.deleted }),
                };
            });
}

/** @internal */
export namespace PatchCompaniesIdAddress$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<PatchCompaniesIdAddress, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchCompaniesIdAddress> =
        z.object({});
}

/** @internal */
export namespace PatchCompaniesIdAddresses$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<PatchCompaniesIdAddresses, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchCompaniesIdAddresses> =
        z.object({});
}

/** @internal */
export namespace Notes$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<Notes, z.ZodTypeDef, Inbound> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Notes> = z.object({});
}

/** @internal */
export namespace PatchCompaniesIdCompaniesSocialProfiles$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<
        PatchCompaniesIdCompaniesSocialProfiles,
        z.ZodTypeDef,
        Inbound
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PatchCompaniesIdCompaniesSocialProfiles
    > = z.object({});
}

/** @internal */
export namespace PatchCompaniesIdCompaniesCustomFields$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<
        PatchCompaniesIdCompaniesCustomFields,
        z.ZodTypeDef,
        Inbound
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PatchCompaniesIdCompaniesCustomFields
    > = z.object({});
}

/** @internal */
export namespace AdditionalContacts$ {
    export type Inbound = {
        id?: string | undefined;
        firstName?: string | undefined;
        lastName?: string | undefined;
        company?: string | undefined;
        email?: string | undefined;
        emails?: Array<string> | undefined;
        phone?: string | undefined;
        phones?: Array<string> | undefined;
        address?: PatchCompaniesIdAddress$.Inbound | undefined;
        addresses?: Array<PatchCompaniesIdAddresses$.Inbound> | undefined;
        birthday?: number | undefined;
        relationship?: string | undefined;
        note?: string | undefined;
        notes?: Notes$.Inbound | undefined;
        tags?: Array<string> | undefined;
        websites?: Array<string> | undefined;
        socialProfiles?: Array<PatchCompaniesIdCompaniesSocialProfiles$.Inbound> | undefined;
        customFields?: Array<PatchCompaniesIdCompaniesCustomFields$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<AdditionalContacts, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            firstName: z.string().optional(),
            lastName: z.string().optional(),
            company: z.string().optional(),
            email: z.string().optional(),
            emails: z.array(z.string()).optional(),
            phone: z.string().optional(),
            phones: z.array(z.string()).optional(),
            address: z.lazy(() => PatchCompaniesIdAddress$.inboundSchema).optional(),
            addresses: z.array(z.lazy(() => PatchCompaniesIdAddresses$.inboundSchema)).optional(),
            birthday: z.number().optional(),
            relationship: z.string().optional(),
            note: z.string().optional(),
            notes: z.lazy(() => Notes$.inboundSchema).optional(),
            tags: z.array(z.string()).optional(),
            websites: z.array(z.string()).optional(),
            socialProfiles: z
                .array(z.lazy(() => PatchCompaniesIdCompaniesSocialProfiles$.inboundSchema))
                .optional(),
            customFields: z
                .array(z.lazy(() => PatchCompaniesIdCompaniesCustomFields$.inboundSchema))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.company === undefined ? null : { company: v.company }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.emails === undefined ? null : { emails: v.emails }),
                ...(v.phone === undefined ? null : { phone: v.phone }),
                ...(v.phones === undefined ? null : { phones: v.phones }),
                ...(v.address === undefined ? null : { address: v.address }),
                ...(v.addresses === undefined ? null : { addresses: v.addresses }),
                ...(v.birthday === undefined ? null : { birthday: v.birthday }),
                ...(v.relationship === undefined ? null : { relationship: v.relationship }),
                ...(v.note === undefined ? null : { note: v.note }),
                ...(v.notes === undefined ? null : { notes: v.notes }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
                ...(v.websites === undefined ? null : { websites: v.websites }),
                ...(v.socialProfiles === undefined ? null : { socialProfiles: v.socialProfiles }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        firstName?: string | undefined;
        lastName?: string | undefined;
        company?: string | undefined;
        email?: string | undefined;
        emails?: Array<string> | undefined;
        phone?: string | undefined;
        phones?: Array<string> | undefined;
        address?: PatchCompaniesIdAddress$.Outbound | undefined;
        addresses?: Array<PatchCompaniesIdAddresses$.Outbound> | undefined;
        birthday?: number | undefined;
        relationship?: string | undefined;
        note?: string | undefined;
        notes?: Notes$.Outbound | undefined;
        tags?: Array<string> | undefined;
        websites?: Array<string> | undefined;
        socialProfiles?: Array<PatchCompaniesIdCompaniesSocialProfiles$.Outbound> | undefined;
        customFields?: Array<PatchCompaniesIdCompaniesCustomFields$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AdditionalContacts> = z
        .object({
            id: z.string().optional(),
            firstName: z.string().optional(),
            lastName: z.string().optional(),
            company: z.string().optional(),
            email: z.string().optional(),
            emails: z.array(z.string()).optional(),
            phone: z.string().optional(),
            phones: z.array(z.string()).optional(),
            address: z.lazy(() => PatchCompaniesIdAddress$.outboundSchema).optional(),
            addresses: z.array(z.lazy(() => PatchCompaniesIdAddresses$.outboundSchema)).optional(),
            birthday: z.number().optional(),
            relationship: z.string().optional(),
            note: z.string().optional(),
            notes: z.lazy(() => Notes$.outboundSchema).optional(),
            tags: z.array(z.string()).optional(),
            websites: z.array(z.string()).optional(),
            socialProfiles: z
                .array(z.lazy(() => PatchCompaniesIdCompaniesSocialProfiles$.outboundSchema))
                .optional(),
            customFields: z
                .array(z.lazy(() => PatchCompaniesIdCompaniesCustomFields$.outboundSchema))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.company === undefined ? null : { company: v.company }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.emails === undefined ? null : { emails: v.emails }),
                ...(v.phone === undefined ? null : { phone: v.phone }),
                ...(v.phones === undefined ? null : { phones: v.phones }),
                ...(v.address === undefined ? null : { address: v.address }),
                ...(v.addresses === undefined ? null : { addresses: v.addresses }),
                ...(v.birthday === undefined ? null : { birthday: v.birthday }),
                ...(v.relationship === undefined ? null : { relationship: v.relationship }),
                ...(v.note === undefined ? null : { note: v.note }),
                ...(v.notes === undefined ? null : { notes: v.notes }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
                ...(v.websites === undefined ? null : { websites: v.websites }),
                ...(v.socialProfiles === undefined ? null : { socialProfiles: v.socialProfiles }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
            };
        });
}

/** @internal */
export namespace PatchCompaniesIdRequestBody$ {
    export type Inbound = {
        id?: number | undefined;
        name?: string | undefined;
        legalName?: string | undefined;
        type?: string | undefined;
        industry?: string | undefined;
        address?: Address$.Inbound | undefined;
        phone?: string | undefined;
        email?: string | undefined;
        website?: string | undefined;
        foundedDate?: number | undefined;
        numberOfEmployees?: number | undefined;
        revenue?: number | undefined;
        revenueCurrency?: string | undefined;
        tags?: Array<string> | undefined;
        socialProfiles?: Array<PatchCompaniesIdSocialProfiles$.Inbound> | undefined;
        logo?: string | undefined;
        description?: string | undefined;
        stockSymbol?: string | undefined;
        parentCompanyId?: string | undefined;
        additionalContacts?: Array<AdditionalContacts$.Inbound> | undefined;
        incorporationCountry?: string | undefined;
        incorporationDate?: number | undefined;
        taxId?: string | undefined;
        regulatoryStatus?: string | undefined;
        dunsNumber?: string | undefined;
    };

    export const inboundSchema: z.ZodType<PatchCompaniesIdRequestBody, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.number().optional(),
            name: z.string().optional(),
            legalName: z.string().optional(),
            type: z.string().optional(),
            industry: z.string().optional(),
            address: z.lazy(() => Address$.inboundSchema).optional(),
            phone: z.string().optional(),
            email: z.string().optional(),
            website: z.string().optional(),
            foundedDate: z.number().optional(),
            numberOfEmployees: z.number().optional(),
            revenue: z.number().optional(),
            revenueCurrency: z.string().optional(),
            tags: z.array(z.string()).optional(),
            socialProfiles: z
                .array(z.lazy(() => PatchCompaniesIdSocialProfiles$.inboundSchema))
                .optional(),
            logo: z.string().optional(),
            description: z.string().optional(),
            stockSymbol: z.string().optional(),
            parentCompanyId: z.string().optional(),
            additionalContacts: z.array(z.lazy(() => AdditionalContacts$.inboundSchema)).optional(),
            incorporationCountry: z.string().optional(),
            incorporationDate: z.number().optional(),
            taxId: z.string().optional(),
            regulatoryStatus: z.string().optional(),
            dunsNumber: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.legalName === undefined ? null : { legalName: v.legalName }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.industry === undefined ? null : { industry: v.industry }),
                ...(v.address === undefined ? null : { address: v.address }),
                ...(v.phone === undefined ? null : { phone: v.phone }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.website === undefined ? null : { website: v.website }),
                ...(v.foundedDate === undefined ? null : { foundedDate: v.foundedDate }),
                ...(v.numberOfEmployees === undefined
                    ? null
                    : { numberOfEmployees: v.numberOfEmployees }),
                ...(v.revenue === undefined ? null : { revenue: v.revenue }),
                ...(v.revenueCurrency === undefined
                    ? null
                    : { revenueCurrency: v.revenueCurrency }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
                ...(v.socialProfiles === undefined ? null : { socialProfiles: v.socialProfiles }),
                ...(v.logo === undefined ? null : { logo: v.logo }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.stockSymbol === undefined ? null : { stockSymbol: v.stockSymbol }),
                ...(v.parentCompanyId === undefined
                    ? null
                    : { parentCompanyId: v.parentCompanyId }),
                ...(v.additionalContacts === undefined
                    ? null
                    : { additionalContacts: v.additionalContacts }),
                ...(v.incorporationCountry === undefined
                    ? null
                    : { incorporationCountry: v.incorporationCountry }),
                ...(v.incorporationDate === undefined
                    ? null
                    : { incorporationDate: v.incorporationDate }),
                ...(v.taxId === undefined ? null : { taxId: v.taxId }),
                ...(v.regulatoryStatus === undefined
                    ? null
                    : { regulatoryStatus: v.regulatoryStatus }),
                ...(v.dunsNumber === undefined ? null : { dunsNumber: v.dunsNumber }),
            };
        });

    export type Outbound = {
        id?: number | undefined;
        name?: string | undefined;
        legalName?: string | undefined;
        type?: string | undefined;
        industry?: string | undefined;
        address?: Address$.Outbound | undefined;
        phone?: string | undefined;
        email?: string | undefined;
        website?: string | undefined;
        foundedDate?: number | undefined;
        numberOfEmployees?: number | undefined;
        revenue?: number | undefined;
        revenueCurrency?: string | undefined;
        tags?: Array<string> | undefined;
        socialProfiles?: Array<PatchCompaniesIdSocialProfiles$.Outbound> | undefined;
        logo?: string | undefined;
        description?: string | undefined;
        stockSymbol?: string | undefined;
        parentCompanyId?: string | undefined;
        additionalContacts?: Array<AdditionalContacts$.Outbound> | undefined;
        incorporationCountry?: string | undefined;
        incorporationDate?: number | undefined;
        taxId?: string | undefined;
        regulatoryStatus?: string | undefined;
        dunsNumber?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchCompaniesIdRequestBody> = z
        .object({
            id: z.number().optional(),
            name: z.string().optional(),
            legalName: z.string().optional(),
            type: z.string().optional(),
            industry: z.string().optional(),
            address: z.lazy(() => Address$.outboundSchema).optional(),
            phone: z.string().optional(),
            email: z.string().optional(),
            website: z.string().optional(),
            foundedDate: z.number().optional(),
            numberOfEmployees: z.number().optional(),
            revenue: z.number().optional(),
            revenueCurrency: z.string().optional(),
            tags: z.array(z.string()).optional(),
            socialProfiles: z
                .array(z.lazy(() => PatchCompaniesIdSocialProfiles$.outboundSchema))
                .optional(),
            logo: z.string().optional(),
            description: z.string().optional(),
            stockSymbol: z.string().optional(),
            parentCompanyId: z.string().optional(),
            additionalContacts: z
                .array(z.lazy(() => AdditionalContacts$.outboundSchema))
                .optional(),
            incorporationCountry: z.string().optional(),
            incorporationDate: z.number().optional(),
            taxId: z.string().optional(),
            regulatoryStatus: z.string().optional(),
            dunsNumber: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.legalName === undefined ? null : { legalName: v.legalName }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.industry === undefined ? null : { industry: v.industry }),
                ...(v.address === undefined ? null : { address: v.address }),
                ...(v.phone === undefined ? null : { phone: v.phone }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.website === undefined ? null : { website: v.website }),
                ...(v.foundedDate === undefined ? null : { foundedDate: v.foundedDate }),
                ...(v.numberOfEmployees === undefined
                    ? null
                    : { numberOfEmployees: v.numberOfEmployees }),
                ...(v.revenue === undefined ? null : { revenue: v.revenue }),
                ...(v.revenueCurrency === undefined
                    ? null
                    : { revenueCurrency: v.revenueCurrency }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
                ...(v.socialProfiles === undefined ? null : { socialProfiles: v.socialProfiles }),
                ...(v.logo === undefined ? null : { logo: v.logo }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.stockSymbol === undefined ? null : { stockSymbol: v.stockSymbol }),
                ...(v.parentCompanyId === undefined
                    ? null
                    : { parentCompanyId: v.parentCompanyId }),
                ...(v.additionalContacts === undefined
                    ? null
                    : { additionalContacts: v.additionalContacts }),
                ...(v.incorporationCountry === undefined
                    ? null
                    : { incorporationCountry: v.incorporationCountry }),
                ...(v.incorporationDate === undefined
                    ? null
                    : { incorporationDate: v.incorporationDate }),
                ...(v.taxId === undefined ? null : { taxId: v.taxId }),
                ...(v.regulatoryStatus === undefined
                    ? null
                    : { regulatoryStatus: v.regulatoryStatus }),
                ...(v.dunsNumber === undefined ? null : { dunsNumber: v.dunsNumber }),
            };
        });
}

/** @internal */
export namespace PatchCompaniesIdRequest$ {
    export type Inbound = {
        id: string;
        "X-INTEGRATIONOS-SECRET": string;
        "X-INTEGRATIONOS-CONNECTION-KEY": string;
        RequestBody?: PatchCompaniesIdRequestBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<PatchCompaniesIdRequest, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string(),
            "X-INTEGRATIONOS-SECRET": z.string(),
            "X-INTEGRATIONOS-CONNECTION-KEY": z.string(),
            RequestBody: z.lazy(() => PatchCompaniesIdRequestBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                id: v.id,
                xIntegrationosSecret: v["X-INTEGRATIONOS-SECRET"],
                xIntegrationosConnectionKey: v["X-INTEGRATIONOS-CONNECTION-KEY"],
                ...(v.RequestBody === undefined ? null : { requestBody: v.RequestBody }),
            };
        });

    export type Outbound = {
        id: string;
        "X-INTEGRATIONOS-SECRET": string;
        "X-INTEGRATIONOS-CONNECTION-KEY": string;
        RequestBody?: PatchCompaniesIdRequestBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchCompaniesIdRequest> = z
        .object({
            id: z.string(),
            xIntegrationosSecret: z.string(),
            xIntegrationosConnectionKey: z.string(),
            requestBody: z.lazy(() => PatchCompaniesIdRequestBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                id: v.id,
                "X-INTEGRATIONOS-SECRET": v.xIntegrationosSecret,
                "X-INTEGRATIONOS-CONNECTION-KEY": v.xIntegrationosConnectionKey,
                ...(v.requestBody === undefined ? null : { RequestBody: v.requestBody }),
            };
        });
}

/** @internal */
export const PatchCompaniesIdStatusCode$ = z.nativeEnum(PatchCompaniesIdStatusCode);

/** @internal */
export namespace PatchCompaniesIdUnified$ {
    export type Inbound = {
        count?: number | undefined;
    };

    export const inboundSchema: z.ZodType<PatchCompaniesIdUnified, z.ZodTypeDef, Inbound> = z
        .object({
            count: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.count === undefined ? null : { count: v.count }),
            };
        });

    export type Outbound = {
        count?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchCompaniesIdUnified> = z
        .object({
            count: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.count === undefined ? null : { count: v.count }),
            };
        });
}

/** @internal */
export namespace PatchCompaniesIdPassthrough$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<PatchCompaniesIdPassthrough, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchCompaniesIdPassthrough> =
        z.object({});
}

/** @internal */
export namespace PatchCompaniesIdCache$ {
    export type Inbound = {
        hit?: boolean | undefined;
        ttl?: number | undefined;
        key?: string | undefined;
    };

    export const inboundSchema: z.ZodType<PatchCompaniesIdCache, z.ZodTypeDef, Inbound> = z
        .object({
            hit: z.boolean().optional(),
            ttl: z.number().int().optional(),
            key: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.hit === undefined ? null : { hit: v.hit }),
                ...(v.ttl === undefined ? null : { ttl: v.ttl }),
                ...(v.key === undefined ? null : { key: v.key }),
            };
        });

    export type Outbound = {
        hit?: boolean | undefined;
        ttl?: number | undefined;
        key?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchCompaniesIdCache> = z
        .object({
            hit: z.boolean().optional(),
            ttl: z.number().int().optional(),
            key: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.hit === undefined ? null : { hit: v.hit }),
                ...(v.ttl === undefined ? null : { ttl: v.ttl }),
                ...(v.key === undefined ? null : { key: v.key }),
            };
        });
}

/** @internal */
export namespace PatchCompaniesIdMeta$ {
    export type Inbound = {
        timestamp?: number | undefined;
        latency?: number | undefined;
        platformRateLimitRemaining?: number | undefined;
        rateLimitRemaining?: number | undefined;
        cache?: PatchCompaniesIdCache$.Inbound | undefined;
        transactionKey?: string | undefined;
        txn?: string | undefined;
        platform?: string | undefined;
        platformVersion?: string | undefined;
        connectionDefinitionKey?: string | undefined;
        action?: string | undefined;
        commonModel?: string | undefined;
        commonModelVersion?: string | undefined;
        connectionKey?: string | undefined;
        hash?: string | undefined;
        heartbeats?: Array<string> | undefined;
        totalTransactions?: number | undefined;
    };

    export const inboundSchema: z.ZodType<PatchCompaniesIdMeta, z.ZodTypeDef, Inbound> = z
        .object({
            timestamp: z.number().int().optional(),
            latency: z.number().int().optional(),
            platformRateLimitRemaining: z.number().int().optional(),
            rateLimitRemaining: z.number().int().optional(),
            cache: z.lazy(() => PatchCompaniesIdCache$.inboundSchema).optional(),
            transactionKey: z.string().optional(),
            txn: z.string().optional(),
            platform: z.string().optional(),
            platformVersion: z.string().optional(),
            connectionDefinitionKey: z.string().optional(),
            action: z.string().optional(),
            commonModel: z.string().optional(),
            commonModelVersion: z.string().optional(),
            connectionKey: z.string().optional(),
            hash: z.string().optional(),
            heartbeats: z.array(z.string()).optional(),
            totalTransactions: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.timestamp === undefined ? null : { timestamp: v.timestamp }),
                ...(v.latency === undefined ? null : { latency: v.latency }),
                ...(v.platformRateLimitRemaining === undefined
                    ? null
                    : { platformRateLimitRemaining: v.platformRateLimitRemaining }),
                ...(v.rateLimitRemaining === undefined
                    ? null
                    : { rateLimitRemaining: v.rateLimitRemaining }),
                ...(v.cache === undefined ? null : { cache: v.cache }),
                ...(v.transactionKey === undefined ? null : { transactionKey: v.transactionKey }),
                ...(v.txn === undefined ? null : { txn: v.txn }),
                ...(v.platform === undefined ? null : { platform: v.platform }),
                ...(v.platformVersion === undefined
                    ? null
                    : { platformVersion: v.platformVersion }),
                ...(v.connectionDefinitionKey === undefined
                    ? null
                    : { connectionDefinitionKey: v.connectionDefinitionKey }),
                ...(v.action === undefined ? null : { action: v.action }),
                ...(v.commonModel === undefined ? null : { commonModel: v.commonModel }),
                ...(v.commonModelVersion === undefined
                    ? null
                    : { commonModelVersion: v.commonModelVersion }),
                ...(v.connectionKey === undefined ? null : { connectionKey: v.connectionKey }),
                ...(v.hash === undefined ? null : { hash: v.hash }),
                ...(v.heartbeats === undefined ? null : { heartbeats: v.heartbeats }),
                ...(v.totalTransactions === undefined
                    ? null
                    : { totalTransactions: v.totalTransactions }),
            };
        });

    export type Outbound = {
        timestamp?: number | undefined;
        latency?: number | undefined;
        platformRateLimitRemaining?: number | undefined;
        rateLimitRemaining?: number | undefined;
        cache?: PatchCompaniesIdCache$.Outbound | undefined;
        transactionKey?: string | undefined;
        txn?: string | undefined;
        platform?: string | undefined;
        platformVersion?: string | undefined;
        connectionDefinitionKey?: string | undefined;
        action?: string | undefined;
        commonModel?: string | undefined;
        commonModelVersion?: string | undefined;
        connectionKey?: string | undefined;
        hash?: string | undefined;
        heartbeats?: Array<string> | undefined;
        totalTransactions?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchCompaniesIdMeta> = z
        .object({
            timestamp: z.number().int().optional(),
            latency: z.number().int().optional(),
            platformRateLimitRemaining: z.number().int().optional(),
            rateLimitRemaining: z.number().int().optional(),
            cache: z.lazy(() => PatchCompaniesIdCache$.outboundSchema).optional(),
            transactionKey: z.string().optional(),
            txn: z.string().optional(),
            platform: z.string().optional(),
            platformVersion: z.string().optional(),
            connectionDefinitionKey: z.string().optional(),
            action: z.string().optional(),
            commonModel: z.string().optional(),
            commonModelVersion: z.string().optional(),
            connectionKey: z.string().optional(),
            hash: z.string().optional(),
            heartbeats: z.array(z.string()).optional(),
            totalTransactions: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.timestamp === undefined ? null : { timestamp: v.timestamp }),
                ...(v.latency === undefined ? null : { latency: v.latency }),
                ...(v.platformRateLimitRemaining === undefined
                    ? null
                    : { platformRateLimitRemaining: v.platformRateLimitRemaining }),
                ...(v.rateLimitRemaining === undefined
                    ? null
                    : { rateLimitRemaining: v.rateLimitRemaining }),
                ...(v.cache === undefined ? null : { cache: v.cache }),
                ...(v.transactionKey === undefined ? null : { transactionKey: v.transactionKey }),
                ...(v.txn === undefined ? null : { txn: v.txn }),
                ...(v.platform === undefined ? null : { platform: v.platform }),
                ...(v.platformVersion === undefined
                    ? null
                    : { platformVersion: v.platformVersion }),
                ...(v.connectionDefinitionKey === undefined
                    ? null
                    : { connectionDefinitionKey: v.connectionDefinitionKey }),
                ...(v.action === undefined ? null : { action: v.action }),
                ...(v.commonModel === undefined ? null : { commonModel: v.commonModel }),
                ...(v.commonModelVersion === undefined
                    ? null
                    : { commonModelVersion: v.commonModelVersion }),
                ...(v.connectionKey === undefined ? null : { connectionKey: v.connectionKey }),
                ...(v.hash === undefined ? null : { hash: v.hash }),
                ...(v.heartbeats === undefined ? null : { heartbeats: v.heartbeats }),
                ...(v.totalTransactions === undefined
                    ? null
                    : { totalTransactions: v.totalTransactions }),
            };
        });
}

/** @internal */
export namespace PatchCompaniesIdResponseBody$ {
    export type Inbound = {
        status?: string | undefined;
        statusCode?: PatchCompaniesIdStatusCode | undefined;
        unified?: PatchCompaniesIdUnified$.Inbound | undefined;
        passthrough?: PatchCompaniesIdPassthrough$.Inbound | undefined;
        meta?: PatchCompaniesIdMeta$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<PatchCompaniesIdResponseBody, z.ZodTypeDef, Inbound> = z
        .object({
            status: z.string().optional(),
            statusCode: PatchCompaniesIdStatusCode$.optional(),
            unified: z.lazy(() => PatchCompaniesIdUnified$.inboundSchema).optional(),
            passthrough: z.lazy(() => PatchCompaniesIdPassthrough$.inboundSchema).optional(),
            meta: z.lazy(() => PatchCompaniesIdMeta$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.statusCode === undefined ? null : { statusCode: v.statusCode }),
                ...(v.unified === undefined ? null : { unified: v.unified }),
                ...(v.passthrough === undefined ? null : { passthrough: v.passthrough }),
                ...(v.meta === undefined ? null : { meta: v.meta }),
            };
        });

    export type Outbound = {
        status?: string | undefined;
        statusCode?: PatchCompaniesIdStatusCode | undefined;
        unified?: PatchCompaniesIdUnified$.Outbound | undefined;
        passthrough?: PatchCompaniesIdPassthrough$.Outbound | undefined;
        meta?: PatchCompaniesIdMeta$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchCompaniesIdResponseBody> = z
        .object({
            status: z.string().optional(),
            statusCode: PatchCompaniesIdStatusCode$.optional(),
            unified: z.lazy(() => PatchCompaniesIdUnified$.outboundSchema).optional(),
            passthrough: z.lazy(() => PatchCompaniesIdPassthrough$.outboundSchema).optional(),
            meta: z.lazy(() => PatchCompaniesIdMeta$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.statusCode === undefined ? null : { statusCode: v.statusCode }),
                ...(v.unified === undefined ? null : { unified: v.unified }),
                ...(v.passthrough === undefined ? null : { passthrough: v.passthrough }),
                ...(v.meta === undefined ? null : { meta: v.meta }),
            };
        });
}

/** @internal */
export namespace PatchCompaniesIdResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        object?: PatchCompaniesIdResponseBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<PatchCompaniesIdResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => PatchCompaniesIdResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: PatchCompaniesIdResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchCompaniesIdResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z.lazy(() => PatchCompaniesIdResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
