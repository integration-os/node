/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type Campaign = {};

export type Account = {};

export type Contacts = {};

export type Owner = {};

export type Attachments = {};

export type PatchLeadsIdCustomFields = {};

export type Opportunities = {
    id?: string | undefined;
    title?: string | undefined;
    description?: string | undefined;
    amount?: number | undefined;
    currency?: string | undefined;
    stage?: string | undefined;
    probability?: number | undefined;
    closeDate?: number | undefined;
    type?: string | undefined;
    nextStep?: string | undefined;
    leadId?: string | undefined;
    leadSource?: string | undefined;
    isClosed?: boolean | undefined;
    isWon?: boolean | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    lostReason?: string | undefined;
    campaign?: Campaign | undefined;
    account?: Account | undefined;
    contacts?: Array<Contacts> | undefined;
    owner?: Owner | undefined;
    attachments?: Array<Attachments> | undefined;
    notes?: Array<string> | undefined;
    customFields?: Array<PatchLeadsIdCustomFields> | undefined;
};

export enum PatchLeadsIdType {
    Personal = "personal",
    Business = "business",
    Other = "other",
}

export type PatchLeadsIdEmails = {
    email?: string | undefined;
    type?: PatchLeadsIdType | undefined;
};

export enum PatchLeadsIdLeadsType {
    Personal = "personal",
    Business = "business",
    Other = "other",
}

export type PatchLeadsIdPhones = {
    phone?: string | undefined;
    country?: string | undefined;
    countryCode?: string | undefined;
    type?: PatchLeadsIdLeadsType | undefined;
};

export type LeadSource = {
    sourceId?: string | undefined;
    sourceName?: string | undefined;
    details?: string | undefined;
};

export enum LeadStatus {
    New = "New",
    Open = "Open",
    InProcess = "InProcess",
    Converted = "Converted",
    Unqualified = "Unqualified",
    AttemptedToContact = "AttemptedToContact",
    Connected = "Connected",
    BadTiming = "BadTiming",
}

export enum PatchLeadsIdLeadsRequestType {
    Home = "home",
    Work = "work",
    Other = "other",
}

export type PatchLeadsIdGeoLocation = {};

export type PatchLeadsIdLeadsCustomFields = {};

export type PatchLeadsIdAddresses = {
    id?: string | undefined;
    contactId?: string | undefined;
    accountId?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    name?: string | undefined;
    companyName?: string | undefined;
    email?: string | undefined;
    phone?: string | undefined;
    street?: string | undefined;
    addressLine2?: string | undefined;
    city?: string | undefined;
    province?: string | undefined;
    region?: string | undefined;
    postalCode?: string | undefined;
    postalCodeExtension?: string | undefined;
    country?: string | undefined;
    countryCode?: string | undefined;
    type?: PatchLeadsIdLeadsRequestType | undefined;
    geoLocation?: PatchLeadsIdGeoLocation | undefined;
    customFields?: Array<PatchLeadsIdLeadsCustomFields> | undefined;
    subdivisionCode?: string | undefined;
};

export enum PatchLeadsIdPreferredContactMethod {
    Email = "Email",
    Phone = "Phone",
    Text = "Text",
    Mail = "Mail",
    InPerson = "InPerson",
}

export enum PatchLeadsIdLeadsRequestRequestBodyType {
    Facebook = "facebook",
    Twitter = "twitter",
    Linkedin = "linkedin",
    Instagram = "instagram",
    Tiktok = "tiktok",
    Pinterest = "pinterest",
    Youtube = "youtube",
    Other = "other",
}

export type PatchLeadsIdAdditionalInfo = {};

export type PatchLeadsIdSocialProfiles = {
    type?: PatchLeadsIdLeadsRequestRequestBodyType | undefined;
    username?: string | undefined;
    displayName?: string | undefined;
    url?: string | undefined;
    avatarUrl?: string | undefined;
    email?: string | undefined;
    additionalInfo?: PatchLeadsIdAdditionalInfo | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    active?: boolean | undefined;
    deleted?: boolean | undefined;
};

export enum PatchLeadsIdFieldType {
    Text = "text",
    Number = "number",
    Date = "date",
    Boolean = "boolean",
    Enum = "enum",
    Json = "json",
    Array = "array",
}

export type PatchLeadsIdLeadsRequestCustomFields = {
    id?: string | undefined;
    fieldName?: string | undefined;
    fieldValue?: string | undefined;
    fieldType?: PatchLeadsIdFieldType | undefined;
};

export enum Priority {
    Low = "low",
    Medium = "medium",
    High = "high",
}

export type Author = {};

export type PatchLeadsIdAttachments = {};

export type SharedWith = {};

export enum Visibility {
    Private = "private",
    Public = "public",
    Shared = "shared",
}

export enum PatchLeadsIdStatus {
    Active = "active",
    Archived = "archived",
}

export type PatchLeadsIdNotes = {
    id?: string | undefined;
    title?: string | undefined;
    content?: string | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    lastAccessed?: number | undefined;
    reminder?: number | undefined;
    color?: string | undefined;
    priority?: Priority | undefined;
    author?: Author | undefined;
    tags?: Array<string> | undefined;
    attachments?: Array<PatchLeadsIdAttachments> | undefined;
    sharedWith?: Array<SharedWith> | undefined;
    visibility?: Visibility | undefined;
    status?: PatchLeadsIdStatus | undefined;
    metadata?: Array<string> | undefined;
};

export type PatchLeadsIdRequestBody = {
    id?: string | undefined;
    name?: string | undefined;
    firstName?: string | undefined;
    middleName?: string | undefined;
    lastName?: string | undefined;
    opportunities?: Array<Opportunities> | undefined;
    defaultEmail?: string | undefined;
    emails?: Array<PatchLeadsIdEmails> | undefined;
    defaultPhone?: string | undefined;
    phones?: Array<PatchLeadsIdPhones> | undefined;
    companyName?: string | undefined;
    jobTitle?: string | undefined;
    website?: string | undefined;
    leadSource?: LeadSource | undefined;
    leadStatus?: LeadStatus | undefined;
    industry?: string | undefined;
    numberOfEmployees?: number | undefined;
    annualRevenue?: number | undefined;
    addresses?: Array<PatchLeadsIdAddresses> | undefined;
    createdAt?: Date | undefined;
    updatedAt?: Date | undefined;
    preferredContactMethod?: PatchLeadsIdPreferredContactMethod | undefined;
    socialProfiles?: Array<PatchLeadsIdSocialProfiles> | undefined;
    customFields?: Array<PatchLeadsIdLeadsRequestCustomFields> | undefined;
    notes?: Array<PatchLeadsIdNotes> | undefined;
};

export type PatchLeadsIdRequest = {
    /**
     * The id of the model
     */
    id: string;
    /**
     * The unique identifier of a Connected Account
     */
    xIntegrationosConnectionKey: string;
    requestBody?: PatchLeadsIdRequestBody | undefined;
};

export enum PatchLeadsIdStatusCode {
    TwoHundred = 200,
    FourHundred = 400,
    FiveHundred = 500,
}

export type PatchLeadsIdUnified = {
    count?: number | undefined;
};

export type PatchLeadsIdPassthrough = {};

export type PatchLeadsIdCache = {
    hit?: boolean | undefined;
    ttl?: number | undefined;
    key?: string | undefined;
};

export type PatchLeadsIdMeta = {
    timestamp?: number | undefined;
    latency?: number | undefined;
    platformRateLimitRemaining?: number | undefined;
    rateLimitRemaining?: number | undefined;
    cache?: PatchLeadsIdCache | undefined;
    transactionKey?: string | undefined;
    txn?: string | undefined;
    platform?: string | undefined;
    platformVersion?: string | undefined;
    connectionDefinitionKey?: string | undefined;
    action?: string | undefined;
    commonModel?: string | undefined;
    commonModelVersion?: string | undefined;
    connectionKey?: string | undefined;
    hash?: string | undefined;
    heartbeats?: Array<string> | undefined;
    totalTransactions?: number | undefined;
};

/**
 * Successful response
 */
export type PatchLeadsIdResponseBody = {
    status?: string | undefined;
    statusCode?: PatchLeadsIdStatusCode | undefined;
    unified?: PatchLeadsIdUnified | undefined;
    passthrough?: PatchLeadsIdPassthrough | undefined;
    meta?: PatchLeadsIdMeta | undefined;
};

export type PatchLeadsIdResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Successful response
     */
    object?: PatchLeadsIdResponseBody | undefined;
};

/** @internal */
export namespace Campaign$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<Campaign, z.ZodTypeDef, Inbound> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Campaign> = z.object({});
}

/** @internal */
export namespace Account$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<Account, z.ZodTypeDef, Inbound> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Account> = z.object({});
}

/** @internal */
export namespace Contacts$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<Contacts, z.ZodTypeDef, Inbound> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Contacts> = z.object({});
}

/** @internal */
export namespace Owner$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<Owner, z.ZodTypeDef, Inbound> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Owner> = z.object({});
}

/** @internal */
export namespace Attachments$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<Attachments, z.ZodTypeDef, Inbound> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Attachments> = z.object({});
}

/** @internal */
export namespace PatchLeadsIdCustomFields$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<PatchLeadsIdCustomFields, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchLeadsIdCustomFields> =
        z.object({});
}

/** @internal */
export namespace Opportunities$ {
    export type Inbound = {
        id?: string | undefined;
        title?: string | undefined;
        description?: string | undefined;
        amount?: number | undefined;
        currency?: string | undefined;
        stage?: string | undefined;
        probability?: number | undefined;
        closeDate?: number | undefined;
        type?: string | undefined;
        nextStep?: string | undefined;
        leadId?: string | undefined;
        leadSource?: string | undefined;
        isClosed?: boolean | undefined;
        isWon?: boolean | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        lostReason?: string | undefined;
        campaign?: Campaign$.Inbound | undefined;
        account?: Account$.Inbound | undefined;
        contacts?: Array<Contacts$.Inbound> | undefined;
        owner?: Owner$.Inbound | undefined;
        attachments?: Array<Attachments$.Inbound> | undefined;
        notes?: Array<string> | undefined;
        customFields?: Array<PatchLeadsIdCustomFields$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<Opportunities, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            title: z.string().optional(),
            description: z.string().optional(),
            amount: z.number().optional(),
            currency: z.string().optional(),
            stage: z.string().optional(),
            probability: z.number().optional(),
            closeDate: z.number().optional(),
            type: z.string().optional(),
            nextStep: z.string().optional(),
            leadId: z.string().optional(),
            leadSource: z.string().optional(),
            isClosed: z.boolean().optional(),
            isWon: z.boolean().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            lostReason: z.string().optional(),
            campaign: z.lazy(() => Campaign$.inboundSchema).optional(),
            account: z.lazy(() => Account$.inboundSchema).optional(),
            contacts: z.array(z.lazy(() => Contacts$.inboundSchema)).optional(),
            owner: z.lazy(() => Owner$.inboundSchema).optional(),
            attachments: z.array(z.lazy(() => Attachments$.inboundSchema)).optional(),
            notes: z.array(z.string()).optional(),
            customFields: z.array(z.lazy(() => PatchLeadsIdCustomFields$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.amount === undefined ? null : { amount: v.amount }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.stage === undefined ? null : { stage: v.stage }),
                ...(v.probability === undefined ? null : { probability: v.probability }),
                ...(v.closeDate === undefined ? null : { closeDate: v.closeDate }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.nextStep === undefined ? null : { nextStep: v.nextStep }),
                ...(v.leadId === undefined ? null : { leadId: v.leadId }),
                ...(v.leadSource === undefined ? null : { leadSource: v.leadSource }),
                ...(v.isClosed === undefined ? null : { isClosed: v.isClosed }),
                ...(v.isWon === undefined ? null : { isWon: v.isWon }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.lostReason === undefined ? null : { lostReason: v.lostReason }),
                ...(v.campaign === undefined ? null : { campaign: v.campaign }),
                ...(v.account === undefined ? null : { account: v.account }),
                ...(v.contacts === undefined ? null : { contacts: v.contacts }),
                ...(v.owner === undefined ? null : { owner: v.owner }),
                ...(v.attachments === undefined ? null : { attachments: v.attachments }),
                ...(v.notes === undefined ? null : { notes: v.notes }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        title?: string | undefined;
        description?: string | undefined;
        amount?: number | undefined;
        currency?: string | undefined;
        stage?: string | undefined;
        probability?: number | undefined;
        closeDate?: number | undefined;
        type?: string | undefined;
        nextStep?: string | undefined;
        leadId?: string | undefined;
        leadSource?: string | undefined;
        isClosed?: boolean | undefined;
        isWon?: boolean | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        lostReason?: string | undefined;
        campaign?: Campaign$.Outbound | undefined;
        account?: Account$.Outbound | undefined;
        contacts?: Array<Contacts$.Outbound> | undefined;
        owner?: Owner$.Outbound | undefined;
        attachments?: Array<Attachments$.Outbound> | undefined;
        notes?: Array<string> | undefined;
        customFields?: Array<PatchLeadsIdCustomFields$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Opportunities> = z
        .object({
            id: z.string().optional(),
            title: z.string().optional(),
            description: z.string().optional(),
            amount: z.number().optional(),
            currency: z.string().optional(),
            stage: z.string().optional(),
            probability: z.number().optional(),
            closeDate: z.number().optional(),
            type: z.string().optional(),
            nextStep: z.string().optional(),
            leadId: z.string().optional(),
            leadSource: z.string().optional(),
            isClosed: z.boolean().optional(),
            isWon: z.boolean().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            lostReason: z.string().optional(),
            campaign: z.lazy(() => Campaign$.outboundSchema).optional(),
            account: z.lazy(() => Account$.outboundSchema).optional(),
            contacts: z.array(z.lazy(() => Contacts$.outboundSchema)).optional(),
            owner: z.lazy(() => Owner$.outboundSchema).optional(),
            attachments: z.array(z.lazy(() => Attachments$.outboundSchema)).optional(),
            notes: z.array(z.string()).optional(),
            customFields: z
                .array(z.lazy(() => PatchLeadsIdCustomFields$.outboundSchema))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.amount === undefined ? null : { amount: v.amount }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.stage === undefined ? null : { stage: v.stage }),
                ...(v.probability === undefined ? null : { probability: v.probability }),
                ...(v.closeDate === undefined ? null : { closeDate: v.closeDate }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.nextStep === undefined ? null : { nextStep: v.nextStep }),
                ...(v.leadId === undefined ? null : { leadId: v.leadId }),
                ...(v.leadSource === undefined ? null : { leadSource: v.leadSource }),
                ...(v.isClosed === undefined ? null : { isClosed: v.isClosed }),
                ...(v.isWon === undefined ? null : { isWon: v.isWon }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.lostReason === undefined ? null : { lostReason: v.lostReason }),
                ...(v.campaign === undefined ? null : { campaign: v.campaign }),
                ...(v.account === undefined ? null : { account: v.account }),
                ...(v.contacts === undefined ? null : { contacts: v.contacts }),
                ...(v.owner === undefined ? null : { owner: v.owner }),
                ...(v.attachments === undefined ? null : { attachments: v.attachments }),
                ...(v.notes === undefined ? null : { notes: v.notes }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
            };
        });
}

/** @internal */
export const PatchLeadsIdType$ = z.nativeEnum(PatchLeadsIdType);

/** @internal */
export namespace PatchLeadsIdEmails$ {
    export type Inbound = {
        email?: string | undefined;
        type?: PatchLeadsIdType | undefined;
    };

    export const inboundSchema: z.ZodType<PatchLeadsIdEmails, z.ZodTypeDef, Inbound> = z
        .object({
            email: z.string().optional(),
            type: PatchLeadsIdType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });

    export type Outbound = {
        email?: string | undefined;
        type?: PatchLeadsIdType | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchLeadsIdEmails> = z
        .object({
            email: z.string().optional(),
            type: PatchLeadsIdType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });
}

/** @internal */
export const PatchLeadsIdLeadsType$ = z.nativeEnum(PatchLeadsIdLeadsType);

/** @internal */
export namespace PatchLeadsIdPhones$ {
    export type Inbound = {
        phone?: string | undefined;
        country?: string | undefined;
        countryCode?: string | undefined;
        type?: PatchLeadsIdLeadsType | undefined;
    };

    export const inboundSchema: z.ZodType<PatchLeadsIdPhones, z.ZodTypeDef, Inbound> = z
        .object({
            phone: z.string().optional(),
            country: z.string().optional(),
            countryCode: z.string().optional(),
            type: PatchLeadsIdLeadsType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.phone === undefined ? null : { phone: v.phone }),
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.countryCode === undefined ? null : { countryCode: v.countryCode }),
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });

    export type Outbound = {
        phone?: string | undefined;
        country?: string | undefined;
        countryCode?: string | undefined;
        type?: PatchLeadsIdLeadsType | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchLeadsIdPhones> = z
        .object({
            phone: z.string().optional(),
            country: z.string().optional(),
            countryCode: z.string().optional(),
            type: PatchLeadsIdLeadsType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.phone === undefined ? null : { phone: v.phone }),
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.countryCode === undefined ? null : { countryCode: v.countryCode }),
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });
}

/** @internal */
export namespace LeadSource$ {
    export type Inbound = {
        sourceId?: string | undefined;
        sourceName?: string | undefined;
        details?: string | undefined;
    };

    export const inboundSchema: z.ZodType<LeadSource, z.ZodTypeDef, Inbound> = z
        .object({
            sourceId: z.string().optional(),
            sourceName: z.string().optional(),
            details: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.sourceId === undefined ? null : { sourceId: v.sourceId }),
                ...(v.sourceName === undefined ? null : { sourceName: v.sourceName }),
                ...(v.details === undefined ? null : { details: v.details }),
            };
        });

    export type Outbound = {
        sourceId?: string | undefined;
        sourceName?: string | undefined;
        details?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, LeadSource> = z
        .object({
            sourceId: z.string().optional(),
            sourceName: z.string().optional(),
            details: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.sourceId === undefined ? null : { sourceId: v.sourceId }),
                ...(v.sourceName === undefined ? null : { sourceName: v.sourceName }),
                ...(v.details === undefined ? null : { details: v.details }),
            };
        });
}

/** @internal */
export const LeadStatus$ = z.nativeEnum(LeadStatus);

/** @internal */
export const PatchLeadsIdLeadsRequestType$ = z.nativeEnum(PatchLeadsIdLeadsRequestType);

/** @internal */
export namespace PatchLeadsIdGeoLocation$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<PatchLeadsIdGeoLocation, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchLeadsIdGeoLocation> =
        z.object({});
}

/** @internal */
export namespace PatchLeadsIdLeadsCustomFields$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<PatchLeadsIdLeadsCustomFields, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchLeadsIdLeadsCustomFields> =
        z.object({});
}

/** @internal */
export namespace PatchLeadsIdAddresses$ {
    export type Inbound = {
        id?: string | undefined;
        contactId?: string | undefined;
        accountId?: string | undefined;
        firstName?: string | undefined;
        lastName?: string | undefined;
        name?: string | undefined;
        companyName?: string | undefined;
        email?: string | undefined;
        phone?: string | undefined;
        street?: string | undefined;
        addressLine2?: string | undefined;
        city?: string | undefined;
        province?: string | undefined;
        region?: string | undefined;
        postalCode?: string | undefined;
        postalCodeExtension?: string | undefined;
        country?: string | undefined;
        countryCode?: string | undefined;
        type?: PatchLeadsIdLeadsRequestType | undefined;
        geoLocation?: PatchLeadsIdGeoLocation$.Inbound | undefined;
        customFields?: Array<PatchLeadsIdLeadsCustomFields$.Inbound> | undefined;
        subdivisionCode?: string | undefined;
    };

    export const inboundSchema: z.ZodType<PatchLeadsIdAddresses, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            contactId: z.string().optional(),
            accountId: z.string().optional(),
            firstName: z.string().optional(),
            lastName: z.string().optional(),
            name: z.string().optional(),
            companyName: z.string().optional(),
            email: z.string().optional(),
            phone: z.string().optional(),
            street: z.string().optional(),
            addressLine2: z.string().optional(),
            city: z.string().optional(),
            province: z.string().optional(),
            region: z.string().optional(),
            postalCode: z.string().optional(),
            postalCodeExtension: z.string().optional(),
            country: z.string().optional(),
            countryCode: z.string().optional(),
            type: PatchLeadsIdLeadsRequestType$.optional(),
            geoLocation: z.lazy(() => PatchLeadsIdGeoLocation$.inboundSchema).optional(),
            customFields: z
                .array(z.lazy(() => PatchLeadsIdLeadsCustomFields$.inboundSchema))
                .optional(),
            subdivisionCode: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.contactId === undefined ? null : { contactId: v.contactId }),
                ...(v.accountId === undefined ? null : { accountId: v.accountId }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.companyName === undefined ? null : { companyName: v.companyName }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.phone === undefined ? null : { phone: v.phone }),
                ...(v.street === undefined ? null : { street: v.street }),
                ...(v.addressLine2 === undefined ? null : { addressLine2: v.addressLine2 }),
                ...(v.city === undefined ? null : { city: v.city }),
                ...(v.province === undefined ? null : { province: v.province }),
                ...(v.region === undefined ? null : { region: v.region }),
                ...(v.postalCode === undefined ? null : { postalCode: v.postalCode }),
                ...(v.postalCodeExtension === undefined
                    ? null
                    : { postalCodeExtension: v.postalCodeExtension }),
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.countryCode === undefined ? null : { countryCode: v.countryCode }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.geoLocation === undefined ? null : { geoLocation: v.geoLocation }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                ...(v.subdivisionCode === undefined
                    ? null
                    : { subdivisionCode: v.subdivisionCode }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        contactId?: string | undefined;
        accountId?: string | undefined;
        firstName?: string | undefined;
        lastName?: string | undefined;
        name?: string | undefined;
        companyName?: string | undefined;
        email?: string | undefined;
        phone?: string | undefined;
        street?: string | undefined;
        addressLine2?: string | undefined;
        city?: string | undefined;
        province?: string | undefined;
        region?: string | undefined;
        postalCode?: string | undefined;
        postalCodeExtension?: string | undefined;
        country?: string | undefined;
        countryCode?: string | undefined;
        type?: PatchLeadsIdLeadsRequestType | undefined;
        geoLocation?: PatchLeadsIdGeoLocation$.Outbound | undefined;
        customFields?: Array<PatchLeadsIdLeadsCustomFields$.Outbound> | undefined;
        subdivisionCode?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchLeadsIdAddresses> = z
        .object({
            id: z.string().optional(),
            contactId: z.string().optional(),
            accountId: z.string().optional(),
            firstName: z.string().optional(),
            lastName: z.string().optional(),
            name: z.string().optional(),
            companyName: z.string().optional(),
            email: z.string().optional(),
            phone: z.string().optional(),
            street: z.string().optional(),
            addressLine2: z.string().optional(),
            city: z.string().optional(),
            province: z.string().optional(),
            region: z.string().optional(),
            postalCode: z.string().optional(),
            postalCodeExtension: z.string().optional(),
            country: z.string().optional(),
            countryCode: z.string().optional(),
            type: PatchLeadsIdLeadsRequestType$.optional(),
            geoLocation: z.lazy(() => PatchLeadsIdGeoLocation$.outboundSchema).optional(),
            customFields: z
                .array(z.lazy(() => PatchLeadsIdLeadsCustomFields$.outboundSchema))
                .optional(),
            subdivisionCode: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.contactId === undefined ? null : { contactId: v.contactId }),
                ...(v.accountId === undefined ? null : { accountId: v.accountId }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.companyName === undefined ? null : { companyName: v.companyName }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.phone === undefined ? null : { phone: v.phone }),
                ...(v.street === undefined ? null : { street: v.street }),
                ...(v.addressLine2 === undefined ? null : { addressLine2: v.addressLine2 }),
                ...(v.city === undefined ? null : { city: v.city }),
                ...(v.province === undefined ? null : { province: v.province }),
                ...(v.region === undefined ? null : { region: v.region }),
                ...(v.postalCode === undefined ? null : { postalCode: v.postalCode }),
                ...(v.postalCodeExtension === undefined
                    ? null
                    : { postalCodeExtension: v.postalCodeExtension }),
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.countryCode === undefined ? null : { countryCode: v.countryCode }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.geoLocation === undefined ? null : { geoLocation: v.geoLocation }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                ...(v.subdivisionCode === undefined
                    ? null
                    : { subdivisionCode: v.subdivisionCode }),
            };
        });
}

/** @internal */
export const PatchLeadsIdPreferredContactMethod$ = z.nativeEnum(PatchLeadsIdPreferredContactMethod);

/** @internal */
export const PatchLeadsIdLeadsRequestRequestBodyType$ = z.nativeEnum(
    PatchLeadsIdLeadsRequestRequestBodyType
);

/** @internal */
export namespace PatchLeadsIdAdditionalInfo$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<PatchLeadsIdAdditionalInfo, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchLeadsIdAdditionalInfo> =
        z.object({});
}

/** @internal */
export namespace PatchLeadsIdSocialProfiles$ {
    export type Inbound = {
        type?: PatchLeadsIdLeadsRequestRequestBodyType | undefined;
        username?: string | undefined;
        displayName?: string | undefined;
        url?: string | undefined;
        avatarUrl?: string | undefined;
        email?: string | undefined;
        additionalInfo?: PatchLeadsIdAdditionalInfo$.Inbound | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<PatchLeadsIdSocialProfiles, z.ZodTypeDef, Inbound> = z
        .object({
            type: PatchLeadsIdLeadsRequestRequestBodyType$.optional(),
            username: z.string().optional(),
            displayName: z.string().optional(),
            url: z.string().optional(),
            avatarUrl: z.string().optional(),
            email: z.string().optional(),
            additionalInfo: z.lazy(() => PatchLeadsIdAdditionalInfo$.inboundSchema).optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.username === undefined ? null : { username: v.username }),
                ...(v.displayName === undefined ? null : { displayName: v.displayName }),
                ...(v.url === undefined ? null : { url: v.url }),
                ...(v.avatarUrl === undefined ? null : { avatarUrl: v.avatarUrl }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.additionalInfo === undefined ? null : { additionalInfo: v.additionalInfo }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });

    export type Outbound = {
        type?: PatchLeadsIdLeadsRequestRequestBodyType | undefined;
        username?: string | undefined;
        displayName?: string | undefined;
        url?: string | undefined;
        avatarUrl?: string | undefined;
        email?: string | undefined;
        additionalInfo?: PatchLeadsIdAdditionalInfo$.Outbound | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchLeadsIdSocialProfiles> = z
        .object({
            type: PatchLeadsIdLeadsRequestRequestBodyType$.optional(),
            username: z.string().optional(),
            displayName: z.string().optional(),
            url: z.string().optional(),
            avatarUrl: z.string().optional(),
            email: z.string().optional(),
            additionalInfo: z.lazy(() => PatchLeadsIdAdditionalInfo$.outboundSchema).optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.username === undefined ? null : { username: v.username }),
                ...(v.displayName === undefined ? null : { displayName: v.displayName }),
                ...(v.url === undefined ? null : { url: v.url }),
                ...(v.avatarUrl === undefined ? null : { avatarUrl: v.avatarUrl }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.additionalInfo === undefined ? null : { additionalInfo: v.additionalInfo }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });
}

/** @internal */
export const PatchLeadsIdFieldType$ = z.nativeEnum(PatchLeadsIdFieldType);

/** @internal */
export namespace PatchLeadsIdLeadsRequestCustomFields$ {
    export type Inbound = {
        id?: string | undefined;
        fieldName?: string | undefined;
        fieldValue?: string | undefined;
        fieldType?: PatchLeadsIdFieldType | undefined;
    };

    export const inboundSchema: z.ZodType<
        PatchLeadsIdLeadsRequestCustomFields,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            id: z.string().optional(),
            fieldName: z.string().optional(),
            fieldValue: z.string().optional(),
            fieldType: PatchLeadsIdFieldType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fieldName === undefined ? null : { fieldName: v.fieldName }),
                ...(v.fieldValue === undefined ? null : { fieldValue: v.fieldValue }),
                ...(v.fieldType === undefined ? null : { fieldType: v.fieldType }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        fieldName?: string | undefined;
        fieldValue?: string | undefined;
        fieldType?: PatchLeadsIdFieldType | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PatchLeadsIdLeadsRequestCustomFields
    > = z
        .object({
            id: z.string().optional(),
            fieldName: z.string().optional(),
            fieldValue: z.string().optional(),
            fieldType: PatchLeadsIdFieldType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fieldName === undefined ? null : { fieldName: v.fieldName }),
                ...(v.fieldValue === undefined ? null : { fieldValue: v.fieldValue }),
                ...(v.fieldType === undefined ? null : { fieldType: v.fieldType }),
            };
        });
}

/** @internal */
export const Priority$ = z.nativeEnum(Priority);

/** @internal */
export namespace Author$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<Author, z.ZodTypeDef, Inbound> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Author> = z.object({});
}

/** @internal */
export namespace PatchLeadsIdAttachments$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<PatchLeadsIdAttachments, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchLeadsIdAttachments> =
        z.object({});
}

/** @internal */
export namespace SharedWith$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<SharedWith, z.ZodTypeDef, Inbound> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, SharedWith> = z.object({});
}

/** @internal */
export const Visibility$ = z.nativeEnum(Visibility);

/** @internal */
export const PatchLeadsIdStatus$ = z.nativeEnum(PatchLeadsIdStatus);

/** @internal */
export namespace PatchLeadsIdNotes$ {
    export type Inbound = {
        id?: string | undefined;
        title?: string | undefined;
        content?: string | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        lastAccessed?: number | undefined;
        reminder?: number | undefined;
        color?: string | undefined;
        priority?: Priority | undefined;
        author?: Author$.Inbound | undefined;
        tags?: Array<string> | undefined;
        attachments?: Array<PatchLeadsIdAttachments$.Inbound> | undefined;
        sharedWith?: Array<SharedWith$.Inbound> | undefined;
        visibility?: Visibility | undefined;
        status?: PatchLeadsIdStatus | undefined;
        metadata?: Array<string> | undefined;
    };

    export const inboundSchema: z.ZodType<PatchLeadsIdNotes, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            title: z.string().optional(),
            content: z.string().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            lastAccessed: z.number().optional(),
            reminder: z.number().optional(),
            color: z.string().optional(),
            priority: Priority$.optional(),
            author: z.lazy(() => Author$.inboundSchema).optional(),
            tags: z.array(z.string()).optional(),
            attachments: z.array(z.lazy(() => PatchLeadsIdAttachments$.inboundSchema)).optional(),
            sharedWith: z.array(z.lazy(() => SharedWith$.inboundSchema)).optional(),
            visibility: Visibility$.optional(),
            status: PatchLeadsIdStatus$.optional(),
            metadata: z.array(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.content === undefined ? null : { content: v.content }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.lastAccessed === undefined ? null : { lastAccessed: v.lastAccessed }),
                ...(v.reminder === undefined ? null : { reminder: v.reminder }),
                ...(v.color === undefined ? null : { color: v.color }),
                ...(v.priority === undefined ? null : { priority: v.priority }),
                ...(v.author === undefined ? null : { author: v.author }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
                ...(v.attachments === undefined ? null : { attachments: v.attachments }),
                ...(v.sharedWith === undefined ? null : { sharedWith: v.sharedWith }),
                ...(v.visibility === undefined ? null : { visibility: v.visibility }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        title?: string | undefined;
        content?: string | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        lastAccessed?: number | undefined;
        reminder?: number | undefined;
        color?: string | undefined;
        priority?: Priority | undefined;
        author?: Author$.Outbound | undefined;
        tags?: Array<string> | undefined;
        attachments?: Array<PatchLeadsIdAttachments$.Outbound> | undefined;
        sharedWith?: Array<SharedWith$.Outbound> | undefined;
        visibility?: Visibility | undefined;
        status?: PatchLeadsIdStatus | undefined;
        metadata?: Array<string> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchLeadsIdNotes> = z
        .object({
            id: z.string().optional(),
            title: z.string().optional(),
            content: z.string().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            lastAccessed: z.number().optional(),
            reminder: z.number().optional(),
            color: z.string().optional(),
            priority: Priority$.optional(),
            author: z.lazy(() => Author$.outboundSchema).optional(),
            tags: z.array(z.string()).optional(),
            attachments: z.array(z.lazy(() => PatchLeadsIdAttachments$.outboundSchema)).optional(),
            sharedWith: z.array(z.lazy(() => SharedWith$.outboundSchema)).optional(),
            visibility: Visibility$.optional(),
            status: PatchLeadsIdStatus$.optional(),
            metadata: z.array(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.content === undefined ? null : { content: v.content }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.lastAccessed === undefined ? null : { lastAccessed: v.lastAccessed }),
                ...(v.reminder === undefined ? null : { reminder: v.reminder }),
                ...(v.color === undefined ? null : { color: v.color }),
                ...(v.priority === undefined ? null : { priority: v.priority }),
                ...(v.author === undefined ? null : { author: v.author }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
                ...(v.attachments === undefined ? null : { attachments: v.attachments }),
                ...(v.sharedWith === undefined ? null : { sharedWith: v.sharedWith }),
                ...(v.visibility === undefined ? null : { visibility: v.visibility }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
            };
        });
}

/** @internal */
export namespace PatchLeadsIdRequestBody$ {
    export type Inbound = {
        id?: string | undefined;
        name?: string | undefined;
        firstName?: string | undefined;
        middleName?: string | undefined;
        lastName?: string | undefined;
        opportunities?: Array<Opportunities$.Inbound> | undefined;
        defaultEmail?: string | undefined;
        emails?: Array<PatchLeadsIdEmails$.Inbound> | undefined;
        defaultPhone?: string | undefined;
        phones?: Array<PatchLeadsIdPhones$.Inbound> | undefined;
        companyName?: string | undefined;
        jobTitle?: string | undefined;
        website?: string | undefined;
        leadSource?: LeadSource$.Inbound | undefined;
        leadStatus?: LeadStatus | undefined;
        industry?: string | undefined;
        numberOfEmployees?: number | undefined;
        annualRevenue?: number | undefined;
        addresses?: Array<PatchLeadsIdAddresses$.Inbound> | undefined;
        createdAt?: string | undefined;
        updatedAt?: string | undefined;
        preferredContactMethod?: PatchLeadsIdPreferredContactMethod | undefined;
        socialProfiles?: Array<PatchLeadsIdSocialProfiles$.Inbound> | undefined;
        customFields?: Array<PatchLeadsIdLeadsRequestCustomFields$.Inbound> | undefined;
        notes?: Array<PatchLeadsIdNotes$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<PatchLeadsIdRequestBody, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            name: z.string().optional(),
            firstName: z.string().optional(),
            middleName: z.string().optional(),
            lastName: z.string().optional(),
            opportunities: z.array(z.lazy(() => Opportunities$.inboundSchema)).optional(),
            defaultEmail: z.string().optional(),
            emails: z.array(z.lazy(() => PatchLeadsIdEmails$.inboundSchema)).optional(),
            defaultPhone: z.string().optional(),
            phones: z.array(z.lazy(() => PatchLeadsIdPhones$.inboundSchema)).optional(),
            companyName: z.string().optional(),
            jobTitle: z.string().optional(),
            website: z.string().optional(),
            leadSource: z.lazy(() => LeadSource$.inboundSchema).optional(),
            leadStatus: LeadStatus$.optional(),
            industry: z.string().optional(),
            numberOfEmployees: z.number().optional(),
            annualRevenue: z.number().optional(),
            addresses: z.array(z.lazy(() => PatchLeadsIdAddresses$.inboundSchema)).optional(),
            createdAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            updatedAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            preferredContactMethod: PatchLeadsIdPreferredContactMethod$.optional(),
            socialProfiles: z
                .array(z.lazy(() => PatchLeadsIdSocialProfiles$.inboundSchema))
                .optional(),
            customFields: z
                .array(z.lazy(() => PatchLeadsIdLeadsRequestCustomFields$.inboundSchema))
                .optional(),
            notes: z.array(z.lazy(() => PatchLeadsIdNotes$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.middleName === undefined ? null : { middleName: v.middleName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.opportunities === undefined ? null : { opportunities: v.opportunities }),
                ...(v.defaultEmail === undefined ? null : { defaultEmail: v.defaultEmail }),
                ...(v.emails === undefined ? null : { emails: v.emails }),
                ...(v.defaultPhone === undefined ? null : { defaultPhone: v.defaultPhone }),
                ...(v.phones === undefined ? null : { phones: v.phones }),
                ...(v.companyName === undefined ? null : { companyName: v.companyName }),
                ...(v.jobTitle === undefined ? null : { jobTitle: v.jobTitle }),
                ...(v.website === undefined ? null : { website: v.website }),
                ...(v.leadSource === undefined ? null : { leadSource: v.leadSource }),
                ...(v.leadStatus === undefined ? null : { leadStatus: v.leadStatus }),
                ...(v.industry === undefined ? null : { industry: v.industry }),
                ...(v.numberOfEmployees === undefined
                    ? null
                    : { numberOfEmployees: v.numberOfEmployees }),
                ...(v.annualRevenue === undefined ? null : { annualRevenue: v.annualRevenue }),
                ...(v.addresses === undefined ? null : { addresses: v.addresses }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.preferredContactMethod === undefined
                    ? null
                    : { preferredContactMethod: v.preferredContactMethod }),
                ...(v.socialProfiles === undefined ? null : { socialProfiles: v.socialProfiles }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                ...(v.notes === undefined ? null : { notes: v.notes }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        name?: string | undefined;
        firstName?: string | undefined;
        middleName?: string | undefined;
        lastName?: string | undefined;
        opportunities?: Array<Opportunities$.Outbound> | undefined;
        defaultEmail?: string | undefined;
        emails?: Array<PatchLeadsIdEmails$.Outbound> | undefined;
        defaultPhone?: string | undefined;
        phones?: Array<PatchLeadsIdPhones$.Outbound> | undefined;
        companyName?: string | undefined;
        jobTitle?: string | undefined;
        website?: string | undefined;
        leadSource?: LeadSource$.Outbound | undefined;
        leadStatus?: LeadStatus | undefined;
        industry?: string | undefined;
        numberOfEmployees?: number | undefined;
        annualRevenue?: number | undefined;
        addresses?: Array<PatchLeadsIdAddresses$.Outbound> | undefined;
        createdAt?: string | undefined;
        updatedAt?: string | undefined;
        preferredContactMethod?: PatchLeadsIdPreferredContactMethod | undefined;
        socialProfiles?: Array<PatchLeadsIdSocialProfiles$.Outbound> | undefined;
        customFields?: Array<PatchLeadsIdLeadsRequestCustomFields$.Outbound> | undefined;
        notes?: Array<PatchLeadsIdNotes$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchLeadsIdRequestBody> = z
        .object({
            id: z.string().optional(),
            name: z.string().optional(),
            firstName: z.string().optional(),
            middleName: z.string().optional(),
            lastName: z.string().optional(),
            opportunities: z.array(z.lazy(() => Opportunities$.outboundSchema)).optional(),
            defaultEmail: z.string().optional(),
            emails: z.array(z.lazy(() => PatchLeadsIdEmails$.outboundSchema)).optional(),
            defaultPhone: z.string().optional(),
            phones: z.array(z.lazy(() => PatchLeadsIdPhones$.outboundSchema)).optional(),
            companyName: z.string().optional(),
            jobTitle: z.string().optional(),
            website: z.string().optional(),
            leadSource: z.lazy(() => LeadSource$.outboundSchema).optional(),
            leadStatus: LeadStatus$.optional(),
            industry: z.string().optional(),
            numberOfEmployees: z.number().optional(),
            annualRevenue: z.number().optional(),
            addresses: z.array(z.lazy(() => PatchLeadsIdAddresses$.outboundSchema)).optional(),
            createdAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            updatedAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            preferredContactMethod: PatchLeadsIdPreferredContactMethod$.optional(),
            socialProfiles: z
                .array(z.lazy(() => PatchLeadsIdSocialProfiles$.outboundSchema))
                .optional(),
            customFields: z
                .array(z.lazy(() => PatchLeadsIdLeadsRequestCustomFields$.outboundSchema))
                .optional(),
            notes: z.array(z.lazy(() => PatchLeadsIdNotes$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.middleName === undefined ? null : { middleName: v.middleName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.opportunities === undefined ? null : { opportunities: v.opportunities }),
                ...(v.defaultEmail === undefined ? null : { defaultEmail: v.defaultEmail }),
                ...(v.emails === undefined ? null : { emails: v.emails }),
                ...(v.defaultPhone === undefined ? null : { defaultPhone: v.defaultPhone }),
                ...(v.phones === undefined ? null : { phones: v.phones }),
                ...(v.companyName === undefined ? null : { companyName: v.companyName }),
                ...(v.jobTitle === undefined ? null : { jobTitle: v.jobTitle }),
                ...(v.website === undefined ? null : { website: v.website }),
                ...(v.leadSource === undefined ? null : { leadSource: v.leadSource }),
                ...(v.leadStatus === undefined ? null : { leadStatus: v.leadStatus }),
                ...(v.industry === undefined ? null : { industry: v.industry }),
                ...(v.numberOfEmployees === undefined
                    ? null
                    : { numberOfEmployees: v.numberOfEmployees }),
                ...(v.annualRevenue === undefined ? null : { annualRevenue: v.annualRevenue }),
                ...(v.addresses === undefined ? null : { addresses: v.addresses }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.preferredContactMethod === undefined
                    ? null
                    : { preferredContactMethod: v.preferredContactMethod }),
                ...(v.socialProfiles === undefined ? null : { socialProfiles: v.socialProfiles }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                ...(v.notes === undefined ? null : { notes: v.notes }),
            };
        });
}

/** @internal */
export namespace PatchLeadsIdRequest$ {
    export type Inbound = {
        id: string;
        "X-INTEGRATIONOS-CONNECTION-KEY": string;
        RequestBody?: PatchLeadsIdRequestBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<PatchLeadsIdRequest, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string(),
            "X-INTEGRATIONOS-CONNECTION-KEY": z.string(),
            RequestBody: z.lazy(() => PatchLeadsIdRequestBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                id: v.id,
                xIntegrationosConnectionKey: v["X-INTEGRATIONOS-CONNECTION-KEY"],
                ...(v.RequestBody === undefined ? null : { requestBody: v.RequestBody }),
            };
        });

    export type Outbound = {
        id: string;
        "X-INTEGRATIONOS-CONNECTION-KEY": string;
        RequestBody?: PatchLeadsIdRequestBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchLeadsIdRequest> = z
        .object({
            id: z.string(),
            xIntegrationosConnectionKey: z.string(),
            requestBody: z.lazy(() => PatchLeadsIdRequestBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                id: v.id,
                "X-INTEGRATIONOS-CONNECTION-KEY": v.xIntegrationosConnectionKey,
                ...(v.requestBody === undefined ? null : { RequestBody: v.requestBody }),
            };
        });
}

/** @internal */
export const PatchLeadsIdStatusCode$ = z.nativeEnum(PatchLeadsIdStatusCode);

/** @internal */
export namespace PatchLeadsIdUnified$ {
    export type Inbound = {
        count?: number | undefined;
    };

    export const inboundSchema: z.ZodType<PatchLeadsIdUnified, z.ZodTypeDef, Inbound> = z
        .object({
            count: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.count === undefined ? null : { count: v.count }),
            };
        });

    export type Outbound = {
        count?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchLeadsIdUnified> = z
        .object({
            count: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.count === undefined ? null : { count: v.count }),
            };
        });
}

/** @internal */
export namespace PatchLeadsIdPassthrough$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<PatchLeadsIdPassthrough, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchLeadsIdPassthrough> =
        z.object({});
}

/** @internal */
export namespace PatchLeadsIdCache$ {
    export type Inbound = {
        hit?: boolean | undefined;
        ttl?: number | undefined;
        key?: string | undefined;
    };

    export const inboundSchema: z.ZodType<PatchLeadsIdCache, z.ZodTypeDef, Inbound> = z
        .object({
            hit: z.boolean().optional(),
            ttl: z.number().int().optional(),
            key: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.hit === undefined ? null : { hit: v.hit }),
                ...(v.ttl === undefined ? null : { ttl: v.ttl }),
                ...(v.key === undefined ? null : { key: v.key }),
            };
        });

    export type Outbound = {
        hit?: boolean | undefined;
        ttl?: number | undefined;
        key?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchLeadsIdCache> = z
        .object({
            hit: z.boolean().optional(),
            ttl: z.number().int().optional(),
            key: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.hit === undefined ? null : { hit: v.hit }),
                ...(v.ttl === undefined ? null : { ttl: v.ttl }),
                ...(v.key === undefined ? null : { key: v.key }),
            };
        });
}

/** @internal */
export namespace PatchLeadsIdMeta$ {
    export type Inbound = {
        timestamp?: number | undefined;
        latency?: number | undefined;
        platformRateLimitRemaining?: number | undefined;
        rateLimitRemaining?: number | undefined;
        cache?: PatchLeadsIdCache$.Inbound | undefined;
        transactionKey?: string | undefined;
        txn?: string | undefined;
        platform?: string | undefined;
        platformVersion?: string | undefined;
        connectionDefinitionKey?: string | undefined;
        action?: string | undefined;
        commonModel?: string | undefined;
        commonModelVersion?: string | undefined;
        connectionKey?: string | undefined;
        hash?: string | undefined;
        heartbeats?: Array<string> | undefined;
        totalTransactions?: number | undefined;
    };

    export const inboundSchema: z.ZodType<PatchLeadsIdMeta, z.ZodTypeDef, Inbound> = z
        .object({
            timestamp: z.number().int().optional(),
            latency: z.number().int().optional(),
            platformRateLimitRemaining: z.number().int().optional(),
            rateLimitRemaining: z.number().int().optional(),
            cache: z.lazy(() => PatchLeadsIdCache$.inboundSchema).optional(),
            transactionKey: z.string().optional(),
            txn: z.string().optional(),
            platform: z.string().optional(),
            platformVersion: z.string().optional(),
            connectionDefinitionKey: z.string().optional(),
            action: z.string().optional(),
            commonModel: z.string().optional(),
            commonModelVersion: z.string().optional(),
            connectionKey: z.string().optional(),
            hash: z.string().optional(),
            heartbeats: z.array(z.string()).optional(),
            totalTransactions: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.timestamp === undefined ? null : { timestamp: v.timestamp }),
                ...(v.latency === undefined ? null : { latency: v.latency }),
                ...(v.platformRateLimitRemaining === undefined
                    ? null
                    : { platformRateLimitRemaining: v.platformRateLimitRemaining }),
                ...(v.rateLimitRemaining === undefined
                    ? null
                    : { rateLimitRemaining: v.rateLimitRemaining }),
                ...(v.cache === undefined ? null : { cache: v.cache }),
                ...(v.transactionKey === undefined ? null : { transactionKey: v.transactionKey }),
                ...(v.txn === undefined ? null : { txn: v.txn }),
                ...(v.platform === undefined ? null : { platform: v.platform }),
                ...(v.platformVersion === undefined
                    ? null
                    : { platformVersion: v.platformVersion }),
                ...(v.connectionDefinitionKey === undefined
                    ? null
                    : { connectionDefinitionKey: v.connectionDefinitionKey }),
                ...(v.action === undefined ? null : { action: v.action }),
                ...(v.commonModel === undefined ? null : { commonModel: v.commonModel }),
                ...(v.commonModelVersion === undefined
                    ? null
                    : { commonModelVersion: v.commonModelVersion }),
                ...(v.connectionKey === undefined ? null : { connectionKey: v.connectionKey }),
                ...(v.hash === undefined ? null : { hash: v.hash }),
                ...(v.heartbeats === undefined ? null : { heartbeats: v.heartbeats }),
                ...(v.totalTransactions === undefined
                    ? null
                    : { totalTransactions: v.totalTransactions }),
            };
        });

    export type Outbound = {
        timestamp?: number | undefined;
        latency?: number | undefined;
        platformRateLimitRemaining?: number | undefined;
        rateLimitRemaining?: number | undefined;
        cache?: PatchLeadsIdCache$.Outbound | undefined;
        transactionKey?: string | undefined;
        txn?: string | undefined;
        platform?: string | undefined;
        platformVersion?: string | undefined;
        connectionDefinitionKey?: string | undefined;
        action?: string | undefined;
        commonModel?: string | undefined;
        commonModelVersion?: string | undefined;
        connectionKey?: string | undefined;
        hash?: string | undefined;
        heartbeats?: Array<string> | undefined;
        totalTransactions?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchLeadsIdMeta> = z
        .object({
            timestamp: z.number().int().optional(),
            latency: z.number().int().optional(),
            platformRateLimitRemaining: z.number().int().optional(),
            rateLimitRemaining: z.number().int().optional(),
            cache: z.lazy(() => PatchLeadsIdCache$.outboundSchema).optional(),
            transactionKey: z.string().optional(),
            txn: z.string().optional(),
            platform: z.string().optional(),
            platformVersion: z.string().optional(),
            connectionDefinitionKey: z.string().optional(),
            action: z.string().optional(),
            commonModel: z.string().optional(),
            commonModelVersion: z.string().optional(),
            connectionKey: z.string().optional(),
            hash: z.string().optional(),
            heartbeats: z.array(z.string()).optional(),
            totalTransactions: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.timestamp === undefined ? null : { timestamp: v.timestamp }),
                ...(v.latency === undefined ? null : { latency: v.latency }),
                ...(v.platformRateLimitRemaining === undefined
                    ? null
                    : { platformRateLimitRemaining: v.platformRateLimitRemaining }),
                ...(v.rateLimitRemaining === undefined
                    ? null
                    : { rateLimitRemaining: v.rateLimitRemaining }),
                ...(v.cache === undefined ? null : { cache: v.cache }),
                ...(v.transactionKey === undefined ? null : { transactionKey: v.transactionKey }),
                ...(v.txn === undefined ? null : { txn: v.txn }),
                ...(v.platform === undefined ? null : { platform: v.platform }),
                ...(v.platformVersion === undefined
                    ? null
                    : { platformVersion: v.platformVersion }),
                ...(v.connectionDefinitionKey === undefined
                    ? null
                    : { connectionDefinitionKey: v.connectionDefinitionKey }),
                ...(v.action === undefined ? null : { action: v.action }),
                ...(v.commonModel === undefined ? null : { commonModel: v.commonModel }),
                ...(v.commonModelVersion === undefined
                    ? null
                    : { commonModelVersion: v.commonModelVersion }),
                ...(v.connectionKey === undefined ? null : { connectionKey: v.connectionKey }),
                ...(v.hash === undefined ? null : { hash: v.hash }),
                ...(v.heartbeats === undefined ? null : { heartbeats: v.heartbeats }),
                ...(v.totalTransactions === undefined
                    ? null
                    : { totalTransactions: v.totalTransactions }),
            };
        });
}

/** @internal */
export namespace PatchLeadsIdResponseBody$ {
    export type Inbound = {
        status?: string | undefined;
        statusCode?: PatchLeadsIdStatusCode | undefined;
        unified?: PatchLeadsIdUnified$.Inbound | undefined;
        passthrough?: PatchLeadsIdPassthrough$.Inbound | undefined;
        meta?: PatchLeadsIdMeta$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<PatchLeadsIdResponseBody, z.ZodTypeDef, Inbound> = z
        .object({
            status: z.string().optional(),
            statusCode: PatchLeadsIdStatusCode$.optional(),
            unified: z.lazy(() => PatchLeadsIdUnified$.inboundSchema).optional(),
            passthrough: z.lazy(() => PatchLeadsIdPassthrough$.inboundSchema).optional(),
            meta: z.lazy(() => PatchLeadsIdMeta$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.statusCode === undefined ? null : { statusCode: v.statusCode }),
                ...(v.unified === undefined ? null : { unified: v.unified }),
                ...(v.passthrough === undefined ? null : { passthrough: v.passthrough }),
                ...(v.meta === undefined ? null : { meta: v.meta }),
            };
        });

    export type Outbound = {
        status?: string | undefined;
        statusCode?: PatchLeadsIdStatusCode | undefined;
        unified?: PatchLeadsIdUnified$.Outbound | undefined;
        passthrough?: PatchLeadsIdPassthrough$.Outbound | undefined;
        meta?: PatchLeadsIdMeta$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchLeadsIdResponseBody> = z
        .object({
            status: z.string().optional(),
            statusCode: PatchLeadsIdStatusCode$.optional(),
            unified: z.lazy(() => PatchLeadsIdUnified$.outboundSchema).optional(),
            passthrough: z.lazy(() => PatchLeadsIdPassthrough$.outboundSchema).optional(),
            meta: z.lazy(() => PatchLeadsIdMeta$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.statusCode === undefined ? null : { statusCode: v.statusCode }),
                ...(v.unified === undefined ? null : { unified: v.unified }),
                ...(v.passthrough === undefined ? null : { passthrough: v.passthrough }),
                ...(v.meta === undefined ? null : { meta: v.meta }),
            };
        });
}

/** @internal */
export namespace PatchLeadsIdResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        object?: PatchLeadsIdResponseBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<PatchLeadsIdResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => PatchLeadsIdResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: PatchLeadsIdResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchLeadsIdResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z.lazy(() => PatchLeadsIdResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
