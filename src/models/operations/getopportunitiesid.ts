/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type GetOpportunitiesIdRequest = {
    /**
     * The id of the model
     */
    id: string;
    /**
     * The unique identifier of a Connected Account
     */
    xIntegrationosConnectionKey: string;
};

export enum GetOpportunitiesIdStatusCode {
    TwoHundred = 200,
    FourHundred = 400,
    FiveHundred = 500,
}

export enum GetOpportunitiesIdType {
    Email = "Email",
    SocialMedia = "Social Media",
    SearchEngine = "Search Engine",
    Display = "Display",
    Other = "Other",
}

export enum GetOpportunitiesIdStatus {
    Planned = "Planned",
    Active = "Active",
    Paused = "Paused",
    Completed = "Completed",
    Cancelled = "Cancelled",
}

export type GetOpportunitiesIdPerformanceMetrics = {
    impressions?: number | undefined;
    clicks?: number | undefined;
    conversions?: number | undefined;
    spend?: number | undefined;
    returnOnInvestment?: number | undefined;
    costPerClick?: number | undefined;
    costPerConversion?: number | undefined;
    conversionRate?: number | undefined;
};

export enum GetOpportunitiesIdOpportunitiesResponse200ApplicationJSONResponseBodyType {
    String = "String",
    Number = "Number",
    Boolean = "Boolean",
    Date = "Date",
    Json = "Json",
    Array = "Array",
}

export type GetOpportunitiesIdOpportunitiesResponseMetadata = {
    id?: string | undefined;
    key?: string | undefined;
    value?: string | undefined;
    type?: GetOpportunitiesIdOpportunitiesResponse200ApplicationJSONResponseBodyType | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    entityId?: string | undefined;
    entityType?: string | undefined;
};

export enum GetOpportunitiesIdEntityType {
    User = "User",
    Project = "Project",
    Message = "Message",
    Other = "Other",
}

export type GetOpportunitiesIdOpportunitiesAssociatedWith = {
    entityId?: string | undefined;
    entityType?: GetOpportunitiesIdEntityType | undefined;
    attributes?: Array<string> | undefined;
};

export enum GetOpportunitiesIdAccessControlType {
    Rbac = "RBAC",
    Abac = "ABAC",
    Custom = "Custom",
    None = "None",
}

export enum GetOpportunitiesIdOpportunitiesResponse200ApplicationJSONResponseBodyUnifiedCampaignType {
    User = "User",
    Group = "Group",
}

export type GetOpportunitiesIdAssigneeDetails = {
    identifier?: string | undefined;
    displayName?: string | undefined;
    type?:
        | GetOpportunitiesIdOpportunitiesResponse200ApplicationJSONResponseBodyUnifiedCampaignType
        | undefined;
};

export enum GetOpportunitiesIdIdentifierType {
    String = "String",
    Number = "Number",
}

export type GetOpportunitiesIdOpportunitiesPermissions = {
    canView?: Array<string> | undefined;
    canEdit?: Array<string> | undefined;
    canDelete?: Array<string> | undefined;
    roles?: Array<string> | undefined;
    accessControlType?: GetOpportunitiesIdAccessControlType | undefined;
    assigneeDetails?: GetOpportunitiesIdAssigneeDetails | undefined;
    identifierType?: GetOpportunitiesIdIdentifierType | undefined;
};

export type GetOpportunitiesIdCreativeAssets = {
    id?: string | undefined;
    fileName?: string | undefined;
    fileSize?: number | undefined;
    fileType?: string | undefined;
    url?: string | undefined;
    thumbnailUrl?: string | undefined;
    previewUrl?: string | undefined;
    content?: string | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    metadata?: GetOpportunitiesIdOpportunitiesResponseMetadata | undefined;
    associatedWith?: GetOpportunitiesIdOpportunitiesAssociatedWith | undefined;
    permissions?: GetOpportunitiesIdOpportunitiesPermissions | undefined;
};

export type GetOpportunitiesIdCampaign = {
    id?: string | undefined;
    name?: string | undefined;
    type?: GetOpportunitiesIdType | undefined;
    status?: GetOpportunitiesIdStatus | undefined;
    startDate?: number | undefined;
    endDate?: number | undefined;
    budget?: number | undefined;
    targetAudience?: string | undefined;
    channels?: Array<string> | undefined;
    performanceMetrics?: GetOpportunitiesIdPerformanceMetrics | undefined;
    creativeAssets?: GetOpportunitiesIdCreativeAssets | undefined;
    tags?: Array<string> | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    active?: boolean | undefined;
    deleted?: boolean | undefined;
};

export enum GetOpportunitiesIdAccountType {
    Checking = "checking",
    Savings = "savings",
    CreditCard = "credit-card",
    Investment = "investment",
    Loan = "loan",
    Ira = "ira",
    RothIra = "roth-ira",
    FourHundredAndOnek = "401k",
}

export enum GetOpportunitiesIdCurrency {
    Aed = "AED",
    Afn = "AFN",
    All = "ALL",
    Amd = "AMD",
    Ang = "ANG",
    Aoa = "AOA",
    Ars = "ARS",
    Aud = "AUD",
    Awg = "AWG",
    Azn = "AZN",
    Bam = "BAM",
    Bbd = "BBD",
    Bdt = "BDT",
    Bgn = "BGN",
    Bhd = "BHD",
    Bif = "BIF",
    Bmd = "BMD",
    Bnd = "BND",
    Bob = "BOB",
    Brl = "BRL",
    Bsd = "BSD",
    Btn = "BTN",
    Bwp = "BWP",
    Byn = "BYN",
    Bzd = "BZD",
    Cad = "CAD",
    Cdf = "CDF",
    Chf = "CHF",
    Clp = "CLP",
    Cny = "CNY",
    Cop = "COP",
    Crc = "CRC",
    Cuc = "CUC",
    Cup = "CUP",
    Cve = "CVE",
    Czk = "CZK",
    Djf = "DJF",
    Dkk = "DKK",
    Dop = "DOP",
    Dzd = "DZD",
    Egp = "EGP",
    Ern = "ERN",
    Etb = "ETB",
    Eur = "EUR",
    Fjd = "FJD",
    Fkp = "FKP",
    Fok = "FOK",
    Gbp = "GBP",
    Gel = "GEL",
    Ggp = "GGP",
    Ghs = "GHS",
    Gip = "GIP",
    Gmd = "GMD",
    Gnf = "GNF",
    Gtq = "GTQ",
    Gyd = "GYD",
    Hkd = "HKD",
    Hnl = "HNL",
    Hrk = "HRK",
    Htg = "HTG",
    Huf = "HUF",
    Idr = "IDR",
    Ils = "ILS",
    Imp = "IMP",
    Inr = "INR",
    Iqd = "IQD",
    Irr = "IRR",
    Isk = "ISK",
    Jep = "JEP",
    Jmd = "JMD",
    Jod = "JOD",
    Jpy = "JPY",
    Kes = "KES",
    Kgs = "KGS",
    Khr = "KHR",
    Kid = "KID",
    Kmf = "KMF",
    Kpw = "KPW",
    Krw = "KRW",
    Kwd = "KWD",
    Kyd = "KYD",
    Kzt = "KZT",
    Lak = "LAK",
    Lbp = "LBP",
    Lkr = "LKR",
    Lrd = "LRD",
    Lsl = "LSL",
    Lyd = "LYD",
    Mad = "MAD",
    Mdl = "MDL",
    Mga = "MGA",
    Mkd = "MKD",
    Mmk = "MMK",
    Mnt = "MNT",
    Mop = "MOP",
    Mru = "MRU",
    Mur = "MUR",
    Mvr = "MVR",
    Mwk = "MWK",
    Mxn = "MXN",
    Myr = "MYR",
    Mzn = "MZN",
    Nad = "NAD",
    Ngn = "NGN",
    Nio = "NIO",
    Nok = "NOK",
    Npr = "NPR",
    Nzd = "NZD",
    Omr = "OMR",
    Pab = "PAB",
    Pen = "PEN",
    Pgk = "PGK",
    Php = "PHP",
    Pkr = "PKR",
    Pln = "PLN",
    Pyg = "PYG",
    Qar = "QAR",
    Ron = "RON",
    Rsd = "RSD",
    Rub = "RUB",
    Rwf = "RWF",
    Sar = "SAR",
    Sbd = "SBD",
    Scr = "SCR",
    Sdg = "SDG",
    Sek = "SEK",
    Sgd = "SGD",
    Shp = "SHP",
    Sll = "SLL",
    Sos = "SOS",
    Srd = "SRD",
    Ssp = "SSP",
    Stn = "STN",
    Syp = "SYP",
    Szl = "SZL",
    Thb = "THB",
    Tjs = "TJS",
    Tmt = "TMT",
    Tnd = "TND",
    Top = "TOP",
    Try = "TRY",
    Ttd = "TTD",
    Tvd = "TVD",
    Twd = "TWD",
    Tzs = "TZS",
    Uah = "UAH",
    Ugx = "UGX",
    Usd = "USD",
    Uyu = "UYU",
    Uzs = "UZS",
    Ves = "VES",
    Vnd = "VND",
    Vuv = "VUV",
    Wst = "WST",
    Xaf = "XAF",
    Xcd = "XCD",
    Xdr = "XDR",
    Xof = "XOF",
    Xpf = "XPF",
    Yer = "YER",
    Zar = "ZAR",
    Zmw = "ZMW",
    Zwl = "ZWL",
}

export enum GetOpportunitiesIdOpportunitiesResponse200ApplicationJSONResponseBodyUnifiedType {
    Home = "home",
    Work = "work",
    Other = "other",
}

export type GetOpportunitiesIdOpportunitiesResponseGeoLocation = {};

export type GetOpportunitiesIdOpportunitiesResponse200ApplicationJSONCustomFields = {};

export type GetOpportunitiesIdOpportunitiesResponseAddresses = {
    id?: string | undefined;
    contactId?: string | undefined;
    accountId?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    name?: string | undefined;
    companyName?: string | undefined;
    email?: string | undefined;
    phone?: string | undefined;
    street?: string | undefined;
    addressLine2?: string | undefined;
    city?: string | undefined;
    province?: string | undefined;
    region?: string | undefined;
    postalCode?: string | undefined;
    postalCodeExtension?: string | undefined;
    country?: string | undefined;
    countryCode?: string | undefined;
    type?:
        | GetOpportunitiesIdOpportunitiesResponse200ApplicationJSONResponseBodyUnifiedType
        | undefined;
    geoLocation?: GetOpportunitiesIdOpportunitiesResponseGeoLocation | undefined;
    customFields?:
        | Array<GetOpportunitiesIdOpportunitiesResponse200ApplicationJSONCustomFields>
        | undefined;
    subdivisionCode?: string | undefined;
};

export enum GetOpportunitiesIdOpportunitiesResponse200ApplicationJSONResponseBodyUnifiedAccountType {
    Home = "home",
    Work = "work",
    Other = "other",
}

export type GetOpportunitiesIdOpportunitiesGeoLocation = {
    latitude?: number | undefined;
    longitude?: number | undefined;
    altitude?: number | undefined;
    accuracy?: number | undefined;
    altitudeAccuracy?: number | undefined;
    heading?: number | undefined;
    speed?: number | undefined;
    timestamp?: number | undefined;
};

export enum GetOpportunitiesIdOpportunitiesFieldType {
    Text = "text",
    Number = "number",
    Date = "date",
    Boolean = "boolean",
    Enum = "enum",
    Json = "json",
    Array = "array",
}

export type GetOpportunitiesIdOpportunitiesResponse200CustomFields = {
    id?: string | undefined;
    fieldName?: string | undefined;
    fieldValue?: string | undefined;
    fieldType?: GetOpportunitiesIdOpportunitiesFieldType | undefined;
};

export type GetOpportunitiesIdDefaultAddress = {
    id?: string | undefined;
    contactId?: string | undefined;
    accountId?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    name?: string | undefined;
    companyName?: string | undefined;
    email?: string | undefined;
    phone?: string | undefined;
    street?: string | undefined;
    addressLine2?: string | undefined;
    city?: string | undefined;
    province?: string | undefined;
    region?: string | undefined;
    postalCode?: string | undefined;
    postalCodeExtension?: string | undefined;
    country?: string | undefined;
    countryCode?: string | undefined;
    type?:
        | GetOpportunitiesIdOpportunitiesResponse200ApplicationJSONResponseBodyUnifiedAccountType
        | undefined;
    geoLocation?: GetOpportunitiesIdOpportunitiesGeoLocation | undefined;
    customFields?: Array<GetOpportunitiesIdOpportunitiesResponse200CustomFields> | undefined;
    subdivisionCode?: string | undefined;
};

export enum GetOpportunitiesIdOpportunitiesResponse200ApplicationJSONStatus {
    Active = "active",
    Inactive = "inactive",
    Archived = "archived",
}

export enum GetOpportunitiesIdCustomerType {
    Retail = "retail",
    Wholesale = "wholesale",
}

export enum GetOpportunitiesIdPreferredContactMethod {
    Email = "email",
    Phone = "phone",
    Mail = "mail",
    Sms = "sms",
}

export enum GetOpportunitiesIdOpportunitiesResponse200ApplicationJSONResponseBodyUnifiedAccountOwnerType {
    Facebook = "facebook",
    Twitter = "twitter",
    Linkedin = "linkedin",
    Instagram = "instagram",
    Tiktok = "tiktok",
    Pinterest = "pinterest",
    Youtube = "youtube",
    Other = "other",
}

export type GetOpportunitiesIdOpportunitiesAdditionalInfo = {};

export type GetOpportunitiesIdOpportunitiesSocialProfiles = {
    type?:
        | GetOpportunitiesIdOpportunitiesResponse200ApplicationJSONResponseBodyUnifiedAccountOwnerType
        | undefined;
    username?: string | undefined;
    displayName?: string | undefined;
    url?: string | undefined;
    avatarUrl?: string | undefined;
    email?: string | undefined;
    additionalInfo?: GetOpportunitiesIdOpportunitiesAdditionalInfo | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    active?: boolean | undefined;
    deleted?: boolean | undefined;
};

export type GetOpportunitiesIdOpportunitiesOwner = {
    id?: string | undefined;
    title?: string | undefined;
    fullName?: string | undefined;
    firstName?: string | undefined;
    middleName?: string | undefined;
    lastName?: string | undefined;
    email?: string | undefined;
    phoneNumber?: string | undefined;
    dateOfBirth?: number | undefined;
    addresses?: Array<GetOpportunitiesIdOpportunitiesResponseAddresses> | undefined;
    defaultAddress?: GetOpportunitiesIdDefaultAddress | undefined;
    company?: string | undefined;
    companyId?: string | undefined;
    currency?: string | undefined;
    notes?: string | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    status?: GetOpportunitiesIdOpportunitiesResponse200ApplicationJSONStatus | undefined;
    customerSegment?: string | undefined;
    customerType?: GetOpportunitiesIdCustomerType | undefined;
    loyaltyProgramMembership?: string | undefined;
    preferredContactMethod?: GetOpportunitiesIdPreferredContactMethod | undefined;
    tags?: Array<string> | undefined;
    metadata?: string | undefined;
    socialProfiles?: Array<GetOpportunitiesIdOpportunitiesSocialProfiles> | undefined;
    source?: string | undefined;
};

export enum GetOpportunitiesIdOpportunitiesStatus {
    Active = "active",
    Closed = "closed",
    Frozen = "frozen",
    Suspended = "suspended",
}

export type GetOpportunitiesIdPaymentMethod = {};

export enum GetOpportunitiesIdOpportunitiesType {
    Deposit = "deposit",
    Withdrawal = "withdrawal",
    Transfer = "transfer",
    Fee = "fee",
    Refund = "refund",
}

export enum GetOpportunitiesIdOpportunitiesCurrency {
    Aed = "AED",
    Afn = "AFN",
    All = "ALL",
    Amd = "AMD",
    Ang = "ANG",
    Aoa = "AOA",
    Ars = "ARS",
    Aud = "AUD",
    Awg = "AWG",
    Azn = "AZN",
    Bam = "BAM",
    Bbd = "BBD",
    Bdt = "BDT",
    Bgn = "BGN",
    Bhd = "BHD",
    Bif = "BIF",
    Bmd = "BMD",
    Bnd = "BND",
    Bob = "BOB",
    Brl = "BRL",
    Bsd = "BSD",
    Btn = "BTN",
    Bwp = "BWP",
    Byn = "BYN",
    Bzd = "BZD",
    Cad = "CAD",
    Cdf = "CDF",
    Chf = "CHF",
    Clp = "CLP",
    Cny = "CNY",
    Cop = "COP",
    Crc = "CRC",
    Cuc = "CUC",
    Cup = "CUP",
    Cve = "CVE",
    Czk = "CZK",
    Djf = "DJF",
    Dkk = "DKK",
    Dop = "DOP",
    Dzd = "DZD",
    Egp = "EGP",
    Ern = "ERN",
    Etb = "ETB",
    Eur = "EUR",
    Fjd = "FJD",
    Fkp = "FKP",
    Fok = "FOK",
    Gbp = "GBP",
    Gel = "GEL",
    Ggp = "GGP",
    Ghs = "GHS",
    Gip = "GIP",
    Gmd = "GMD",
    Gnf = "GNF",
    Gtq = "GTQ",
    Gyd = "GYD",
    Hkd = "HKD",
    Hnl = "HNL",
    Hrk = "HRK",
    Htg = "HTG",
    Huf = "HUF",
    Idr = "IDR",
    Ils = "ILS",
    Imp = "IMP",
    Inr = "INR",
    Iqd = "IQD",
    Irr = "IRR",
    Isk = "ISK",
    Jep = "JEP",
    Jmd = "JMD",
    Jod = "JOD",
    Jpy = "JPY",
    Kes = "KES",
    Kgs = "KGS",
    Khr = "KHR",
    Kid = "KID",
    Kmf = "KMF",
    Kpw = "KPW",
    Krw = "KRW",
    Kwd = "KWD",
    Kyd = "KYD",
    Kzt = "KZT",
    Lak = "LAK",
    Lbp = "LBP",
    Lkr = "LKR",
    Lrd = "LRD",
    Lsl = "LSL",
    Lyd = "LYD",
    Mad = "MAD",
    Mdl = "MDL",
    Mga = "MGA",
    Mkd = "MKD",
    Mmk = "MMK",
    Mnt = "MNT",
    Mop = "MOP",
    Mru = "MRU",
    Mur = "MUR",
    Mvr = "MVR",
    Mwk = "MWK",
    Mxn = "MXN",
    Myr = "MYR",
    Mzn = "MZN",
    Nad = "NAD",
    Ngn = "NGN",
    Nio = "NIO",
    Nok = "NOK",
    Npr = "NPR",
    Nzd = "NZD",
    Omr = "OMR",
    Pab = "PAB",
    Pen = "PEN",
    Pgk = "PGK",
    Php = "PHP",
    Pkr = "PKR",
    Pln = "PLN",
    Pyg = "PYG",
    Qar = "QAR",
    Ron = "RON",
    Rsd = "RSD",
    Rub = "RUB",
    Rwf = "RWF",
    Sar = "SAR",
    Sbd = "SBD",
    Scr = "SCR",
    Sdg = "SDG",
    Sek = "SEK",
    Sgd = "SGD",
    Shp = "SHP",
    Sll = "SLL",
    Sos = "SOS",
    Srd = "SRD",
    Ssp = "SSP",
    Stn = "STN",
    Syp = "SYP",
    Szl = "SZL",
    Thb = "THB",
    Tjs = "TJS",
    Tmt = "TMT",
    Tnd = "TND",
    Top = "TOP",
    Try = "TRY",
    Ttd = "TTD",
    Tvd = "TVD",
    Twd = "TWD",
    Tzs = "TZS",
    Uah = "UAH",
    Ugx = "UGX",
    Usd = "USD",
    Uyu = "UYU",
    Uzs = "UZS",
    Ves = "VES",
    Vnd = "VND",
    Vuv = "VUV",
    Wst = "WST",
    Xaf = "XAF",
    Xcd = "XCD",
    Xdr = "XDR",
    Xof = "XOF",
    Xpf = "XPF",
    Yer = "YER",
    Zar = "ZAR",
    Zmw = "ZMW",
    Zwl = "ZWL",
}

export type GetOpportunitiesIdRecipient = {};

export type GetOpportunitiesIdSender = {};

export enum GetOpportunitiesIdTransactionCategory {
    Payment = "payment",
    Transfer = "transfer",
    Withdrawal = "withdrawal",
    Deposit = "deposit",
    Fee = "fee",
}

export enum GetOpportunitiesIdOpportunitiesResponse200Status {
    Pending = "pending",
    Cleared = "cleared",
    Cancelled = "cancelled",
    Failed = "failed",
}

export enum GetOpportunitiesIdTransactionMethod {
    Online = "online",
    Atm = "atm",
    BankBranch = "bank-branch",
    Mail = "mail",
    Mobile = "mobile",
    Telephone = "telephone",
}

export enum GetOpportunitiesIdTransactionType {
    Sale = "sale",
    Refund = "refund",
    ChargeBack = "charge-back",
}

export type GetOpportunitiesIdRefund = {};

export type GetOpportunitiesIdDispute = {};

export type GetOpportunitiesIdOpportunitiesMetadata = {};

export type GetOpportunitiesIdShipping = {};

export type GetOpportunitiesIdBillingDetails = {};

export type GetOpportunitiesIdTransactions = {
    id?: string | undefined;
    accountId?: string | undefined;
    invoiceId?: string | undefined;
    orderId?: string | undefined;
    paymentMethod?: GetOpportunitiesIdPaymentMethod | undefined;
    amount?: number | undefined;
    taxAmount?: number | undefined;
    type?: GetOpportunitiesIdOpportunitiesType | undefined;
    date?: number | undefined;
    currency?: GetOpportunitiesIdOpportunitiesCurrency | undefined;
    recipient?: GetOpportunitiesIdRecipient | undefined;
    sender?: GetOpportunitiesIdSender | undefined;
    description?: string | undefined;
    checkNumber?: string | undefined;
    transactionCategory?: GetOpportunitiesIdTransactionCategory | undefined;
    tags?: Array<string> | undefined;
    status?: GetOpportunitiesIdOpportunitiesResponse200Status | undefined;
    transactionMethod?: GetOpportunitiesIdTransactionMethod | undefined;
    transactionType?: GetOpportunitiesIdTransactionType | undefined;
    refund?: GetOpportunitiesIdRefund | undefined;
    dispute?: GetOpportunitiesIdDispute | undefined;
    metadata?: GetOpportunitiesIdOpportunitiesMetadata | undefined;
    exchangeRate?: number | undefined;
    shipping?: GetOpportunitiesIdShipping | undefined;
    billingDetails?: GetOpportunitiesIdBillingDetails | undefined;
    applicationFee?: number | undefined;
    paymentIntent?: string | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    deleted?: boolean | undefined;
};

export type GetOpportunitiesIdAccount = {
    id?: string | undefined;
    accountNumber?: string | undefined;
    accountType?: GetOpportunitiesIdAccountType | undefined;
    balance?: number | undefined;
    currency?: GetOpportunitiesIdCurrency | undefined;
    owner?: GetOpportunitiesIdOpportunitiesOwner | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    closedAt?: number | undefined;
    status?: GetOpportunitiesIdOpportunitiesStatus | undefined;
    transactions?: Array<GetOpportunitiesIdTransactions> | undefined;
    branch?: string | undefined;
    notes?: string | undefined;
    interestRate?: number | undefined;
    overdraftLimit?: number | undefined;
    overdraftProtection?: boolean | undefined;
    active?: boolean | undefined;
    deleted?: boolean | undefined;
};

export type GetOpportunitiesIdEmails = {};

export type GetOpportunitiesIdPhones = {};

export type GetOpportunitiesIdAddress = {};

export type GetOpportunitiesIdAddresses = {};

export type GetOpportunitiesIdNotes = {};

export type GetOpportunitiesIdSocialProfiles = {};

export type GetOpportunitiesIdOpportunitiesCustomFields = {};

export type GetOpportunitiesIdContacts = {
    id?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    leadId?: string | undefined;
    company?: string | undefined;
    defaultEmail?: string | undefined;
    emails?: Array<GetOpportunitiesIdEmails> | undefined;
    defaultPhone?: string | undefined;
    phones?: Array<GetOpportunitiesIdPhones> | undefined;
    address?: GetOpportunitiesIdAddress | undefined;
    addresses?: Array<GetOpportunitiesIdAddresses> | undefined;
    birthday?: number | undefined;
    relationship?: string | undefined;
    note?: string | undefined;
    notes?: GetOpportunitiesIdNotes | undefined;
    tags?: Array<string> | undefined;
    websites?: Array<string> | undefined;
    socialProfiles?: Array<GetOpportunitiesIdSocialProfiles> | undefined;
    isActive?: boolean | undefined;
    customFields?: Array<GetOpportunitiesIdOpportunitiesCustomFields> | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
};

export enum GetOpportunitiesIdMimeType {
    ImageJpeg = "image/jpeg",
    ImagePng = "image/png",
    ImageGif = "image/gif",
    ImageSvgPlusXml = "image/svg+xml",
    ImageWebp = "image/webp",
}

export type GetOpportunitiesIdProfilePicture = {
    id?: string | undefined;
    src?: string | undefined;
    altText?: string | undefined;
    width?: number | undefined;
    height?: number | undefined;
    thumbnailSrc?: string | undefined;
    caption?: string | undefined;
    title?: string | undefined;
    mimeType?: GetOpportunitiesIdMimeType | undefined;
    tags?: Array<string> | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    active?: boolean | undefined;
    deleted?: boolean | undefined;
};

export enum GetOpportunitiesIdOpportunitiesMimeType {
    ImageJpeg = "image/jpeg",
    ImagePng = "image/png",
    ImageGif = "image/gif",
    ImageSvgPlusXml = "image/svg+xml",
    ImageWebp = "image/webp",
}

export type GetOpportunitiesIdCoverPhoto = {
    id?: string | undefined;
    src?: string | undefined;
    altText?: string | undefined;
    width?: number | undefined;
    height?: number | undefined;
    thumbnailSrc?: string | undefined;
    caption?: string | undefined;
    title?: string | undefined;
    mimeType?: GetOpportunitiesIdOpportunitiesMimeType | undefined;
    tags?: Array<string> | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    active?: boolean | undefined;
    deleted?: boolean | undefined;
};

export enum GetOpportunitiesIdGender {
    Male = "Male",
    Female = "Female",
    Other = "Other",
    PreferNotToSay = "Prefer not to say",
}

export enum GetOpportunitiesIdOpportunitiesResponseType {
    Home = "home",
    Work = "work",
    Other = "other",
}

export type GetOpportunitiesIdGeoLocation = {};

export type GetOpportunitiesIdOpportunitiesResponseCustomFields = {};

export type GetOpportunitiesIdOpportunitiesAddresses = {
    id?: string | undefined;
    contactId?: string | undefined;
    accountId?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    name?: string | undefined;
    companyName?: string | undefined;
    email?: string | undefined;
    phone?: string | undefined;
    street?: string | undefined;
    addressLine2?: string | undefined;
    city?: string | undefined;
    province?: string | undefined;
    region?: string | undefined;
    postalCode?: string | undefined;
    postalCodeExtension?: string | undefined;
    country?: string | undefined;
    countryCode?: string | undefined;
    type?: GetOpportunitiesIdOpportunitiesResponseType | undefined;
    geoLocation?: GetOpportunitiesIdGeoLocation | undefined;
    customFields?: Array<GetOpportunitiesIdOpportunitiesResponseCustomFields> | undefined;
    subdivisionCode?: string | undefined;
};

export enum GetOpportunitiesIdRoles {
    User = "User",
    Admin = "Admin",
    Moderator = "Moderator",
}

export enum GetOpportunitiesIdCommunications {
    Email = "Email",
    Sms = "SMS",
    PushNotification = "PushNotification",
}

export type GetOpportunitiesIdPreferences = {
    id?: string | undefined;
    language?: string | undefined;
    currency?: string | undefined;
    timeZone?: string | undefined;
    communications?: GetOpportunitiesIdCommunications | undefined;
};

export enum GetOpportunitiesIdOpportunitiesResponse200Type {
    Facebook = "facebook",
    Twitter = "twitter",
    Linkedin = "linkedin",
    Instagram = "instagram",
    Tiktok = "tiktok",
    Pinterest = "pinterest",
    Youtube = "youtube",
    Other = "other",
}

export enum GetOpportunitiesIdOpportunitiesResponse200ApplicationJSONResponseBodyUnifiedOwnerType {
    String = "String",
    Number = "Number",
    Boolean = "Boolean",
    Date = "Date",
    Json = "Json",
    Array = "Array",
}

export type GetOpportunitiesIdAdditionalInfo = {
    id?: string | undefined;
    key?: string | undefined;
    value?: string | undefined;
    type?:
        | GetOpportunitiesIdOpportunitiesResponse200ApplicationJSONResponseBodyUnifiedOwnerType
        | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    entityId?: string | undefined;
    entityType?: string | undefined;
};

export type GetOpportunitiesIdSocialLinks = {
    type?: GetOpportunitiesIdOpportunitiesResponse200Type | undefined;
    username?: string | undefined;
    displayName?: string | undefined;
    url?: string | undefined;
    avatarUrl?: string | undefined;
    email?: string | undefined;
    additionalInfo?: GetOpportunitiesIdAdditionalInfo | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    active?: boolean | undefined;
    deleted?: boolean | undefined;
};

export enum GetOpportunitiesIdOpportunitiesResponseStatus {
    Pending = "Pending",
    Verified = "Verified",
    Suspended = "Suspended",
    Inactive = "Inactive",
}

export enum GetOpportunitiesIdProvider {
    Google = "Google",
    Facebook = "Facebook",
    Twitter = "Twitter",
    LinkedIn = "LinkedIn",
    Microsoft = "Microsoft",
    Apple = "Apple",
    Other = "Other",
}

export type GetOpportunitiesIdSso = {
    provider?: GetOpportunitiesIdProvider | undefined;
    providerUserId?: string | undefined;
    profileUrl?: string | undefined;
    accessToken?: string | undefined;
    refreshToken?: string | undefined;
    expiresIn?: number | undefined;
    expiryDate?: number | undefined;
    scopes?: Array<string> | undefined;
    tokenType?: string | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    active?: boolean | undefined;
    deleted?: boolean | undefined;
};

export enum GetOpportunitiesIdOpportunitiesResponse200ApplicationJSONType {
    CreditCard = "CreditCard",
    PayPal = "PayPal",
    BankTransfer = "BankTransfer",
    CryptoCurrency = "CryptoCurrency",
}

export type GetOpportunitiesIdPaymentMethods = {
    id?: string | undefined;
    type?: GetOpportunitiesIdOpportunitiesResponse200ApplicationJSONType | undefined;
    details?: string | undefined;
    isDefault?: boolean | undefined;
};

export type GetOpportunitiesIdOwner = {
    id?: string | undefined;
    firstName?: string | undefined;
    middleName?: string | undefined;
    lastName?: string | undefined;
    email?: string | undefined;
    username?: string | undefined;
    password?: string | undefined;
    profilePicture?: GetOpportunitiesIdProfilePicture | undefined;
    coverPhoto?: GetOpportunitiesIdCoverPhoto | undefined;
    gender?: GetOpportunitiesIdGender | undefined;
    dateOfBirth?: number | undefined;
    phoneNumber?: string | undefined;
    isActive?: boolean | undefined;
    lastLogin?: number | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    addresses?: Array<GetOpportunitiesIdOpportunitiesAddresses> | undefined;
    roles?: Array<GetOpportunitiesIdRoles> | undefined;
    preferences?: GetOpportunitiesIdPreferences | undefined;
    bio?: string | undefined;
    website?: string | undefined;
    socialLinks?: GetOpportunitiesIdSocialLinks | undefined;
    status?: GetOpportunitiesIdOpportunitiesResponseStatus | undefined;
    sso?: Array<GetOpportunitiesIdSso> | undefined;
    paymentMethods?: GetOpportunitiesIdPaymentMethods | undefined;
};

export type GetOpportunitiesIdMetadata = {};

export type GetOpportunitiesIdAssociatedWith = {};

export type GetOpportunitiesIdPermissions = {};

export type GetOpportunitiesIdAttachments = {
    id?: string | undefined;
    fileName?: string | undefined;
    fileSize?: number | undefined;
    fileType?: string | undefined;
    url?: string | undefined;
    thumbnailUrl?: string | undefined;
    previewUrl?: string | undefined;
    content?: string | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    metadata?: GetOpportunitiesIdMetadata | undefined;
    associatedWith?: GetOpportunitiesIdAssociatedWith | undefined;
    permissions?: GetOpportunitiesIdPermissions | undefined;
};

export enum GetOpportunitiesIdFieldType {
    Text = "text",
    Number = "number",
    Date = "date",
    Boolean = "boolean",
    Enum = "enum",
    Json = "json",
    Array = "array",
}

export type GetOpportunitiesIdCustomFields = {
    id?: string | undefined;
    fieldName?: string | undefined;
    fieldValue?: string | undefined;
    fieldType?: GetOpportunitiesIdFieldType | undefined;
};

export type GetOpportunitiesIdUnified = {
    id?: string | undefined;
    title?: string | undefined;
    description?: string | undefined;
    amount?: number | undefined;
    currency?: string | undefined;
    stage?: string | undefined;
    probability?: number | undefined;
    closeDate?: Date | undefined;
    type?: string | undefined;
    nextStep?: string | undefined;
    leadId?: string | undefined;
    leadSource?: string | undefined;
    isClosed?: boolean | undefined;
    isWon?: boolean | undefined;
    createdAt?: Date | undefined;
    updatedAt?: Date | undefined;
    lostReason?: string | undefined;
    campaign?: GetOpportunitiesIdCampaign | undefined;
    account?: GetOpportunitiesIdAccount | undefined;
    contacts?: Array<GetOpportunitiesIdContacts> | undefined;
    owner?: GetOpportunitiesIdOwner | undefined;
    attachments?: Array<GetOpportunitiesIdAttachments> | undefined;
    notes?: Array<string> | undefined;
    customFields?: Array<GetOpportunitiesIdCustomFields> | undefined;
};

export type GetOpportunitiesIdPassthrough = {};

export type GetOpportunitiesIdCache = {
    hit?: boolean | undefined;
    ttl?: number | undefined;
    key?: string | undefined;
};

export type GetOpportunitiesIdMeta = {
    timestamp?: number | undefined;
    latency?: number | undefined;
    platformRateLimitRemaining?: number | undefined;
    rateLimitRemaining?: number | undefined;
    cache?: GetOpportunitiesIdCache | undefined;
    transactionKey?: string | undefined;
    txn?: string | undefined;
    platform?: string | undefined;
    platformVersion?: string | undefined;
    connectionDefinitionKey?: string | undefined;
    action?: string | undefined;
    commonModel?: string | undefined;
    commonModelVersion?: string | undefined;
    connectionKey?: string | undefined;
    hash?: string | undefined;
    heartbeats?: Array<string> | undefined;
    totalTransactions?: number | undefined;
};

/**
 * Successful response
 */
export type GetOpportunitiesIdResponseBody = {
    status?: string | undefined;
    statusCode?: GetOpportunitiesIdStatusCode | undefined;
    unified?: GetOpportunitiesIdUnified | undefined;
    passthrough?: GetOpportunitiesIdPassthrough | undefined;
    meta?: GetOpportunitiesIdMeta | undefined;
};

export type GetOpportunitiesIdResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Successful response
     */
    object?: GetOpportunitiesIdResponseBody | undefined;
};

/** @internal */
export namespace GetOpportunitiesIdRequest$ {
    export type Inbound = {
        id: string;
        "X-INTEGRATIONOS-CONNECTION-KEY": string;
    };

    export const inboundSchema: z.ZodType<GetOpportunitiesIdRequest, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string(),
            "X-INTEGRATIONOS-CONNECTION-KEY": z.string(),
        })
        .transform((v) => {
            return {
                id: v.id,
                xIntegrationosConnectionKey: v["X-INTEGRATIONOS-CONNECTION-KEY"],
            };
        });

    export type Outbound = {
        id: string;
        "X-INTEGRATIONOS-CONNECTION-KEY": string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetOpportunitiesIdRequest> = z
        .object({
            id: z.string(),
            xIntegrationosConnectionKey: z.string(),
        })
        .transform((v) => {
            return {
                id: v.id,
                "X-INTEGRATIONOS-CONNECTION-KEY": v.xIntegrationosConnectionKey,
            };
        });
}

/** @internal */
export const GetOpportunitiesIdStatusCode$ = z.nativeEnum(GetOpportunitiesIdStatusCode);

/** @internal */
export const GetOpportunitiesIdType$ = z.nativeEnum(GetOpportunitiesIdType);

/** @internal */
export const GetOpportunitiesIdStatus$ = z.nativeEnum(GetOpportunitiesIdStatus);

/** @internal */
export namespace GetOpportunitiesIdPerformanceMetrics$ {
    export type Inbound = {
        impressions?: number | undefined;
        clicks?: number | undefined;
        conversions?: number | undefined;
        spend?: number | undefined;
        returnOnInvestment?: number | undefined;
        costPerClick?: number | undefined;
        costPerConversion?: number | undefined;
        conversionRate?: number | undefined;
    };

    export const inboundSchema: z.ZodType<
        GetOpportunitiesIdPerformanceMetrics,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            impressions: z.number().optional(),
            clicks: z.number().optional(),
            conversions: z.number().optional(),
            spend: z.number().optional(),
            returnOnInvestment: z.number().optional(),
            costPerClick: z.number().optional(),
            costPerConversion: z.number().optional(),
            conversionRate: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.impressions === undefined ? null : { impressions: v.impressions }),
                ...(v.clicks === undefined ? null : { clicks: v.clicks }),
                ...(v.conversions === undefined ? null : { conversions: v.conversions }),
                ...(v.spend === undefined ? null : { spend: v.spend }),
                ...(v.returnOnInvestment === undefined
                    ? null
                    : { returnOnInvestment: v.returnOnInvestment }),
                ...(v.costPerClick === undefined ? null : { costPerClick: v.costPerClick }),
                ...(v.costPerConversion === undefined
                    ? null
                    : { costPerConversion: v.costPerConversion }),
                ...(v.conversionRate === undefined ? null : { conversionRate: v.conversionRate }),
            };
        });

    export type Outbound = {
        impressions?: number | undefined;
        clicks?: number | undefined;
        conversions?: number | undefined;
        spend?: number | undefined;
        returnOnInvestment?: number | undefined;
        costPerClick?: number | undefined;
        costPerConversion?: number | undefined;
        conversionRate?: number | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetOpportunitiesIdPerformanceMetrics
    > = z
        .object({
            impressions: z.number().optional(),
            clicks: z.number().optional(),
            conversions: z.number().optional(),
            spend: z.number().optional(),
            returnOnInvestment: z.number().optional(),
            costPerClick: z.number().optional(),
            costPerConversion: z.number().optional(),
            conversionRate: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.impressions === undefined ? null : { impressions: v.impressions }),
                ...(v.clicks === undefined ? null : { clicks: v.clicks }),
                ...(v.conversions === undefined ? null : { conversions: v.conversions }),
                ...(v.spend === undefined ? null : { spend: v.spend }),
                ...(v.returnOnInvestment === undefined
                    ? null
                    : { returnOnInvestment: v.returnOnInvestment }),
                ...(v.costPerClick === undefined ? null : { costPerClick: v.costPerClick }),
                ...(v.costPerConversion === undefined
                    ? null
                    : { costPerConversion: v.costPerConversion }),
                ...(v.conversionRate === undefined ? null : { conversionRate: v.conversionRate }),
            };
        });
}

/** @internal */
export const GetOpportunitiesIdOpportunitiesResponse200ApplicationJSONResponseBodyType$ =
    z.nativeEnum(GetOpportunitiesIdOpportunitiesResponse200ApplicationJSONResponseBodyType);

/** @internal */
export namespace GetOpportunitiesIdOpportunitiesResponseMetadata$ {
    export type Inbound = {
        id?: string | undefined;
        key?: string | undefined;
        value?: string | undefined;
        type?:
            | GetOpportunitiesIdOpportunitiesResponse200ApplicationJSONResponseBodyType
            | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        entityId?: string | undefined;
        entityType?: string | undefined;
    };

    export const inboundSchema: z.ZodType<
        GetOpportunitiesIdOpportunitiesResponseMetadata,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            id: z.string().optional(),
            key: z.string().optional(),
            value: z.string().optional(),
            type: GetOpportunitiesIdOpportunitiesResponse200ApplicationJSONResponseBodyType$.optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            entityId: z.string().optional(),
            entityType: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.key === undefined ? null : { key: v.key }),
                ...(v.value === undefined ? null : { value: v.value }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.entityId === undefined ? null : { entityId: v.entityId }),
                ...(v.entityType === undefined ? null : { entityType: v.entityType }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        key?: string | undefined;
        value?: string | undefined;
        type?:
            | GetOpportunitiesIdOpportunitiesResponse200ApplicationJSONResponseBodyType
            | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        entityId?: string | undefined;
        entityType?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetOpportunitiesIdOpportunitiesResponseMetadata
    > = z
        .object({
            id: z.string().optional(),
            key: z.string().optional(),
            value: z.string().optional(),
            type: GetOpportunitiesIdOpportunitiesResponse200ApplicationJSONResponseBodyType$.optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            entityId: z.string().optional(),
            entityType: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.key === undefined ? null : { key: v.key }),
                ...(v.value === undefined ? null : { value: v.value }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.entityId === undefined ? null : { entityId: v.entityId }),
                ...(v.entityType === undefined ? null : { entityType: v.entityType }),
            };
        });
}

/** @internal */
export const GetOpportunitiesIdEntityType$ = z.nativeEnum(GetOpportunitiesIdEntityType);

/** @internal */
export namespace GetOpportunitiesIdOpportunitiesAssociatedWith$ {
    export type Inbound = {
        entityId?: string | undefined;
        entityType?: GetOpportunitiesIdEntityType | undefined;
        attributes?: Array<string> | undefined;
    };

    export const inboundSchema: z.ZodType<
        GetOpportunitiesIdOpportunitiesAssociatedWith,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            entityId: z.string().optional(),
            entityType: GetOpportunitiesIdEntityType$.optional(),
            attributes: z.array(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.entityId === undefined ? null : { entityId: v.entityId }),
                ...(v.entityType === undefined ? null : { entityType: v.entityType }),
                ...(v.attributes === undefined ? null : { attributes: v.attributes }),
            };
        });

    export type Outbound = {
        entityId?: string | undefined;
        entityType?: GetOpportunitiesIdEntityType | undefined;
        attributes?: Array<string> | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetOpportunitiesIdOpportunitiesAssociatedWith
    > = z
        .object({
            entityId: z.string().optional(),
            entityType: GetOpportunitiesIdEntityType$.optional(),
            attributes: z.array(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.entityId === undefined ? null : { entityId: v.entityId }),
                ...(v.entityType === undefined ? null : { entityType: v.entityType }),
                ...(v.attributes === undefined ? null : { attributes: v.attributes }),
            };
        });
}

/** @internal */
export const GetOpportunitiesIdAccessControlType$ = z.nativeEnum(
    GetOpportunitiesIdAccessControlType
);

/** @internal */
export const GetOpportunitiesIdOpportunitiesResponse200ApplicationJSONResponseBodyUnifiedCampaignType$ =
    z.nativeEnum(
        GetOpportunitiesIdOpportunitiesResponse200ApplicationJSONResponseBodyUnifiedCampaignType
    );

/** @internal */
export namespace GetOpportunitiesIdAssigneeDetails$ {
    export type Inbound = {
        identifier?: string | undefined;
        displayName?: string | undefined;
        type?:
            | GetOpportunitiesIdOpportunitiesResponse200ApplicationJSONResponseBodyUnifiedCampaignType
            | undefined;
    };

    export const inboundSchema: z.ZodType<
        GetOpportunitiesIdAssigneeDetails,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            identifier: z.string().optional(),
            displayName: z.string().optional(),
            type: GetOpportunitiesIdOpportunitiesResponse200ApplicationJSONResponseBodyUnifiedCampaignType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.identifier === undefined ? null : { identifier: v.identifier }),
                ...(v.displayName === undefined ? null : { displayName: v.displayName }),
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });

    export type Outbound = {
        identifier?: string | undefined;
        displayName?: string | undefined;
        type?:
            | GetOpportunitiesIdOpportunitiesResponse200ApplicationJSONResponseBodyUnifiedCampaignType
            | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetOpportunitiesIdAssigneeDetails
    > = z
        .object({
            identifier: z.string().optional(),
            displayName: z.string().optional(),
            type: GetOpportunitiesIdOpportunitiesResponse200ApplicationJSONResponseBodyUnifiedCampaignType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.identifier === undefined ? null : { identifier: v.identifier }),
                ...(v.displayName === undefined ? null : { displayName: v.displayName }),
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });
}

/** @internal */
export const GetOpportunitiesIdIdentifierType$ = z.nativeEnum(GetOpportunitiesIdIdentifierType);

/** @internal */
export namespace GetOpportunitiesIdOpportunitiesPermissions$ {
    export type Inbound = {
        canView?: Array<string> | undefined;
        canEdit?: Array<string> | undefined;
        canDelete?: Array<string> | undefined;
        roles?: Array<string> | undefined;
        accessControlType?: GetOpportunitiesIdAccessControlType | undefined;
        assigneeDetails?: GetOpportunitiesIdAssigneeDetails$.Inbound | undefined;
        identifierType?: GetOpportunitiesIdIdentifierType | undefined;
    };

    export const inboundSchema: z.ZodType<
        GetOpportunitiesIdOpportunitiesPermissions,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            canView: z.array(z.string()).optional(),
            canEdit: z.array(z.string()).optional(),
            canDelete: z.array(z.string()).optional(),
            roles: z.array(z.string()).optional(),
            accessControlType: GetOpportunitiesIdAccessControlType$.optional(),
            assigneeDetails: z
                .lazy(() => GetOpportunitiesIdAssigneeDetails$.inboundSchema)
                .optional(),
            identifierType: GetOpportunitiesIdIdentifierType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.canView === undefined ? null : { canView: v.canView }),
                ...(v.canEdit === undefined ? null : { canEdit: v.canEdit }),
                ...(v.canDelete === undefined ? null : { canDelete: v.canDelete }),
                ...(v.roles === undefined ? null : { roles: v.roles }),
                ...(v.accessControlType === undefined
                    ? null
                    : { accessControlType: v.accessControlType }),
                ...(v.assigneeDetails === undefined
                    ? null
                    : { assigneeDetails: v.assigneeDetails }),
                ...(v.identifierType === undefined ? null : { identifierType: v.identifierType }),
            };
        });

    export type Outbound = {
        canView?: Array<string> | undefined;
        canEdit?: Array<string> | undefined;
        canDelete?: Array<string> | undefined;
        roles?: Array<string> | undefined;
        accessControlType?: GetOpportunitiesIdAccessControlType | undefined;
        assigneeDetails?: GetOpportunitiesIdAssigneeDetails$.Outbound | undefined;
        identifierType?: GetOpportunitiesIdIdentifierType | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetOpportunitiesIdOpportunitiesPermissions
    > = z
        .object({
            canView: z.array(z.string()).optional(),
            canEdit: z.array(z.string()).optional(),
            canDelete: z.array(z.string()).optional(),
            roles: z.array(z.string()).optional(),
            accessControlType: GetOpportunitiesIdAccessControlType$.optional(),
            assigneeDetails: z
                .lazy(() => GetOpportunitiesIdAssigneeDetails$.outboundSchema)
                .optional(),
            identifierType: GetOpportunitiesIdIdentifierType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.canView === undefined ? null : { canView: v.canView }),
                ...(v.canEdit === undefined ? null : { canEdit: v.canEdit }),
                ...(v.canDelete === undefined ? null : { canDelete: v.canDelete }),
                ...(v.roles === undefined ? null : { roles: v.roles }),
                ...(v.accessControlType === undefined
                    ? null
                    : { accessControlType: v.accessControlType }),
                ...(v.assigneeDetails === undefined
                    ? null
                    : { assigneeDetails: v.assigneeDetails }),
                ...(v.identifierType === undefined ? null : { identifierType: v.identifierType }),
            };
        });
}

/** @internal */
export namespace GetOpportunitiesIdCreativeAssets$ {
    export type Inbound = {
        id?: string | undefined;
        fileName?: string | undefined;
        fileSize?: number | undefined;
        fileType?: string | undefined;
        url?: string | undefined;
        thumbnailUrl?: string | undefined;
        previewUrl?: string | undefined;
        content?: string | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        metadata?: GetOpportunitiesIdOpportunitiesResponseMetadata$.Inbound | undefined;
        associatedWith?: GetOpportunitiesIdOpportunitiesAssociatedWith$.Inbound | undefined;
        permissions?: GetOpportunitiesIdOpportunitiesPermissions$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<GetOpportunitiesIdCreativeAssets, z.ZodTypeDef, Inbound> =
        z
            .object({
                id: z.string().optional(),
                fileName: z.string().optional(),
                fileSize: z.number().optional(),
                fileType: z.string().optional(),
                url: z.string().optional(),
                thumbnailUrl: z.string().optional(),
                previewUrl: z.string().optional(),
                content: z.string().optional(),
                createdAt: z.number().optional(),
                updatedAt: z.number().optional(),
                metadata: z
                    .lazy(() => GetOpportunitiesIdOpportunitiesResponseMetadata$.inboundSchema)
                    .optional(),
                associatedWith: z
                    .lazy(() => GetOpportunitiesIdOpportunitiesAssociatedWith$.inboundSchema)
                    .optional(),
                permissions: z
                    .lazy(() => GetOpportunitiesIdOpportunitiesPermissions$.inboundSchema)
                    .optional(),
            })
            .transform((v) => {
                return {
                    ...(v.id === undefined ? null : { id: v.id }),
                    ...(v.fileName === undefined ? null : { fileName: v.fileName }),
                    ...(v.fileSize === undefined ? null : { fileSize: v.fileSize }),
                    ...(v.fileType === undefined ? null : { fileType: v.fileType }),
                    ...(v.url === undefined ? null : { url: v.url }),
                    ...(v.thumbnailUrl === undefined ? null : { thumbnailUrl: v.thumbnailUrl }),
                    ...(v.previewUrl === undefined ? null : { previewUrl: v.previewUrl }),
                    ...(v.content === undefined ? null : { content: v.content }),
                    ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                    ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                    ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                    ...(v.associatedWith === undefined
                        ? null
                        : { associatedWith: v.associatedWith }),
                    ...(v.permissions === undefined ? null : { permissions: v.permissions }),
                };
            });

    export type Outbound = {
        id?: string | undefined;
        fileName?: string | undefined;
        fileSize?: number | undefined;
        fileType?: string | undefined;
        url?: string | undefined;
        thumbnailUrl?: string | undefined;
        previewUrl?: string | undefined;
        content?: string | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        metadata?: GetOpportunitiesIdOpportunitiesResponseMetadata$.Outbound | undefined;
        associatedWith?: GetOpportunitiesIdOpportunitiesAssociatedWith$.Outbound | undefined;
        permissions?: GetOpportunitiesIdOpportunitiesPermissions$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetOpportunitiesIdCreativeAssets
    > = z
        .object({
            id: z.string().optional(),
            fileName: z.string().optional(),
            fileSize: z.number().optional(),
            fileType: z.string().optional(),
            url: z.string().optional(),
            thumbnailUrl: z.string().optional(),
            previewUrl: z.string().optional(),
            content: z.string().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            metadata: z
                .lazy(() => GetOpportunitiesIdOpportunitiesResponseMetadata$.outboundSchema)
                .optional(),
            associatedWith: z
                .lazy(() => GetOpportunitiesIdOpportunitiesAssociatedWith$.outboundSchema)
                .optional(),
            permissions: z
                .lazy(() => GetOpportunitiesIdOpportunitiesPermissions$.outboundSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fileName === undefined ? null : { fileName: v.fileName }),
                ...(v.fileSize === undefined ? null : { fileSize: v.fileSize }),
                ...(v.fileType === undefined ? null : { fileType: v.fileType }),
                ...(v.url === undefined ? null : { url: v.url }),
                ...(v.thumbnailUrl === undefined ? null : { thumbnailUrl: v.thumbnailUrl }),
                ...(v.previewUrl === undefined ? null : { previewUrl: v.previewUrl }),
                ...(v.content === undefined ? null : { content: v.content }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                ...(v.associatedWith === undefined ? null : { associatedWith: v.associatedWith }),
                ...(v.permissions === undefined ? null : { permissions: v.permissions }),
            };
        });
}

/** @internal */
export namespace GetOpportunitiesIdCampaign$ {
    export type Inbound = {
        id?: string | undefined;
        name?: string | undefined;
        type?: GetOpportunitiesIdType | undefined;
        status?: GetOpportunitiesIdStatus | undefined;
        startDate?: number | undefined;
        endDate?: number | undefined;
        budget?: number | undefined;
        targetAudience?: string | undefined;
        channels?: Array<string> | undefined;
        performanceMetrics?: GetOpportunitiesIdPerformanceMetrics$.Inbound | undefined;
        creativeAssets?: GetOpportunitiesIdCreativeAssets$.Inbound | undefined;
        tags?: Array<string> | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<GetOpportunitiesIdCampaign, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            name: z.string().optional(),
            type: GetOpportunitiesIdType$.optional(),
            status: GetOpportunitiesIdStatus$.optional(),
            startDate: z.number().optional(),
            endDate: z.number().optional(),
            budget: z.number().optional(),
            targetAudience: z.string().optional(),
            channels: z.array(z.string()).optional(),
            performanceMetrics: z
                .lazy(() => GetOpportunitiesIdPerformanceMetrics$.inboundSchema)
                .optional(),
            creativeAssets: z
                .lazy(() => GetOpportunitiesIdCreativeAssets$.inboundSchema)
                .optional(),
            tags: z.array(z.string()).optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.startDate === undefined ? null : { startDate: v.startDate }),
                ...(v.endDate === undefined ? null : { endDate: v.endDate }),
                ...(v.budget === undefined ? null : { budget: v.budget }),
                ...(v.targetAudience === undefined ? null : { targetAudience: v.targetAudience }),
                ...(v.channels === undefined ? null : { channels: v.channels }),
                ...(v.performanceMetrics === undefined
                    ? null
                    : { performanceMetrics: v.performanceMetrics }),
                ...(v.creativeAssets === undefined ? null : { creativeAssets: v.creativeAssets }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        name?: string | undefined;
        type?: GetOpportunitiesIdType | undefined;
        status?: GetOpportunitiesIdStatus | undefined;
        startDate?: number | undefined;
        endDate?: number | undefined;
        budget?: number | undefined;
        targetAudience?: string | undefined;
        channels?: Array<string> | undefined;
        performanceMetrics?: GetOpportunitiesIdPerformanceMetrics$.Outbound | undefined;
        creativeAssets?: GetOpportunitiesIdCreativeAssets$.Outbound | undefined;
        tags?: Array<string> | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetOpportunitiesIdCampaign> = z
        .object({
            id: z.string().optional(),
            name: z.string().optional(),
            type: GetOpportunitiesIdType$.optional(),
            status: GetOpportunitiesIdStatus$.optional(),
            startDate: z.number().optional(),
            endDate: z.number().optional(),
            budget: z.number().optional(),
            targetAudience: z.string().optional(),
            channels: z.array(z.string()).optional(),
            performanceMetrics: z
                .lazy(() => GetOpportunitiesIdPerformanceMetrics$.outboundSchema)
                .optional(),
            creativeAssets: z
                .lazy(() => GetOpportunitiesIdCreativeAssets$.outboundSchema)
                .optional(),
            tags: z.array(z.string()).optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.startDate === undefined ? null : { startDate: v.startDate }),
                ...(v.endDate === undefined ? null : { endDate: v.endDate }),
                ...(v.budget === undefined ? null : { budget: v.budget }),
                ...(v.targetAudience === undefined ? null : { targetAudience: v.targetAudience }),
                ...(v.channels === undefined ? null : { channels: v.channels }),
                ...(v.performanceMetrics === undefined
                    ? null
                    : { performanceMetrics: v.performanceMetrics }),
                ...(v.creativeAssets === undefined ? null : { creativeAssets: v.creativeAssets }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });
}

/** @internal */
export const GetOpportunitiesIdAccountType$ = z.nativeEnum(GetOpportunitiesIdAccountType);

/** @internal */
export const GetOpportunitiesIdCurrency$ = z.nativeEnum(GetOpportunitiesIdCurrency);

/** @internal */
export const GetOpportunitiesIdOpportunitiesResponse200ApplicationJSONResponseBodyUnifiedType$ =
    z.nativeEnum(GetOpportunitiesIdOpportunitiesResponse200ApplicationJSONResponseBodyUnifiedType);

/** @internal */
export namespace GetOpportunitiesIdOpportunitiesResponseGeoLocation$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<
        GetOpportunitiesIdOpportunitiesResponseGeoLocation,
        z.ZodTypeDef,
        Inbound
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetOpportunitiesIdOpportunitiesResponseGeoLocation
    > = z.object({});
}

/** @internal */
export namespace GetOpportunitiesIdOpportunitiesResponse200ApplicationJSONCustomFields$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<
        GetOpportunitiesIdOpportunitiesResponse200ApplicationJSONCustomFields,
        z.ZodTypeDef,
        Inbound
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetOpportunitiesIdOpportunitiesResponse200ApplicationJSONCustomFields
    > = z.object({});
}

/** @internal */
export namespace GetOpportunitiesIdOpportunitiesResponseAddresses$ {
    export type Inbound = {
        id?: string | undefined;
        contactId?: string | undefined;
        accountId?: string | undefined;
        firstName?: string | undefined;
        lastName?: string | undefined;
        name?: string | undefined;
        companyName?: string | undefined;
        email?: string | undefined;
        phone?: string | undefined;
        street?: string | undefined;
        addressLine2?: string | undefined;
        city?: string | undefined;
        province?: string | undefined;
        region?: string | undefined;
        postalCode?: string | undefined;
        postalCodeExtension?: string | undefined;
        country?: string | undefined;
        countryCode?: string | undefined;
        type?:
            | GetOpportunitiesIdOpportunitiesResponse200ApplicationJSONResponseBodyUnifiedType
            | undefined;
        geoLocation?: GetOpportunitiesIdOpportunitiesResponseGeoLocation$.Inbound | undefined;
        customFields?:
            | Array<GetOpportunitiesIdOpportunitiesResponse200ApplicationJSONCustomFields$.Inbound>
            | undefined;
        subdivisionCode?: string | undefined;
    };

    export const inboundSchema: z.ZodType<
        GetOpportunitiesIdOpportunitiesResponseAddresses,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            id: z.string().optional(),
            contactId: z.string().optional(),
            accountId: z.string().optional(),
            firstName: z.string().optional(),
            lastName: z.string().optional(),
            name: z.string().optional(),
            companyName: z.string().optional(),
            email: z.string().optional(),
            phone: z.string().optional(),
            street: z.string().optional(),
            addressLine2: z.string().optional(),
            city: z.string().optional(),
            province: z.string().optional(),
            region: z.string().optional(),
            postalCode: z.string().optional(),
            postalCodeExtension: z.string().optional(),
            country: z.string().optional(),
            countryCode: z.string().optional(),
            type: GetOpportunitiesIdOpportunitiesResponse200ApplicationJSONResponseBodyUnifiedType$.optional(),
            geoLocation: z
                .lazy(() => GetOpportunitiesIdOpportunitiesResponseGeoLocation$.inboundSchema)
                .optional(),
            customFields: z
                .array(
                    z.lazy(
                        () =>
                            GetOpportunitiesIdOpportunitiesResponse200ApplicationJSONCustomFields$.inboundSchema
                    )
                )
                .optional(),
            subdivisionCode: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.contactId === undefined ? null : { contactId: v.contactId }),
                ...(v.accountId === undefined ? null : { accountId: v.accountId }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.companyName === undefined ? null : { companyName: v.companyName }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.phone === undefined ? null : { phone: v.phone }),
                ...(v.street === undefined ? null : { street: v.street }),
                ...(v.addressLine2 === undefined ? null : { addressLine2: v.addressLine2 }),
                ...(v.city === undefined ? null : { city: v.city }),
                ...(v.province === undefined ? null : { province: v.province }),
                ...(v.region === undefined ? null : { region: v.region }),
                ...(v.postalCode === undefined ? null : { postalCode: v.postalCode }),
                ...(v.postalCodeExtension === undefined
                    ? null
                    : { postalCodeExtension: v.postalCodeExtension }),
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.countryCode === undefined ? null : { countryCode: v.countryCode }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.geoLocation === undefined ? null : { geoLocation: v.geoLocation }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                ...(v.subdivisionCode === undefined
                    ? null
                    : { subdivisionCode: v.subdivisionCode }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        contactId?: string | undefined;
        accountId?: string | undefined;
        firstName?: string | undefined;
        lastName?: string | undefined;
        name?: string | undefined;
        companyName?: string | undefined;
        email?: string | undefined;
        phone?: string | undefined;
        street?: string | undefined;
        addressLine2?: string | undefined;
        city?: string | undefined;
        province?: string | undefined;
        region?: string | undefined;
        postalCode?: string | undefined;
        postalCodeExtension?: string | undefined;
        country?: string | undefined;
        countryCode?: string | undefined;
        type?:
            | GetOpportunitiesIdOpportunitiesResponse200ApplicationJSONResponseBodyUnifiedType
            | undefined;
        geoLocation?: GetOpportunitiesIdOpportunitiesResponseGeoLocation$.Outbound | undefined;
        customFields?:
            | Array<GetOpportunitiesIdOpportunitiesResponse200ApplicationJSONCustomFields$.Outbound>
            | undefined;
        subdivisionCode?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetOpportunitiesIdOpportunitiesResponseAddresses
    > = z
        .object({
            id: z.string().optional(),
            contactId: z.string().optional(),
            accountId: z.string().optional(),
            firstName: z.string().optional(),
            lastName: z.string().optional(),
            name: z.string().optional(),
            companyName: z.string().optional(),
            email: z.string().optional(),
            phone: z.string().optional(),
            street: z.string().optional(),
            addressLine2: z.string().optional(),
            city: z.string().optional(),
            province: z.string().optional(),
            region: z.string().optional(),
            postalCode: z.string().optional(),
            postalCodeExtension: z.string().optional(),
            country: z.string().optional(),
            countryCode: z.string().optional(),
            type: GetOpportunitiesIdOpportunitiesResponse200ApplicationJSONResponseBodyUnifiedType$.optional(),
            geoLocation: z
                .lazy(() => GetOpportunitiesIdOpportunitiesResponseGeoLocation$.outboundSchema)
                .optional(),
            customFields: z
                .array(
                    z.lazy(
                        () =>
                            GetOpportunitiesIdOpportunitiesResponse200ApplicationJSONCustomFields$.outboundSchema
                    )
                )
                .optional(),
            subdivisionCode: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.contactId === undefined ? null : { contactId: v.contactId }),
                ...(v.accountId === undefined ? null : { accountId: v.accountId }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.companyName === undefined ? null : { companyName: v.companyName }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.phone === undefined ? null : { phone: v.phone }),
                ...(v.street === undefined ? null : { street: v.street }),
                ...(v.addressLine2 === undefined ? null : { addressLine2: v.addressLine2 }),
                ...(v.city === undefined ? null : { city: v.city }),
                ...(v.province === undefined ? null : { province: v.province }),
                ...(v.region === undefined ? null : { region: v.region }),
                ...(v.postalCode === undefined ? null : { postalCode: v.postalCode }),
                ...(v.postalCodeExtension === undefined
                    ? null
                    : { postalCodeExtension: v.postalCodeExtension }),
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.countryCode === undefined ? null : { countryCode: v.countryCode }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.geoLocation === undefined ? null : { geoLocation: v.geoLocation }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                ...(v.subdivisionCode === undefined
                    ? null
                    : { subdivisionCode: v.subdivisionCode }),
            };
        });
}

/** @internal */
export const GetOpportunitiesIdOpportunitiesResponse200ApplicationJSONResponseBodyUnifiedAccountType$ =
    z.nativeEnum(
        GetOpportunitiesIdOpportunitiesResponse200ApplicationJSONResponseBodyUnifiedAccountType
    );

/** @internal */
export namespace GetOpportunitiesIdOpportunitiesGeoLocation$ {
    export type Inbound = {
        latitude?: number | undefined;
        longitude?: number | undefined;
        altitude?: number | undefined;
        accuracy?: number | undefined;
        altitudeAccuracy?: number | undefined;
        heading?: number | undefined;
        speed?: number | undefined;
        timestamp?: number | undefined;
    };

    export const inboundSchema: z.ZodType<
        GetOpportunitiesIdOpportunitiesGeoLocation,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            latitude: z.number().optional(),
            longitude: z.number().optional(),
            altitude: z.number().optional(),
            accuracy: z.number().optional(),
            altitudeAccuracy: z.number().optional(),
            heading: z.number().optional(),
            speed: z.number().optional(),
            timestamp: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.latitude === undefined ? null : { latitude: v.latitude }),
                ...(v.longitude === undefined ? null : { longitude: v.longitude }),
                ...(v.altitude === undefined ? null : { altitude: v.altitude }),
                ...(v.accuracy === undefined ? null : { accuracy: v.accuracy }),
                ...(v.altitudeAccuracy === undefined
                    ? null
                    : { altitudeAccuracy: v.altitudeAccuracy }),
                ...(v.heading === undefined ? null : { heading: v.heading }),
                ...(v.speed === undefined ? null : { speed: v.speed }),
                ...(v.timestamp === undefined ? null : { timestamp: v.timestamp }),
            };
        });

    export type Outbound = {
        latitude?: number | undefined;
        longitude?: number | undefined;
        altitude?: number | undefined;
        accuracy?: number | undefined;
        altitudeAccuracy?: number | undefined;
        heading?: number | undefined;
        speed?: number | undefined;
        timestamp?: number | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetOpportunitiesIdOpportunitiesGeoLocation
    > = z
        .object({
            latitude: z.number().optional(),
            longitude: z.number().optional(),
            altitude: z.number().optional(),
            accuracy: z.number().optional(),
            altitudeAccuracy: z.number().optional(),
            heading: z.number().optional(),
            speed: z.number().optional(),
            timestamp: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.latitude === undefined ? null : { latitude: v.latitude }),
                ...(v.longitude === undefined ? null : { longitude: v.longitude }),
                ...(v.altitude === undefined ? null : { altitude: v.altitude }),
                ...(v.accuracy === undefined ? null : { accuracy: v.accuracy }),
                ...(v.altitudeAccuracy === undefined
                    ? null
                    : { altitudeAccuracy: v.altitudeAccuracy }),
                ...(v.heading === undefined ? null : { heading: v.heading }),
                ...(v.speed === undefined ? null : { speed: v.speed }),
                ...(v.timestamp === undefined ? null : { timestamp: v.timestamp }),
            };
        });
}

/** @internal */
export const GetOpportunitiesIdOpportunitiesFieldType$ = z.nativeEnum(
    GetOpportunitiesIdOpportunitiesFieldType
);

/** @internal */
export namespace GetOpportunitiesIdOpportunitiesResponse200CustomFields$ {
    export type Inbound = {
        id?: string | undefined;
        fieldName?: string | undefined;
        fieldValue?: string | undefined;
        fieldType?: GetOpportunitiesIdOpportunitiesFieldType | undefined;
    };

    export const inboundSchema: z.ZodType<
        GetOpportunitiesIdOpportunitiesResponse200CustomFields,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            id: z.string().optional(),
            fieldName: z.string().optional(),
            fieldValue: z.string().optional(),
            fieldType: GetOpportunitiesIdOpportunitiesFieldType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fieldName === undefined ? null : { fieldName: v.fieldName }),
                ...(v.fieldValue === undefined ? null : { fieldValue: v.fieldValue }),
                ...(v.fieldType === undefined ? null : { fieldType: v.fieldType }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        fieldName?: string | undefined;
        fieldValue?: string | undefined;
        fieldType?: GetOpportunitiesIdOpportunitiesFieldType | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetOpportunitiesIdOpportunitiesResponse200CustomFields
    > = z
        .object({
            id: z.string().optional(),
            fieldName: z.string().optional(),
            fieldValue: z.string().optional(),
            fieldType: GetOpportunitiesIdOpportunitiesFieldType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fieldName === undefined ? null : { fieldName: v.fieldName }),
                ...(v.fieldValue === undefined ? null : { fieldValue: v.fieldValue }),
                ...(v.fieldType === undefined ? null : { fieldType: v.fieldType }),
            };
        });
}

/** @internal */
export namespace GetOpportunitiesIdDefaultAddress$ {
    export type Inbound = {
        id?: string | undefined;
        contactId?: string | undefined;
        accountId?: string | undefined;
        firstName?: string | undefined;
        lastName?: string | undefined;
        name?: string | undefined;
        companyName?: string | undefined;
        email?: string | undefined;
        phone?: string | undefined;
        street?: string | undefined;
        addressLine2?: string | undefined;
        city?: string | undefined;
        province?: string | undefined;
        region?: string | undefined;
        postalCode?: string | undefined;
        postalCodeExtension?: string | undefined;
        country?: string | undefined;
        countryCode?: string | undefined;
        type?:
            | GetOpportunitiesIdOpportunitiesResponse200ApplicationJSONResponseBodyUnifiedAccountType
            | undefined;
        geoLocation?: GetOpportunitiesIdOpportunitiesGeoLocation$.Inbound | undefined;
        customFields?:
            | Array<GetOpportunitiesIdOpportunitiesResponse200CustomFields$.Inbound>
            | undefined;
        subdivisionCode?: string | undefined;
    };

    export const inboundSchema: z.ZodType<GetOpportunitiesIdDefaultAddress, z.ZodTypeDef, Inbound> =
        z
            .object({
                id: z.string().optional(),
                contactId: z.string().optional(),
                accountId: z.string().optional(),
                firstName: z.string().optional(),
                lastName: z.string().optional(),
                name: z.string().optional(),
                companyName: z.string().optional(),
                email: z.string().optional(),
                phone: z.string().optional(),
                street: z.string().optional(),
                addressLine2: z.string().optional(),
                city: z.string().optional(),
                province: z.string().optional(),
                region: z.string().optional(),
                postalCode: z.string().optional(),
                postalCodeExtension: z.string().optional(),
                country: z.string().optional(),
                countryCode: z.string().optional(),
                type: GetOpportunitiesIdOpportunitiesResponse200ApplicationJSONResponseBodyUnifiedAccountType$.optional(),
                geoLocation: z
                    .lazy(() => GetOpportunitiesIdOpportunitiesGeoLocation$.inboundSchema)
                    .optional(),
                customFields: z
                    .array(
                        z.lazy(
                            () =>
                                GetOpportunitiesIdOpportunitiesResponse200CustomFields$.inboundSchema
                        )
                    )
                    .optional(),
                subdivisionCode: z.string().optional(),
            })
            .transform((v) => {
                return {
                    ...(v.id === undefined ? null : { id: v.id }),
                    ...(v.contactId === undefined ? null : { contactId: v.contactId }),
                    ...(v.accountId === undefined ? null : { accountId: v.accountId }),
                    ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                    ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                    ...(v.name === undefined ? null : { name: v.name }),
                    ...(v.companyName === undefined ? null : { companyName: v.companyName }),
                    ...(v.email === undefined ? null : { email: v.email }),
                    ...(v.phone === undefined ? null : { phone: v.phone }),
                    ...(v.street === undefined ? null : { street: v.street }),
                    ...(v.addressLine2 === undefined ? null : { addressLine2: v.addressLine2 }),
                    ...(v.city === undefined ? null : { city: v.city }),
                    ...(v.province === undefined ? null : { province: v.province }),
                    ...(v.region === undefined ? null : { region: v.region }),
                    ...(v.postalCode === undefined ? null : { postalCode: v.postalCode }),
                    ...(v.postalCodeExtension === undefined
                        ? null
                        : { postalCodeExtension: v.postalCodeExtension }),
                    ...(v.country === undefined ? null : { country: v.country }),
                    ...(v.countryCode === undefined ? null : { countryCode: v.countryCode }),
                    ...(v.type === undefined ? null : { type: v.type }),
                    ...(v.geoLocation === undefined ? null : { geoLocation: v.geoLocation }),
                    ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                    ...(v.subdivisionCode === undefined
                        ? null
                        : { subdivisionCode: v.subdivisionCode }),
                };
            });

    export type Outbound = {
        id?: string | undefined;
        contactId?: string | undefined;
        accountId?: string | undefined;
        firstName?: string | undefined;
        lastName?: string | undefined;
        name?: string | undefined;
        companyName?: string | undefined;
        email?: string | undefined;
        phone?: string | undefined;
        street?: string | undefined;
        addressLine2?: string | undefined;
        city?: string | undefined;
        province?: string | undefined;
        region?: string | undefined;
        postalCode?: string | undefined;
        postalCodeExtension?: string | undefined;
        country?: string | undefined;
        countryCode?: string | undefined;
        type?:
            | GetOpportunitiesIdOpportunitiesResponse200ApplicationJSONResponseBodyUnifiedAccountType
            | undefined;
        geoLocation?: GetOpportunitiesIdOpportunitiesGeoLocation$.Outbound | undefined;
        customFields?:
            | Array<GetOpportunitiesIdOpportunitiesResponse200CustomFields$.Outbound>
            | undefined;
        subdivisionCode?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetOpportunitiesIdDefaultAddress
    > = z
        .object({
            id: z.string().optional(),
            contactId: z.string().optional(),
            accountId: z.string().optional(),
            firstName: z.string().optional(),
            lastName: z.string().optional(),
            name: z.string().optional(),
            companyName: z.string().optional(),
            email: z.string().optional(),
            phone: z.string().optional(),
            street: z.string().optional(),
            addressLine2: z.string().optional(),
            city: z.string().optional(),
            province: z.string().optional(),
            region: z.string().optional(),
            postalCode: z.string().optional(),
            postalCodeExtension: z.string().optional(),
            country: z.string().optional(),
            countryCode: z.string().optional(),
            type: GetOpportunitiesIdOpportunitiesResponse200ApplicationJSONResponseBodyUnifiedAccountType$.optional(),
            geoLocation: z
                .lazy(() => GetOpportunitiesIdOpportunitiesGeoLocation$.outboundSchema)
                .optional(),
            customFields: z
                .array(
                    z.lazy(
                        () => GetOpportunitiesIdOpportunitiesResponse200CustomFields$.outboundSchema
                    )
                )
                .optional(),
            subdivisionCode: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.contactId === undefined ? null : { contactId: v.contactId }),
                ...(v.accountId === undefined ? null : { accountId: v.accountId }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.companyName === undefined ? null : { companyName: v.companyName }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.phone === undefined ? null : { phone: v.phone }),
                ...(v.street === undefined ? null : { street: v.street }),
                ...(v.addressLine2 === undefined ? null : { addressLine2: v.addressLine2 }),
                ...(v.city === undefined ? null : { city: v.city }),
                ...(v.province === undefined ? null : { province: v.province }),
                ...(v.region === undefined ? null : { region: v.region }),
                ...(v.postalCode === undefined ? null : { postalCode: v.postalCode }),
                ...(v.postalCodeExtension === undefined
                    ? null
                    : { postalCodeExtension: v.postalCodeExtension }),
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.countryCode === undefined ? null : { countryCode: v.countryCode }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.geoLocation === undefined ? null : { geoLocation: v.geoLocation }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                ...(v.subdivisionCode === undefined
                    ? null
                    : { subdivisionCode: v.subdivisionCode }),
            };
        });
}

/** @internal */
export const GetOpportunitiesIdOpportunitiesResponse200ApplicationJSONStatus$ = z.nativeEnum(
    GetOpportunitiesIdOpportunitiesResponse200ApplicationJSONStatus
);

/** @internal */
export const GetOpportunitiesIdCustomerType$ = z.nativeEnum(GetOpportunitiesIdCustomerType);

/** @internal */
export const GetOpportunitiesIdPreferredContactMethod$ = z.nativeEnum(
    GetOpportunitiesIdPreferredContactMethod
);

/** @internal */
export const GetOpportunitiesIdOpportunitiesResponse200ApplicationJSONResponseBodyUnifiedAccountOwnerType$ =
    z.nativeEnum(
        GetOpportunitiesIdOpportunitiesResponse200ApplicationJSONResponseBodyUnifiedAccountOwnerType
    );

/** @internal */
export namespace GetOpportunitiesIdOpportunitiesAdditionalInfo$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<
        GetOpportunitiesIdOpportunitiesAdditionalInfo,
        z.ZodTypeDef,
        Inbound
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetOpportunitiesIdOpportunitiesAdditionalInfo
    > = z.object({});
}

/** @internal */
export namespace GetOpportunitiesIdOpportunitiesSocialProfiles$ {
    export type Inbound = {
        type?:
            | GetOpportunitiesIdOpportunitiesResponse200ApplicationJSONResponseBodyUnifiedAccountOwnerType
            | undefined;
        username?: string | undefined;
        displayName?: string | undefined;
        url?: string | undefined;
        avatarUrl?: string | undefined;
        email?: string | undefined;
        additionalInfo?: GetOpportunitiesIdOpportunitiesAdditionalInfo$.Inbound | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<
        GetOpportunitiesIdOpportunitiesSocialProfiles,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            type: GetOpportunitiesIdOpportunitiesResponse200ApplicationJSONResponseBodyUnifiedAccountOwnerType$.optional(),
            username: z.string().optional(),
            displayName: z.string().optional(),
            url: z.string().optional(),
            avatarUrl: z.string().optional(),
            email: z.string().optional(),
            additionalInfo: z
                .lazy(() => GetOpportunitiesIdOpportunitiesAdditionalInfo$.inboundSchema)
                .optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.username === undefined ? null : { username: v.username }),
                ...(v.displayName === undefined ? null : { displayName: v.displayName }),
                ...(v.url === undefined ? null : { url: v.url }),
                ...(v.avatarUrl === undefined ? null : { avatarUrl: v.avatarUrl }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.additionalInfo === undefined ? null : { additionalInfo: v.additionalInfo }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });

    export type Outbound = {
        type?:
            | GetOpportunitiesIdOpportunitiesResponse200ApplicationJSONResponseBodyUnifiedAccountOwnerType
            | undefined;
        username?: string | undefined;
        displayName?: string | undefined;
        url?: string | undefined;
        avatarUrl?: string | undefined;
        email?: string | undefined;
        additionalInfo?: GetOpportunitiesIdOpportunitiesAdditionalInfo$.Outbound | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetOpportunitiesIdOpportunitiesSocialProfiles
    > = z
        .object({
            type: GetOpportunitiesIdOpportunitiesResponse200ApplicationJSONResponseBodyUnifiedAccountOwnerType$.optional(),
            username: z.string().optional(),
            displayName: z.string().optional(),
            url: z.string().optional(),
            avatarUrl: z.string().optional(),
            email: z.string().optional(),
            additionalInfo: z
                .lazy(() => GetOpportunitiesIdOpportunitiesAdditionalInfo$.outboundSchema)
                .optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.username === undefined ? null : { username: v.username }),
                ...(v.displayName === undefined ? null : { displayName: v.displayName }),
                ...(v.url === undefined ? null : { url: v.url }),
                ...(v.avatarUrl === undefined ? null : { avatarUrl: v.avatarUrl }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.additionalInfo === undefined ? null : { additionalInfo: v.additionalInfo }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });
}

/** @internal */
export namespace GetOpportunitiesIdOpportunitiesOwner$ {
    export type Inbound = {
        id?: string | undefined;
        title?: string | undefined;
        fullName?: string | undefined;
        firstName?: string | undefined;
        middleName?: string | undefined;
        lastName?: string | undefined;
        email?: string | undefined;
        phoneNumber?: string | undefined;
        dateOfBirth?: number | undefined;
        addresses?: Array<GetOpportunitiesIdOpportunitiesResponseAddresses$.Inbound> | undefined;
        defaultAddress?: GetOpportunitiesIdDefaultAddress$.Inbound | undefined;
        company?: string | undefined;
        companyId?: string | undefined;
        currency?: string | undefined;
        notes?: string | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        status?: GetOpportunitiesIdOpportunitiesResponse200ApplicationJSONStatus | undefined;
        customerSegment?: string | undefined;
        customerType?: GetOpportunitiesIdCustomerType | undefined;
        loyaltyProgramMembership?: string | undefined;
        preferredContactMethod?: GetOpportunitiesIdPreferredContactMethod | undefined;
        tags?: Array<string> | undefined;
        metadata?: string | undefined;
        socialProfiles?: Array<GetOpportunitiesIdOpportunitiesSocialProfiles$.Inbound> | undefined;
        source?: string | undefined;
    };

    export const inboundSchema: z.ZodType<
        GetOpportunitiesIdOpportunitiesOwner,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            id: z.string().optional(),
            title: z.string().optional(),
            fullName: z.string().optional(),
            firstName: z.string().optional(),
            middleName: z.string().optional(),
            lastName: z.string().optional(),
            email: z.string().optional(),
            phoneNumber: z.string().optional(),
            dateOfBirth: z.number().optional(),
            addresses: z
                .array(
                    z.lazy(() => GetOpportunitiesIdOpportunitiesResponseAddresses$.inboundSchema)
                )
                .optional(),
            defaultAddress: z
                .lazy(() => GetOpportunitiesIdDefaultAddress$.inboundSchema)
                .optional(),
            company: z.string().optional(),
            companyId: z.string().optional(),
            currency: z.string().optional(),
            notes: z.string().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            status: GetOpportunitiesIdOpportunitiesResponse200ApplicationJSONStatus$.optional(),
            customerSegment: z.string().optional(),
            customerType: GetOpportunitiesIdCustomerType$.optional(),
            loyaltyProgramMembership: z.string().optional(),
            preferredContactMethod: GetOpportunitiesIdPreferredContactMethod$.optional(),
            tags: z.array(z.string()).optional(),
            metadata: z.string().optional(),
            socialProfiles: z
                .array(z.lazy(() => GetOpportunitiesIdOpportunitiesSocialProfiles$.inboundSchema))
                .optional(),
            source: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.fullName === undefined ? null : { fullName: v.fullName }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.middleName === undefined ? null : { middleName: v.middleName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.phoneNumber === undefined ? null : { phoneNumber: v.phoneNumber }),
                ...(v.dateOfBirth === undefined ? null : { dateOfBirth: v.dateOfBirth }),
                ...(v.addresses === undefined ? null : { addresses: v.addresses }),
                ...(v.defaultAddress === undefined ? null : { defaultAddress: v.defaultAddress }),
                ...(v.company === undefined ? null : { company: v.company }),
                ...(v.companyId === undefined ? null : { companyId: v.companyId }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.notes === undefined ? null : { notes: v.notes }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.customerSegment === undefined
                    ? null
                    : { customerSegment: v.customerSegment }),
                ...(v.customerType === undefined ? null : { customerType: v.customerType }),
                ...(v.loyaltyProgramMembership === undefined
                    ? null
                    : { loyaltyProgramMembership: v.loyaltyProgramMembership }),
                ...(v.preferredContactMethod === undefined
                    ? null
                    : { preferredContactMethod: v.preferredContactMethod }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                ...(v.socialProfiles === undefined ? null : { socialProfiles: v.socialProfiles }),
                ...(v.source === undefined ? null : { source: v.source }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        title?: string | undefined;
        fullName?: string | undefined;
        firstName?: string | undefined;
        middleName?: string | undefined;
        lastName?: string | undefined;
        email?: string | undefined;
        phoneNumber?: string | undefined;
        dateOfBirth?: number | undefined;
        addresses?: Array<GetOpportunitiesIdOpportunitiesResponseAddresses$.Outbound> | undefined;
        defaultAddress?: GetOpportunitiesIdDefaultAddress$.Outbound | undefined;
        company?: string | undefined;
        companyId?: string | undefined;
        currency?: string | undefined;
        notes?: string | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        status?: GetOpportunitiesIdOpportunitiesResponse200ApplicationJSONStatus | undefined;
        customerSegment?: string | undefined;
        customerType?: GetOpportunitiesIdCustomerType | undefined;
        loyaltyProgramMembership?: string | undefined;
        preferredContactMethod?: GetOpportunitiesIdPreferredContactMethod | undefined;
        tags?: Array<string> | undefined;
        metadata?: string | undefined;
        socialProfiles?: Array<GetOpportunitiesIdOpportunitiesSocialProfiles$.Outbound> | undefined;
        source?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetOpportunitiesIdOpportunitiesOwner
    > = z
        .object({
            id: z.string().optional(),
            title: z.string().optional(),
            fullName: z.string().optional(),
            firstName: z.string().optional(),
            middleName: z.string().optional(),
            lastName: z.string().optional(),
            email: z.string().optional(),
            phoneNumber: z.string().optional(),
            dateOfBirth: z.number().optional(),
            addresses: z
                .array(
                    z.lazy(() => GetOpportunitiesIdOpportunitiesResponseAddresses$.outboundSchema)
                )
                .optional(),
            defaultAddress: z
                .lazy(() => GetOpportunitiesIdDefaultAddress$.outboundSchema)
                .optional(),
            company: z.string().optional(),
            companyId: z.string().optional(),
            currency: z.string().optional(),
            notes: z.string().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            status: GetOpportunitiesIdOpportunitiesResponse200ApplicationJSONStatus$.optional(),
            customerSegment: z.string().optional(),
            customerType: GetOpportunitiesIdCustomerType$.optional(),
            loyaltyProgramMembership: z.string().optional(),
            preferredContactMethod: GetOpportunitiesIdPreferredContactMethod$.optional(),
            tags: z.array(z.string()).optional(),
            metadata: z.string().optional(),
            socialProfiles: z
                .array(z.lazy(() => GetOpportunitiesIdOpportunitiesSocialProfiles$.outboundSchema))
                .optional(),
            source: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.fullName === undefined ? null : { fullName: v.fullName }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.middleName === undefined ? null : { middleName: v.middleName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.phoneNumber === undefined ? null : { phoneNumber: v.phoneNumber }),
                ...(v.dateOfBirth === undefined ? null : { dateOfBirth: v.dateOfBirth }),
                ...(v.addresses === undefined ? null : { addresses: v.addresses }),
                ...(v.defaultAddress === undefined ? null : { defaultAddress: v.defaultAddress }),
                ...(v.company === undefined ? null : { company: v.company }),
                ...(v.companyId === undefined ? null : { companyId: v.companyId }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.notes === undefined ? null : { notes: v.notes }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.customerSegment === undefined
                    ? null
                    : { customerSegment: v.customerSegment }),
                ...(v.customerType === undefined ? null : { customerType: v.customerType }),
                ...(v.loyaltyProgramMembership === undefined
                    ? null
                    : { loyaltyProgramMembership: v.loyaltyProgramMembership }),
                ...(v.preferredContactMethod === undefined
                    ? null
                    : { preferredContactMethod: v.preferredContactMethod }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                ...(v.socialProfiles === undefined ? null : { socialProfiles: v.socialProfiles }),
                ...(v.source === undefined ? null : { source: v.source }),
            };
        });
}

/** @internal */
export const GetOpportunitiesIdOpportunitiesStatus$ = z.nativeEnum(
    GetOpportunitiesIdOpportunitiesStatus
);

/** @internal */
export namespace GetOpportunitiesIdPaymentMethod$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<GetOpportunitiesIdPaymentMethod, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetOpportunitiesIdPaymentMethod
    > = z.object({});
}

/** @internal */
export const GetOpportunitiesIdOpportunitiesType$ = z.nativeEnum(
    GetOpportunitiesIdOpportunitiesType
);

/** @internal */
export const GetOpportunitiesIdOpportunitiesCurrency$ = z.nativeEnum(
    GetOpportunitiesIdOpportunitiesCurrency
);

/** @internal */
export namespace GetOpportunitiesIdRecipient$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<GetOpportunitiesIdRecipient, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetOpportunitiesIdRecipient> =
        z.object({});
}

/** @internal */
export namespace GetOpportunitiesIdSender$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<GetOpportunitiesIdSender, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetOpportunitiesIdSender> =
        z.object({});
}

/** @internal */
export const GetOpportunitiesIdTransactionCategory$ = z.nativeEnum(
    GetOpportunitiesIdTransactionCategory
);

/** @internal */
export const GetOpportunitiesIdOpportunitiesResponse200Status$ = z.nativeEnum(
    GetOpportunitiesIdOpportunitiesResponse200Status
);

/** @internal */
export const GetOpportunitiesIdTransactionMethod$ = z.nativeEnum(
    GetOpportunitiesIdTransactionMethod
);

/** @internal */
export const GetOpportunitiesIdTransactionType$ = z.nativeEnum(GetOpportunitiesIdTransactionType);

/** @internal */
export namespace GetOpportunitiesIdRefund$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<GetOpportunitiesIdRefund, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetOpportunitiesIdRefund> =
        z.object({});
}

/** @internal */
export namespace GetOpportunitiesIdDispute$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<GetOpportunitiesIdDispute, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetOpportunitiesIdDispute> =
        z.object({});
}

/** @internal */
export namespace GetOpportunitiesIdOpportunitiesMetadata$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<
        GetOpportunitiesIdOpportunitiesMetadata,
        z.ZodTypeDef,
        Inbound
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetOpportunitiesIdOpportunitiesMetadata
    > = z.object({});
}

/** @internal */
export namespace GetOpportunitiesIdShipping$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<GetOpportunitiesIdShipping, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetOpportunitiesIdShipping> =
        z.object({});
}

/** @internal */
export namespace GetOpportunitiesIdBillingDetails$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<GetOpportunitiesIdBillingDetails, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetOpportunitiesIdBillingDetails
    > = z.object({});
}

/** @internal */
export namespace GetOpportunitiesIdTransactions$ {
    export type Inbound = {
        id?: string | undefined;
        accountId?: string | undefined;
        invoiceId?: string | undefined;
        orderId?: string | undefined;
        paymentMethod?: GetOpportunitiesIdPaymentMethod$.Inbound | undefined;
        amount?: number | undefined;
        taxAmount?: number | undefined;
        type?: GetOpportunitiesIdOpportunitiesType | undefined;
        date?: number | undefined;
        currency?: GetOpportunitiesIdOpportunitiesCurrency | undefined;
        recipient?: GetOpportunitiesIdRecipient$.Inbound | undefined;
        sender?: GetOpportunitiesIdSender$.Inbound | undefined;
        description?: string | undefined;
        checkNumber?: string | undefined;
        transactionCategory?: GetOpportunitiesIdTransactionCategory | undefined;
        tags?: Array<string> | undefined;
        status?: GetOpportunitiesIdOpportunitiesResponse200Status | undefined;
        transactionMethod?: GetOpportunitiesIdTransactionMethod | undefined;
        transactionType?: GetOpportunitiesIdTransactionType | undefined;
        refund?: GetOpportunitiesIdRefund$.Inbound | undefined;
        dispute?: GetOpportunitiesIdDispute$.Inbound | undefined;
        metadata?: GetOpportunitiesIdOpportunitiesMetadata$.Inbound | undefined;
        exchangeRate?: number | undefined;
        shipping?: GetOpportunitiesIdShipping$.Inbound | undefined;
        billingDetails?: GetOpportunitiesIdBillingDetails$.Inbound | undefined;
        applicationFee?: number | undefined;
        paymentIntent?: string | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        deleted?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<GetOpportunitiesIdTransactions, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            accountId: z.string().optional(),
            invoiceId: z.string().optional(),
            orderId: z.string().optional(),
            paymentMethod: z.lazy(() => GetOpportunitiesIdPaymentMethod$.inboundSchema).optional(),
            amount: z.number().optional(),
            taxAmount: z.number().optional(),
            type: GetOpportunitiesIdOpportunitiesType$.optional(),
            date: z.number().optional(),
            currency: GetOpportunitiesIdOpportunitiesCurrency$.optional(),
            recipient: z.lazy(() => GetOpportunitiesIdRecipient$.inboundSchema).optional(),
            sender: z.lazy(() => GetOpportunitiesIdSender$.inboundSchema).optional(),
            description: z.string().optional(),
            checkNumber: z.string().optional(),
            transactionCategory: GetOpportunitiesIdTransactionCategory$.optional(),
            tags: z.array(z.string()).optional(),
            status: GetOpportunitiesIdOpportunitiesResponse200Status$.optional(),
            transactionMethod: GetOpportunitiesIdTransactionMethod$.optional(),
            transactionType: GetOpportunitiesIdTransactionType$.optional(),
            refund: z.lazy(() => GetOpportunitiesIdRefund$.inboundSchema).optional(),
            dispute: z.lazy(() => GetOpportunitiesIdDispute$.inboundSchema).optional(),
            metadata: z
                .lazy(() => GetOpportunitiesIdOpportunitiesMetadata$.inboundSchema)
                .optional(),
            exchangeRate: z.number().optional(),
            shipping: z.lazy(() => GetOpportunitiesIdShipping$.inboundSchema).optional(),
            billingDetails: z
                .lazy(() => GetOpportunitiesIdBillingDetails$.inboundSchema)
                .optional(),
            applicationFee: z.number().optional(),
            paymentIntent: z.string().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.accountId === undefined ? null : { accountId: v.accountId }),
                ...(v.invoiceId === undefined ? null : { invoiceId: v.invoiceId }),
                ...(v.orderId === undefined ? null : { orderId: v.orderId }),
                ...(v.paymentMethod === undefined ? null : { paymentMethod: v.paymentMethod }),
                ...(v.amount === undefined ? null : { amount: v.amount }),
                ...(v.taxAmount === undefined ? null : { taxAmount: v.taxAmount }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.date === undefined ? null : { date: v.date }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.recipient === undefined ? null : { recipient: v.recipient }),
                ...(v.sender === undefined ? null : { sender: v.sender }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.checkNumber === undefined ? null : { checkNumber: v.checkNumber }),
                ...(v.transactionCategory === undefined
                    ? null
                    : { transactionCategory: v.transactionCategory }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.transactionMethod === undefined
                    ? null
                    : { transactionMethod: v.transactionMethod }),
                ...(v.transactionType === undefined
                    ? null
                    : { transactionType: v.transactionType }),
                ...(v.refund === undefined ? null : { refund: v.refund }),
                ...(v.dispute === undefined ? null : { dispute: v.dispute }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                ...(v.exchangeRate === undefined ? null : { exchangeRate: v.exchangeRate }),
                ...(v.shipping === undefined ? null : { shipping: v.shipping }),
                ...(v.billingDetails === undefined ? null : { billingDetails: v.billingDetails }),
                ...(v.applicationFee === undefined ? null : { applicationFee: v.applicationFee }),
                ...(v.paymentIntent === undefined ? null : { paymentIntent: v.paymentIntent }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        accountId?: string | undefined;
        invoiceId?: string | undefined;
        orderId?: string | undefined;
        paymentMethod?: GetOpportunitiesIdPaymentMethod$.Outbound | undefined;
        amount?: number | undefined;
        taxAmount?: number | undefined;
        type?: GetOpportunitiesIdOpportunitiesType | undefined;
        date?: number | undefined;
        currency?: GetOpportunitiesIdOpportunitiesCurrency | undefined;
        recipient?: GetOpportunitiesIdRecipient$.Outbound | undefined;
        sender?: GetOpportunitiesIdSender$.Outbound | undefined;
        description?: string | undefined;
        checkNumber?: string | undefined;
        transactionCategory?: GetOpportunitiesIdTransactionCategory | undefined;
        tags?: Array<string> | undefined;
        status?: GetOpportunitiesIdOpportunitiesResponse200Status | undefined;
        transactionMethod?: GetOpportunitiesIdTransactionMethod | undefined;
        transactionType?: GetOpportunitiesIdTransactionType | undefined;
        refund?: GetOpportunitiesIdRefund$.Outbound | undefined;
        dispute?: GetOpportunitiesIdDispute$.Outbound | undefined;
        metadata?: GetOpportunitiesIdOpportunitiesMetadata$.Outbound | undefined;
        exchangeRate?: number | undefined;
        shipping?: GetOpportunitiesIdShipping$.Outbound | undefined;
        billingDetails?: GetOpportunitiesIdBillingDetails$.Outbound | undefined;
        applicationFee?: number | undefined;
        paymentIntent?: string | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        deleted?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetOpportunitiesIdTransactions> =
        z
            .object({
                id: z.string().optional(),
                accountId: z.string().optional(),
                invoiceId: z.string().optional(),
                orderId: z.string().optional(),
                paymentMethod: z
                    .lazy(() => GetOpportunitiesIdPaymentMethod$.outboundSchema)
                    .optional(),
                amount: z.number().optional(),
                taxAmount: z.number().optional(),
                type: GetOpportunitiesIdOpportunitiesType$.optional(),
                date: z.number().optional(),
                currency: GetOpportunitiesIdOpportunitiesCurrency$.optional(),
                recipient: z.lazy(() => GetOpportunitiesIdRecipient$.outboundSchema).optional(),
                sender: z.lazy(() => GetOpportunitiesIdSender$.outboundSchema).optional(),
                description: z.string().optional(),
                checkNumber: z.string().optional(),
                transactionCategory: GetOpportunitiesIdTransactionCategory$.optional(),
                tags: z.array(z.string()).optional(),
                status: GetOpportunitiesIdOpportunitiesResponse200Status$.optional(),
                transactionMethod: GetOpportunitiesIdTransactionMethod$.optional(),
                transactionType: GetOpportunitiesIdTransactionType$.optional(),
                refund: z.lazy(() => GetOpportunitiesIdRefund$.outboundSchema).optional(),
                dispute: z.lazy(() => GetOpportunitiesIdDispute$.outboundSchema).optional(),
                metadata: z
                    .lazy(() => GetOpportunitiesIdOpportunitiesMetadata$.outboundSchema)
                    .optional(),
                exchangeRate: z.number().optional(),
                shipping: z.lazy(() => GetOpportunitiesIdShipping$.outboundSchema).optional(),
                billingDetails: z
                    .lazy(() => GetOpportunitiesIdBillingDetails$.outboundSchema)
                    .optional(),
                applicationFee: z.number().optional(),
                paymentIntent: z.string().optional(),
                createdAt: z.number().optional(),
                updatedAt: z.number().optional(),
                deleted: z.boolean().optional(),
            })
            .transform((v) => {
                return {
                    ...(v.id === undefined ? null : { id: v.id }),
                    ...(v.accountId === undefined ? null : { accountId: v.accountId }),
                    ...(v.invoiceId === undefined ? null : { invoiceId: v.invoiceId }),
                    ...(v.orderId === undefined ? null : { orderId: v.orderId }),
                    ...(v.paymentMethod === undefined ? null : { paymentMethod: v.paymentMethod }),
                    ...(v.amount === undefined ? null : { amount: v.amount }),
                    ...(v.taxAmount === undefined ? null : { taxAmount: v.taxAmount }),
                    ...(v.type === undefined ? null : { type: v.type }),
                    ...(v.date === undefined ? null : { date: v.date }),
                    ...(v.currency === undefined ? null : { currency: v.currency }),
                    ...(v.recipient === undefined ? null : { recipient: v.recipient }),
                    ...(v.sender === undefined ? null : { sender: v.sender }),
                    ...(v.description === undefined ? null : { description: v.description }),
                    ...(v.checkNumber === undefined ? null : { checkNumber: v.checkNumber }),
                    ...(v.transactionCategory === undefined
                        ? null
                        : { transactionCategory: v.transactionCategory }),
                    ...(v.tags === undefined ? null : { tags: v.tags }),
                    ...(v.status === undefined ? null : { status: v.status }),
                    ...(v.transactionMethod === undefined
                        ? null
                        : { transactionMethod: v.transactionMethod }),
                    ...(v.transactionType === undefined
                        ? null
                        : { transactionType: v.transactionType }),
                    ...(v.refund === undefined ? null : { refund: v.refund }),
                    ...(v.dispute === undefined ? null : { dispute: v.dispute }),
                    ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                    ...(v.exchangeRate === undefined ? null : { exchangeRate: v.exchangeRate }),
                    ...(v.shipping === undefined ? null : { shipping: v.shipping }),
                    ...(v.billingDetails === undefined
                        ? null
                        : { billingDetails: v.billingDetails }),
                    ...(v.applicationFee === undefined
                        ? null
                        : { applicationFee: v.applicationFee }),
                    ...(v.paymentIntent === undefined ? null : { paymentIntent: v.paymentIntent }),
                    ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                    ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                    ...(v.deleted === undefined ? null : { deleted: v.deleted }),
                };
            });
}

/** @internal */
export namespace GetOpportunitiesIdAccount$ {
    export type Inbound = {
        id?: string | undefined;
        accountNumber?: string | undefined;
        accountType?: GetOpportunitiesIdAccountType | undefined;
        balance?: number | undefined;
        currency?: GetOpportunitiesIdCurrency | undefined;
        owner?: GetOpportunitiesIdOpportunitiesOwner$.Inbound | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        closedAt?: number | undefined;
        status?: GetOpportunitiesIdOpportunitiesStatus | undefined;
        transactions?: Array<GetOpportunitiesIdTransactions$.Inbound> | undefined;
        branch?: string | undefined;
        notes?: string | undefined;
        interestRate?: number | undefined;
        overdraftLimit?: number | undefined;
        overdraftProtection?: boolean | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<GetOpportunitiesIdAccount, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            accountNumber: z.string().optional(),
            accountType: GetOpportunitiesIdAccountType$.optional(),
            balance: z.number().optional(),
            currency: GetOpportunitiesIdCurrency$.optional(),
            owner: z.lazy(() => GetOpportunitiesIdOpportunitiesOwner$.inboundSchema).optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            closedAt: z.number().optional(),
            status: GetOpportunitiesIdOpportunitiesStatus$.optional(),
            transactions: z
                .array(z.lazy(() => GetOpportunitiesIdTransactions$.inboundSchema))
                .optional(),
            branch: z.string().optional(),
            notes: z.string().optional(),
            interestRate: z.number().optional(),
            overdraftLimit: z.number().optional(),
            overdraftProtection: z.boolean().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.accountNumber === undefined ? null : { accountNumber: v.accountNumber }),
                ...(v.accountType === undefined ? null : { accountType: v.accountType }),
                ...(v.balance === undefined ? null : { balance: v.balance }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.owner === undefined ? null : { owner: v.owner }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.closedAt === undefined ? null : { closedAt: v.closedAt }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.transactions === undefined ? null : { transactions: v.transactions }),
                ...(v.branch === undefined ? null : { branch: v.branch }),
                ...(v.notes === undefined ? null : { notes: v.notes }),
                ...(v.interestRate === undefined ? null : { interestRate: v.interestRate }),
                ...(v.overdraftLimit === undefined ? null : { overdraftLimit: v.overdraftLimit }),
                ...(v.overdraftProtection === undefined
                    ? null
                    : { overdraftProtection: v.overdraftProtection }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        accountNumber?: string | undefined;
        accountType?: GetOpportunitiesIdAccountType | undefined;
        balance?: number | undefined;
        currency?: GetOpportunitiesIdCurrency | undefined;
        owner?: GetOpportunitiesIdOpportunitiesOwner$.Outbound | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        closedAt?: number | undefined;
        status?: GetOpportunitiesIdOpportunitiesStatus | undefined;
        transactions?: Array<GetOpportunitiesIdTransactions$.Outbound> | undefined;
        branch?: string | undefined;
        notes?: string | undefined;
        interestRate?: number | undefined;
        overdraftLimit?: number | undefined;
        overdraftProtection?: boolean | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetOpportunitiesIdAccount> = z
        .object({
            id: z.string().optional(),
            accountNumber: z.string().optional(),
            accountType: GetOpportunitiesIdAccountType$.optional(),
            balance: z.number().optional(),
            currency: GetOpportunitiesIdCurrency$.optional(),
            owner: z.lazy(() => GetOpportunitiesIdOpportunitiesOwner$.outboundSchema).optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            closedAt: z.number().optional(),
            status: GetOpportunitiesIdOpportunitiesStatus$.optional(),
            transactions: z
                .array(z.lazy(() => GetOpportunitiesIdTransactions$.outboundSchema))
                .optional(),
            branch: z.string().optional(),
            notes: z.string().optional(),
            interestRate: z.number().optional(),
            overdraftLimit: z.number().optional(),
            overdraftProtection: z.boolean().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.accountNumber === undefined ? null : { accountNumber: v.accountNumber }),
                ...(v.accountType === undefined ? null : { accountType: v.accountType }),
                ...(v.balance === undefined ? null : { balance: v.balance }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.owner === undefined ? null : { owner: v.owner }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.closedAt === undefined ? null : { closedAt: v.closedAt }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.transactions === undefined ? null : { transactions: v.transactions }),
                ...(v.branch === undefined ? null : { branch: v.branch }),
                ...(v.notes === undefined ? null : { notes: v.notes }),
                ...(v.interestRate === undefined ? null : { interestRate: v.interestRate }),
                ...(v.overdraftLimit === undefined ? null : { overdraftLimit: v.overdraftLimit }),
                ...(v.overdraftProtection === undefined
                    ? null
                    : { overdraftProtection: v.overdraftProtection }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });
}

/** @internal */
export namespace GetOpportunitiesIdEmails$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<GetOpportunitiesIdEmails, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetOpportunitiesIdEmails> =
        z.object({});
}

/** @internal */
export namespace GetOpportunitiesIdPhones$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<GetOpportunitiesIdPhones, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetOpportunitiesIdPhones> =
        z.object({});
}

/** @internal */
export namespace GetOpportunitiesIdAddress$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<GetOpportunitiesIdAddress, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetOpportunitiesIdAddress> =
        z.object({});
}

/** @internal */
export namespace GetOpportunitiesIdAddresses$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<GetOpportunitiesIdAddresses, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetOpportunitiesIdAddresses> =
        z.object({});
}

/** @internal */
export namespace GetOpportunitiesIdNotes$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<GetOpportunitiesIdNotes, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetOpportunitiesIdNotes> =
        z.object({});
}

/** @internal */
export namespace GetOpportunitiesIdSocialProfiles$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<GetOpportunitiesIdSocialProfiles, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetOpportunitiesIdSocialProfiles
    > = z.object({});
}

/** @internal */
export namespace GetOpportunitiesIdOpportunitiesCustomFields$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<
        GetOpportunitiesIdOpportunitiesCustomFields,
        z.ZodTypeDef,
        Inbound
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetOpportunitiesIdOpportunitiesCustomFields
    > = z.object({});
}

/** @internal */
export namespace GetOpportunitiesIdContacts$ {
    export type Inbound = {
        id?: string | undefined;
        firstName?: string | undefined;
        lastName?: string | undefined;
        leadId?: string | undefined;
        company?: string | undefined;
        defaultEmail?: string | undefined;
        emails?: Array<GetOpportunitiesIdEmails$.Inbound> | undefined;
        defaultPhone?: string | undefined;
        phones?: Array<GetOpportunitiesIdPhones$.Inbound> | undefined;
        address?: GetOpportunitiesIdAddress$.Inbound | undefined;
        addresses?: Array<GetOpportunitiesIdAddresses$.Inbound> | undefined;
        birthday?: number | undefined;
        relationship?: string | undefined;
        note?: string | undefined;
        notes?: GetOpportunitiesIdNotes$.Inbound | undefined;
        tags?: Array<string> | undefined;
        websites?: Array<string> | undefined;
        socialProfiles?: Array<GetOpportunitiesIdSocialProfiles$.Inbound> | undefined;
        isActive?: boolean | undefined;
        customFields?: Array<GetOpportunitiesIdOpportunitiesCustomFields$.Inbound> | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
    };

    export const inboundSchema: z.ZodType<GetOpportunitiesIdContacts, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            firstName: z.string().optional(),
            lastName: z.string().optional(),
            leadId: z.string().optional(),
            company: z.string().optional(),
            defaultEmail: z.string().optional(),
            emails: z.array(z.lazy(() => GetOpportunitiesIdEmails$.inboundSchema)).optional(),
            defaultPhone: z.string().optional(),
            phones: z.array(z.lazy(() => GetOpportunitiesIdPhones$.inboundSchema)).optional(),
            address: z.lazy(() => GetOpportunitiesIdAddress$.inboundSchema).optional(),
            addresses: z.array(z.lazy(() => GetOpportunitiesIdAddresses$.inboundSchema)).optional(),
            birthday: z.number().optional(),
            relationship: z.string().optional(),
            note: z.string().optional(),
            notes: z.lazy(() => GetOpportunitiesIdNotes$.inboundSchema).optional(),
            tags: z.array(z.string()).optional(),
            websites: z.array(z.string()).optional(),
            socialProfiles: z
                .array(z.lazy(() => GetOpportunitiesIdSocialProfiles$.inboundSchema))
                .optional(),
            isActive: z.boolean().optional(),
            customFields: z
                .array(z.lazy(() => GetOpportunitiesIdOpportunitiesCustomFields$.inboundSchema))
                .optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.leadId === undefined ? null : { leadId: v.leadId }),
                ...(v.company === undefined ? null : { company: v.company }),
                ...(v.defaultEmail === undefined ? null : { defaultEmail: v.defaultEmail }),
                ...(v.emails === undefined ? null : { emails: v.emails }),
                ...(v.defaultPhone === undefined ? null : { defaultPhone: v.defaultPhone }),
                ...(v.phones === undefined ? null : { phones: v.phones }),
                ...(v.address === undefined ? null : { address: v.address }),
                ...(v.addresses === undefined ? null : { addresses: v.addresses }),
                ...(v.birthday === undefined ? null : { birthday: v.birthday }),
                ...(v.relationship === undefined ? null : { relationship: v.relationship }),
                ...(v.note === undefined ? null : { note: v.note }),
                ...(v.notes === undefined ? null : { notes: v.notes }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
                ...(v.websites === undefined ? null : { websites: v.websites }),
                ...(v.socialProfiles === undefined ? null : { socialProfiles: v.socialProfiles }),
                ...(v.isActive === undefined ? null : { isActive: v.isActive }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        firstName?: string | undefined;
        lastName?: string | undefined;
        leadId?: string | undefined;
        company?: string | undefined;
        defaultEmail?: string | undefined;
        emails?: Array<GetOpportunitiesIdEmails$.Outbound> | undefined;
        defaultPhone?: string | undefined;
        phones?: Array<GetOpportunitiesIdPhones$.Outbound> | undefined;
        address?: GetOpportunitiesIdAddress$.Outbound | undefined;
        addresses?: Array<GetOpportunitiesIdAddresses$.Outbound> | undefined;
        birthday?: number | undefined;
        relationship?: string | undefined;
        note?: string | undefined;
        notes?: GetOpportunitiesIdNotes$.Outbound | undefined;
        tags?: Array<string> | undefined;
        websites?: Array<string> | undefined;
        socialProfiles?: Array<GetOpportunitiesIdSocialProfiles$.Outbound> | undefined;
        isActive?: boolean | undefined;
        customFields?: Array<GetOpportunitiesIdOpportunitiesCustomFields$.Outbound> | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetOpportunitiesIdContacts> = z
        .object({
            id: z.string().optional(),
            firstName: z.string().optional(),
            lastName: z.string().optional(),
            leadId: z.string().optional(),
            company: z.string().optional(),
            defaultEmail: z.string().optional(),
            emails: z.array(z.lazy(() => GetOpportunitiesIdEmails$.outboundSchema)).optional(),
            defaultPhone: z.string().optional(),
            phones: z.array(z.lazy(() => GetOpportunitiesIdPhones$.outboundSchema)).optional(),
            address: z.lazy(() => GetOpportunitiesIdAddress$.outboundSchema).optional(),
            addresses: z
                .array(z.lazy(() => GetOpportunitiesIdAddresses$.outboundSchema))
                .optional(),
            birthday: z.number().optional(),
            relationship: z.string().optional(),
            note: z.string().optional(),
            notes: z.lazy(() => GetOpportunitiesIdNotes$.outboundSchema).optional(),
            tags: z.array(z.string()).optional(),
            websites: z.array(z.string()).optional(),
            socialProfiles: z
                .array(z.lazy(() => GetOpportunitiesIdSocialProfiles$.outboundSchema))
                .optional(),
            isActive: z.boolean().optional(),
            customFields: z
                .array(z.lazy(() => GetOpportunitiesIdOpportunitiesCustomFields$.outboundSchema))
                .optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.leadId === undefined ? null : { leadId: v.leadId }),
                ...(v.company === undefined ? null : { company: v.company }),
                ...(v.defaultEmail === undefined ? null : { defaultEmail: v.defaultEmail }),
                ...(v.emails === undefined ? null : { emails: v.emails }),
                ...(v.defaultPhone === undefined ? null : { defaultPhone: v.defaultPhone }),
                ...(v.phones === undefined ? null : { phones: v.phones }),
                ...(v.address === undefined ? null : { address: v.address }),
                ...(v.addresses === undefined ? null : { addresses: v.addresses }),
                ...(v.birthday === undefined ? null : { birthday: v.birthday }),
                ...(v.relationship === undefined ? null : { relationship: v.relationship }),
                ...(v.note === undefined ? null : { note: v.note }),
                ...(v.notes === undefined ? null : { notes: v.notes }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
                ...(v.websites === undefined ? null : { websites: v.websites }),
                ...(v.socialProfiles === undefined ? null : { socialProfiles: v.socialProfiles }),
                ...(v.isActive === undefined ? null : { isActive: v.isActive }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
            };
        });
}

/** @internal */
export const GetOpportunitiesIdMimeType$ = z.nativeEnum(GetOpportunitiesIdMimeType);

/** @internal */
export namespace GetOpportunitiesIdProfilePicture$ {
    export type Inbound = {
        id?: string | undefined;
        src?: string | undefined;
        altText?: string | undefined;
        width?: number | undefined;
        height?: number | undefined;
        thumbnailSrc?: string | undefined;
        caption?: string | undefined;
        title?: string | undefined;
        mimeType?: GetOpportunitiesIdMimeType | undefined;
        tags?: Array<string> | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<GetOpportunitiesIdProfilePicture, z.ZodTypeDef, Inbound> =
        z
            .object({
                id: z.string().optional(),
                src: z.string().optional(),
                altText: z.string().optional(),
                width: z.number().optional(),
                height: z.number().optional(),
                thumbnailSrc: z.string().optional(),
                caption: z.string().optional(),
                title: z.string().optional(),
                mimeType: GetOpportunitiesIdMimeType$.optional(),
                tags: z.array(z.string()).optional(),
                createdAt: z.number().optional(),
                updatedAt: z.number().optional(),
                active: z.boolean().optional(),
                deleted: z.boolean().optional(),
            })
            .transform((v) => {
                return {
                    ...(v.id === undefined ? null : { id: v.id }),
                    ...(v.src === undefined ? null : { src: v.src }),
                    ...(v.altText === undefined ? null : { altText: v.altText }),
                    ...(v.width === undefined ? null : { width: v.width }),
                    ...(v.height === undefined ? null : { height: v.height }),
                    ...(v.thumbnailSrc === undefined ? null : { thumbnailSrc: v.thumbnailSrc }),
                    ...(v.caption === undefined ? null : { caption: v.caption }),
                    ...(v.title === undefined ? null : { title: v.title }),
                    ...(v.mimeType === undefined ? null : { mimeType: v.mimeType }),
                    ...(v.tags === undefined ? null : { tags: v.tags }),
                    ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                    ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                    ...(v.active === undefined ? null : { active: v.active }),
                    ...(v.deleted === undefined ? null : { deleted: v.deleted }),
                };
            });

    export type Outbound = {
        id?: string | undefined;
        src?: string | undefined;
        altText?: string | undefined;
        width?: number | undefined;
        height?: number | undefined;
        thumbnailSrc?: string | undefined;
        caption?: string | undefined;
        title?: string | undefined;
        mimeType?: GetOpportunitiesIdMimeType | undefined;
        tags?: Array<string> | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetOpportunitiesIdProfilePicture
    > = z
        .object({
            id: z.string().optional(),
            src: z.string().optional(),
            altText: z.string().optional(),
            width: z.number().optional(),
            height: z.number().optional(),
            thumbnailSrc: z.string().optional(),
            caption: z.string().optional(),
            title: z.string().optional(),
            mimeType: GetOpportunitiesIdMimeType$.optional(),
            tags: z.array(z.string()).optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.src === undefined ? null : { src: v.src }),
                ...(v.altText === undefined ? null : { altText: v.altText }),
                ...(v.width === undefined ? null : { width: v.width }),
                ...(v.height === undefined ? null : { height: v.height }),
                ...(v.thumbnailSrc === undefined ? null : { thumbnailSrc: v.thumbnailSrc }),
                ...(v.caption === undefined ? null : { caption: v.caption }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.mimeType === undefined ? null : { mimeType: v.mimeType }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });
}

/** @internal */
export const GetOpportunitiesIdOpportunitiesMimeType$ = z.nativeEnum(
    GetOpportunitiesIdOpportunitiesMimeType
);

/** @internal */
export namespace GetOpportunitiesIdCoverPhoto$ {
    export type Inbound = {
        id?: string | undefined;
        src?: string | undefined;
        altText?: string | undefined;
        width?: number | undefined;
        height?: number | undefined;
        thumbnailSrc?: string | undefined;
        caption?: string | undefined;
        title?: string | undefined;
        mimeType?: GetOpportunitiesIdOpportunitiesMimeType | undefined;
        tags?: Array<string> | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<GetOpportunitiesIdCoverPhoto, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            src: z.string().optional(),
            altText: z.string().optional(),
            width: z.number().optional(),
            height: z.number().optional(),
            thumbnailSrc: z.string().optional(),
            caption: z.string().optional(),
            title: z.string().optional(),
            mimeType: GetOpportunitiesIdOpportunitiesMimeType$.optional(),
            tags: z.array(z.string()).optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.src === undefined ? null : { src: v.src }),
                ...(v.altText === undefined ? null : { altText: v.altText }),
                ...(v.width === undefined ? null : { width: v.width }),
                ...(v.height === undefined ? null : { height: v.height }),
                ...(v.thumbnailSrc === undefined ? null : { thumbnailSrc: v.thumbnailSrc }),
                ...(v.caption === undefined ? null : { caption: v.caption }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.mimeType === undefined ? null : { mimeType: v.mimeType }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        src?: string | undefined;
        altText?: string | undefined;
        width?: number | undefined;
        height?: number | undefined;
        thumbnailSrc?: string | undefined;
        caption?: string | undefined;
        title?: string | undefined;
        mimeType?: GetOpportunitiesIdOpportunitiesMimeType | undefined;
        tags?: Array<string> | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetOpportunitiesIdCoverPhoto> = z
        .object({
            id: z.string().optional(),
            src: z.string().optional(),
            altText: z.string().optional(),
            width: z.number().optional(),
            height: z.number().optional(),
            thumbnailSrc: z.string().optional(),
            caption: z.string().optional(),
            title: z.string().optional(),
            mimeType: GetOpportunitiesIdOpportunitiesMimeType$.optional(),
            tags: z.array(z.string()).optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.src === undefined ? null : { src: v.src }),
                ...(v.altText === undefined ? null : { altText: v.altText }),
                ...(v.width === undefined ? null : { width: v.width }),
                ...(v.height === undefined ? null : { height: v.height }),
                ...(v.thumbnailSrc === undefined ? null : { thumbnailSrc: v.thumbnailSrc }),
                ...(v.caption === undefined ? null : { caption: v.caption }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.mimeType === undefined ? null : { mimeType: v.mimeType }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });
}

/** @internal */
export const GetOpportunitiesIdGender$ = z.nativeEnum(GetOpportunitiesIdGender);

/** @internal */
export const GetOpportunitiesIdOpportunitiesResponseType$ = z.nativeEnum(
    GetOpportunitiesIdOpportunitiesResponseType
);

/** @internal */
export namespace GetOpportunitiesIdGeoLocation$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<GetOpportunitiesIdGeoLocation, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetOpportunitiesIdGeoLocation> =
        z.object({});
}

/** @internal */
export namespace GetOpportunitiesIdOpportunitiesResponseCustomFields$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<
        GetOpportunitiesIdOpportunitiesResponseCustomFields,
        z.ZodTypeDef,
        Inbound
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetOpportunitiesIdOpportunitiesResponseCustomFields
    > = z.object({});
}

/** @internal */
export namespace GetOpportunitiesIdOpportunitiesAddresses$ {
    export type Inbound = {
        id?: string | undefined;
        contactId?: string | undefined;
        accountId?: string | undefined;
        firstName?: string | undefined;
        lastName?: string | undefined;
        name?: string | undefined;
        companyName?: string | undefined;
        email?: string | undefined;
        phone?: string | undefined;
        street?: string | undefined;
        addressLine2?: string | undefined;
        city?: string | undefined;
        province?: string | undefined;
        region?: string | undefined;
        postalCode?: string | undefined;
        postalCodeExtension?: string | undefined;
        country?: string | undefined;
        countryCode?: string | undefined;
        type?: GetOpportunitiesIdOpportunitiesResponseType | undefined;
        geoLocation?: GetOpportunitiesIdGeoLocation$.Inbound | undefined;
        customFields?:
            | Array<GetOpportunitiesIdOpportunitiesResponseCustomFields$.Inbound>
            | undefined;
        subdivisionCode?: string | undefined;
    };

    export const inboundSchema: z.ZodType<
        GetOpportunitiesIdOpportunitiesAddresses,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            id: z.string().optional(),
            contactId: z.string().optional(),
            accountId: z.string().optional(),
            firstName: z.string().optional(),
            lastName: z.string().optional(),
            name: z.string().optional(),
            companyName: z.string().optional(),
            email: z.string().optional(),
            phone: z.string().optional(),
            street: z.string().optional(),
            addressLine2: z.string().optional(),
            city: z.string().optional(),
            province: z.string().optional(),
            region: z.string().optional(),
            postalCode: z.string().optional(),
            postalCodeExtension: z.string().optional(),
            country: z.string().optional(),
            countryCode: z.string().optional(),
            type: GetOpportunitiesIdOpportunitiesResponseType$.optional(),
            geoLocation: z.lazy(() => GetOpportunitiesIdGeoLocation$.inboundSchema).optional(),
            customFields: z
                .array(
                    z.lazy(() => GetOpportunitiesIdOpportunitiesResponseCustomFields$.inboundSchema)
                )
                .optional(),
            subdivisionCode: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.contactId === undefined ? null : { contactId: v.contactId }),
                ...(v.accountId === undefined ? null : { accountId: v.accountId }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.companyName === undefined ? null : { companyName: v.companyName }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.phone === undefined ? null : { phone: v.phone }),
                ...(v.street === undefined ? null : { street: v.street }),
                ...(v.addressLine2 === undefined ? null : { addressLine2: v.addressLine2 }),
                ...(v.city === undefined ? null : { city: v.city }),
                ...(v.province === undefined ? null : { province: v.province }),
                ...(v.region === undefined ? null : { region: v.region }),
                ...(v.postalCode === undefined ? null : { postalCode: v.postalCode }),
                ...(v.postalCodeExtension === undefined
                    ? null
                    : { postalCodeExtension: v.postalCodeExtension }),
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.countryCode === undefined ? null : { countryCode: v.countryCode }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.geoLocation === undefined ? null : { geoLocation: v.geoLocation }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                ...(v.subdivisionCode === undefined
                    ? null
                    : { subdivisionCode: v.subdivisionCode }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        contactId?: string | undefined;
        accountId?: string | undefined;
        firstName?: string | undefined;
        lastName?: string | undefined;
        name?: string | undefined;
        companyName?: string | undefined;
        email?: string | undefined;
        phone?: string | undefined;
        street?: string | undefined;
        addressLine2?: string | undefined;
        city?: string | undefined;
        province?: string | undefined;
        region?: string | undefined;
        postalCode?: string | undefined;
        postalCodeExtension?: string | undefined;
        country?: string | undefined;
        countryCode?: string | undefined;
        type?: GetOpportunitiesIdOpportunitiesResponseType | undefined;
        geoLocation?: GetOpportunitiesIdGeoLocation$.Outbound | undefined;
        customFields?:
            | Array<GetOpportunitiesIdOpportunitiesResponseCustomFields$.Outbound>
            | undefined;
        subdivisionCode?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetOpportunitiesIdOpportunitiesAddresses
    > = z
        .object({
            id: z.string().optional(),
            contactId: z.string().optional(),
            accountId: z.string().optional(),
            firstName: z.string().optional(),
            lastName: z.string().optional(),
            name: z.string().optional(),
            companyName: z.string().optional(),
            email: z.string().optional(),
            phone: z.string().optional(),
            street: z.string().optional(),
            addressLine2: z.string().optional(),
            city: z.string().optional(),
            province: z.string().optional(),
            region: z.string().optional(),
            postalCode: z.string().optional(),
            postalCodeExtension: z.string().optional(),
            country: z.string().optional(),
            countryCode: z.string().optional(),
            type: GetOpportunitiesIdOpportunitiesResponseType$.optional(),
            geoLocation: z.lazy(() => GetOpportunitiesIdGeoLocation$.outboundSchema).optional(),
            customFields: z
                .array(
                    z.lazy(
                        () => GetOpportunitiesIdOpportunitiesResponseCustomFields$.outboundSchema
                    )
                )
                .optional(),
            subdivisionCode: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.contactId === undefined ? null : { contactId: v.contactId }),
                ...(v.accountId === undefined ? null : { accountId: v.accountId }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.companyName === undefined ? null : { companyName: v.companyName }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.phone === undefined ? null : { phone: v.phone }),
                ...(v.street === undefined ? null : { street: v.street }),
                ...(v.addressLine2 === undefined ? null : { addressLine2: v.addressLine2 }),
                ...(v.city === undefined ? null : { city: v.city }),
                ...(v.province === undefined ? null : { province: v.province }),
                ...(v.region === undefined ? null : { region: v.region }),
                ...(v.postalCode === undefined ? null : { postalCode: v.postalCode }),
                ...(v.postalCodeExtension === undefined
                    ? null
                    : { postalCodeExtension: v.postalCodeExtension }),
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.countryCode === undefined ? null : { countryCode: v.countryCode }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.geoLocation === undefined ? null : { geoLocation: v.geoLocation }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                ...(v.subdivisionCode === undefined
                    ? null
                    : { subdivisionCode: v.subdivisionCode }),
            };
        });
}

/** @internal */
export const GetOpportunitiesIdRoles$ = z.nativeEnum(GetOpportunitiesIdRoles);

/** @internal */
export const GetOpportunitiesIdCommunications$ = z.nativeEnum(GetOpportunitiesIdCommunications);

/** @internal */
export namespace GetOpportunitiesIdPreferences$ {
    export type Inbound = {
        id?: string | undefined;
        language?: string | undefined;
        currency?: string | undefined;
        timeZone?: string | undefined;
        communications?: GetOpportunitiesIdCommunications | undefined;
    };

    export const inboundSchema: z.ZodType<GetOpportunitiesIdPreferences, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            language: z.string().optional(),
            currency: z.string().optional(),
            timeZone: z.string().optional(),
            communications: GetOpportunitiesIdCommunications$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.language === undefined ? null : { language: v.language }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.timeZone === undefined ? null : { timeZone: v.timeZone }),
                ...(v.communications === undefined ? null : { communications: v.communications }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        language?: string | undefined;
        currency?: string | undefined;
        timeZone?: string | undefined;
        communications?: GetOpportunitiesIdCommunications | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetOpportunitiesIdPreferences> =
        z
            .object({
                id: z.string().optional(),
                language: z.string().optional(),
                currency: z.string().optional(),
                timeZone: z.string().optional(),
                communications: GetOpportunitiesIdCommunications$.optional(),
            })
            .transform((v) => {
                return {
                    ...(v.id === undefined ? null : { id: v.id }),
                    ...(v.language === undefined ? null : { language: v.language }),
                    ...(v.currency === undefined ? null : { currency: v.currency }),
                    ...(v.timeZone === undefined ? null : { timeZone: v.timeZone }),
                    ...(v.communications === undefined
                        ? null
                        : { communications: v.communications }),
                };
            });
}

/** @internal */
export const GetOpportunitiesIdOpportunitiesResponse200Type$ = z.nativeEnum(
    GetOpportunitiesIdOpportunitiesResponse200Type
);

/** @internal */
export const GetOpportunitiesIdOpportunitiesResponse200ApplicationJSONResponseBodyUnifiedOwnerType$ =
    z.nativeEnum(
        GetOpportunitiesIdOpportunitiesResponse200ApplicationJSONResponseBodyUnifiedOwnerType
    );

/** @internal */
export namespace GetOpportunitiesIdAdditionalInfo$ {
    export type Inbound = {
        id?: string | undefined;
        key?: string | undefined;
        value?: string | undefined;
        type?:
            | GetOpportunitiesIdOpportunitiesResponse200ApplicationJSONResponseBodyUnifiedOwnerType
            | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        entityId?: string | undefined;
        entityType?: string | undefined;
    };

    export const inboundSchema: z.ZodType<GetOpportunitiesIdAdditionalInfo, z.ZodTypeDef, Inbound> =
        z
            .object({
                id: z.string().optional(),
                key: z.string().optional(),
                value: z.string().optional(),
                type: GetOpportunitiesIdOpportunitiesResponse200ApplicationJSONResponseBodyUnifiedOwnerType$.optional(),
                createdAt: z.number().optional(),
                updatedAt: z.number().optional(),
                entityId: z.string().optional(),
                entityType: z.string().optional(),
            })
            .transform((v) => {
                return {
                    ...(v.id === undefined ? null : { id: v.id }),
                    ...(v.key === undefined ? null : { key: v.key }),
                    ...(v.value === undefined ? null : { value: v.value }),
                    ...(v.type === undefined ? null : { type: v.type }),
                    ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                    ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                    ...(v.entityId === undefined ? null : { entityId: v.entityId }),
                    ...(v.entityType === undefined ? null : { entityType: v.entityType }),
                };
            });

    export type Outbound = {
        id?: string | undefined;
        key?: string | undefined;
        value?: string | undefined;
        type?:
            | GetOpportunitiesIdOpportunitiesResponse200ApplicationJSONResponseBodyUnifiedOwnerType
            | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        entityId?: string | undefined;
        entityType?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetOpportunitiesIdAdditionalInfo
    > = z
        .object({
            id: z.string().optional(),
            key: z.string().optional(),
            value: z.string().optional(),
            type: GetOpportunitiesIdOpportunitiesResponse200ApplicationJSONResponseBodyUnifiedOwnerType$.optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            entityId: z.string().optional(),
            entityType: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.key === undefined ? null : { key: v.key }),
                ...(v.value === undefined ? null : { value: v.value }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.entityId === undefined ? null : { entityId: v.entityId }),
                ...(v.entityType === undefined ? null : { entityType: v.entityType }),
            };
        });
}

/** @internal */
export namespace GetOpportunitiesIdSocialLinks$ {
    export type Inbound = {
        type?: GetOpportunitiesIdOpportunitiesResponse200Type | undefined;
        username?: string | undefined;
        displayName?: string | undefined;
        url?: string | undefined;
        avatarUrl?: string | undefined;
        email?: string | undefined;
        additionalInfo?: GetOpportunitiesIdAdditionalInfo$.Inbound | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<GetOpportunitiesIdSocialLinks, z.ZodTypeDef, Inbound> = z
        .object({
            type: GetOpportunitiesIdOpportunitiesResponse200Type$.optional(),
            username: z.string().optional(),
            displayName: z.string().optional(),
            url: z.string().optional(),
            avatarUrl: z.string().optional(),
            email: z.string().optional(),
            additionalInfo: z
                .lazy(() => GetOpportunitiesIdAdditionalInfo$.inboundSchema)
                .optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.username === undefined ? null : { username: v.username }),
                ...(v.displayName === undefined ? null : { displayName: v.displayName }),
                ...(v.url === undefined ? null : { url: v.url }),
                ...(v.avatarUrl === undefined ? null : { avatarUrl: v.avatarUrl }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.additionalInfo === undefined ? null : { additionalInfo: v.additionalInfo }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });

    export type Outbound = {
        type?: GetOpportunitiesIdOpportunitiesResponse200Type | undefined;
        username?: string | undefined;
        displayName?: string | undefined;
        url?: string | undefined;
        avatarUrl?: string | undefined;
        email?: string | undefined;
        additionalInfo?: GetOpportunitiesIdAdditionalInfo$.Outbound | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetOpportunitiesIdSocialLinks> =
        z
            .object({
                type: GetOpportunitiesIdOpportunitiesResponse200Type$.optional(),
                username: z.string().optional(),
                displayName: z.string().optional(),
                url: z.string().optional(),
                avatarUrl: z.string().optional(),
                email: z.string().optional(),
                additionalInfo: z
                    .lazy(() => GetOpportunitiesIdAdditionalInfo$.outboundSchema)
                    .optional(),
                createdAt: z.number().optional(),
                updatedAt: z.number().optional(),
                active: z.boolean().optional(),
                deleted: z.boolean().optional(),
            })
            .transform((v) => {
                return {
                    ...(v.type === undefined ? null : { type: v.type }),
                    ...(v.username === undefined ? null : { username: v.username }),
                    ...(v.displayName === undefined ? null : { displayName: v.displayName }),
                    ...(v.url === undefined ? null : { url: v.url }),
                    ...(v.avatarUrl === undefined ? null : { avatarUrl: v.avatarUrl }),
                    ...(v.email === undefined ? null : { email: v.email }),
                    ...(v.additionalInfo === undefined
                        ? null
                        : { additionalInfo: v.additionalInfo }),
                    ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                    ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                    ...(v.active === undefined ? null : { active: v.active }),
                    ...(v.deleted === undefined ? null : { deleted: v.deleted }),
                };
            });
}

/** @internal */
export const GetOpportunitiesIdOpportunitiesResponseStatus$ = z.nativeEnum(
    GetOpportunitiesIdOpportunitiesResponseStatus
);

/** @internal */
export const GetOpportunitiesIdProvider$ = z.nativeEnum(GetOpportunitiesIdProvider);

/** @internal */
export namespace GetOpportunitiesIdSso$ {
    export type Inbound = {
        provider?: GetOpportunitiesIdProvider | undefined;
        providerUserId?: string | undefined;
        profileUrl?: string | undefined;
        accessToken?: string | undefined;
        refreshToken?: string | undefined;
        expiresIn?: number | undefined;
        expiryDate?: number | undefined;
        scopes?: Array<string> | undefined;
        tokenType?: string | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<GetOpportunitiesIdSso, z.ZodTypeDef, Inbound> = z
        .object({
            provider: GetOpportunitiesIdProvider$.optional(),
            providerUserId: z.string().optional(),
            profileUrl: z.string().optional(),
            accessToken: z.string().optional(),
            refreshToken: z.string().optional(),
            expiresIn: z.number().optional(),
            expiryDate: z.number().optional(),
            scopes: z.array(z.string()).optional(),
            tokenType: z.string().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.provider === undefined ? null : { provider: v.provider }),
                ...(v.providerUserId === undefined ? null : { providerUserId: v.providerUserId }),
                ...(v.profileUrl === undefined ? null : { profileUrl: v.profileUrl }),
                ...(v.accessToken === undefined ? null : { accessToken: v.accessToken }),
                ...(v.refreshToken === undefined ? null : { refreshToken: v.refreshToken }),
                ...(v.expiresIn === undefined ? null : { expiresIn: v.expiresIn }),
                ...(v.expiryDate === undefined ? null : { expiryDate: v.expiryDate }),
                ...(v.scopes === undefined ? null : { scopes: v.scopes }),
                ...(v.tokenType === undefined ? null : { tokenType: v.tokenType }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });

    export type Outbound = {
        provider?: GetOpportunitiesIdProvider | undefined;
        providerUserId?: string | undefined;
        profileUrl?: string | undefined;
        accessToken?: string | undefined;
        refreshToken?: string | undefined;
        expiresIn?: number | undefined;
        expiryDate?: number | undefined;
        scopes?: Array<string> | undefined;
        tokenType?: string | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetOpportunitiesIdSso> = z
        .object({
            provider: GetOpportunitiesIdProvider$.optional(),
            providerUserId: z.string().optional(),
            profileUrl: z.string().optional(),
            accessToken: z.string().optional(),
            refreshToken: z.string().optional(),
            expiresIn: z.number().optional(),
            expiryDate: z.number().optional(),
            scopes: z.array(z.string()).optional(),
            tokenType: z.string().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.provider === undefined ? null : { provider: v.provider }),
                ...(v.providerUserId === undefined ? null : { providerUserId: v.providerUserId }),
                ...(v.profileUrl === undefined ? null : { profileUrl: v.profileUrl }),
                ...(v.accessToken === undefined ? null : { accessToken: v.accessToken }),
                ...(v.refreshToken === undefined ? null : { refreshToken: v.refreshToken }),
                ...(v.expiresIn === undefined ? null : { expiresIn: v.expiresIn }),
                ...(v.expiryDate === undefined ? null : { expiryDate: v.expiryDate }),
                ...(v.scopes === undefined ? null : { scopes: v.scopes }),
                ...(v.tokenType === undefined ? null : { tokenType: v.tokenType }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });
}

/** @internal */
export const GetOpportunitiesIdOpportunitiesResponse200ApplicationJSONType$ = z.nativeEnum(
    GetOpportunitiesIdOpportunitiesResponse200ApplicationJSONType
);

/** @internal */
export namespace GetOpportunitiesIdPaymentMethods$ {
    export type Inbound = {
        id?: string | undefined;
        type?: GetOpportunitiesIdOpportunitiesResponse200ApplicationJSONType | undefined;
        details?: string | undefined;
        isDefault?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<GetOpportunitiesIdPaymentMethods, z.ZodTypeDef, Inbound> =
        z
            .object({
                id: z.string().optional(),
                type: GetOpportunitiesIdOpportunitiesResponse200ApplicationJSONType$.optional(),
                details: z.string().optional(),
                isDefault: z.boolean().optional(),
            })
            .transform((v) => {
                return {
                    ...(v.id === undefined ? null : { id: v.id }),
                    ...(v.type === undefined ? null : { type: v.type }),
                    ...(v.details === undefined ? null : { details: v.details }),
                    ...(v.isDefault === undefined ? null : { isDefault: v.isDefault }),
                };
            });

    export type Outbound = {
        id?: string | undefined;
        type?: GetOpportunitiesIdOpportunitiesResponse200ApplicationJSONType | undefined;
        details?: string | undefined;
        isDefault?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetOpportunitiesIdPaymentMethods
    > = z
        .object({
            id: z.string().optional(),
            type: GetOpportunitiesIdOpportunitiesResponse200ApplicationJSONType$.optional(),
            details: z.string().optional(),
            isDefault: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.details === undefined ? null : { details: v.details }),
                ...(v.isDefault === undefined ? null : { isDefault: v.isDefault }),
            };
        });
}

/** @internal */
export namespace GetOpportunitiesIdOwner$ {
    export type Inbound = {
        id?: string | undefined;
        firstName?: string | undefined;
        middleName?: string | undefined;
        lastName?: string | undefined;
        email?: string | undefined;
        username?: string | undefined;
        password?: string | undefined;
        profilePicture?: GetOpportunitiesIdProfilePicture$.Inbound | undefined;
        coverPhoto?: GetOpportunitiesIdCoverPhoto$.Inbound | undefined;
        gender?: GetOpportunitiesIdGender | undefined;
        dateOfBirth?: number | undefined;
        phoneNumber?: string | undefined;
        isActive?: boolean | undefined;
        lastLogin?: number | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        addresses?: Array<GetOpportunitiesIdOpportunitiesAddresses$.Inbound> | undefined;
        roles?: Array<GetOpportunitiesIdRoles> | undefined;
        preferences?: GetOpportunitiesIdPreferences$.Inbound | undefined;
        bio?: string | undefined;
        website?: string | undefined;
        socialLinks?: GetOpportunitiesIdSocialLinks$.Inbound | undefined;
        status?: GetOpportunitiesIdOpportunitiesResponseStatus | undefined;
        sso?: Array<GetOpportunitiesIdSso$.Inbound> | undefined;
        paymentMethods?: GetOpportunitiesIdPaymentMethods$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<GetOpportunitiesIdOwner, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            firstName: z.string().optional(),
            middleName: z.string().optional(),
            lastName: z.string().optional(),
            email: z.string().optional(),
            username: z.string().optional(),
            password: z.string().optional(),
            profilePicture: z
                .lazy(() => GetOpportunitiesIdProfilePicture$.inboundSchema)
                .optional(),
            coverPhoto: z.lazy(() => GetOpportunitiesIdCoverPhoto$.inboundSchema).optional(),
            gender: GetOpportunitiesIdGender$.optional(),
            dateOfBirth: z.number().optional(),
            phoneNumber: z.string().optional(),
            isActive: z.boolean().optional(),
            lastLogin: z.number().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            addresses: z
                .array(z.lazy(() => GetOpportunitiesIdOpportunitiesAddresses$.inboundSchema))
                .optional(),
            roles: z.array(GetOpportunitiesIdRoles$).optional(),
            preferences: z.lazy(() => GetOpportunitiesIdPreferences$.inboundSchema).optional(),
            bio: z.string().optional(),
            website: z.string().optional(),
            socialLinks: z.lazy(() => GetOpportunitiesIdSocialLinks$.inboundSchema).optional(),
            status: GetOpportunitiesIdOpportunitiesResponseStatus$.optional(),
            sso: z.array(z.lazy(() => GetOpportunitiesIdSso$.inboundSchema)).optional(),
            paymentMethods: z
                .lazy(() => GetOpportunitiesIdPaymentMethods$.inboundSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.middleName === undefined ? null : { middleName: v.middleName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.username === undefined ? null : { username: v.username }),
                ...(v.password === undefined ? null : { password: v.password }),
                ...(v.profilePicture === undefined ? null : { profilePicture: v.profilePicture }),
                ...(v.coverPhoto === undefined ? null : { coverPhoto: v.coverPhoto }),
                ...(v.gender === undefined ? null : { gender: v.gender }),
                ...(v.dateOfBirth === undefined ? null : { dateOfBirth: v.dateOfBirth }),
                ...(v.phoneNumber === undefined ? null : { phoneNumber: v.phoneNumber }),
                ...(v.isActive === undefined ? null : { isActive: v.isActive }),
                ...(v.lastLogin === undefined ? null : { lastLogin: v.lastLogin }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.addresses === undefined ? null : { addresses: v.addresses }),
                ...(v.roles === undefined ? null : { roles: v.roles }),
                ...(v.preferences === undefined ? null : { preferences: v.preferences }),
                ...(v.bio === undefined ? null : { bio: v.bio }),
                ...(v.website === undefined ? null : { website: v.website }),
                ...(v.socialLinks === undefined ? null : { socialLinks: v.socialLinks }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.sso === undefined ? null : { sso: v.sso }),
                ...(v.paymentMethods === undefined ? null : { paymentMethods: v.paymentMethods }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        firstName?: string | undefined;
        middleName?: string | undefined;
        lastName?: string | undefined;
        email?: string | undefined;
        username?: string | undefined;
        password?: string | undefined;
        profilePicture?: GetOpportunitiesIdProfilePicture$.Outbound | undefined;
        coverPhoto?: GetOpportunitiesIdCoverPhoto$.Outbound | undefined;
        gender?: GetOpportunitiesIdGender | undefined;
        dateOfBirth?: number | undefined;
        phoneNumber?: string | undefined;
        isActive?: boolean | undefined;
        lastLogin?: number | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        addresses?: Array<GetOpportunitiesIdOpportunitiesAddresses$.Outbound> | undefined;
        roles?: Array<GetOpportunitiesIdRoles> | undefined;
        preferences?: GetOpportunitiesIdPreferences$.Outbound | undefined;
        bio?: string | undefined;
        website?: string | undefined;
        socialLinks?: GetOpportunitiesIdSocialLinks$.Outbound | undefined;
        status?: GetOpportunitiesIdOpportunitiesResponseStatus | undefined;
        sso?: Array<GetOpportunitiesIdSso$.Outbound> | undefined;
        paymentMethods?: GetOpportunitiesIdPaymentMethods$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetOpportunitiesIdOwner> = z
        .object({
            id: z.string().optional(),
            firstName: z.string().optional(),
            middleName: z.string().optional(),
            lastName: z.string().optional(),
            email: z.string().optional(),
            username: z.string().optional(),
            password: z.string().optional(),
            profilePicture: z
                .lazy(() => GetOpportunitiesIdProfilePicture$.outboundSchema)
                .optional(),
            coverPhoto: z.lazy(() => GetOpportunitiesIdCoverPhoto$.outboundSchema).optional(),
            gender: GetOpportunitiesIdGender$.optional(),
            dateOfBirth: z.number().optional(),
            phoneNumber: z.string().optional(),
            isActive: z.boolean().optional(),
            lastLogin: z.number().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            addresses: z
                .array(z.lazy(() => GetOpportunitiesIdOpportunitiesAddresses$.outboundSchema))
                .optional(),
            roles: z.array(GetOpportunitiesIdRoles$).optional(),
            preferences: z.lazy(() => GetOpportunitiesIdPreferences$.outboundSchema).optional(),
            bio: z.string().optional(),
            website: z.string().optional(),
            socialLinks: z.lazy(() => GetOpportunitiesIdSocialLinks$.outboundSchema).optional(),
            status: GetOpportunitiesIdOpportunitiesResponseStatus$.optional(),
            sso: z.array(z.lazy(() => GetOpportunitiesIdSso$.outboundSchema)).optional(),
            paymentMethods: z
                .lazy(() => GetOpportunitiesIdPaymentMethods$.outboundSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.middleName === undefined ? null : { middleName: v.middleName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.username === undefined ? null : { username: v.username }),
                ...(v.password === undefined ? null : { password: v.password }),
                ...(v.profilePicture === undefined ? null : { profilePicture: v.profilePicture }),
                ...(v.coverPhoto === undefined ? null : { coverPhoto: v.coverPhoto }),
                ...(v.gender === undefined ? null : { gender: v.gender }),
                ...(v.dateOfBirth === undefined ? null : { dateOfBirth: v.dateOfBirth }),
                ...(v.phoneNumber === undefined ? null : { phoneNumber: v.phoneNumber }),
                ...(v.isActive === undefined ? null : { isActive: v.isActive }),
                ...(v.lastLogin === undefined ? null : { lastLogin: v.lastLogin }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.addresses === undefined ? null : { addresses: v.addresses }),
                ...(v.roles === undefined ? null : { roles: v.roles }),
                ...(v.preferences === undefined ? null : { preferences: v.preferences }),
                ...(v.bio === undefined ? null : { bio: v.bio }),
                ...(v.website === undefined ? null : { website: v.website }),
                ...(v.socialLinks === undefined ? null : { socialLinks: v.socialLinks }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.sso === undefined ? null : { sso: v.sso }),
                ...(v.paymentMethods === undefined ? null : { paymentMethods: v.paymentMethods }),
            };
        });
}

/** @internal */
export namespace GetOpportunitiesIdMetadata$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<GetOpportunitiesIdMetadata, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetOpportunitiesIdMetadata> =
        z.object({});
}

/** @internal */
export namespace GetOpportunitiesIdAssociatedWith$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<GetOpportunitiesIdAssociatedWith, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetOpportunitiesIdAssociatedWith
    > = z.object({});
}

/** @internal */
export namespace GetOpportunitiesIdPermissions$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<GetOpportunitiesIdPermissions, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetOpportunitiesIdPermissions> =
        z.object({});
}

/** @internal */
export namespace GetOpportunitiesIdAttachments$ {
    export type Inbound = {
        id?: string | undefined;
        fileName?: string | undefined;
        fileSize?: number | undefined;
        fileType?: string | undefined;
        url?: string | undefined;
        thumbnailUrl?: string | undefined;
        previewUrl?: string | undefined;
        content?: string | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        metadata?: GetOpportunitiesIdMetadata$.Inbound | undefined;
        associatedWith?: GetOpportunitiesIdAssociatedWith$.Inbound | undefined;
        permissions?: GetOpportunitiesIdPermissions$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<GetOpportunitiesIdAttachments, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            fileName: z.string().optional(),
            fileSize: z.number().optional(),
            fileType: z.string().optional(),
            url: z.string().optional(),
            thumbnailUrl: z.string().optional(),
            previewUrl: z.string().optional(),
            content: z.string().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            metadata: z.lazy(() => GetOpportunitiesIdMetadata$.inboundSchema).optional(),
            associatedWith: z
                .lazy(() => GetOpportunitiesIdAssociatedWith$.inboundSchema)
                .optional(),
            permissions: z.lazy(() => GetOpportunitiesIdPermissions$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fileName === undefined ? null : { fileName: v.fileName }),
                ...(v.fileSize === undefined ? null : { fileSize: v.fileSize }),
                ...(v.fileType === undefined ? null : { fileType: v.fileType }),
                ...(v.url === undefined ? null : { url: v.url }),
                ...(v.thumbnailUrl === undefined ? null : { thumbnailUrl: v.thumbnailUrl }),
                ...(v.previewUrl === undefined ? null : { previewUrl: v.previewUrl }),
                ...(v.content === undefined ? null : { content: v.content }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                ...(v.associatedWith === undefined ? null : { associatedWith: v.associatedWith }),
                ...(v.permissions === undefined ? null : { permissions: v.permissions }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        fileName?: string | undefined;
        fileSize?: number | undefined;
        fileType?: string | undefined;
        url?: string | undefined;
        thumbnailUrl?: string | undefined;
        previewUrl?: string | undefined;
        content?: string | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        metadata?: GetOpportunitiesIdMetadata$.Outbound | undefined;
        associatedWith?: GetOpportunitiesIdAssociatedWith$.Outbound | undefined;
        permissions?: GetOpportunitiesIdPermissions$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetOpportunitiesIdAttachments> =
        z
            .object({
                id: z.string().optional(),
                fileName: z.string().optional(),
                fileSize: z.number().optional(),
                fileType: z.string().optional(),
                url: z.string().optional(),
                thumbnailUrl: z.string().optional(),
                previewUrl: z.string().optional(),
                content: z.string().optional(),
                createdAt: z.number().optional(),
                updatedAt: z.number().optional(),
                metadata: z.lazy(() => GetOpportunitiesIdMetadata$.outboundSchema).optional(),
                associatedWith: z
                    .lazy(() => GetOpportunitiesIdAssociatedWith$.outboundSchema)
                    .optional(),
                permissions: z.lazy(() => GetOpportunitiesIdPermissions$.outboundSchema).optional(),
            })
            .transform((v) => {
                return {
                    ...(v.id === undefined ? null : { id: v.id }),
                    ...(v.fileName === undefined ? null : { fileName: v.fileName }),
                    ...(v.fileSize === undefined ? null : { fileSize: v.fileSize }),
                    ...(v.fileType === undefined ? null : { fileType: v.fileType }),
                    ...(v.url === undefined ? null : { url: v.url }),
                    ...(v.thumbnailUrl === undefined ? null : { thumbnailUrl: v.thumbnailUrl }),
                    ...(v.previewUrl === undefined ? null : { previewUrl: v.previewUrl }),
                    ...(v.content === undefined ? null : { content: v.content }),
                    ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                    ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                    ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                    ...(v.associatedWith === undefined
                        ? null
                        : { associatedWith: v.associatedWith }),
                    ...(v.permissions === undefined ? null : { permissions: v.permissions }),
                };
            });
}

/** @internal */
export const GetOpportunitiesIdFieldType$ = z.nativeEnum(GetOpportunitiesIdFieldType);

/** @internal */
export namespace GetOpportunitiesIdCustomFields$ {
    export type Inbound = {
        id?: string | undefined;
        fieldName?: string | undefined;
        fieldValue?: string | undefined;
        fieldType?: GetOpportunitiesIdFieldType | undefined;
    };

    export const inboundSchema: z.ZodType<GetOpportunitiesIdCustomFields, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            fieldName: z.string().optional(),
            fieldValue: z.string().optional(),
            fieldType: GetOpportunitiesIdFieldType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fieldName === undefined ? null : { fieldName: v.fieldName }),
                ...(v.fieldValue === undefined ? null : { fieldValue: v.fieldValue }),
                ...(v.fieldType === undefined ? null : { fieldType: v.fieldType }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        fieldName?: string | undefined;
        fieldValue?: string | undefined;
        fieldType?: GetOpportunitiesIdFieldType | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetOpportunitiesIdCustomFields> =
        z
            .object({
                id: z.string().optional(),
                fieldName: z.string().optional(),
                fieldValue: z.string().optional(),
                fieldType: GetOpportunitiesIdFieldType$.optional(),
            })
            .transform((v) => {
                return {
                    ...(v.id === undefined ? null : { id: v.id }),
                    ...(v.fieldName === undefined ? null : { fieldName: v.fieldName }),
                    ...(v.fieldValue === undefined ? null : { fieldValue: v.fieldValue }),
                    ...(v.fieldType === undefined ? null : { fieldType: v.fieldType }),
                };
            });
}

/** @internal */
export namespace GetOpportunitiesIdUnified$ {
    export type Inbound = {
        id?: string | undefined;
        title?: string | undefined;
        description?: string | undefined;
        amount?: number | undefined;
        currency?: string | undefined;
        stage?: string | undefined;
        probability?: number | undefined;
        closeDate?: string | undefined;
        type?: string | undefined;
        nextStep?: string | undefined;
        leadId?: string | undefined;
        leadSource?: string | undefined;
        isClosed?: boolean | undefined;
        isWon?: boolean | undefined;
        createdAt?: string | undefined;
        updatedAt?: string | undefined;
        lostReason?: string | undefined;
        campaign?: GetOpportunitiesIdCampaign$.Inbound | undefined;
        account?: GetOpportunitiesIdAccount$.Inbound | undefined;
        contacts?: Array<GetOpportunitiesIdContacts$.Inbound> | undefined;
        owner?: GetOpportunitiesIdOwner$.Inbound | undefined;
        attachments?: Array<GetOpportunitiesIdAttachments$.Inbound> | undefined;
        notes?: Array<string> | undefined;
        customFields?: Array<GetOpportunitiesIdCustomFields$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<GetOpportunitiesIdUnified, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            title: z.string().optional(),
            description: z.string().optional(),
            amount: z.number().optional(),
            currency: z.string().optional(),
            stage: z.string().optional(),
            probability: z.number().optional(),
            closeDate: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            type: z.string().optional(),
            nextStep: z.string().optional(),
            leadId: z.string().optional(),
            leadSource: z.string().optional(),
            isClosed: z.boolean().optional(),
            isWon: z.boolean().optional(),
            createdAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            updatedAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            lostReason: z.string().optional(),
            campaign: z.lazy(() => GetOpportunitiesIdCampaign$.inboundSchema).optional(),
            account: z.lazy(() => GetOpportunitiesIdAccount$.inboundSchema).optional(),
            contacts: z.array(z.lazy(() => GetOpportunitiesIdContacts$.inboundSchema)).optional(),
            owner: z.lazy(() => GetOpportunitiesIdOwner$.inboundSchema).optional(),
            attachments: z
                .array(z.lazy(() => GetOpportunitiesIdAttachments$.inboundSchema))
                .optional(),
            notes: z.array(z.string()).optional(),
            customFields: z
                .array(z.lazy(() => GetOpportunitiesIdCustomFields$.inboundSchema))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.amount === undefined ? null : { amount: v.amount }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.stage === undefined ? null : { stage: v.stage }),
                ...(v.probability === undefined ? null : { probability: v.probability }),
                ...(v.closeDate === undefined ? null : { closeDate: v.closeDate }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.nextStep === undefined ? null : { nextStep: v.nextStep }),
                ...(v.leadId === undefined ? null : { leadId: v.leadId }),
                ...(v.leadSource === undefined ? null : { leadSource: v.leadSource }),
                ...(v.isClosed === undefined ? null : { isClosed: v.isClosed }),
                ...(v.isWon === undefined ? null : { isWon: v.isWon }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.lostReason === undefined ? null : { lostReason: v.lostReason }),
                ...(v.campaign === undefined ? null : { campaign: v.campaign }),
                ...(v.account === undefined ? null : { account: v.account }),
                ...(v.contacts === undefined ? null : { contacts: v.contacts }),
                ...(v.owner === undefined ? null : { owner: v.owner }),
                ...(v.attachments === undefined ? null : { attachments: v.attachments }),
                ...(v.notes === undefined ? null : { notes: v.notes }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        title?: string | undefined;
        description?: string | undefined;
        amount?: number | undefined;
        currency?: string | undefined;
        stage?: string | undefined;
        probability?: number | undefined;
        closeDate?: string | undefined;
        type?: string | undefined;
        nextStep?: string | undefined;
        leadId?: string | undefined;
        leadSource?: string | undefined;
        isClosed?: boolean | undefined;
        isWon?: boolean | undefined;
        createdAt?: string | undefined;
        updatedAt?: string | undefined;
        lostReason?: string | undefined;
        campaign?: GetOpportunitiesIdCampaign$.Outbound | undefined;
        account?: GetOpportunitiesIdAccount$.Outbound | undefined;
        contacts?: Array<GetOpportunitiesIdContacts$.Outbound> | undefined;
        owner?: GetOpportunitiesIdOwner$.Outbound | undefined;
        attachments?: Array<GetOpportunitiesIdAttachments$.Outbound> | undefined;
        notes?: Array<string> | undefined;
        customFields?: Array<GetOpportunitiesIdCustomFields$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetOpportunitiesIdUnified> = z
        .object({
            id: z.string().optional(),
            title: z.string().optional(),
            description: z.string().optional(),
            amount: z.number().optional(),
            currency: z.string().optional(),
            stage: z.string().optional(),
            probability: z.number().optional(),
            closeDate: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            type: z.string().optional(),
            nextStep: z.string().optional(),
            leadId: z.string().optional(),
            leadSource: z.string().optional(),
            isClosed: z.boolean().optional(),
            isWon: z.boolean().optional(),
            createdAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            updatedAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            lostReason: z.string().optional(),
            campaign: z.lazy(() => GetOpportunitiesIdCampaign$.outboundSchema).optional(),
            account: z.lazy(() => GetOpportunitiesIdAccount$.outboundSchema).optional(),
            contacts: z.array(z.lazy(() => GetOpportunitiesIdContacts$.outboundSchema)).optional(),
            owner: z.lazy(() => GetOpportunitiesIdOwner$.outboundSchema).optional(),
            attachments: z
                .array(z.lazy(() => GetOpportunitiesIdAttachments$.outboundSchema))
                .optional(),
            notes: z.array(z.string()).optional(),
            customFields: z
                .array(z.lazy(() => GetOpportunitiesIdCustomFields$.outboundSchema))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.amount === undefined ? null : { amount: v.amount }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.stage === undefined ? null : { stage: v.stage }),
                ...(v.probability === undefined ? null : { probability: v.probability }),
                ...(v.closeDate === undefined ? null : { closeDate: v.closeDate }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.nextStep === undefined ? null : { nextStep: v.nextStep }),
                ...(v.leadId === undefined ? null : { leadId: v.leadId }),
                ...(v.leadSource === undefined ? null : { leadSource: v.leadSource }),
                ...(v.isClosed === undefined ? null : { isClosed: v.isClosed }),
                ...(v.isWon === undefined ? null : { isWon: v.isWon }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.lostReason === undefined ? null : { lostReason: v.lostReason }),
                ...(v.campaign === undefined ? null : { campaign: v.campaign }),
                ...(v.account === undefined ? null : { account: v.account }),
                ...(v.contacts === undefined ? null : { contacts: v.contacts }),
                ...(v.owner === undefined ? null : { owner: v.owner }),
                ...(v.attachments === undefined ? null : { attachments: v.attachments }),
                ...(v.notes === undefined ? null : { notes: v.notes }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
            };
        });
}

/** @internal */
export namespace GetOpportunitiesIdPassthrough$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<GetOpportunitiesIdPassthrough, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetOpportunitiesIdPassthrough> =
        z.object({});
}

/** @internal */
export namespace GetOpportunitiesIdCache$ {
    export type Inbound = {
        hit?: boolean | undefined;
        ttl?: number | undefined;
        key?: string | undefined;
    };

    export const inboundSchema: z.ZodType<GetOpportunitiesIdCache, z.ZodTypeDef, Inbound> = z
        .object({
            hit: z.boolean().optional(),
            ttl: z.number().int().optional(),
            key: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.hit === undefined ? null : { hit: v.hit }),
                ...(v.ttl === undefined ? null : { ttl: v.ttl }),
                ...(v.key === undefined ? null : { key: v.key }),
            };
        });

    export type Outbound = {
        hit?: boolean | undefined;
        ttl?: number | undefined;
        key?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetOpportunitiesIdCache> = z
        .object({
            hit: z.boolean().optional(),
            ttl: z.number().int().optional(),
            key: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.hit === undefined ? null : { hit: v.hit }),
                ...(v.ttl === undefined ? null : { ttl: v.ttl }),
                ...(v.key === undefined ? null : { key: v.key }),
            };
        });
}

/** @internal */
export namespace GetOpportunitiesIdMeta$ {
    export type Inbound = {
        timestamp?: number | undefined;
        latency?: number | undefined;
        platformRateLimitRemaining?: number | undefined;
        rateLimitRemaining?: number | undefined;
        cache?: GetOpportunitiesIdCache$.Inbound | undefined;
        transactionKey?: string | undefined;
        txn?: string | undefined;
        platform?: string | undefined;
        platformVersion?: string | undefined;
        connectionDefinitionKey?: string | undefined;
        action?: string | undefined;
        commonModel?: string | undefined;
        commonModelVersion?: string | undefined;
        connectionKey?: string | undefined;
        hash?: string | undefined;
        heartbeats?: Array<string> | undefined;
        totalTransactions?: number | undefined;
    };

    export const inboundSchema: z.ZodType<GetOpportunitiesIdMeta, z.ZodTypeDef, Inbound> = z
        .object({
            timestamp: z.number().int().optional(),
            latency: z.number().int().optional(),
            platformRateLimitRemaining: z.number().int().optional(),
            rateLimitRemaining: z.number().int().optional(),
            cache: z.lazy(() => GetOpportunitiesIdCache$.inboundSchema).optional(),
            transactionKey: z.string().optional(),
            txn: z.string().optional(),
            platform: z.string().optional(),
            platformVersion: z.string().optional(),
            connectionDefinitionKey: z.string().optional(),
            action: z.string().optional(),
            commonModel: z.string().optional(),
            commonModelVersion: z.string().optional(),
            connectionKey: z.string().optional(),
            hash: z.string().optional(),
            heartbeats: z.array(z.string()).optional(),
            totalTransactions: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.timestamp === undefined ? null : { timestamp: v.timestamp }),
                ...(v.latency === undefined ? null : { latency: v.latency }),
                ...(v.platformRateLimitRemaining === undefined
                    ? null
                    : { platformRateLimitRemaining: v.platformRateLimitRemaining }),
                ...(v.rateLimitRemaining === undefined
                    ? null
                    : { rateLimitRemaining: v.rateLimitRemaining }),
                ...(v.cache === undefined ? null : { cache: v.cache }),
                ...(v.transactionKey === undefined ? null : { transactionKey: v.transactionKey }),
                ...(v.txn === undefined ? null : { txn: v.txn }),
                ...(v.platform === undefined ? null : { platform: v.platform }),
                ...(v.platformVersion === undefined
                    ? null
                    : { platformVersion: v.platformVersion }),
                ...(v.connectionDefinitionKey === undefined
                    ? null
                    : { connectionDefinitionKey: v.connectionDefinitionKey }),
                ...(v.action === undefined ? null : { action: v.action }),
                ...(v.commonModel === undefined ? null : { commonModel: v.commonModel }),
                ...(v.commonModelVersion === undefined
                    ? null
                    : { commonModelVersion: v.commonModelVersion }),
                ...(v.connectionKey === undefined ? null : { connectionKey: v.connectionKey }),
                ...(v.hash === undefined ? null : { hash: v.hash }),
                ...(v.heartbeats === undefined ? null : { heartbeats: v.heartbeats }),
                ...(v.totalTransactions === undefined
                    ? null
                    : { totalTransactions: v.totalTransactions }),
            };
        });

    export type Outbound = {
        timestamp?: number | undefined;
        latency?: number | undefined;
        platformRateLimitRemaining?: number | undefined;
        rateLimitRemaining?: number | undefined;
        cache?: GetOpportunitiesIdCache$.Outbound | undefined;
        transactionKey?: string | undefined;
        txn?: string | undefined;
        platform?: string | undefined;
        platformVersion?: string | undefined;
        connectionDefinitionKey?: string | undefined;
        action?: string | undefined;
        commonModel?: string | undefined;
        commonModelVersion?: string | undefined;
        connectionKey?: string | undefined;
        hash?: string | undefined;
        heartbeats?: Array<string> | undefined;
        totalTransactions?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetOpportunitiesIdMeta> = z
        .object({
            timestamp: z.number().int().optional(),
            latency: z.number().int().optional(),
            platformRateLimitRemaining: z.number().int().optional(),
            rateLimitRemaining: z.number().int().optional(),
            cache: z.lazy(() => GetOpportunitiesIdCache$.outboundSchema).optional(),
            transactionKey: z.string().optional(),
            txn: z.string().optional(),
            platform: z.string().optional(),
            platformVersion: z.string().optional(),
            connectionDefinitionKey: z.string().optional(),
            action: z.string().optional(),
            commonModel: z.string().optional(),
            commonModelVersion: z.string().optional(),
            connectionKey: z.string().optional(),
            hash: z.string().optional(),
            heartbeats: z.array(z.string()).optional(),
            totalTransactions: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.timestamp === undefined ? null : { timestamp: v.timestamp }),
                ...(v.latency === undefined ? null : { latency: v.latency }),
                ...(v.platformRateLimitRemaining === undefined
                    ? null
                    : { platformRateLimitRemaining: v.platformRateLimitRemaining }),
                ...(v.rateLimitRemaining === undefined
                    ? null
                    : { rateLimitRemaining: v.rateLimitRemaining }),
                ...(v.cache === undefined ? null : { cache: v.cache }),
                ...(v.transactionKey === undefined ? null : { transactionKey: v.transactionKey }),
                ...(v.txn === undefined ? null : { txn: v.txn }),
                ...(v.platform === undefined ? null : { platform: v.platform }),
                ...(v.platformVersion === undefined
                    ? null
                    : { platformVersion: v.platformVersion }),
                ...(v.connectionDefinitionKey === undefined
                    ? null
                    : { connectionDefinitionKey: v.connectionDefinitionKey }),
                ...(v.action === undefined ? null : { action: v.action }),
                ...(v.commonModel === undefined ? null : { commonModel: v.commonModel }),
                ...(v.commonModelVersion === undefined
                    ? null
                    : { commonModelVersion: v.commonModelVersion }),
                ...(v.connectionKey === undefined ? null : { connectionKey: v.connectionKey }),
                ...(v.hash === undefined ? null : { hash: v.hash }),
                ...(v.heartbeats === undefined ? null : { heartbeats: v.heartbeats }),
                ...(v.totalTransactions === undefined
                    ? null
                    : { totalTransactions: v.totalTransactions }),
            };
        });
}

/** @internal */
export namespace GetOpportunitiesIdResponseBody$ {
    export type Inbound = {
        status?: string | undefined;
        statusCode?: GetOpportunitiesIdStatusCode | undefined;
        unified?: GetOpportunitiesIdUnified$.Inbound | undefined;
        passthrough?: GetOpportunitiesIdPassthrough$.Inbound | undefined;
        meta?: GetOpportunitiesIdMeta$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<GetOpportunitiesIdResponseBody, z.ZodTypeDef, Inbound> = z
        .object({
            status: z.string().optional(),
            statusCode: GetOpportunitiesIdStatusCode$.optional(),
            unified: z.lazy(() => GetOpportunitiesIdUnified$.inboundSchema).optional(),
            passthrough: z.lazy(() => GetOpportunitiesIdPassthrough$.inboundSchema).optional(),
            meta: z.lazy(() => GetOpportunitiesIdMeta$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.statusCode === undefined ? null : { statusCode: v.statusCode }),
                ...(v.unified === undefined ? null : { unified: v.unified }),
                ...(v.passthrough === undefined ? null : { passthrough: v.passthrough }),
                ...(v.meta === undefined ? null : { meta: v.meta }),
            };
        });

    export type Outbound = {
        status?: string | undefined;
        statusCode?: GetOpportunitiesIdStatusCode | undefined;
        unified?: GetOpportunitiesIdUnified$.Outbound | undefined;
        passthrough?: GetOpportunitiesIdPassthrough$.Outbound | undefined;
        meta?: GetOpportunitiesIdMeta$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetOpportunitiesIdResponseBody> =
        z
            .object({
                status: z.string().optional(),
                statusCode: GetOpportunitiesIdStatusCode$.optional(),
                unified: z.lazy(() => GetOpportunitiesIdUnified$.outboundSchema).optional(),
                passthrough: z.lazy(() => GetOpportunitiesIdPassthrough$.outboundSchema).optional(),
                meta: z.lazy(() => GetOpportunitiesIdMeta$.outboundSchema).optional(),
            })
            .transform((v) => {
                return {
                    ...(v.status === undefined ? null : { status: v.status }),
                    ...(v.statusCode === undefined ? null : { statusCode: v.statusCode }),
                    ...(v.unified === undefined ? null : { unified: v.unified }),
                    ...(v.passthrough === undefined ? null : { passthrough: v.passthrough }),
                    ...(v.meta === undefined ? null : { meta: v.meta }),
                };
            });
}

/** @internal */
export namespace GetOpportunitiesIdResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        object?: GetOpportunitiesIdResponseBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<GetOpportunitiesIdResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => GetOpportunitiesIdResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: GetOpportunitiesIdResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetOpportunitiesIdResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z.lazy(() => GetOpportunitiesIdResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
