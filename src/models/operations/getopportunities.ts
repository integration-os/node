/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type GetOpportunitiesRequest = {
    /**
     * IntegrationOS API key
     */
    xIntegrationosSecret: string;
    /**
     * The unique identifier of a Connected Account
     */
    xIntegrationosConnectionKey: string;
};

export enum GetOpportunitiesStatusCode {
    TwoHundred = 200,
    FourHundred = 400,
    FiveHundred = 500,
}

export enum GetOpportunitiesType {
    Email = "Email",
    SocialMedia = "Social Media",
    SearchEngine = "Search Engine",
    Display = "Display",
    Other = "Other",
}

export enum GetOpportunitiesStatus {
    Planned = "Planned",
    Active = "Active",
    Paused = "Paused",
    Completed = "Completed",
    Cancelled = "Cancelled",
}

export type GetOpportunitiesPerformanceMetrics = {
    impressions?: number | undefined;
    clicks?: number | undefined;
    conversions?: number | undefined;
    spend?: number | undefined;
    returnOnInvestment?: number | undefined;
    costPerClick?: number | undefined;
    costPerConversion?: number | undefined;
    conversionRate?: number | undefined;
};

export enum GetOpportunitiesOpportunitiesResponse200ApplicationJSONResponseBodyUnifiedCampaignType {
    String = "String",
    Number = "Number",
    Boolean = "Boolean",
    Date = "Date",
    Json = "Json",
    Array = "Array",
}

export type GetOpportunitiesOpportunitiesMetadata = {
    id?: string | undefined;
    key?: string | undefined;
    value?: string | undefined;
    type?:
        | GetOpportunitiesOpportunitiesResponse200ApplicationJSONResponseBodyUnifiedCampaignType
        | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    entityId?: string | undefined;
    entityType?: string | undefined;
};

export enum GetOpportunitiesEntityType {
    User = "User",
    Project = "Project",
    Message = "Message",
    Other = "Other",
}

export type GetOpportunitiesOpportunitiesAssociatedWith = {
    entityId?: string | undefined;
    entityType?: GetOpportunitiesEntityType | undefined;
    attributes?: Array<string> | undefined;
};

export enum GetOpportunitiesAccessControlType {
    Rbac = "RBAC",
    Abac = "ABAC",
    Custom = "Custom",
    None = "None",
}

export enum GetOpportunitiesOpportunitiesResponse200ApplicationJSONResponseBodyUnifiedCampaignCreativeAssetsType {
    User = "User",
    Group = "Group",
}

export type GetOpportunitiesAssigneeDetails = {
    identifier?: string | undefined;
    displayName?: string | undefined;
    type?:
        | GetOpportunitiesOpportunitiesResponse200ApplicationJSONResponseBodyUnifiedCampaignCreativeAssetsType
        | undefined;
};

export enum GetOpportunitiesIdentifierType {
    String = "String",
    Number = "Number",
}

export type GetOpportunitiesOpportunitiesPermissions = {
    canView?: Array<string> | undefined;
    canEdit?: Array<string> | undefined;
    canDelete?: Array<string> | undefined;
    roles?: Array<string> | undefined;
    accessControlType?: GetOpportunitiesAccessControlType | undefined;
    assigneeDetails?: GetOpportunitiesAssigneeDetails | undefined;
    identifierType?: GetOpportunitiesIdentifierType | undefined;
};

export type GetOpportunitiesCreativeAssets = {
    id?: string | undefined;
    fileName?: string | undefined;
    fileSize?: number | undefined;
    fileType?: string | undefined;
    url?: string | undefined;
    thumbnailUrl?: string | undefined;
    previewUrl?: string | undefined;
    content?: string | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    metadata?: GetOpportunitiesOpportunitiesMetadata | undefined;
    associatedWith?: GetOpportunitiesOpportunitiesAssociatedWith | undefined;
    permissions?: GetOpportunitiesOpportunitiesPermissions | undefined;
};

export type GetOpportunitiesCampaign = {
    id?: string | undefined;
    name?: string | undefined;
    type?: GetOpportunitiesType | undefined;
    status?: GetOpportunitiesStatus | undefined;
    startDate?: number | undefined;
    endDate?: number | undefined;
    budget?: number | undefined;
    targetAudience?: string | undefined;
    channels?: Array<string> | undefined;
    performanceMetrics?: GetOpportunitiesPerformanceMetrics | undefined;
    creativeAssets?: GetOpportunitiesCreativeAssets | undefined;
    tags?: Array<string> | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    active?: boolean | undefined;
    deleted?: boolean | undefined;
};

export enum GetOpportunitiesAccountType {
    Customer = "Customer",
    Partner = "Partner",
    Competitor = "Competitor",
    Investor = "Investor",
    Vendor = "Vendor",
    Other = "Other",
}

export enum GetOpportunitiesRating {
    Hot = "Hot",
    Warm = "Warm",
    Cold = "Cold",
}

export enum GetOpportunitiesOpportunitiesType {
    Home = "home",
    Work = "work",
    Other = "other",
}

export type GetOpportunitiesGeoLocation = {
    latitude?: number | undefined;
    longitude?: number | undefined;
    altitude?: number | undefined;
    accuracy?: number | undefined;
    altitudeAccuracy?: number | undefined;
    heading?: number | undefined;
    speed?: number | undefined;
    timestamp?: number | undefined;
};

export enum GetOpportunitiesOpportunitiesResponseFieldType {
    Text = "text",
    Number = "number",
    Date = "date",
    Boolean = "boolean",
    Enum = "enum",
    Json = "json",
    Array = "array",
}

export type GetOpportunitiesOpportunitiesResponse200ApplicationJSONResponseBodyCustomFields = {
    id?: string | undefined;
    fieldName?: string | undefined;
    fieldValue?: string | undefined;
    fieldType?: GetOpportunitiesOpportunitiesResponseFieldType | undefined;
};

export type GetOpportunitiesBillingAddress = {
    id?: string | undefined;
    contactId?: string | undefined;
    accountId?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    name?: string | undefined;
    companyName?: string | undefined;
    email?: string | undefined;
    phone?: string | undefined;
    street?: string | undefined;
    addressLine2?: string | undefined;
    city?: string | undefined;
    province?: string | undefined;
    region?: string | undefined;
    postalCode?: string | undefined;
    postalCodeExtension?: string | undefined;
    country?: string | undefined;
    countryCode?: string | undefined;
    type?: GetOpportunitiesOpportunitiesType | undefined;
    geoLocation?: GetOpportunitiesGeoLocation | undefined;
    customFields?:
        | Array<GetOpportunitiesOpportunitiesResponse200ApplicationJSONResponseBodyCustomFields>
        | undefined;
    subdivisionCode?: string | undefined;
};

export enum GetOpportunitiesOpportunitiesResponseType {
    Home = "home",
    Work = "work",
    Other = "other",
}

export type GetOpportunitiesOpportunitiesGeoLocation = {
    latitude?: number | undefined;
    longitude?: number | undefined;
    altitude?: number | undefined;
    accuracy?: number | undefined;
    altitudeAccuracy?: number | undefined;
    heading?: number | undefined;
    speed?: number | undefined;
    timestamp?: number | undefined;
};

export enum GetOpportunitiesOpportunitiesResponse200FieldType {
    Text = "text",
    Number = "number",
    Date = "date",
    Boolean = "boolean",
    Enum = "enum",
    Json = "json",
    Array = "array",
}

export type GetOpportunitiesOpportunitiesResponse200CustomFields = {
    id?: string | undefined;
    fieldName?: string | undefined;
    fieldValue?: string | undefined;
    fieldType?: GetOpportunitiesOpportunitiesResponse200FieldType | undefined;
};

export type GetOpportunitiesShippingAddress = {
    id?: string | undefined;
    contactId?: string | undefined;
    accountId?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    name?: string | undefined;
    companyName?: string | undefined;
    email?: string | undefined;
    phone?: string | undefined;
    street?: string | undefined;
    addressLine2?: string | undefined;
    city?: string | undefined;
    province?: string | undefined;
    region?: string | undefined;
    postalCode?: string | undefined;
    postalCodeExtension?: string | undefined;
    country?: string | undefined;
    countryCode?: string | undefined;
    type?: GetOpportunitiesOpportunitiesResponseType | undefined;
    geoLocation?: GetOpportunitiesOpportunitiesGeoLocation | undefined;
    customFields?: Array<GetOpportunitiesOpportunitiesResponse200CustomFields> | undefined;
    subdivisionCode?: string | undefined;
};

export enum GetOpportunitiesOpportunitiesStatus {
    Active = "Active",
    Inactive = "Inactive",
    Pending = "Pending",
    Closed = "Closed",
}

export enum GetOpportunitiesOpportunitiesFieldType {
    Text = "text",
    Number = "number",
    Date = "date",
    Boolean = "boolean",
    Enum = "enum",
    Json = "json",
    Array = "array",
}

export type GetOpportunitiesOpportunitiesResponseCustomFields = {
    id?: string | undefined;
    fieldName?: string | undefined;
    fieldValue?: string | undefined;
    fieldType?: GetOpportunitiesOpportunitiesFieldType | undefined;
};

export type GetOpportunitiesAccount = {
    id?: string | undefined;
    name?: string | undefined;
    industry?: string | undefined;
    accountType?: GetOpportunitiesAccountType | undefined;
    rating?: GetOpportunitiesRating | undefined;
    phone?: string | undefined;
    email?: string | undefined;
    website?: string | undefined;
    billingAddress?: GetOpportunitiesBillingAddress | undefined;
    shippingAddress?: GetOpportunitiesShippingAddress | undefined;
    numberOfEmployees?: number | undefined;
    annualRevenue?: number | undefined;
    createdDate?: number | undefined;
    lastModifiedDate?: number | undefined;
    status?: GetOpportunitiesOpportunitiesStatus | undefined;
    ownerId?: string | undefined;
    customFields?: Array<GetOpportunitiesOpportunitiesResponseCustomFields> | undefined;
    tags?: Array<string> | undefined;
};

export type GetOpportunitiesAddress = {};

export type GetOpportunitiesAddresses = {};

export type GetOpportunitiesNotes = {};

export type GetOpportunitiesSocialProfiles = {};

export type GetOpportunitiesOpportunitiesCustomFields = {};

export type GetOpportunitiesContacts = {
    id?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    company?: string | undefined;
    email?: string | undefined;
    emails?: Array<string> | undefined;
    phone?: string | undefined;
    phones?: Array<string> | undefined;
    address?: GetOpportunitiesAddress | undefined;
    addresses?: Array<GetOpportunitiesAddresses> | undefined;
    birthday?: number | undefined;
    relationship?: string | undefined;
    note?: string | undefined;
    notes?: GetOpportunitiesNotes | undefined;
    tags?: Array<string> | undefined;
    websites?: Array<string> | undefined;
    socialProfiles?: Array<GetOpportunitiesSocialProfiles> | undefined;
    customFields?: Array<GetOpportunitiesOpportunitiesCustomFields> | undefined;
};

export enum GetOpportunitiesMimeType {
    ImageJpeg = "image/jpeg",
    ImagePng = "image/png",
    ImageGif = "image/gif",
    ImageSvgPlusXml = "image/svg+xml",
    ImageWebp = "image/webp",
}

export type GetOpportunitiesProfilePicture = {
    id?: string | undefined;
    src?: string | undefined;
    altText?: string | undefined;
    width?: number | undefined;
    height?: number | undefined;
    thumbnailSrc?: string | undefined;
    caption?: string | undefined;
    title?: string | undefined;
    mimeType?: GetOpportunitiesMimeType | undefined;
    tags?: Array<string> | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    active?: boolean | undefined;
    deleted?: boolean | undefined;
};

export enum GetOpportunitiesOpportunitiesMimeType {
    ImageJpeg = "image/jpeg",
    ImagePng = "image/png",
    ImageGif = "image/gif",
    ImageSvgPlusXml = "image/svg+xml",
    ImageWebp = "image/webp",
}

export type GetOpportunitiesCoverPhoto = {
    id?: string | undefined;
    src?: string | undefined;
    altText?: string | undefined;
    width?: number | undefined;
    height?: number | undefined;
    thumbnailSrc?: string | undefined;
    caption?: string | undefined;
    title?: string | undefined;
    mimeType?: GetOpportunitiesOpportunitiesMimeType | undefined;
    tags?: Array<string> | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    active?: boolean | undefined;
    deleted?: boolean | undefined;
};

export enum GetOpportunitiesGender {
    Male = "Male",
    Female = "Female",
    Other = "Other",
    PreferNotToSay = "Prefer not to say",
}

export enum GetOpportunitiesOpportunitiesResponse200Type {
    Home = "home",
    Work = "work",
    Other = "other",
}

export type GetOpportunitiesOpportunitiesResponseGeoLocation = {};

export type GetOpportunitiesOpportunitiesResponse200ApplicationJSONCustomFields = {};

export type GetOpportunitiesOpportunitiesAddresses = {
    id?: string | undefined;
    contactId?: string | undefined;
    accountId?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    name?: string | undefined;
    companyName?: string | undefined;
    email?: string | undefined;
    phone?: string | undefined;
    street?: string | undefined;
    addressLine2?: string | undefined;
    city?: string | undefined;
    province?: string | undefined;
    region?: string | undefined;
    postalCode?: string | undefined;
    postalCodeExtension?: string | undefined;
    country?: string | undefined;
    countryCode?: string | undefined;
    type?: GetOpportunitiesOpportunitiesResponse200Type | undefined;
    geoLocation?: GetOpportunitiesOpportunitiesResponseGeoLocation | undefined;
    customFields?:
        | Array<GetOpportunitiesOpportunitiesResponse200ApplicationJSONCustomFields>
        | undefined;
    subdivisionCode?: string | undefined;
};

export enum GetOpportunitiesRoles {
    User = "User",
    Admin = "Admin",
    Moderator = "Moderator",
}

export enum GetOpportunitiesCommunications {
    Email = "Email",
    Sms = "SMS",
    PushNotification = "PushNotification",
}

export type GetOpportunitiesPreferences = {
    id?: string | undefined;
    language?: string | undefined;
    currency?: string | undefined;
    timeZone?: string | undefined;
    communications?: GetOpportunitiesCommunications | undefined;
};

export enum GetOpportunitiesOpportunitiesResponse200ApplicationJSONType {
    Facebook = "facebook",
    Twitter = "twitter",
    Linkedin = "linkedin",
    Instagram = "instagram",
    Tiktok = "tiktok",
    Pinterest = "pinterest",
    Youtube = "youtube",
    Other = "other",
}

export enum GetOpportunitiesOpportunitiesResponse200ApplicationJSONResponseBodyUnifiedType {
    String = "String",
    Number = "Number",
    Boolean = "Boolean",
    Date = "Date",
    Json = "Json",
    Array = "Array",
}

export type GetOpportunitiesAdditionalInfo = {
    id?: string | undefined;
    key?: string | undefined;
    value?: string | undefined;
    type?:
        | GetOpportunitiesOpportunitiesResponse200ApplicationJSONResponseBodyUnifiedType
        | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    entityId?: string | undefined;
    entityType?: string | undefined;
};

export type GetOpportunitiesSocialLinks = {
    type?: GetOpportunitiesOpportunitiesResponse200ApplicationJSONType | undefined;
    username?: string | undefined;
    displayName?: string | undefined;
    url?: string | undefined;
    avatarUrl?: string | undefined;
    email?: string | undefined;
    additionalInfo?: GetOpportunitiesAdditionalInfo | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    active?: boolean | undefined;
    deleted?: boolean | undefined;
};

export enum GetOpportunitiesOpportunitiesResponseStatus {
    Pending = "Pending",
    Verified = "Verified",
    Suspended = "Suspended",
    Inactive = "Inactive",
}

export enum GetOpportunitiesProvider {
    Google = "Google",
    Facebook = "Facebook",
    Twitter = "Twitter",
    LinkedIn = "LinkedIn",
    Microsoft = "Microsoft",
    Apple = "Apple",
    Other = "Other",
}

export type GetOpportunitiesSso = {
    provider?: GetOpportunitiesProvider | undefined;
    providerUserId?: string | undefined;
    profileUrl?: string | undefined;
    accessToken?: string | undefined;
    refreshToken?: string | undefined;
    expiresIn?: number | undefined;
    expiryDate?: number | undefined;
    scopes?: Array<string> | undefined;
    tokenType?: string | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    active?: boolean | undefined;
    deleted?: boolean | undefined;
};

export enum GetOpportunitiesOpportunitiesResponse200ApplicationJSONResponseBodyType {
    CreditCard = "CreditCard",
    PayPal = "PayPal",
    BankTransfer = "BankTransfer",
    CryptoCurrency = "CryptoCurrency",
}

export type GetOpportunitiesPaymentMethods = {
    id?: string | undefined;
    type?: GetOpportunitiesOpportunitiesResponse200ApplicationJSONResponseBodyType | undefined;
    details?: string | undefined;
    isDefault?: boolean | undefined;
};

export type GetOpportunitiesOwner = {
    id?: string | undefined;
    firstName?: string | undefined;
    middleName?: string | undefined;
    lastName?: string | undefined;
    email?: string | undefined;
    username?: string | undefined;
    password?: string | undefined;
    profilePicture?: GetOpportunitiesProfilePicture | undefined;
    coverPhoto?: GetOpportunitiesCoverPhoto | undefined;
    gender?: GetOpportunitiesGender | undefined;
    dateOfBirth?: number | undefined;
    phoneNumber?: string | undefined;
    isActive?: boolean | undefined;
    lastLogin?: number | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    addresses?: Array<GetOpportunitiesOpportunitiesAddresses> | undefined;
    roles?: Array<GetOpportunitiesRoles> | undefined;
    preferences?: GetOpportunitiesPreferences | undefined;
    bio?: string | undefined;
    website?: string | undefined;
    socialLinks?: GetOpportunitiesSocialLinks | undefined;
    status?: GetOpportunitiesOpportunitiesResponseStatus | undefined;
    sso?: Array<GetOpportunitiesSso> | undefined;
    paymentMethods?: GetOpportunitiesPaymentMethods | undefined;
};

export type GetOpportunitiesMetadata = {};

export type GetOpportunitiesAssociatedWith = {};

export type GetOpportunitiesPermissions = {};

export type GetOpportunitiesAttachments = {
    id?: string | undefined;
    fileName?: string | undefined;
    fileSize?: number | undefined;
    fileType?: string | undefined;
    url?: string | undefined;
    thumbnailUrl?: string | undefined;
    previewUrl?: string | undefined;
    content?: string | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    metadata?: GetOpportunitiesMetadata | undefined;
    associatedWith?: GetOpportunitiesAssociatedWith | undefined;
    permissions?: GetOpportunitiesPermissions | undefined;
};

export enum GetOpportunitiesFieldType {
    Text = "text",
    Number = "number",
    Date = "date",
    Boolean = "boolean",
    Enum = "enum",
    Json = "json",
    Array = "array",
}

export type GetOpportunitiesCustomFields = {
    id?: string | undefined;
    fieldName?: string | undefined;
    fieldValue?: string | undefined;
    fieldType?: GetOpportunitiesFieldType | undefined;
};

export type GetOpportunitiesUnified = {
    id?: string | undefined;
    title?: string | undefined;
    description?: string | undefined;
    amount?: number | undefined;
    currency?: string | undefined;
    stage?: string | undefined;
    probability?: number | undefined;
    closeDate?: number | undefined;
    type?: string | undefined;
    nextStep?: string | undefined;
    leadSource?: string | undefined;
    isClosed?: boolean | undefined;
    isWon?: boolean | undefined;
    createdDate?: number | undefined;
    lastModifiedDate?: number | undefined;
    lostReason?: string | undefined;
    campaign?: GetOpportunitiesCampaign | undefined;
    account?: GetOpportunitiesAccount | undefined;
    contacts?: Array<GetOpportunitiesContacts> | undefined;
    owner?: GetOpportunitiesOwner | undefined;
    attachments?: Array<GetOpportunitiesAttachments> | undefined;
    notes?: Array<string> | undefined;
    customFields?: Array<GetOpportunitiesCustomFields> | undefined;
};

export type GetOpportunitiesPassthrough = {};

export type GetOpportunitiesCache = {
    hit?: boolean | undefined;
    ttl?: number | undefined;
    key?: string | undefined;
};

export type GetOpportunitiesMeta = {
    timestamp?: number | undefined;
    latency?: number | undefined;
    platformRateLimitRemaining?: number | undefined;
    rateLimitRemaining?: number | undefined;
    cache?: GetOpportunitiesCache | undefined;
    transactionKey?: string | undefined;
    txn?: string | undefined;
    platform?: string | undefined;
    platformVersion?: string | undefined;
    connectionDefinitionKey?: string | undefined;
    action?: string | undefined;
    commonModel?: string | undefined;
    commonModelVersion?: string | undefined;
    connectionKey?: string | undefined;
    hash?: string | undefined;
    heartbeats?: Array<string> | undefined;
    totalTransactions?: number | undefined;
};

export type GetOpportunitiesPagination = {
    cursor?: string | undefined;
    limit?: number | undefined;
};

/**
 * Successful response
 */
export type GetOpportunitiesResponseBody = {
    status?: string | undefined;
    statusCode?: GetOpportunitiesStatusCode | undefined;
    unified?: Array<GetOpportunitiesUnified> | undefined;
    passthrough?: GetOpportunitiesPassthrough | undefined;
    meta?: GetOpportunitiesMeta | undefined;
    pagination?: GetOpportunitiesPagination | undefined;
};

export type GetOpportunitiesResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Successful response
     */
    object?: GetOpportunitiesResponseBody | undefined;
};

/** @internal */
export namespace GetOpportunitiesRequest$ {
    export type Inbound = {
        "X-INTEGRATIONOS-SECRET": string;
        "X-INTEGRATIONOS-CONNECTION-KEY": string;
    };

    export const inboundSchema: z.ZodType<GetOpportunitiesRequest, z.ZodTypeDef, Inbound> = z
        .object({
            "X-INTEGRATIONOS-SECRET": z.string(),
            "X-INTEGRATIONOS-CONNECTION-KEY": z.string(),
        })
        .transform((v) => {
            return {
                xIntegrationosSecret: v["X-INTEGRATIONOS-SECRET"],
                xIntegrationosConnectionKey: v["X-INTEGRATIONOS-CONNECTION-KEY"],
            };
        });

    export type Outbound = {
        "X-INTEGRATIONOS-SECRET": string;
        "X-INTEGRATIONOS-CONNECTION-KEY": string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetOpportunitiesRequest> = z
        .object({
            xIntegrationosSecret: z.string(),
            xIntegrationosConnectionKey: z.string(),
        })
        .transform((v) => {
            return {
                "X-INTEGRATIONOS-SECRET": v.xIntegrationosSecret,
                "X-INTEGRATIONOS-CONNECTION-KEY": v.xIntegrationosConnectionKey,
            };
        });
}

/** @internal */
export const GetOpportunitiesStatusCode$ = z.nativeEnum(GetOpportunitiesStatusCode);

/** @internal */
export const GetOpportunitiesType$ = z.nativeEnum(GetOpportunitiesType);

/** @internal */
export const GetOpportunitiesStatus$ = z.nativeEnum(GetOpportunitiesStatus);

/** @internal */
export namespace GetOpportunitiesPerformanceMetrics$ {
    export type Inbound = {
        impressions?: number | undefined;
        clicks?: number | undefined;
        conversions?: number | undefined;
        spend?: number | undefined;
        returnOnInvestment?: number | undefined;
        costPerClick?: number | undefined;
        costPerConversion?: number | undefined;
        conversionRate?: number | undefined;
    };

    export const inboundSchema: z.ZodType<
        GetOpportunitiesPerformanceMetrics,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            impressions: z.number().optional(),
            clicks: z.number().optional(),
            conversions: z.number().optional(),
            spend: z.number().optional(),
            returnOnInvestment: z.number().optional(),
            costPerClick: z.number().optional(),
            costPerConversion: z.number().optional(),
            conversionRate: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.impressions === undefined ? null : { impressions: v.impressions }),
                ...(v.clicks === undefined ? null : { clicks: v.clicks }),
                ...(v.conversions === undefined ? null : { conversions: v.conversions }),
                ...(v.spend === undefined ? null : { spend: v.spend }),
                ...(v.returnOnInvestment === undefined
                    ? null
                    : { returnOnInvestment: v.returnOnInvestment }),
                ...(v.costPerClick === undefined ? null : { costPerClick: v.costPerClick }),
                ...(v.costPerConversion === undefined
                    ? null
                    : { costPerConversion: v.costPerConversion }),
                ...(v.conversionRate === undefined ? null : { conversionRate: v.conversionRate }),
            };
        });

    export type Outbound = {
        impressions?: number | undefined;
        clicks?: number | undefined;
        conversions?: number | undefined;
        spend?: number | undefined;
        returnOnInvestment?: number | undefined;
        costPerClick?: number | undefined;
        costPerConversion?: number | undefined;
        conversionRate?: number | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetOpportunitiesPerformanceMetrics
    > = z
        .object({
            impressions: z.number().optional(),
            clicks: z.number().optional(),
            conversions: z.number().optional(),
            spend: z.number().optional(),
            returnOnInvestment: z.number().optional(),
            costPerClick: z.number().optional(),
            costPerConversion: z.number().optional(),
            conversionRate: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.impressions === undefined ? null : { impressions: v.impressions }),
                ...(v.clicks === undefined ? null : { clicks: v.clicks }),
                ...(v.conversions === undefined ? null : { conversions: v.conversions }),
                ...(v.spend === undefined ? null : { spend: v.spend }),
                ...(v.returnOnInvestment === undefined
                    ? null
                    : { returnOnInvestment: v.returnOnInvestment }),
                ...(v.costPerClick === undefined ? null : { costPerClick: v.costPerClick }),
                ...(v.costPerConversion === undefined
                    ? null
                    : { costPerConversion: v.costPerConversion }),
                ...(v.conversionRate === undefined ? null : { conversionRate: v.conversionRate }),
            };
        });
}

/** @internal */
export const GetOpportunitiesOpportunitiesResponse200ApplicationJSONResponseBodyUnifiedCampaignType$ =
    z.nativeEnum(
        GetOpportunitiesOpportunitiesResponse200ApplicationJSONResponseBodyUnifiedCampaignType
    );

/** @internal */
export namespace GetOpportunitiesOpportunitiesMetadata$ {
    export type Inbound = {
        id?: string | undefined;
        key?: string | undefined;
        value?: string | undefined;
        type?:
            | GetOpportunitiesOpportunitiesResponse200ApplicationJSONResponseBodyUnifiedCampaignType
            | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        entityId?: string | undefined;
        entityType?: string | undefined;
    };

    export const inboundSchema: z.ZodType<
        GetOpportunitiesOpportunitiesMetadata,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            id: z.string().optional(),
            key: z.string().optional(),
            value: z.string().optional(),
            type: GetOpportunitiesOpportunitiesResponse200ApplicationJSONResponseBodyUnifiedCampaignType$.optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            entityId: z.string().optional(),
            entityType: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.key === undefined ? null : { key: v.key }),
                ...(v.value === undefined ? null : { value: v.value }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.entityId === undefined ? null : { entityId: v.entityId }),
                ...(v.entityType === undefined ? null : { entityType: v.entityType }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        key?: string | undefined;
        value?: string | undefined;
        type?:
            | GetOpportunitiesOpportunitiesResponse200ApplicationJSONResponseBodyUnifiedCampaignType
            | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        entityId?: string | undefined;
        entityType?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetOpportunitiesOpportunitiesMetadata
    > = z
        .object({
            id: z.string().optional(),
            key: z.string().optional(),
            value: z.string().optional(),
            type: GetOpportunitiesOpportunitiesResponse200ApplicationJSONResponseBodyUnifiedCampaignType$.optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            entityId: z.string().optional(),
            entityType: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.key === undefined ? null : { key: v.key }),
                ...(v.value === undefined ? null : { value: v.value }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.entityId === undefined ? null : { entityId: v.entityId }),
                ...(v.entityType === undefined ? null : { entityType: v.entityType }),
            };
        });
}

/** @internal */
export const GetOpportunitiesEntityType$ = z.nativeEnum(GetOpportunitiesEntityType);

/** @internal */
export namespace GetOpportunitiesOpportunitiesAssociatedWith$ {
    export type Inbound = {
        entityId?: string | undefined;
        entityType?: GetOpportunitiesEntityType | undefined;
        attributes?: Array<string> | undefined;
    };

    export const inboundSchema: z.ZodType<
        GetOpportunitiesOpportunitiesAssociatedWith,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            entityId: z.string().optional(),
            entityType: GetOpportunitiesEntityType$.optional(),
            attributes: z.array(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.entityId === undefined ? null : { entityId: v.entityId }),
                ...(v.entityType === undefined ? null : { entityType: v.entityType }),
                ...(v.attributes === undefined ? null : { attributes: v.attributes }),
            };
        });

    export type Outbound = {
        entityId?: string | undefined;
        entityType?: GetOpportunitiesEntityType | undefined;
        attributes?: Array<string> | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetOpportunitiesOpportunitiesAssociatedWith
    > = z
        .object({
            entityId: z.string().optional(),
            entityType: GetOpportunitiesEntityType$.optional(),
            attributes: z.array(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.entityId === undefined ? null : { entityId: v.entityId }),
                ...(v.entityType === undefined ? null : { entityType: v.entityType }),
                ...(v.attributes === undefined ? null : { attributes: v.attributes }),
            };
        });
}

/** @internal */
export const GetOpportunitiesAccessControlType$ = z.nativeEnum(GetOpportunitiesAccessControlType);

/** @internal */
export const GetOpportunitiesOpportunitiesResponse200ApplicationJSONResponseBodyUnifiedCampaignCreativeAssetsType$ =
    z.nativeEnum(
        GetOpportunitiesOpportunitiesResponse200ApplicationJSONResponseBodyUnifiedCampaignCreativeAssetsType
    );

/** @internal */
export namespace GetOpportunitiesAssigneeDetails$ {
    export type Inbound = {
        identifier?: string | undefined;
        displayName?: string | undefined;
        type?:
            | GetOpportunitiesOpportunitiesResponse200ApplicationJSONResponseBodyUnifiedCampaignCreativeAssetsType
            | undefined;
    };

    export const inboundSchema: z.ZodType<GetOpportunitiesAssigneeDetails, z.ZodTypeDef, Inbound> =
        z
            .object({
                identifier: z.string().optional(),
                displayName: z.string().optional(),
                type: GetOpportunitiesOpportunitiesResponse200ApplicationJSONResponseBodyUnifiedCampaignCreativeAssetsType$.optional(),
            })
            .transform((v) => {
                return {
                    ...(v.identifier === undefined ? null : { identifier: v.identifier }),
                    ...(v.displayName === undefined ? null : { displayName: v.displayName }),
                    ...(v.type === undefined ? null : { type: v.type }),
                };
            });

    export type Outbound = {
        identifier?: string | undefined;
        displayName?: string | undefined;
        type?:
            | GetOpportunitiesOpportunitiesResponse200ApplicationJSONResponseBodyUnifiedCampaignCreativeAssetsType
            | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetOpportunitiesAssigneeDetails
    > = z
        .object({
            identifier: z.string().optional(),
            displayName: z.string().optional(),
            type: GetOpportunitiesOpportunitiesResponse200ApplicationJSONResponseBodyUnifiedCampaignCreativeAssetsType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.identifier === undefined ? null : { identifier: v.identifier }),
                ...(v.displayName === undefined ? null : { displayName: v.displayName }),
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });
}

/** @internal */
export const GetOpportunitiesIdentifierType$ = z.nativeEnum(GetOpportunitiesIdentifierType);

/** @internal */
export namespace GetOpportunitiesOpportunitiesPermissions$ {
    export type Inbound = {
        canView?: Array<string> | undefined;
        canEdit?: Array<string> | undefined;
        canDelete?: Array<string> | undefined;
        roles?: Array<string> | undefined;
        accessControlType?: GetOpportunitiesAccessControlType | undefined;
        assigneeDetails?: GetOpportunitiesAssigneeDetails$.Inbound | undefined;
        identifierType?: GetOpportunitiesIdentifierType | undefined;
    };

    export const inboundSchema: z.ZodType<
        GetOpportunitiesOpportunitiesPermissions,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            canView: z.array(z.string()).optional(),
            canEdit: z.array(z.string()).optional(),
            canDelete: z.array(z.string()).optional(),
            roles: z.array(z.string()).optional(),
            accessControlType: GetOpportunitiesAccessControlType$.optional(),
            assigneeDetails: z
                .lazy(() => GetOpportunitiesAssigneeDetails$.inboundSchema)
                .optional(),
            identifierType: GetOpportunitiesIdentifierType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.canView === undefined ? null : { canView: v.canView }),
                ...(v.canEdit === undefined ? null : { canEdit: v.canEdit }),
                ...(v.canDelete === undefined ? null : { canDelete: v.canDelete }),
                ...(v.roles === undefined ? null : { roles: v.roles }),
                ...(v.accessControlType === undefined
                    ? null
                    : { accessControlType: v.accessControlType }),
                ...(v.assigneeDetails === undefined
                    ? null
                    : { assigneeDetails: v.assigneeDetails }),
                ...(v.identifierType === undefined ? null : { identifierType: v.identifierType }),
            };
        });

    export type Outbound = {
        canView?: Array<string> | undefined;
        canEdit?: Array<string> | undefined;
        canDelete?: Array<string> | undefined;
        roles?: Array<string> | undefined;
        accessControlType?: GetOpportunitiesAccessControlType | undefined;
        assigneeDetails?: GetOpportunitiesAssigneeDetails$.Outbound | undefined;
        identifierType?: GetOpportunitiesIdentifierType | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetOpportunitiesOpportunitiesPermissions
    > = z
        .object({
            canView: z.array(z.string()).optional(),
            canEdit: z.array(z.string()).optional(),
            canDelete: z.array(z.string()).optional(),
            roles: z.array(z.string()).optional(),
            accessControlType: GetOpportunitiesAccessControlType$.optional(),
            assigneeDetails: z
                .lazy(() => GetOpportunitiesAssigneeDetails$.outboundSchema)
                .optional(),
            identifierType: GetOpportunitiesIdentifierType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.canView === undefined ? null : { canView: v.canView }),
                ...(v.canEdit === undefined ? null : { canEdit: v.canEdit }),
                ...(v.canDelete === undefined ? null : { canDelete: v.canDelete }),
                ...(v.roles === undefined ? null : { roles: v.roles }),
                ...(v.accessControlType === undefined
                    ? null
                    : { accessControlType: v.accessControlType }),
                ...(v.assigneeDetails === undefined
                    ? null
                    : { assigneeDetails: v.assigneeDetails }),
                ...(v.identifierType === undefined ? null : { identifierType: v.identifierType }),
            };
        });
}

/** @internal */
export namespace GetOpportunitiesCreativeAssets$ {
    export type Inbound = {
        id?: string | undefined;
        fileName?: string | undefined;
        fileSize?: number | undefined;
        fileType?: string | undefined;
        url?: string | undefined;
        thumbnailUrl?: string | undefined;
        previewUrl?: string | undefined;
        content?: string | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        metadata?: GetOpportunitiesOpportunitiesMetadata$.Inbound | undefined;
        associatedWith?: GetOpportunitiesOpportunitiesAssociatedWith$.Inbound | undefined;
        permissions?: GetOpportunitiesOpportunitiesPermissions$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<GetOpportunitiesCreativeAssets, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            fileName: z.string().optional(),
            fileSize: z.number().optional(),
            fileType: z.string().optional(),
            url: z.string().optional(),
            thumbnailUrl: z.string().optional(),
            previewUrl: z.string().optional(),
            content: z.string().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            metadata: z.lazy(() => GetOpportunitiesOpportunitiesMetadata$.inboundSchema).optional(),
            associatedWith: z
                .lazy(() => GetOpportunitiesOpportunitiesAssociatedWith$.inboundSchema)
                .optional(),
            permissions: z
                .lazy(() => GetOpportunitiesOpportunitiesPermissions$.inboundSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fileName === undefined ? null : { fileName: v.fileName }),
                ...(v.fileSize === undefined ? null : { fileSize: v.fileSize }),
                ...(v.fileType === undefined ? null : { fileType: v.fileType }),
                ...(v.url === undefined ? null : { url: v.url }),
                ...(v.thumbnailUrl === undefined ? null : { thumbnailUrl: v.thumbnailUrl }),
                ...(v.previewUrl === undefined ? null : { previewUrl: v.previewUrl }),
                ...(v.content === undefined ? null : { content: v.content }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                ...(v.associatedWith === undefined ? null : { associatedWith: v.associatedWith }),
                ...(v.permissions === undefined ? null : { permissions: v.permissions }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        fileName?: string | undefined;
        fileSize?: number | undefined;
        fileType?: string | undefined;
        url?: string | undefined;
        thumbnailUrl?: string | undefined;
        previewUrl?: string | undefined;
        content?: string | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        metadata?: GetOpportunitiesOpportunitiesMetadata$.Outbound | undefined;
        associatedWith?: GetOpportunitiesOpportunitiesAssociatedWith$.Outbound | undefined;
        permissions?: GetOpportunitiesOpportunitiesPermissions$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetOpportunitiesCreativeAssets> =
        z
            .object({
                id: z.string().optional(),
                fileName: z.string().optional(),
                fileSize: z.number().optional(),
                fileType: z.string().optional(),
                url: z.string().optional(),
                thumbnailUrl: z.string().optional(),
                previewUrl: z.string().optional(),
                content: z.string().optional(),
                createdAt: z.number().optional(),
                updatedAt: z.number().optional(),
                metadata: z
                    .lazy(() => GetOpportunitiesOpportunitiesMetadata$.outboundSchema)
                    .optional(),
                associatedWith: z
                    .lazy(() => GetOpportunitiesOpportunitiesAssociatedWith$.outboundSchema)
                    .optional(),
                permissions: z
                    .lazy(() => GetOpportunitiesOpportunitiesPermissions$.outboundSchema)
                    .optional(),
            })
            .transform((v) => {
                return {
                    ...(v.id === undefined ? null : { id: v.id }),
                    ...(v.fileName === undefined ? null : { fileName: v.fileName }),
                    ...(v.fileSize === undefined ? null : { fileSize: v.fileSize }),
                    ...(v.fileType === undefined ? null : { fileType: v.fileType }),
                    ...(v.url === undefined ? null : { url: v.url }),
                    ...(v.thumbnailUrl === undefined ? null : { thumbnailUrl: v.thumbnailUrl }),
                    ...(v.previewUrl === undefined ? null : { previewUrl: v.previewUrl }),
                    ...(v.content === undefined ? null : { content: v.content }),
                    ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                    ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                    ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                    ...(v.associatedWith === undefined
                        ? null
                        : { associatedWith: v.associatedWith }),
                    ...(v.permissions === undefined ? null : { permissions: v.permissions }),
                };
            });
}

/** @internal */
export namespace GetOpportunitiesCampaign$ {
    export type Inbound = {
        id?: string | undefined;
        name?: string | undefined;
        type?: GetOpportunitiesType | undefined;
        status?: GetOpportunitiesStatus | undefined;
        startDate?: number | undefined;
        endDate?: number | undefined;
        budget?: number | undefined;
        targetAudience?: string | undefined;
        channels?: Array<string> | undefined;
        performanceMetrics?: GetOpportunitiesPerformanceMetrics$.Inbound | undefined;
        creativeAssets?: GetOpportunitiesCreativeAssets$.Inbound | undefined;
        tags?: Array<string> | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<GetOpportunitiesCampaign, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            name: z.string().optional(),
            type: GetOpportunitiesType$.optional(),
            status: GetOpportunitiesStatus$.optional(),
            startDate: z.number().optional(),
            endDate: z.number().optional(),
            budget: z.number().optional(),
            targetAudience: z.string().optional(),
            channels: z.array(z.string()).optional(),
            performanceMetrics: z
                .lazy(() => GetOpportunitiesPerformanceMetrics$.inboundSchema)
                .optional(),
            creativeAssets: z.lazy(() => GetOpportunitiesCreativeAssets$.inboundSchema).optional(),
            tags: z.array(z.string()).optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.startDate === undefined ? null : { startDate: v.startDate }),
                ...(v.endDate === undefined ? null : { endDate: v.endDate }),
                ...(v.budget === undefined ? null : { budget: v.budget }),
                ...(v.targetAudience === undefined ? null : { targetAudience: v.targetAudience }),
                ...(v.channels === undefined ? null : { channels: v.channels }),
                ...(v.performanceMetrics === undefined
                    ? null
                    : { performanceMetrics: v.performanceMetrics }),
                ...(v.creativeAssets === undefined ? null : { creativeAssets: v.creativeAssets }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        name?: string | undefined;
        type?: GetOpportunitiesType | undefined;
        status?: GetOpportunitiesStatus | undefined;
        startDate?: number | undefined;
        endDate?: number | undefined;
        budget?: number | undefined;
        targetAudience?: string | undefined;
        channels?: Array<string> | undefined;
        performanceMetrics?: GetOpportunitiesPerformanceMetrics$.Outbound | undefined;
        creativeAssets?: GetOpportunitiesCreativeAssets$.Outbound | undefined;
        tags?: Array<string> | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetOpportunitiesCampaign> = z
        .object({
            id: z.string().optional(),
            name: z.string().optional(),
            type: GetOpportunitiesType$.optional(),
            status: GetOpportunitiesStatus$.optional(),
            startDate: z.number().optional(),
            endDate: z.number().optional(),
            budget: z.number().optional(),
            targetAudience: z.string().optional(),
            channels: z.array(z.string()).optional(),
            performanceMetrics: z
                .lazy(() => GetOpportunitiesPerformanceMetrics$.outboundSchema)
                .optional(),
            creativeAssets: z.lazy(() => GetOpportunitiesCreativeAssets$.outboundSchema).optional(),
            tags: z.array(z.string()).optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.startDate === undefined ? null : { startDate: v.startDate }),
                ...(v.endDate === undefined ? null : { endDate: v.endDate }),
                ...(v.budget === undefined ? null : { budget: v.budget }),
                ...(v.targetAudience === undefined ? null : { targetAudience: v.targetAudience }),
                ...(v.channels === undefined ? null : { channels: v.channels }),
                ...(v.performanceMetrics === undefined
                    ? null
                    : { performanceMetrics: v.performanceMetrics }),
                ...(v.creativeAssets === undefined ? null : { creativeAssets: v.creativeAssets }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });
}

/** @internal */
export const GetOpportunitiesAccountType$ = z.nativeEnum(GetOpportunitiesAccountType);

/** @internal */
export const GetOpportunitiesRating$ = z.nativeEnum(GetOpportunitiesRating);

/** @internal */
export const GetOpportunitiesOpportunitiesType$ = z.nativeEnum(GetOpportunitiesOpportunitiesType);

/** @internal */
export namespace GetOpportunitiesGeoLocation$ {
    export type Inbound = {
        latitude?: number | undefined;
        longitude?: number | undefined;
        altitude?: number | undefined;
        accuracy?: number | undefined;
        altitudeAccuracy?: number | undefined;
        heading?: number | undefined;
        speed?: number | undefined;
        timestamp?: number | undefined;
    };

    export const inboundSchema: z.ZodType<GetOpportunitiesGeoLocation, z.ZodTypeDef, Inbound> = z
        .object({
            latitude: z.number().optional(),
            longitude: z.number().optional(),
            altitude: z.number().optional(),
            accuracy: z.number().optional(),
            altitudeAccuracy: z.number().optional(),
            heading: z.number().optional(),
            speed: z.number().optional(),
            timestamp: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.latitude === undefined ? null : { latitude: v.latitude }),
                ...(v.longitude === undefined ? null : { longitude: v.longitude }),
                ...(v.altitude === undefined ? null : { altitude: v.altitude }),
                ...(v.accuracy === undefined ? null : { accuracy: v.accuracy }),
                ...(v.altitudeAccuracy === undefined
                    ? null
                    : { altitudeAccuracy: v.altitudeAccuracy }),
                ...(v.heading === undefined ? null : { heading: v.heading }),
                ...(v.speed === undefined ? null : { speed: v.speed }),
                ...(v.timestamp === undefined ? null : { timestamp: v.timestamp }),
            };
        });

    export type Outbound = {
        latitude?: number | undefined;
        longitude?: number | undefined;
        altitude?: number | undefined;
        accuracy?: number | undefined;
        altitudeAccuracy?: number | undefined;
        heading?: number | undefined;
        speed?: number | undefined;
        timestamp?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetOpportunitiesGeoLocation> = z
        .object({
            latitude: z.number().optional(),
            longitude: z.number().optional(),
            altitude: z.number().optional(),
            accuracy: z.number().optional(),
            altitudeAccuracy: z.number().optional(),
            heading: z.number().optional(),
            speed: z.number().optional(),
            timestamp: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.latitude === undefined ? null : { latitude: v.latitude }),
                ...(v.longitude === undefined ? null : { longitude: v.longitude }),
                ...(v.altitude === undefined ? null : { altitude: v.altitude }),
                ...(v.accuracy === undefined ? null : { accuracy: v.accuracy }),
                ...(v.altitudeAccuracy === undefined
                    ? null
                    : { altitudeAccuracy: v.altitudeAccuracy }),
                ...(v.heading === undefined ? null : { heading: v.heading }),
                ...(v.speed === undefined ? null : { speed: v.speed }),
                ...(v.timestamp === undefined ? null : { timestamp: v.timestamp }),
            };
        });
}

/** @internal */
export const GetOpportunitiesOpportunitiesResponseFieldType$ = z.nativeEnum(
    GetOpportunitiesOpportunitiesResponseFieldType
);

/** @internal */
export namespace GetOpportunitiesOpportunitiesResponse200ApplicationJSONResponseBodyCustomFields$ {
    export type Inbound = {
        id?: string | undefined;
        fieldName?: string | undefined;
        fieldValue?: string | undefined;
        fieldType?: GetOpportunitiesOpportunitiesResponseFieldType | undefined;
    };

    export const inboundSchema: z.ZodType<
        GetOpportunitiesOpportunitiesResponse200ApplicationJSONResponseBodyCustomFields,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            id: z.string().optional(),
            fieldName: z.string().optional(),
            fieldValue: z.string().optional(),
            fieldType: GetOpportunitiesOpportunitiesResponseFieldType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fieldName === undefined ? null : { fieldName: v.fieldName }),
                ...(v.fieldValue === undefined ? null : { fieldValue: v.fieldValue }),
                ...(v.fieldType === undefined ? null : { fieldType: v.fieldType }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        fieldName?: string | undefined;
        fieldValue?: string | undefined;
        fieldType?: GetOpportunitiesOpportunitiesResponseFieldType | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetOpportunitiesOpportunitiesResponse200ApplicationJSONResponseBodyCustomFields
    > = z
        .object({
            id: z.string().optional(),
            fieldName: z.string().optional(),
            fieldValue: z.string().optional(),
            fieldType: GetOpportunitiesOpportunitiesResponseFieldType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fieldName === undefined ? null : { fieldName: v.fieldName }),
                ...(v.fieldValue === undefined ? null : { fieldValue: v.fieldValue }),
                ...(v.fieldType === undefined ? null : { fieldType: v.fieldType }),
            };
        });
}

/** @internal */
export namespace GetOpportunitiesBillingAddress$ {
    export type Inbound = {
        id?: string | undefined;
        contactId?: string | undefined;
        accountId?: string | undefined;
        firstName?: string | undefined;
        lastName?: string | undefined;
        name?: string | undefined;
        companyName?: string | undefined;
        email?: string | undefined;
        phone?: string | undefined;
        street?: string | undefined;
        addressLine2?: string | undefined;
        city?: string | undefined;
        province?: string | undefined;
        region?: string | undefined;
        postalCode?: string | undefined;
        postalCodeExtension?: string | undefined;
        country?: string | undefined;
        countryCode?: string | undefined;
        type?: GetOpportunitiesOpportunitiesType | undefined;
        geoLocation?: GetOpportunitiesGeoLocation$.Inbound | undefined;
        customFields?:
            | Array<GetOpportunitiesOpportunitiesResponse200ApplicationJSONResponseBodyCustomFields$.Inbound>
            | undefined;
        subdivisionCode?: string | undefined;
    };

    export const inboundSchema: z.ZodType<GetOpportunitiesBillingAddress, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            contactId: z.string().optional(),
            accountId: z.string().optional(),
            firstName: z.string().optional(),
            lastName: z.string().optional(),
            name: z.string().optional(),
            companyName: z.string().optional(),
            email: z.string().optional(),
            phone: z.string().optional(),
            street: z.string().optional(),
            addressLine2: z.string().optional(),
            city: z.string().optional(),
            province: z.string().optional(),
            region: z.string().optional(),
            postalCode: z.string().optional(),
            postalCodeExtension: z.string().optional(),
            country: z.string().optional(),
            countryCode: z.string().optional(),
            type: GetOpportunitiesOpportunitiesType$.optional(),
            geoLocation: z.lazy(() => GetOpportunitiesGeoLocation$.inboundSchema).optional(),
            customFields: z
                .array(
                    z.lazy(
                        () =>
                            GetOpportunitiesOpportunitiesResponse200ApplicationJSONResponseBodyCustomFields$.inboundSchema
                    )
                )
                .optional(),
            subdivisionCode: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.contactId === undefined ? null : { contactId: v.contactId }),
                ...(v.accountId === undefined ? null : { accountId: v.accountId }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.companyName === undefined ? null : { companyName: v.companyName }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.phone === undefined ? null : { phone: v.phone }),
                ...(v.street === undefined ? null : { street: v.street }),
                ...(v.addressLine2 === undefined ? null : { addressLine2: v.addressLine2 }),
                ...(v.city === undefined ? null : { city: v.city }),
                ...(v.province === undefined ? null : { province: v.province }),
                ...(v.region === undefined ? null : { region: v.region }),
                ...(v.postalCode === undefined ? null : { postalCode: v.postalCode }),
                ...(v.postalCodeExtension === undefined
                    ? null
                    : { postalCodeExtension: v.postalCodeExtension }),
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.countryCode === undefined ? null : { countryCode: v.countryCode }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.geoLocation === undefined ? null : { geoLocation: v.geoLocation }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                ...(v.subdivisionCode === undefined
                    ? null
                    : { subdivisionCode: v.subdivisionCode }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        contactId?: string | undefined;
        accountId?: string | undefined;
        firstName?: string | undefined;
        lastName?: string | undefined;
        name?: string | undefined;
        companyName?: string | undefined;
        email?: string | undefined;
        phone?: string | undefined;
        street?: string | undefined;
        addressLine2?: string | undefined;
        city?: string | undefined;
        province?: string | undefined;
        region?: string | undefined;
        postalCode?: string | undefined;
        postalCodeExtension?: string | undefined;
        country?: string | undefined;
        countryCode?: string | undefined;
        type?: GetOpportunitiesOpportunitiesType | undefined;
        geoLocation?: GetOpportunitiesGeoLocation$.Outbound | undefined;
        customFields?:
            | Array<GetOpportunitiesOpportunitiesResponse200ApplicationJSONResponseBodyCustomFields$.Outbound>
            | undefined;
        subdivisionCode?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetOpportunitiesBillingAddress> =
        z
            .object({
                id: z.string().optional(),
                contactId: z.string().optional(),
                accountId: z.string().optional(),
                firstName: z.string().optional(),
                lastName: z.string().optional(),
                name: z.string().optional(),
                companyName: z.string().optional(),
                email: z.string().optional(),
                phone: z.string().optional(),
                street: z.string().optional(),
                addressLine2: z.string().optional(),
                city: z.string().optional(),
                province: z.string().optional(),
                region: z.string().optional(),
                postalCode: z.string().optional(),
                postalCodeExtension: z.string().optional(),
                country: z.string().optional(),
                countryCode: z.string().optional(),
                type: GetOpportunitiesOpportunitiesType$.optional(),
                geoLocation: z.lazy(() => GetOpportunitiesGeoLocation$.outboundSchema).optional(),
                customFields: z
                    .array(
                        z.lazy(
                            () =>
                                GetOpportunitiesOpportunitiesResponse200ApplicationJSONResponseBodyCustomFields$.outboundSchema
                        )
                    )
                    .optional(),
                subdivisionCode: z.string().optional(),
            })
            .transform((v) => {
                return {
                    ...(v.id === undefined ? null : { id: v.id }),
                    ...(v.contactId === undefined ? null : { contactId: v.contactId }),
                    ...(v.accountId === undefined ? null : { accountId: v.accountId }),
                    ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                    ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                    ...(v.name === undefined ? null : { name: v.name }),
                    ...(v.companyName === undefined ? null : { companyName: v.companyName }),
                    ...(v.email === undefined ? null : { email: v.email }),
                    ...(v.phone === undefined ? null : { phone: v.phone }),
                    ...(v.street === undefined ? null : { street: v.street }),
                    ...(v.addressLine2 === undefined ? null : { addressLine2: v.addressLine2 }),
                    ...(v.city === undefined ? null : { city: v.city }),
                    ...(v.province === undefined ? null : { province: v.province }),
                    ...(v.region === undefined ? null : { region: v.region }),
                    ...(v.postalCode === undefined ? null : { postalCode: v.postalCode }),
                    ...(v.postalCodeExtension === undefined
                        ? null
                        : { postalCodeExtension: v.postalCodeExtension }),
                    ...(v.country === undefined ? null : { country: v.country }),
                    ...(v.countryCode === undefined ? null : { countryCode: v.countryCode }),
                    ...(v.type === undefined ? null : { type: v.type }),
                    ...(v.geoLocation === undefined ? null : { geoLocation: v.geoLocation }),
                    ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                    ...(v.subdivisionCode === undefined
                        ? null
                        : { subdivisionCode: v.subdivisionCode }),
                };
            });
}

/** @internal */
export const GetOpportunitiesOpportunitiesResponseType$ = z.nativeEnum(
    GetOpportunitiesOpportunitiesResponseType
);

/** @internal */
export namespace GetOpportunitiesOpportunitiesGeoLocation$ {
    export type Inbound = {
        latitude?: number | undefined;
        longitude?: number | undefined;
        altitude?: number | undefined;
        accuracy?: number | undefined;
        altitudeAccuracy?: number | undefined;
        heading?: number | undefined;
        speed?: number | undefined;
        timestamp?: number | undefined;
    };

    export const inboundSchema: z.ZodType<
        GetOpportunitiesOpportunitiesGeoLocation,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            latitude: z.number().optional(),
            longitude: z.number().optional(),
            altitude: z.number().optional(),
            accuracy: z.number().optional(),
            altitudeAccuracy: z.number().optional(),
            heading: z.number().optional(),
            speed: z.number().optional(),
            timestamp: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.latitude === undefined ? null : { latitude: v.latitude }),
                ...(v.longitude === undefined ? null : { longitude: v.longitude }),
                ...(v.altitude === undefined ? null : { altitude: v.altitude }),
                ...(v.accuracy === undefined ? null : { accuracy: v.accuracy }),
                ...(v.altitudeAccuracy === undefined
                    ? null
                    : { altitudeAccuracy: v.altitudeAccuracy }),
                ...(v.heading === undefined ? null : { heading: v.heading }),
                ...(v.speed === undefined ? null : { speed: v.speed }),
                ...(v.timestamp === undefined ? null : { timestamp: v.timestamp }),
            };
        });

    export type Outbound = {
        latitude?: number | undefined;
        longitude?: number | undefined;
        altitude?: number | undefined;
        accuracy?: number | undefined;
        altitudeAccuracy?: number | undefined;
        heading?: number | undefined;
        speed?: number | undefined;
        timestamp?: number | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetOpportunitiesOpportunitiesGeoLocation
    > = z
        .object({
            latitude: z.number().optional(),
            longitude: z.number().optional(),
            altitude: z.number().optional(),
            accuracy: z.number().optional(),
            altitudeAccuracy: z.number().optional(),
            heading: z.number().optional(),
            speed: z.number().optional(),
            timestamp: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.latitude === undefined ? null : { latitude: v.latitude }),
                ...(v.longitude === undefined ? null : { longitude: v.longitude }),
                ...(v.altitude === undefined ? null : { altitude: v.altitude }),
                ...(v.accuracy === undefined ? null : { accuracy: v.accuracy }),
                ...(v.altitudeAccuracy === undefined
                    ? null
                    : { altitudeAccuracy: v.altitudeAccuracy }),
                ...(v.heading === undefined ? null : { heading: v.heading }),
                ...(v.speed === undefined ? null : { speed: v.speed }),
                ...(v.timestamp === undefined ? null : { timestamp: v.timestamp }),
            };
        });
}

/** @internal */
export const GetOpportunitiesOpportunitiesResponse200FieldType$ = z.nativeEnum(
    GetOpportunitiesOpportunitiesResponse200FieldType
);

/** @internal */
export namespace GetOpportunitiesOpportunitiesResponse200CustomFields$ {
    export type Inbound = {
        id?: string | undefined;
        fieldName?: string | undefined;
        fieldValue?: string | undefined;
        fieldType?: GetOpportunitiesOpportunitiesResponse200FieldType | undefined;
    };

    export const inboundSchema: z.ZodType<
        GetOpportunitiesOpportunitiesResponse200CustomFields,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            id: z.string().optional(),
            fieldName: z.string().optional(),
            fieldValue: z.string().optional(),
            fieldType: GetOpportunitiesOpportunitiesResponse200FieldType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fieldName === undefined ? null : { fieldName: v.fieldName }),
                ...(v.fieldValue === undefined ? null : { fieldValue: v.fieldValue }),
                ...(v.fieldType === undefined ? null : { fieldType: v.fieldType }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        fieldName?: string | undefined;
        fieldValue?: string | undefined;
        fieldType?: GetOpportunitiesOpportunitiesResponse200FieldType | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetOpportunitiesOpportunitiesResponse200CustomFields
    > = z
        .object({
            id: z.string().optional(),
            fieldName: z.string().optional(),
            fieldValue: z.string().optional(),
            fieldType: GetOpportunitiesOpportunitiesResponse200FieldType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fieldName === undefined ? null : { fieldName: v.fieldName }),
                ...(v.fieldValue === undefined ? null : { fieldValue: v.fieldValue }),
                ...(v.fieldType === undefined ? null : { fieldType: v.fieldType }),
            };
        });
}

/** @internal */
export namespace GetOpportunitiesShippingAddress$ {
    export type Inbound = {
        id?: string | undefined;
        contactId?: string | undefined;
        accountId?: string | undefined;
        firstName?: string | undefined;
        lastName?: string | undefined;
        name?: string | undefined;
        companyName?: string | undefined;
        email?: string | undefined;
        phone?: string | undefined;
        street?: string | undefined;
        addressLine2?: string | undefined;
        city?: string | undefined;
        province?: string | undefined;
        region?: string | undefined;
        postalCode?: string | undefined;
        postalCodeExtension?: string | undefined;
        country?: string | undefined;
        countryCode?: string | undefined;
        type?: GetOpportunitiesOpportunitiesResponseType | undefined;
        geoLocation?: GetOpportunitiesOpportunitiesGeoLocation$.Inbound | undefined;
        customFields?:
            | Array<GetOpportunitiesOpportunitiesResponse200CustomFields$.Inbound>
            | undefined;
        subdivisionCode?: string | undefined;
    };

    export const inboundSchema: z.ZodType<GetOpportunitiesShippingAddress, z.ZodTypeDef, Inbound> =
        z
            .object({
                id: z.string().optional(),
                contactId: z.string().optional(),
                accountId: z.string().optional(),
                firstName: z.string().optional(),
                lastName: z.string().optional(),
                name: z.string().optional(),
                companyName: z.string().optional(),
                email: z.string().optional(),
                phone: z.string().optional(),
                street: z.string().optional(),
                addressLine2: z.string().optional(),
                city: z.string().optional(),
                province: z.string().optional(),
                region: z.string().optional(),
                postalCode: z.string().optional(),
                postalCodeExtension: z.string().optional(),
                country: z.string().optional(),
                countryCode: z.string().optional(),
                type: GetOpportunitiesOpportunitiesResponseType$.optional(),
                geoLocation: z
                    .lazy(() => GetOpportunitiesOpportunitiesGeoLocation$.inboundSchema)
                    .optional(),
                customFields: z
                    .array(
                        z.lazy(
                            () =>
                                GetOpportunitiesOpportunitiesResponse200CustomFields$.inboundSchema
                        )
                    )
                    .optional(),
                subdivisionCode: z.string().optional(),
            })
            .transform((v) => {
                return {
                    ...(v.id === undefined ? null : { id: v.id }),
                    ...(v.contactId === undefined ? null : { contactId: v.contactId }),
                    ...(v.accountId === undefined ? null : { accountId: v.accountId }),
                    ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                    ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                    ...(v.name === undefined ? null : { name: v.name }),
                    ...(v.companyName === undefined ? null : { companyName: v.companyName }),
                    ...(v.email === undefined ? null : { email: v.email }),
                    ...(v.phone === undefined ? null : { phone: v.phone }),
                    ...(v.street === undefined ? null : { street: v.street }),
                    ...(v.addressLine2 === undefined ? null : { addressLine2: v.addressLine2 }),
                    ...(v.city === undefined ? null : { city: v.city }),
                    ...(v.province === undefined ? null : { province: v.province }),
                    ...(v.region === undefined ? null : { region: v.region }),
                    ...(v.postalCode === undefined ? null : { postalCode: v.postalCode }),
                    ...(v.postalCodeExtension === undefined
                        ? null
                        : { postalCodeExtension: v.postalCodeExtension }),
                    ...(v.country === undefined ? null : { country: v.country }),
                    ...(v.countryCode === undefined ? null : { countryCode: v.countryCode }),
                    ...(v.type === undefined ? null : { type: v.type }),
                    ...(v.geoLocation === undefined ? null : { geoLocation: v.geoLocation }),
                    ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                    ...(v.subdivisionCode === undefined
                        ? null
                        : { subdivisionCode: v.subdivisionCode }),
                };
            });

    export type Outbound = {
        id?: string | undefined;
        contactId?: string | undefined;
        accountId?: string | undefined;
        firstName?: string | undefined;
        lastName?: string | undefined;
        name?: string | undefined;
        companyName?: string | undefined;
        email?: string | undefined;
        phone?: string | undefined;
        street?: string | undefined;
        addressLine2?: string | undefined;
        city?: string | undefined;
        province?: string | undefined;
        region?: string | undefined;
        postalCode?: string | undefined;
        postalCodeExtension?: string | undefined;
        country?: string | undefined;
        countryCode?: string | undefined;
        type?: GetOpportunitiesOpportunitiesResponseType | undefined;
        geoLocation?: GetOpportunitiesOpportunitiesGeoLocation$.Outbound | undefined;
        customFields?:
            | Array<GetOpportunitiesOpportunitiesResponse200CustomFields$.Outbound>
            | undefined;
        subdivisionCode?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetOpportunitiesShippingAddress
    > = z
        .object({
            id: z.string().optional(),
            contactId: z.string().optional(),
            accountId: z.string().optional(),
            firstName: z.string().optional(),
            lastName: z.string().optional(),
            name: z.string().optional(),
            companyName: z.string().optional(),
            email: z.string().optional(),
            phone: z.string().optional(),
            street: z.string().optional(),
            addressLine2: z.string().optional(),
            city: z.string().optional(),
            province: z.string().optional(),
            region: z.string().optional(),
            postalCode: z.string().optional(),
            postalCodeExtension: z.string().optional(),
            country: z.string().optional(),
            countryCode: z.string().optional(),
            type: GetOpportunitiesOpportunitiesResponseType$.optional(),
            geoLocation: z
                .lazy(() => GetOpportunitiesOpportunitiesGeoLocation$.outboundSchema)
                .optional(),
            customFields: z
                .array(
                    z.lazy(
                        () => GetOpportunitiesOpportunitiesResponse200CustomFields$.outboundSchema
                    )
                )
                .optional(),
            subdivisionCode: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.contactId === undefined ? null : { contactId: v.contactId }),
                ...(v.accountId === undefined ? null : { accountId: v.accountId }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.companyName === undefined ? null : { companyName: v.companyName }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.phone === undefined ? null : { phone: v.phone }),
                ...(v.street === undefined ? null : { street: v.street }),
                ...(v.addressLine2 === undefined ? null : { addressLine2: v.addressLine2 }),
                ...(v.city === undefined ? null : { city: v.city }),
                ...(v.province === undefined ? null : { province: v.province }),
                ...(v.region === undefined ? null : { region: v.region }),
                ...(v.postalCode === undefined ? null : { postalCode: v.postalCode }),
                ...(v.postalCodeExtension === undefined
                    ? null
                    : { postalCodeExtension: v.postalCodeExtension }),
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.countryCode === undefined ? null : { countryCode: v.countryCode }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.geoLocation === undefined ? null : { geoLocation: v.geoLocation }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                ...(v.subdivisionCode === undefined
                    ? null
                    : { subdivisionCode: v.subdivisionCode }),
            };
        });
}

/** @internal */
export const GetOpportunitiesOpportunitiesStatus$ = z.nativeEnum(
    GetOpportunitiesOpportunitiesStatus
);

/** @internal */
export const GetOpportunitiesOpportunitiesFieldType$ = z.nativeEnum(
    GetOpportunitiesOpportunitiesFieldType
);

/** @internal */
export namespace GetOpportunitiesOpportunitiesResponseCustomFields$ {
    export type Inbound = {
        id?: string | undefined;
        fieldName?: string | undefined;
        fieldValue?: string | undefined;
        fieldType?: GetOpportunitiesOpportunitiesFieldType | undefined;
    };

    export const inboundSchema: z.ZodType<
        GetOpportunitiesOpportunitiesResponseCustomFields,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            id: z.string().optional(),
            fieldName: z.string().optional(),
            fieldValue: z.string().optional(),
            fieldType: GetOpportunitiesOpportunitiesFieldType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fieldName === undefined ? null : { fieldName: v.fieldName }),
                ...(v.fieldValue === undefined ? null : { fieldValue: v.fieldValue }),
                ...(v.fieldType === undefined ? null : { fieldType: v.fieldType }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        fieldName?: string | undefined;
        fieldValue?: string | undefined;
        fieldType?: GetOpportunitiesOpportunitiesFieldType | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetOpportunitiesOpportunitiesResponseCustomFields
    > = z
        .object({
            id: z.string().optional(),
            fieldName: z.string().optional(),
            fieldValue: z.string().optional(),
            fieldType: GetOpportunitiesOpportunitiesFieldType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fieldName === undefined ? null : { fieldName: v.fieldName }),
                ...(v.fieldValue === undefined ? null : { fieldValue: v.fieldValue }),
                ...(v.fieldType === undefined ? null : { fieldType: v.fieldType }),
            };
        });
}

/** @internal */
export namespace GetOpportunitiesAccount$ {
    export type Inbound = {
        id?: string | undefined;
        name?: string | undefined;
        industry?: string | undefined;
        accountType?: GetOpportunitiesAccountType | undefined;
        rating?: GetOpportunitiesRating | undefined;
        phone?: string | undefined;
        email?: string | undefined;
        website?: string | undefined;
        billingAddress?: GetOpportunitiesBillingAddress$.Inbound | undefined;
        shippingAddress?: GetOpportunitiesShippingAddress$.Inbound | undefined;
        numberOfEmployees?: number | undefined;
        annualRevenue?: number | undefined;
        createdDate?: number | undefined;
        lastModifiedDate?: number | undefined;
        status?: GetOpportunitiesOpportunitiesStatus | undefined;
        ownerId?: string | undefined;
        customFields?:
            | Array<GetOpportunitiesOpportunitiesResponseCustomFields$.Inbound>
            | undefined;
        tags?: Array<string> | undefined;
    };

    export const inboundSchema: z.ZodType<GetOpportunitiesAccount, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            name: z.string().optional(),
            industry: z.string().optional(),
            accountType: GetOpportunitiesAccountType$.optional(),
            rating: GetOpportunitiesRating$.optional(),
            phone: z.string().optional(),
            email: z.string().optional(),
            website: z.string().optional(),
            billingAddress: z.lazy(() => GetOpportunitiesBillingAddress$.inboundSchema).optional(),
            shippingAddress: z
                .lazy(() => GetOpportunitiesShippingAddress$.inboundSchema)
                .optional(),
            numberOfEmployees: z.number().optional(),
            annualRevenue: z.number().optional(),
            createdDate: z.number().optional(),
            lastModifiedDate: z.number().optional(),
            status: GetOpportunitiesOpportunitiesStatus$.optional(),
            ownerId: z.string().optional(),
            customFields: z
                .array(
                    z.lazy(() => GetOpportunitiesOpportunitiesResponseCustomFields$.inboundSchema)
                )
                .optional(),
            tags: z.array(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.industry === undefined ? null : { industry: v.industry }),
                ...(v.accountType === undefined ? null : { accountType: v.accountType }),
                ...(v.rating === undefined ? null : { rating: v.rating }),
                ...(v.phone === undefined ? null : { phone: v.phone }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.website === undefined ? null : { website: v.website }),
                ...(v.billingAddress === undefined ? null : { billingAddress: v.billingAddress }),
                ...(v.shippingAddress === undefined
                    ? null
                    : { shippingAddress: v.shippingAddress }),
                ...(v.numberOfEmployees === undefined
                    ? null
                    : { numberOfEmployees: v.numberOfEmployees }),
                ...(v.annualRevenue === undefined ? null : { annualRevenue: v.annualRevenue }),
                ...(v.createdDate === undefined ? null : { createdDate: v.createdDate }),
                ...(v.lastModifiedDate === undefined
                    ? null
                    : { lastModifiedDate: v.lastModifiedDate }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.ownerId === undefined ? null : { ownerId: v.ownerId }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        name?: string | undefined;
        industry?: string | undefined;
        accountType?: GetOpportunitiesAccountType | undefined;
        rating?: GetOpportunitiesRating | undefined;
        phone?: string | undefined;
        email?: string | undefined;
        website?: string | undefined;
        billingAddress?: GetOpportunitiesBillingAddress$.Outbound | undefined;
        shippingAddress?: GetOpportunitiesShippingAddress$.Outbound | undefined;
        numberOfEmployees?: number | undefined;
        annualRevenue?: number | undefined;
        createdDate?: number | undefined;
        lastModifiedDate?: number | undefined;
        status?: GetOpportunitiesOpportunitiesStatus | undefined;
        ownerId?: string | undefined;
        customFields?:
            | Array<GetOpportunitiesOpportunitiesResponseCustomFields$.Outbound>
            | undefined;
        tags?: Array<string> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetOpportunitiesAccount> = z
        .object({
            id: z.string().optional(),
            name: z.string().optional(),
            industry: z.string().optional(),
            accountType: GetOpportunitiesAccountType$.optional(),
            rating: GetOpportunitiesRating$.optional(),
            phone: z.string().optional(),
            email: z.string().optional(),
            website: z.string().optional(),
            billingAddress: z.lazy(() => GetOpportunitiesBillingAddress$.outboundSchema).optional(),
            shippingAddress: z
                .lazy(() => GetOpportunitiesShippingAddress$.outboundSchema)
                .optional(),
            numberOfEmployees: z.number().optional(),
            annualRevenue: z.number().optional(),
            createdDate: z.number().optional(),
            lastModifiedDate: z.number().optional(),
            status: GetOpportunitiesOpportunitiesStatus$.optional(),
            ownerId: z.string().optional(),
            customFields: z
                .array(
                    z.lazy(() => GetOpportunitiesOpportunitiesResponseCustomFields$.outboundSchema)
                )
                .optional(),
            tags: z.array(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.industry === undefined ? null : { industry: v.industry }),
                ...(v.accountType === undefined ? null : { accountType: v.accountType }),
                ...(v.rating === undefined ? null : { rating: v.rating }),
                ...(v.phone === undefined ? null : { phone: v.phone }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.website === undefined ? null : { website: v.website }),
                ...(v.billingAddress === undefined ? null : { billingAddress: v.billingAddress }),
                ...(v.shippingAddress === undefined
                    ? null
                    : { shippingAddress: v.shippingAddress }),
                ...(v.numberOfEmployees === undefined
                    ? null
                    : { numberOfEmployees: v.numberOfEmployees }),
                ...(v.annualRevenue === undefined ? null : { annualRevenue: v.annualRevenue }),
                ...(v.createdDate === undefined ? null : { createdDate: v.createdDate }),
                ...(v.lastModifiedDate === undefined
                    ? null
                    : { lastModifiedDate: v.lastModifiedDate }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.ownerId === undefined ? null : { ownerId: v.ownerId }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
            };
        });
}

/** @internal */
export namespace GetOpportunitiesAddress$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<GetOpportunitiesAddress, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetOpportunitiesAddress> =
        z.object({});
}

/** @internal */
export namespace GetOpportunitiesAddresses$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<GetOpportunitiesAddresses, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetOpportunitiesAddresses> =
        z.object({});
}

/** @internal */
export namespace GetOpportunitiesNotes$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<GetOpportunitiesNotes, z.ZodTypeDef, Inbound> = z.object(
        {}
    );

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetOpportunitiesNotes> =
        z.object({});
}

/** @internal */
export namespace GetOpportunitiesSocialProfiles$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<GetOpportunitiesSocialProfiles, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetOpportunitiesSocialProfiles> =
        z.object({});
}

/** @internal */
export namespace GetOpportunitiesOpportunitiesCustomFields$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<
        GetOpportunitiesOpportunitiesCustomFields,
        z.ZodTypeDef,
        Inbound
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetOpportunitiesOpportunitiesCustomFields
    > = z.object({});
}

/** @internal */
export namespace GetOpportunitiesContacts$ {
    export type Inbound = {
        id?: string | undefined;
        firstName?: string | undefined;
        lastName?: string | undefined;
        company?: string | undefined;
        email?: string | undefined;
        emails?: Array<string> | undefined;
        phone?: string | undefined;
        phones?: Array<string> | undefined;
        address?: GetOpportunitiesAddress$.Inbound | undefined;
        addresses?: Array<GetOpportunitiesAddresses$.Inbound> | undefined;
        birthday?: number | undefined;
        relationship?: string | undefined;
        note?: string | undefined;
        notes?: GetOpportunitiesNotes$.Inbound | undefined;
        tags?: Array<string> | undefined;
        websites?: Array<string> | undefined;
        socialProfiles?: Array<GetOpportunitiesSocialProfiles$.Inbound> | undefined;
        customFields?: Array<GetOpportunitiesOpportunitiesCustomFields$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<GetOpportunitiesContacts, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            firstName: z.string().optional(),
            lastName: z.string().optional(),
            company: z.string().optional(),
            email: z.string().optional(),
            emails: z.array(z.string()).optional(),
            phone: z.string().optional(),
            phones: z.array(z.string()).optional(),
            address: z.lazy(() => GetOpportunitiesAddress$.inboundSchema).optional(),
            addresses: z.array(z.lazy(() => GetOpportunitiesAddresses$.inboundSchema)).optional(),
            birthday: z.number().optional(),
            relationship: z.string().optional(),
            note: z.string().optional(),
            notes: z.lazy(() => GetOpportunitiesNotes$.inboundSchema).optional(),
            tags: z.array(z.string()).optional(),
            websites: z.array(z.string()).optional(),
            socialProfiles: z
                .array(z.lazy(() => GetOpportunitiesSocialProfiles$.inboundSchema))
                .optional(),
            customFields: z
                .array(z.lazy(() => GetOpportunitiesOpportunitiesCustomFields$.inboundSchema))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.company === undefined ? null : { company: v.company }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.emails === undefined ? null : { emails: v.emails }),
                ...(v.phone === undefined ? null : { phone: v.phone }),
                ...(v.phones === undefined ? null : { phones: v.phones }),
                ...(v.address === undefined ? null : { address: v.address }),
                ...(v.addresses === undefined ? null : { addresses: v.addresses }),
                ...(v.birthday === undefined ? null : { birthday: v.birthday }),
                ...(v.relationship === undefined ? null : { relationship: v.relationship }),
                ...(v.note === undefined ? null : { note: v.note }),
                ...(v.notes === undefined ? null : { notes: v.notes }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
                ...(v.websites === undefined ? null : { websites: v.websites }),
                ...(v.socialProfiles === undefined ? null : { socialProfiles: v.socialProfiles }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        firstName?: string | undefined;
        lastName?: string | undefined;
        company?: string | undefined;
        email?: string | undefined;
        emails?: Array<string> | undefined;
        phone?: string | undefined;
        phones?: Array<string> | undefined;
        address?: GetOpportunitiesAddress$.Outbound | undefined;
        addresses?: Array<GetOpportunitiesAddresses$.Outbound> | undefined;
        birthday?: number | undefined;
        relationship?: string | undefined;
        note?: string | undefined;
        notes?: GetOpportunitiesNotes$.Outbound | undefined;
        tags?: Array<string> | undefined;
        websites?: Array<string> | undefined;
        socialProfiles?: Array<GetOpportunitiesSocialProfiles$.Outbound> | undefined;
        customFields?: Array<GetOpportunitiesOpportunitiesCustomFields$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetOpportunitiesContacts> = z
        .object({
            id: z.string().optional(),
            firstName: z.string().optional(),
            lastName: z.string().optional(),
            company: z.string().optional(),
            email: z.string().optional(),
            emails: z.array(z.string()).optional(),
            phone: z.string().optional(),
            phones: z.array(z.string()).optional(),
            address: z.lazy(() => GetOpportunitiesAddress$.outboundSchema).optional(),
            addresses: z.array(z.lazy(() => GetOpportunitiesAddresses$.outboundSchema)).optional(),
            birthday: z.number().optional(),
            relationship: z.string().optional(),
            note: z.string().optional(),
            notes: z.lazy(() => GetOpportunitiesNotes$.outboundSchema).optional(),
            tags: z.array(z.string()).optional(),
            websites: z.array(z.string()).optional(),
            socialProfiles: z
                .array(z.lazy(() => GetOpportunitiesSocialProfiles$.outboundSchema))
                .optional(),
            customFields: z
                .array(z.lazy(() => GetOpportunitiesOpportunitiesCustomFields$.outboundSchema))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.company === undefined ? null : { company: v.company }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.emails === undefined ? null : { emails: v.emails }),
                ...(v.phone === undefined ? null : { phone: v.phone }),
                ...(v.phones === undefined ? null : { phones: v.phones }),
                ...(v.address === undefined ? null : { address: v.address }),
                ...(v.addresses === undefined ? null : { addresses: v.addresses }),
                ...(v.birthday === undefined ? null : { birthday: v.birthday }),
                ...(v.relationship === undefined ? null : { relationship: v.relationship }),
                ...(v.note === undefined ? null : { note: v.note }),
                ...(v.notes === undefined ? null : { notes: v.notes }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
                ...(v.websites === undefined ? null : { websites: v.websites }),
                ...(v.socialProfiles === undefined ? null : { socialProfiles: v.socialProfiles }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
            };
        });
}

/** @internal */
export const GetOpportunitiesMimeType$ = z.nativeEnum(GetOpportunitiesMimeType);

/** @internal */
export namespace GetOpportunitiesProfilePicture$ {
    export type Inbound = {
        id?: string | undefined;
        src?: string | undefined;
        altText?: string | undefined;
        width?: number | undefined;
        height?: number | undefined;
        thumbnailSrc?: string | undefined;
        caption?: string | undefined;
        title?: string | undefined;
        mimeType?: GetOpportunitiesMimeType | undefined;
        tags?: Array<string> | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<GetOpportunitiesProfilePicture, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            src: z.string().optional(),
            altText: z.string().optional(),
            width: z.number().optional(),
            height: z.number().optional(),
            thumbnailSrc: z.string().optional(),
            caption: z.string().optional(),
            title: z.string().optional(),
            mimeType: GetOpportunitiesMimeType$.optional(),
            tags: z.array(z.string()).optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.src === undefined ? null : { src: v.src }),
                ...(v.altText === undefined ? null : { altText: v.altText }),
                ...(v.width === undefined ? null : { width: v.width }),
                ...(v.height === undefined ? null : { height: v.height }),
                ...(v.thumbnailSrc === undefined ? null : { thumbnailSrc: v.thumbnailSrc }),
                ...(v.caption === undefined ? null : { caption: v.caption }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.mimeType === undefined ? null : { mimeType: v.mimeType }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        src?: string | undefined;
        altText?: string | undefined;
        width?: number | undefined;
        height?: number | undefined;
        thumbnailSrc?: string | undefined;
        caption?: string | undefined;
        title?: string | undefined;
        mimeType?: GetOpportunitiesMimeType | undefined;
        tags?: Array<string> | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetOpportunitiesProfilePicture> =
        z
            .object({
                id: z.string().optional(),
                src: z.string().optional(),
                altText: z.string().optional(),
                width: z.number().optional(),
                height: z.number().optional(),
                thumbnailSrc: z.string().optional(),
                caption: z.string().optional(),
                title: z.string().optional(),
                mimeType: GetOpportunitiesMimeType$.optional(),
                tags: z.array(z.string()).optional(),
                createdAt: z.number().optional(),
                updatedAt: z.number().optional(),
                active: z.boolean().optional(),
                deleted: z.boolean().optional(),
            })
            .transform((v) => {
                return {
                    ...(v.id === undefined ? null : { id: v.id }),
                    ...(v.src === undefined ? null : { src: v.src }),
                    ...(v.altText === undefined ? null : { altText: v.altText }),
                    ...(v.width === undefined ? null : { width: v.width }),
                    ...(v.height === undefined ? null : { height: v.height }),
                    ...(v.thumbnailSrc === undefined ? null : { thumbnailSrc: v.thumbnailSrc }),
                    ...(v.caption === undefined ? null : { caption: v.caption }),
                    ...(v.title === undefined ? null : { title: v.title }),
                    ...(v.mimeType === undefined ? null : { mimeType: v.mimeType }),
                    ...(v.tags === undefined ? null : { tags: v.tags }),
                    ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                    ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                    ...(v.active === undefined ? null : { active: v.active }),
                    ...(v.deleted === undefined ? null : { deleted: v.deleted }),
                };
            });
}

/** @internal */
export const GetOpportunitiesOpportunitiesMimeType$ = z.nativeEnum(
    GetOpportunitiesOpportunitiesMimeType
);

/** @internal */
export namespace GetOpportunitiesCoverPhoto$ {
    export type Inbound = {
        id?: string | undefined;
        src?: string | undefined;
        altText?: string | undefined;
        width?: number | undefined;
        height?: number | undefined;
        thumbnailSrc?: string | undefined;
        caption?: string | undefined;
        title?: string | undefined;
        mimeType?: GetOpportunitiesOpportunitiesMimeType | undefined;
        tags?: Array<string> | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<GetOpportunitiesCoverPhoto, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            src: z.string().optional(),
            altText: z.string().optional(),
            width: z.number().optional(),
            height: z.number().optional(),
            thumbnailSrc: z.string().optional(),
            caption: z.string().optional(),
            title: z.string().optional(),
            mimeType: GetOpportunitiesOpportunitiesMimeType$.optional(),
            tags: z.array(z.string()).optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.src === undefined ? null : { src: v.src }),
                ...(v.altText === undefined ? null : { altText: v.altText }),
                ...(v.width === undefined ? null : { width: v.width }),
                ...(v.height === undefined ? null : { height: v.height }),
                ...(v.thumbnailSrc === undefined ? null : { thumbnailSrc: v.thumbnailSrc }),
                ...(v.caption === undefined ? null : { caption: v.caption }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.mimeType === undefined ? null : { mimeType: v.mimeType }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        src?: string | undefined;
        altText?: string | undefined;
        width?: number | undefined;
        height?: number | undefined;
        thumbnailSrc?: string | undefined;
        caption?: string | undefined;
        title?: string | undefined;
        mimeType?: GetOpportunitiesOpportunitiesMimeType | undefined;
        tags?: Array<string> | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetOpportunitiesCoverPhoto> = z
        .object({
            id: z.string().optional(),
            src: z.string().optional(),
            altText: z.string().optional(),
            width: z.number().optional(),
            height: z.number().optional(),
            thumbnailSrc: z.string().optional(),
            caption: z.string().optional(),
            title: z.string().optional(),
            mimeType: GetOpportunitiesOpportunitiesMimeType$.optional(),
            tags: z.array(z.string()).optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.src === undefined ? null : { src: v.src }),
                ...(v.altText === undefined ? null : { altText: v.altText }),
                ...(v.width === undefined ? null : { width: v.width }),
                ...(v.height === undefined ? null : { height: v.height }),
                ...(v.thumbnailSrc === undefined ? null : { thumbnailSrc: v.thumbnailSrc }),
                ...(v.caption === undefined ? null : { caption: v.caption }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.mimeType === undefined ? null : { mimeType: v.mimeType }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });
}

/** @internal */
export const GetOpportunitiesGender$ = z.nativeEnum(GetOpportunitiesGender);

/** @internal */
export const GetOpportunitiesOpportunitiesResponse200Type$ = z.nativeEnum(
    GetOpportunitiesOpportunitiesResponse200Type
);

/** @internal */
export namespace GetOpportunitiesOpportunitiesResponseGeoLocation$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<
        GetOpportunitiesOpportunitiesResponseGeoLocation,
        z.ZodTypeDef,
        Inbound
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetOpportunitiesOpportunitiesResponseGeoLocation
    > = z.object({});
}

/** @internal */
export namespace GetOpportunitiesOpportunitiesResponse200ApplicationJSONCustomFields$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<
        GetOpportunitiesOpportunitiesResponse200ApplicationJSONCustomFields,
        z.ZodTypeDef,
        Inbound
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetOpportunitiesOpportunitiesResponse200ApplicationJSONCustomFields
    > = z.object({});
}

/** @internal */
export namespace GetOpportunitiesOpportunitiesAddresses$ {
    export type Inbound = {
        id?: string | undefined;
        contactId?: string | undefined;
        accountId?: string | undefined;
        firstName?: string | undefined;
        lastName?: string | undefined;
        name?: string | undefined;
        companyName?: string | undefined;
        email?: string | undefined;
        phone?: string | undefined;
        street?: string | undefined;
        addressLine2?: string | undefined;
        city?: string | undefined;
        province?: string | undefined;
        region?: string | undefined;
        postalCode?: string | undefined;
        postalCodeExtension?: string | undefined;
        country?: string | undefined;
        countryCode?: string | undefined;
        type?: GetOpportunitiesOpportunitiesResponse200Type | undefined;
        geoLocation?: GetOpportunitiesOpportunitiesResponseGeoLocation$.Inbound | undefined;
        customFields?:
            | Array<GetOpportunitiesOpportunitiesResponse200ApplicationJSONCustomFields$.Inbound>
            | undefined;
        subdivisionCode?: string | undefined;
    };

    export const inboundSchema: z.ZodType<
        GetOpportunitiesOpportunitiesAddresses,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            id: z.string().optional(),
            contactId: z.string().optional(),
            accountId: z.string().optional(),
            firstName: z.string().optional(),
            lastName: z.string().optional(),
            name: z.string().optional(),
            companyName: z.string().optional(),
            email: z.string().optional(),
            phone: z.string().optional(),
            street: z.string().optional(),
            addressLine2: z.string().optional(),
            city: z.string().optional(),
            province: z.string().optional(),
            region: z.string().optional(),
            postalCode: z.string().optional(),
            postalCodeExtension: z.string().optional(),
            country: z.string().optional(),
            countryCode: z.string().optional(),
            type: GetOpportunitiesOpportunitiesResponse200Type$.optional(),
            geoLocation: z
                .lazy(() => GetOpportunitiesOpportunitiesResponseGeoLocation$.inboundSchema)
                .optional(),
            customFields: z
                .array(
                    z.lazy(
                        () =>
                            GetOpportunitiesOpportunitiesResponse200ApplicationJSONCustomFields$.inboundSchema
                    )
                )
                .optional(),
            subdivisionCode: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.contactId === undefined ? null : { contactId: v.contactId }),
                ...(v.accountId === undefined ? null : { accountId: v.accountId }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.companyName === undefined ? null : { companyName: v.companyName }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.phone === undefined ? null : { phone: v.phone }),
                ...(v.street === undefined ? null : { street: v.street }),
                ...(v.addressLine2 === undefined ? null : { addressLine2: v.addressLine2 }),
                ...(v.city === undefined ? null : { city: v.city }),
                ...(v.province === undefined ? null : { province: v.province }),
                ...(v.region === undefined ? null : { region: v.region }),
                ...(v.postalCode === undefined ? null : { postalCode: v.postalCode }),
                ...(v.postalCodeExtension === undefined
                    ? null
                    : { postalCodeExtension: v.postalCodeExtension }),
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.countryCode === undefined ? null : { countryCode: v.countryCode }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.geoLocation === undefined ? null : { geoLocation: v.geoLocation }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                ...(v.subdivisionCode === undefined
                    ? null
                    : { subdivisionCode: v.subdivisionCode }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        contactId?: string | undefined;
        accountId?: string | undefined;
        firstName?: string | undefined;
        lastName?: string | undefined;
        name?: string | undefined;
        companyName?: string | undefined;
        email?: string | undefined;
        phone?: string | undefined;
        street?: string | undefined;
        addressLine2?: string | undefined;
        city?: string | undefined;
        province?: string | undefined;
        region?: string | undefined;
        postalCode?: string | undefined;
        postalCodeExtension?: string | undefined;
        country?: string | undefined;
        countryCode?: string | undefined;
        type?: GetOpportunitiesOpportunitiesResponse200Type | undefined;
        geoLocation?: GetOpportunitiesOpportunitiesResponseGeoLocation$.Outbound | undefined;
        customFields?:
            | Array<GetOpportunitiesOpportunitiesResponse200ApplicationJSONCustomFields$.Outbound>
            | undefined;
        subdivisionCode?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetOpportunitiesOpportunitiesAddresses
    > = z
        .object({
            id: z.string().optional(),
            contactId: z.string().optional(),
            accountId: z.string().optional(),
            firstName: z.string().optional(),
            lastName: z.string().optional(),
            name: z.string().optional(),
            companyName: z.string().optional(),
            email: z.string().optional(),
            phone: z.string().optional(),
            street: z.string().optional(),
            addressLine2: z.string().optional(),
            city: z.string().optional(),
            province: z.string().optional(),
            region: z.string().optional(),
            postalCode: z.string().optional(),
            postalCodeExtension: z.string().optional(),
            country: z.string().optional(),
            countryCode: z.string().optional(),
            type: GetOpportunitiesOpportunitiesResponse200Type$.optional(),
            geoLocation: z
                .lazy(() => GetOpportunitiesOpportunitiesResponseGeoLocation$.outboundSchema)
                .optional(),
            customFields: z
                .array(
                    z.lazy(
                        () =>
                            GetOpportunitiesOpportunitiesResponse200ApplicationJSONCustomFields$.outboundSchema
                    )
                )
                .optional(),
            subdivisionCode: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.contactId === undefined ? null : { contactId: v.contactId }),
                ...(v.accountId === undefined ? null : { accountId: v.accountId }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.companyName === undefined ? null : { companyName: v.companyName }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.phone === undefined ? null : { phone: v.phone }),
                ...(v.street === undefined ? null : { street: v.street }),
                ...(v.addressLine2 === undefined ? null : { addressLine2: v.addressLine2 }),
                ...(v.city === undefined ? null : { city: v.city }),
                ...(v.province === undefined ? null : { province: v.province }),
                ...(v.region === undefined ? null : { region: v.region }),
                ...(v.postalCode === undefined ? null : { postalCode: v.postalCode }),
                ...(v.postalCodeExtension === undefined
                    ? null
                    : { postalCodeExtension: v.postalCodeExtension }),
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.countryCode === undefined ? null : { countryCode: v.countryCode }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.geoLocation === undefined ? null : { geoLocation: v.geoLocation }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                ...(v.subdivisionCode === undefined
                    ? null
                    : { subdivisionCode: v.subdivisionCode }),
            };
        });
}

/** @internal */
export const GetOpportunitiesRoles$ = z.nativeEnum(GetOpportunitiesRoles);

/** @internal */
export const GetOpportunitiesCommunications$ = z.nativeEnum(GetOpportunitiesCommunications);

/** @internal */
export namespace GetOpportunitiesPreferences$ {
    export type Inbound = {
        id?: string | undefined;
        language?: string | undefined;
        currency?: string | undefined;
        timeZone?: string | undefined;
        communications?: GetOpportunitiesCommunications | undefined;
    };

    export const inboundSchema: z.ZodType<GetOpportunitiesPreferences, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            language: z.string().optional(),
            currency: z.string().optional(),
            timeZone: z.string().optional(),
            communications: GetOpportunitiesCommunications$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.language === undefined ? null : { language: v.language }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.timeZone === undefined ? null : { timeZone: v.timeZone }),
                ...(v.communications === undefined ? null : { communications: v.communications }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        language?: string | undefined;
        currency?: string | undefined;
        timeZone?: string | undefined;
        communications?: GetOpportunitiesCommunications | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetOpportunitiesPreferences> = z
        .object({
            id: z.string().optional(),
            language: z.string().optional(),
            currency: z.string().optional(),
            timeZone: z.string().optional(),
            communications: GetOpportunitiesCommunications$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.language === undefined ? null : { language: v.language }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.timeZone === undefined ? null : { timeZone: v.timeZone }),
                ...(v.communications === undefined ? null : { communications: v.communications }),
            };
        });
}

/** @internal */
export const GetOpportunitiesOpportunitiesResponse200ApplicationJSONType$ = z.nativeEnum(
    GetOpportunitiesOpportunitiesResponse200ApplicationJSONType
);

/** @internal */
export const GetOpportunitiesOpportunitiesResponse200ApplicationJSONResponseBodyUnifiedType$ =
    z.nativeEnum(GetOpportunitiesOpportunitiesResponse200ApplicationJSONResponseBodyUnifiedType);

/** @internal */
export namespace GetOpportunitiesAdditionalInfo$ {
    export type Inbound = {
        id?: string | undefined;
        key?: string | undefined;
        value?: string | undefined;
        type?:
            | GetOpportunitiesOpportunitiesResponse200ApplicationJSONResponseBodyUnifiedType
            | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        entityId?: string | undefined;
        entityType?: string | undefined;
    };

    export const inboundSchema: z.ZodType<GetOpportunitiesAdditionalInfo, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            key: z.string().optional(),
            value: z.string().optional(),
            type: GetOpportunitiesOpportunitiesResponse200ApplicationJSONResponseBodyUnifiedType$.optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            entityId: z.string().optional(),
            entityType: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.key === undefined ? null : { key: v.key }),
                ...(v.value === undefined ? null : { value: v.value }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.entityId === undefined ? null : { entityId: v.entityId }),
                ...(v.entityType === undefined ? null : { entityType: v.entityType }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        key?: string | undefined;
        value?: string | undefined;
        type?:
            | GetOpportunitiesOpportunitiesResponse200ApplicationJSONResponseBodyUnifiedType
            | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        entityId?: string | undefined;
        entityType?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetOpportunitiesAdditionalInfo> =
        z
            .object({
                id: z.string().optional(),
                key: z.string().optional(),
                value: z.string().optional(),
                type: GetOpportunitiesOpportunitiesResponse200ApplicationJSONResponseBodyUnifiedType$.optional(),
                createdAt: z.number().optional(),
                updatedAt: z.number().optional(),
                entityId: z.string().optional(),
                entityType: z.string().optional(),
            })
            .transform((v) => {
                return {
                    ...(v.id === undefined ? null : { id: v.id }),
                    ...(v.key === undefined ? null : { key: v.key }),
                    ...(v.value === undefined ? null : { value: v.value }),
                    ...(v.type === undefined ? null : { type: v.type }),
                    ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                    ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                    ...(v.entityId === undefined ? null : { entityId: v.entityId }),
                    ...(v.entityType === undefined ? null : { entityType: v.entityType }),
                };
            });
}

/** @internal */
export namespace GetOpportunitiesSocialLinks$ {
    export type Inbound = {
        type?: GetOpportunitiesOpportunitiesResponse200ApplicationJSONType | undefined;
        username?: string | undefined;
        displayName?: string | undefined;
        url?: string | undefined;
        avatarUrl?: string | undefined;
        email?: string | undefined;
        additionalInfo?: GetOpportunitiesAdditionalInfo$.Inbound | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<GetOpportunitiesSocialLinks, z.ZodTypeDef, Inbound> = z
        .object({
            type: GetOpportunitiesOpportunitiesResponse200ApplicationJSONType$.optional(),
            username: z.string().optional(),
            displayName: z.string().optional(),
            url: z.string().optional(),
            avatarUrl: z.string().optional(),
            email: z.string().optional(),
            additionalInfo: z.lazy(() => GetOpportunitiesAdditionalInfo$.inboundSchema).optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.username === undefined ? null : { username: v.username }),
                ...(v.displayName === undefined ? null : { displayName: v.displayName }),
                ...(v.url === undefined ? null : { url: v.url }),
                ...(v.avatarUrl === undefined ? null : { avatarUrl: v.avatarUrl }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.additionalInfo === undefined ? null : { additionalInfo: v.additionalInfo }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });

    export type Outbound = {
        type?: GetOpportunitiesOpportunitiesResponse200ApplicationJSONType | undefined;
        username?: string | undefined;
        displayName?: string | undefined;
        url?: string | undefined;
        avatarUrl?: string | undefined;
        email?: string | undefined;
        additionalInfo?: GetOpportunitiesAdditionalInfo$.Outbound | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetOpportunitiesSocialLinks> = z
        .object({
            type: GetOpportunitiesOpportunitiesResponse200ApplicationJSONType$.optional(),
            username: z.string().optional(),
            displayName: z.string().optional(),
            url: z.string().optional(),
            avatarUrl: z.string().optional(),
            email: z.string().optional(),
            additionalInfo: z.lazy(() => GetOpportunitiesAdditionalInfo$.outboundSchema).optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.username === undefined ? null : { username: v.username }),
                ...(v.displayName === undefined ? null : { displayName: v.displayName }),
                ...(v.url === undefined ? null : { url: v.url }),
                ...(v.avatarUrl === undefined ? null : { avatarUrl: v.avatarUrl }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.additionalInfo === undefined ? null : { additionalInfo: v.additionalInfo }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });
}

/** @internal */
export const GetOpportunitiesOpportunitiesResponseStatus$ = z.nativeEnum(
    GetOpportunitiesOpportunitiesResponseStatus
);

/** @internal */
export const GetOpportunitiesProvider$ = z.nativeEnum(GetOpportunitiesProvider);

/** @internal */
export namespace GetOpportunitiesSso$ {
    export type Inbound = {
        provider?: GetOpportunitiesProvider | undefined;
        providerUserId?: string | undefined;
        profileUrl?: string | undefined;
        accessToken?: string | undefined;
        refreshToken?: string | undefined;
        expiresIn?: number | undefined;
        expiryDate?: number | undefined;
        scopes?: Array<string> | undefined;
        tokenType?: string | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<GetOpportunitiesSso, z.ZodTypeDef, Inbound> = z
        .object({
            provider: GetOpportunitiesProvider$.optional(),
            providerUserId: z.string().optional(),
            profileUrl: z.string().optional(),
            accessToken: z.string().optional(),
            refreshToken: z.string().optional(),
            expiresIn: z.number().optional(),
            expiryDate: z.number().optional(),
            scopes: z.array(z.string()).optional(),
            tokenType: z.string().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.provider === undefined ? null : { provider: v.provider }),
                ...(v.providerUserId === undefined ? null : { providerUserId: v.providerUserId }),
                ...(v.profileUrl === undefined ? null : { profileUrl: v.profileUrl }),
                ...(v.accessToken === undefined ? null : { accessToken: v.accessToken }),
                ...(v.refreshToken === undefined ? null : { refreshToken: v.refreshToken }),
                ...(v.expiresIn === undefined ? null : { expiresIn: v.expiresIn }),
                ...(v.expiryDate === undefined ? null : { expiryDate: v.expiryDate }),
                ...(v.scopes === undefined ? null : { scopes: v.scopes }),
                ...(v.tokenType === undefined ? null : { tokenType: v.tokenType }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });

    export type Outbound = {
        provider?: GetOpportunitiesProvider | undefined;
        providerUserId?: string | undefined;
        profileUrl?: string | undefined;
        accessToken?: string | undefined;
        refreshToken?: string | undefined;
        expiresIn?: number | undefined;
        expiryDate?: number | undefined;
        scopes?: Array<string> | undefined;
        tokenType?: string | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetOpportunitiesSso> = z
        .object({
            provider: GetOpportunitiesProvider$.optional(),
            providerUserId: z.string().optional(),
            profileUrl: z.string().optional(),
            accessToken: z.string().optional(),
            refreshToken: z.string().optional(),
            expiresIn: z.number().optional(),
            expiryDate: z.number().optional(),
            scopes: z.array(z.string()).optional(),
            tokenType: z.string().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.provider === undefined ? null : { provider: v.provider }),
                ...(v.providerUserId === undefined ? null : { providerUserId: v.providerUserId }),
                ...(v.profileUrl === undefined ? null : { profileUrl: v.profileUrl }),
                ...(v.accessToken === undefined ? null : { accessToken: v.accessToken }),
                ...(v.refreshToken === undefined ? null : { refreshToken: v.refreshToken }),
                ...(v.expiresIn === undefined ? null : { expiresIn: v.expiresIn }),
                ...(v.expiryDate === undefined ? null : { expiryDate: v.expiryDate }),
                ...(v.scopes === undefined ? null : { scopes: v.scopes }),
                ...(v.tokenType === undefined ? null : { tokenType: v.tokenType }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });
}

/** @internal */
export const GetOpportunitiesOpportunitiesResponse200ApplicationJSONResponseBodyType$ =
    z.nativeEnum(GetOpportunitiesOpportunitiesResponse200ApplicationJSONResponseBodyType);

/** @internal */
export namespace GetOpportunitiesPaymentMethods$ {
    export type Inbound = {
        id?: string | undefined;
        type?: GetOpportunitiesOpportunitiesResponse200ApplicationJSONResponseBodyType | undefined;
        details?: string | undefined;
        isDefault?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<GetOpportunitiesPaymentMethods, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            type: GetOpportunitiesOpportunitiesResponse200ApplicationJSONResponseBodyType$.optional(),
            details: z.string().optional(),
            isDefault: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.details === undefined ? null : { details: v.details }),
                ...(v.isDefault === undefined ? null : { isDefault: v.isDefault }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        type?: GetOpportunitiesOpportunitiesResponse200ApplicationJSONResponseBodyType | undefined;
        details?: string | undefined;
        isDefault?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetOpportunitiesPaymentMethods> =
        z
            .object({
                id: z.string().optional(),
                type: GetOpportunitiesOpportunitiesResponse200ApplicationJSONResponseBodyType$.optional(),
                details: z.string().optional(),
                isDefault: z.boolean().optional(),
            })
            .transform((v) => {
                return {
                    ...(v.id === undefined ? null : { id: v.id }),
                    ...(v.type === undefined ? null : { type: v.type }),
                    ...(v.details === undefined ? null : { details: v.details }),
                    ...(v.isDefault === undefined ? null : { isDefault: v.isDefault }),
                };
            });
}

/** @internal */
export namespace GetOpportunitiesOwner$ {
    export type Inbound = {
        id?: string | undefined;
        firstName?: string | undefined;
        middleName?: string | undefined;
        lastName?: string | undefined;
        email?: string | undefined;
        username?: string | undefined;
        password?: string | undefined;
        profilePicture?: GetOpportunitiesProfilePicture$.Inbound | undefined;
        coverPhoto?: GetOpportunitiesCoverPhoto$.Inbound | undefined;
        gender?: GetOpportunitiesGender | undefined;
        dateOfBirth?: number | undefined;
        phoneNumber?: string | undefined;
        isActive?: boolean | undefined;
        lastLogin?: number | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        addresses?: Array<GetOpportunitiesOpportunitiesAddresses$.Inbound> | undefined;
        roles?: Array<GetOpportunitiesRoles> | undefined;
        preferences?: GetOpportunitiesPreferences$.Inbound | undefined;
        bio?: string | undefined;
        website?: string | undefined;
        socialLinks?: GetOpportunitiesSocialLinks$.Inbound | undefined;
        status?: GetOpportunitiesOpportunitiesResponseStatus | undefined;
        sso?: Array<GetOpportunitiesSso$.Inbound> | undefined;
        paymentMethods?: GetOpportunitiesPaymentMethods$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<GetOpportunitiesOwner, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            firstName: z.string().optional(),
            middleName: z.string().optional(),
            lastName: z.string().optional(),
            email: z.string().optional(),
            username: z.string().optional(),
            password: z.string().optional(),
            profilePicture: z.lazy(() => GetOpportunitiesProfilePicture$.inboundSchema).optional(),
            coverPhoto: z.lazy(() => GetOpportunitiesCoverPhoto$.inboundSchema).optional(),
            gender: GetOpportunitiesGender$.optional(),
            dateOfBirth: z.number().optional(),
            phoneNumber: z.string().optional(),
            isActive: z.boolean().optional(),
            lastLogin: z.number().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            addresses: z
                .array(z.lazy(() => GetOpportunitiesOpportunitiesAddresses$.inboundSchema))
                .optional(),
            roles: z.array(GetOpportunitiesRoles$).optional(),
            preferences: z.lazy(() => GetOpportunitiesPreferences$.inboundSchema).optional(),
            bio: z.string().optional(),
            website: z.string().optional(),
            socialLinks: z.lazy(() => GetOpportunitiesSocialLinks$.inboundSchema).optional(),
            status: GetOpportunitiesOpportunitiesResponseStatus$.optional(),
            sso: z.array(z.lazy(() => GetOpportunitiesSso$.inboundSchema)).optional(),
            paymentMethods: z.lazy(() => GetOpportunitiesPaymentMethods$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.middleName === undefined ? null : { middleName: v.middleName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.username === undefined ? null : { username: v.username }),
                ...(v.password === undefined ? null : { password: v.password }),
                ...(v.profilePicture === undefined ? null : { profilePicture: v.profilePicture }),
                ...(v.coverPhoto === undefined ? null : { coverPhoto: v.coverPhoto }),
                ...(v.gender === undefined ? null : { gender: v.gender }),
                ...(v.dateOfBirth === undefined ? null : { dateOfBirth: v.dateOfBirth }),
                ...(v.phoneNumber === undefined ? null : { phoneNumber: v.phoneNumber }),
                ...(v.isActive === undefined ? null : { isActive: v.isActive }),
                ...(v.lastLogin === undefined ? null : { lastLogin: v.lastLogin }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.addresses === undefined ? null : { addresses: v.addresses }),
                ...(v.roles === undefined ? null : { roles: v.roles }),
                ...(v.preferences === undefined ? null : { preferences: v.preferences }),
                ...(v.bio === undefined ? null : { bio: v.bio }),
                ...(v.website === undefined ? null : { website: v.website }),
                ...(v.socialLinks === undefined ? null : { socialLinks: v.socialLinks }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.sso === undefined ? null : { sso: v.sso }),
                ...(v.paymentMethods === undefined ? null : { paymentMethods: v.paymentMethods }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        firstName?: string | undefined;
        middleName?: string | undefined;
        lastName?: string | undefined;
        email?: string | undefined;
        username?: string | undefined;
        password?: string | undefined;
        profilePicture?: GetOpportunitiesProfilePicture$.Outbound | undefined;
        coverPhoto?: GetOpportunitiesCoverPhoto$.Outbound | undefined;
        gender?: GetOpportunitiesGender | undefined;
        dateOfBirth?: number | undefined;
        phoneNumber?: string | undefined;
        isActive?: boolean | undefined;
        lastLogin?: number | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        addresses?: Array<GetOpportunitiesOpportunitiesAddresses$.Outbound> | undefined;
        roles?: Array<GetOpportunitiesRoles> | undefined;
        preferences?: GetOpportunitiesPreferences$.Outbound | undefined;
        bio?: string | undefined;
        website?: string | undefined;
        socialLinks?: GetOpportunitiesSocialLinks$.Outbound | undefined;
        status?: GetOpportunitiesOpportunitiesResponseStatus | undefined;
        sso?: Array<GetOpportunitiesSso$.Outbound> | undefined;
        paymentMethods?: GetOpportunitiesPaymentMethods$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetOpportunitiesOwner> = z
        .object({
            id: z.string().optional(),
            firstName: z.string().optional(),
            middleName: z.string().optional(),
            lastName: z.string().optional(),
            email: z.string().optional(),
            username: z.string().optional(),
            password: z.string().optional(),
            profilePicture: z.lazy(() => GetOpportunitiesProfilePicture$.outboundSchema).optional(),
            coverPhoto: z.lazy(() => GetOpportunitiesCoverPhoto$.outboundSchema).optional(),
            gender: GetOpportunitiesGender$.optional(),
            dateOfBirth: z.number().optional(),
            phoneNumber: z.string().optional(),
            isActive: z.boolean().optional(),
            lastLogin: z.number().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            addresses: z
                .array(z.lazy(() => GetOpportunitiesOpportunitiesAddresses$.outboundSchema))
                .optional(),
            roles: z.array(GetOpportunitiesRoles$).optional(),
            preferences: z.lazy(() => GetOpportunitiesPreferences$.outboundSchema).optional(),
            bio: z.string().optional(),
            website: z.string().optional(),
            socialLinks: z.lazy(() => GetOpportunitiesSocialLinks$.outboundSchema).optional(),
            status: GetOpportunitiesOpportunitiesResponseStatus$.optional(),
            sso: z.array(z.lazy(() => GetOpportunitiesSso$.outboundSchema)).optional(),
            paymentMethods: z.lazy(() => GetOpportunitiesPaymentMethods$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.middleName === undefined ? null : { middleName: v.middleName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.username === undefined ? null : { username: v.username }),
                ...(v.password === undefined ? null : { password: v.password }),
                ...(v.profilePicture === undefined ? null : { profilePicture: v.profilePicture }),
                ...(v.coverPhoto === undefined ? null : { coverPhoto: v.coverPhoto }),
                ...(v.gender === undefined ? null : { gender: v.gender }),
                ...(v.dateOfBirth === undefined ? null : { dateOfBirth: v.dateOfBirth }),
                ...(v.phoneNumber === undefined ? null : { phoneNumber: v.phoneNumber }),
                ...(v.isActive === undefined ? null : { isActive: v.isActive }),
                ...(v.lastLogin === undefined ? null : { lastLogin: v.lastLogin }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.addresses === undefined ? null : { addresses: v.addresses }),
                ...(v.roles === undefined ? null : { roles: v.roles }),
                ...(v.preferences === undefined ? null : { preferences: v.preferences }),
                ...(v.bio === undefined ? null : { bio: v.bio }),
                ...(v.website === undefined ? null : { website: v.website }),
                ...(v.socialLinks === undefined ? null : { socialLinks: v.socialLinks }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.sso === undefined ? null : { sso: v.sso }),
                ...(v.paymentMethods === undefined ? null : { paymentMethods: v.paymentMethods }),
            };
        });
}

/** @internal */
export namespace GetOpportunitiesMetadata$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<GetOpportunitiesMetadata, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetOpportunitiesMetadata> =
        z.object({});
}

/** @internal */
export namespace GetOpportunitiesAssociatedWith$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<GetOpportunitiesAssociatedWith, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetOpportunitiesAssociatedWith> =
        z.object({});
}

/** @internal */
export namespace GetOpportunitiesPermissions$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<GetOpportunitiesPermissions, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetOpportunitiesPermissions> =
        z.object({});
}

/** @internal */
export namespace GetOpportunitiesAttachments$ {
    export type Inbound = {
        id?: string | undefined;
        fileName?: string | undefined;
        fileSize?: number | undefined;
        fileType?: string | undefined;
        url?: string | undefined;
        thumbnailUrl?: string | undefined;
        previewUrl?: string | undefined;
        content?: string | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        metadata?: GetOpportunitiesMetadata$.Inbound | undefined;
        associatedWith?: GetOpportunitiesAssociatedWith$.Inbound | undefined;
        permissions?: GetOpportunitiesPermissions$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<GetOpportunitiesAttachments, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            fileName: z.string().optional(),
            fileSize: z.number().optional(),
            fileType: z.string().optional(),
            url: z.string().optional(),
            thumbnailUrl: z.string().optional(),
            previewUrl: z.string().optional(),
            content: z.string().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            metadata: z.lazy(() => GetOpportunitiesMetadata$.inboundSchema).optional(),
            associatedWith: z.lazy(() => GetOpportunitiesAssociatedWith$.inboundSchema).optional(),
            permissions: z.lazy(() => GetOpportunitiesPermissions$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fileName === undefined ? null : { fileName: v.fileName }),
                ...(v.fileSize === undefined ? null : { fileSize: v.fileSize }),
                ...(v.fileType === undefined ? null : { fileType: v.fileType }),
                ...(v.url === undefined ? null : { url: v.url }),
                ...(v.thumbnailUrl === undefined ? null : { thumbnailUrl: v.thumbnailUrl }),
                ...(v.previewUrl === undefined ? null : { previewUrl: v.previewUrl }),
                ...(v.content === undefined ? null : { content: v.content }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                ...(v.associatedWith === undefined ? null : { associatedWith: v.associatedWith }),
                ...(v.permissions === undefined ? null : { permissions: v.permissions }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        fileName?: string | undefined;
        fileSize?: number | undefined;
        fileType?: string | undefined;
        url?: string | undefined;
        thumbnailUrl?: string | undefined;
        previewUrl?: string | undefined;
        content?: string | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        metadata?: GetOpportunitiesMetadata$.Outbound | undefined;
        associatedWith?: GetOpportunitiesAssociatedWith$.Outbound | undefined;
        permissions?: GetOpportunitiesPermissions$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetOpportunitiesAttachments> = z
        .object({
            id: z.string().optional(),
            fileName: z.string().optional(),
            fileSize: z.number().optional(),
            fileType: z.string().optional(),
            url: z.string().optional(),
            thumbnailUrl: z.string().optional(),
            previewUrl: z.string().optional(),
            content: z.string().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            metadata: z.lazy(() => GetOpportunitiesMetadata$.outboundSchema).optional(),
            associatedWith: z.lazy(() => GetOpportunitiesAssociatedWith$.outboundSchema).optional(),
            permissions: z.lazy(() => GetOpportunitiesPermissions$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fileName === undefined ? null : { fileName: v.fileName }),
                ...(v.fileSize === undefined ? null : { fileSize: v.fileSize }),
                ...(v.fileType === undefined ? null : { fileType: v.fileType }),
                ...(v.url === undefined ? null : { url: v.url }),
                ...(v.thumbnailUrl === undefined ? null : { thumbnailUrl: v.thumbnailUrl }),
                ...(v.previewUrl === undefined ? null : { previewUrl: v.previewUrl }),
                ...(v.content === undefined ? null : { content: v.content }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                ...(v.associatedWith === undefined ? null : { associatedWith: v.associatedWith }),
                ...(v.permissions === undefined ? null : { permissions: v.permissions }),
            };
        });
}

/** @internal */
export const GetOpportunitiesFieldType$ = z.nativeEnum(GetOpportunitiesFieldType);

/** @internal */
export namespace GetOpportunitiesCustomFields$ {
    export type Inbound = {
        id?: string | undefined;
        fieldName?: string | undefined;
        fieldValue?: string | undefined;
        fieldType?: GetOpportunitiesFieldType | undefined;
    };

    export const inboundSchema: z.ZodType<GetOpportunitiesCustomFields, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            fieldName: z.string().optional(),
            fieldValue: z.string().optional(),
            fieldType: GetOpportunitiesFieldType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fieldName === undefined ? null : { fieldName: v.fieldName }),
                ...(v.fieldValue === undefined ? null : { fieldValue: v.fieldValue }),
                ...(v.fieldType === undefined ? null : { fieldType: v.fieldType }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        fieldName?: string | undefined;
        fieldValue?: string | undefined;
        fieldType?: GetOpportunitiesFieldType | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetOpportunitiesCustomFields> = z
        .object({
            id: z.string().optional(),
            fieldName: z.string().optional(),
            fieldValue: z.string().optional(),
            fieldType: GetOpportunitiesFieldType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fieldName === undefined ? null : { fieldName: v.fieldName }),
                ...(v.fieldValue === undefined ? null : { fieldValue: v.fieldValue }),
                ...(v.fieldType === undefined ? null : { fieldType: v.fieldType }),
            };
        });
}

/** @internal */
export namespace GetOpportunitiesUnified$ {
    export type Inbound = {
        id?: string | undefined;
        title?: string | undefined;
        description?: string | undefined;
        amount?: number | undefined;
        currency?: string | undefined;
        stage?: string | undefined;
        probability?: number | undefined;
        closeDate?: number | undefined;
        type?: string | undefined;
        nextStep?: string | undefined;
        leadSource?: string | undefined;
        isClosed?: boolean | undefined;
        isWon?: boolean | undefined;
        createdDate?: number | undefined;
        lastModifiedDate?: number | undefined;
        lostReason?: string | undefined;
        campaign?: GetOpportunitiesCampaign$.Inbound | undefined;
        account?: GetOpportunitiesAccount$.Inbound | undefined;
        contacts?: Array<GetOpportunitiesContacts$.Inbound> | undefined;
        owner?: GetOpportunitiesOwner$.Inbound | undefined;
        attachments?: Array<GetOpportunitiesAttachments$.Inbound> | undefined;
        notes?: Array<string> | undefined;
        customFields?: Array<GetOpportunitiesCustomFields$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<GetOpportunitiesUnified, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            title: z.string().optional(),
            description: z.string().optional(),
            amount: z.number().optional(),
            currency: z.string().optional(),
            stage: z.string().optional(),
            probability: z.number().optional(),
            closeDate: z.number().optional(),
            type: z.string().optional(),
            nextStep: z.string().optional(),
            leadSource: z.string().optional(),
            isClosed: z.boolean().optional(),
            isWon: z.boolean().optional(),
            createdDate: z.number().optional(),
            lastModifiedDate: z.number().optional(),
            lostReason: z.string().optional(),
            campaign: z.lazy(() => GetOpportunitiesCampaign$.inboundSchema).optional(),
            account: z.lazy(() => GetOpportunitiesAccount$.inboundSchema).optional(),
            contacts: z.array(z.lazy(() => GetOpportunitiesContacts$.inboundSchema)).optional(),
            owner: z.lazy(() => GetOpportunitiesOwner$.inboundSchema).optional(),
            attachments: z
                .array(z.lazy(() => GetOpportunitiesAttachments$.inboundSchema))
                .optional(),
            notes: z.array(z.string()).optional(),
            customFields: z
                .array(z.lazy(() => GetOpportunitiesCustomFields$.inboundSchema))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.amount === undefined ? null : { amount: v.amount }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.stage === undefined ? null : { stage: v.stage }),
                ...(v.probability === undefined ? null : { probability: v.probability }),
                ...(v.closeDate === undefined ? null : { closeDate: v.closeDate }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.nextStep === undefined ? null : { nextStep: v.nextStep }),
                ...(v.leadSource === undefined ? null : { leadSource: v.leadSource }),
                ...(v.isClosed === undefined ? null : { isClosed: v.isClosed }),
                ...(v.isWon === undefined ? null : { isWon: v.isWon }),
                ...(v.createdDate === undefined ? null : { createdDate: v.createdDate }),
                ...(v.lastModifiedDate === undefined
                    ? null
                    : { lastModifiedDate: v.lastModifiedDate }),
                ...(v.lostReason === undefined ? null : { lostReason: v.lostReason }),
                ...(v.campaign === undefined ? null : { campaign: v.campaign }),
                ...(v.account === undefined ? null : { account: v.account }),
                ...(v.contacts === undefined ? null : { contacts: v.contacts }),
                ...(v.owner === undefined ? null : { owner: v.owner }),
                ...(v.attachments === undefined ? null : { attachments: v.attachments }),
                ...(v.notes === undefined ? null : { notes: v.notes }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        title?: string | undefined;
        description?: string | undefined;
        amount?: number | undefined;
        currency?: string | undefined;
        stage?: string | undefined;
        probability?: number | undefined;
        closeDate?: number | undefined;
        type?: string | undefined;
        nextStep?: string | undefined;
        leadSource?: string | undefined;
        isClosed?: boolean | undefined;
        isWon?: boolean | undefined;
        createdDate?: number | undefined;
        lastModifiedDate?: number | undefined;
        lostReason?: string | undefined;
        campaign?: GetOpportunitiesCampaign$.Outbound | undefined;
        account?: GetOpportunitiesAccount$.Outbound | undefined;
        contacts?: Array<GetOpportunitiesContacts$.Outbound> | undefined;
        owner?: GetOpportunitiesOwner$.Outbound | undefined;
        attachments?: Array<GetOpportunitiesAttachments$.Outbound> | undefined;
        notes?: Array<string> | undefined;
        customFields?: Array<GetOpportunitiesCustomFields$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetOpportunitiesUnified> = z
        .object({
            id: z.string().optional(),
            title: z.string().optional(),
            description: z.string().optional(),
            amount: z.number().optional(),
            currency: z.string().optional(),
            stage: z.string().optional(),
            probability: z.number().optional(),
            closeDate: z.number().optional(),
            type: z.string().optional(),
            nextStep: z.string().optional(),
            leadSource: z.string().optional(),
            isClosed: z.boolean().optional(),
            isWon: z.boolean().optional(),
            createdDate: z.number().optional(),
            lastModifiedDate: z.number().optional(),
            lostReason: z.string().optional(),
            campaign: z.lazy(() => GetOpportunitiesCampaign$.outboundSchema).optional(),
            account: z.lazy(() => GetOpportunitiesAccount$.outboundSchema).optional(),
            contacts: z.array(z.lazy(() => GetOpportunitiesContacts$.outboundSchema)).optional(),
            owner: z.lazy(() => GetOpportunitiesOwner$.outboundSchema).optional(),
            attachments: z
                .array(z.lazy(() => GetOpportunitiesAttachments$.outboundSchema))
                .optional(),
            notes: z.array(z.string()).optional(),
            customFields: z
                .array(z.lazy(() => GetOpportunitiesCustomFields$.outboundSchema))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.amount === undefined ? null : { amount: v.amount }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.stage === undefined ? null : { stage: v.stage }),
                ...(v.probability === undefined ? null : { probability: v.probability }),
                ...(v.closeDate === undefined ? null : { closeDate: v.closeDate }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.nextStep === undefined ? null : { nextStep: v.nextStep }),
                ...(v.leadSource === undefined ? null : { leadSource: v.leadSource }),
                ...(v.isClosed === undefined ? null : { isClosed: v.isClosed }),
                ...(v.isWon === undefined ? null : { isWon: v.isWon }),
                ...(v.createdDate === undefined ? null : { createdDate: v.createdDate }),
                ...(v.lastModifiedDate === undefined
                    ? null
                    : { lastModifiedDate: v.lastModifiedDate }),
                ...(v.lostReason === undefined ? null : { lostReason: v.lostReason }),
                ...(v.campaign === undefined ? null : { campaign: v.campaign }),
                ...(v.account === undefined ? null : { account: v.account }),
                ...(v.contacts === undefined ? null : { contacts: v.contacts }),
                ...(v.owner === undefined ? null : { owner: v.owner }),
                ...(v.attachments === undefined ? null : { attachments: v.attachments }),
                ...(v.notes === undefined ? null : { notes: v.notes }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
            };
        });
}

/** @internal */
export namespace GetOpportunitiesPassthrough$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<GetOpportunitiesPassthrough, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetOpportunitiesPassthrough> =
        z.object({});
}

/** @internal */
export namespace GetOpportunitiesCache$ {
    export type Inbound = {
        hit?: boolean | undefined;
        ttl?: number | undefined;
        key?: string | undefined;
    };

    export const inboundSchema: z.ZodType<GetOpportunitiesCache, z.ZodTypeDef, Inbound> = z
        .object({
            hit: z.boolean().optional(),
            ttl: z.number().int().optional(),
            key: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.hit === undefined ? null : { hit: v.hit }),
                ...(v.ttl === undefined ? null : { ttl: v.ttl }),
                ...(v.key === undefined ? null : { key: v.key }),
            };
        });

    export type Outbound = {
        hit?: boolean | undefined;
        ttl?: number | undefined;
        key?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetOpportunitiesCache> = z
        .object({
            hit: z.boolean().optional(),
            ttl: z.number().int().optional(),
            key: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.hit === undefined ? null : { hit: v.hit }),
                ...(v.ttl === undefined ? null : { ttl: v.ttl }),
                ...(v.key === undefined ? null : { key: v.key }),
            };
        });
}

/** @internal */
export namespace GetOpportunitiesMeta$ {
    export type Inbound = {
        timestamp?: number | undefined;
        latency?: number | undefined;
        platformRateLimitRemaining?: number | undefined;
        rateLimitRemaining?: number | undefined;
        cache?: GetOpportunitiesCache$.Inbound | undefined;
        transactionKey?: string | undefined;
        txn?: string | undefined;
        platform?: string | undefined;
        platformVersion?: string | undefined;
        connectionDefinitionKey?: string | undefined;
        action?: string | undefined;
        commonModel?: string | undefined;
        commonModelVersion?: string | undefined;
        connectionKey?: string | undefined;
        hash?: string | undefined;
        heartbeats?: Array<string> | undefined;
        totalTransactions?: number | undefined;
    };

    export const inboundSchema: z.ZodType<GetOpportunitiesMeta, z.ZodTypeDef, Inbound> = z
        .object({
            timestamp: z.number().int().optional(),
            latency: z.number().int().optional(),
            platformRateLimitRemaining: z.number().int().optional(),
            rateLimitRemaining: z.number().int().optional(),
            cache: z.lazy(() => GetOpportunitiesCache$.inboundSchema).optional(),
            transactionKey: z.string().optional(),
            txn: z.string().optional(),
            platform: z.string().optional(),
            platformVersion: z.string().optional(),
            connectionDefinitionKey: z.string().optional(),
            action: z.string().optional(),
            commonModel: z.string().optional(),
            commonModelVersion: z.string().optional(),
            connectionKey: z.string().optional(),
            hash: z.string().optional(),
            heartbeats: z.array(z.string()).optional(),
            totalTransactions: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.timestamp === undefined ? null : { timestamp: v.timestamp }),
                ...(v.latency === undefined ? null : { latency: v.latency }),
                ...(v.platformRateLimitRemaining === undefined
                    ? null
                    : { platformRateLimitRemaining: v.platformRateLimitRemaining }),
                ...(v.rateLimitRemaining === undefined
                    ? null
                    : { rateLimitRemaining: v.rateLimitRemaining }),
                ...(v.cache === undefined ? null : { cache: v.cache }),
                ...(v.transactionKey === undefined ? null : { transactionKey: v.transactionKey }),
                ...(v.txn === undefined ? null : { txn: v.txn }),
                ...(v.platform === undefined ? null : { platform: v.platform }),
                ...(v.platformVersion === undefined
                    ? null
                    : { platformVersion: v.platformVersion }),
                ...(v.connectionDefinitionKey === undefined
                    ? null
                    : { connectionDefinitionKey: v.connectionDefinitionKey }),
                ...(v.action === undefined ? null : { action: v.action }),
                ...(v.commonModel === undefined ? null : { commonModel: v.commonModel }),
                ...(v.commonModelVersion === undefined
                    ? null
                    : { commonModelVersion: v.commonModelVersion }),
                ...(v.connectionKey === undefined ? null : { connectionKey: v.connectionKey }),
                ...(v.hash === undefined ? null : { hash: v.hash }),
                ...(v.heartbeats === undefined ? null : { heartbeats: v.heartbeats }),
                ...(v.totalTransactions === undefined
                    ? null
                    : { totalTransactions: v.totalTransactions }),
            };
        });

    export type Outbound = {
        timestamp?: number | undefined;
        latency?: number | undefined;
        platformRateLimitRemaining?: number | undefined;
        rateLimitRemaining?: number | undefined;
        cache?: GetOpportunitiesCache$.Outbound | undefined;
        transactionKey?: string | undefined;
        txn?: string | undefined;
        platform?: string | undefined;
        platformVersion?: string | undefined;
        connectionDefinitionKey?: string | undefined;
        action?: string | undefined;
        commonModel?: string | undefined;
        commonModelVersion?: string | undefined;
        connectionKey?: string | undefined;
        hash?: string | undefined;
        heartbeats?: Array<string> | undefined;
        totalTransactions?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetOpportunitiesMeta> = z
        .object({
            timestamp: z.number().int().optional(),
            latency: z.number().int().optional(),
            platformRateLimitRemaining: z.number().int().optional(),
            rateLimitRemaining: z.number().int().optional(),
            cache: z.lazy(() => GetOpportunitiesCache$.outboundSchema).optional(),
            transactionKey: z.string().optional(),
            txn: z.string().optional(),
            platform: z.string().optional(),
            platformVersion: z.string().optional(),
            connectionDefinitionKey: z.string().optional(),
            action: z.string().optional(),
            commonModel: z.string().optional(),
            commonModelVersion: z.string().optional(),
            connectionKey: z.string().optional(),
            hash: z.string().optional(),
            heartbeats: z.array(z.string()).optional(),
            totalTransactions: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.timestamp === undefined ? null : { timestamp: v.timestamp }),
                ...(v.latency === undefined ? null : { latency: v.latency }),
                ...(v.platformRateLimitRemaining === undefined
                    ? null
                    : { platformRateLimitRemaining: v.platformRateLimitRemaining }),
                ...(v.rateLimitRemaining === undefined
                    ? null
                    : { rateLimitRemaining: v.rateLimitRemaining }),
                ...(v.cache === undefined ? null : { cache: v.cache }),
                ...(v.transactionKey === undefined ? null : { transactionKey: v.transactionKey }),
                ...(v.txn === undefined ? null : { txn: v.txn }),
                ...(v.platform === undefined ? null : { platform: v.platform }),
                ...(v.platformVersion === undefined
                    ? null
                    : { platformVersion: v.platformVersion }),
                ...(v.connectionDefinitionKey === undefined
                    ? null
                    : { connectionDefinitionKey: v.connectionDefinitionKey }),
                ...(v.action === undefined ? null : { action: v.action }),
                ...(v.commonModel === undefined ? null : { commonModel: v.commonModel }),
                ...(v.commonModelVersion === undefined
                    ? null
                    : { commonModelVersion: v.commonModelVersion }),
                ...(v.connectionKey === undefined ? null : { connectionKey: v.connectionKey }),
                ...(v.hash === undefined ? null : { hash: v.hash }),
                ...(v.heartbeats === undefined ? null : { heartbeats: v.heartbeats }),
                ...(v.totalTransactions === undefined
                    ? null
                    : { totalTransactions: v.totalTransactions }),
            };
        });
}

/** @internal */
export namespace GetOpportunitiesPagination$ {
    export type Inbound = {
        cursor?: string | undefined;
        limit?: number | undefined;
    };

    export const inboundSchema: z.ZodType<GetOpportunitiesPagination, z.ZodTypeDef, Inbound> = z
        .object({
            cursor: z.string().optional(),
            limit: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.cursor === undefined ? null : { cursor: v.cursor }),
                ...(v.limit === undefined ? null : { limit: v.limit }),
            };
        });

    export type Outbound = {
        cursor?: string | undefined;
        limit?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetOpportunitiesPagination> = z
        .object({
            cursor: z.string().optional(),
            limit: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.cursor === undefined ? null : { cursor: v.cursor }),
                ...(v.limit === undefined ? null : { limit: v.limit }),
            };
        });
}

/** @internal */
export namespace GetOpportunitiesResponseBody$ {
    export type Inbound = {
        status?: string | undefined;
        statusCode?: GetOpportunitiesStatusCode | undefined;
        unified?: Array<GetOpportunitiesUnified$.Inbound> | undefined;
        passthrough?: GetOpportunitiesPassthrough$.Inbound | undefined;
        meta?: GetOpportunitiesMeta$.Inbound | undefined;
        pagination?: GetOpportunitiesPagination$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<GetOpportunitiesResponseBody, z.ZodTypeDef, Inbound> = z
        .object({
            status: z.string().optional(),
            statusCode: GetOpportunitiesStatusCode$.optional(),
            unified: z.array(z.lazy(() => GetOpportunitiesUnified$.inboundSchema)).optional(),
            passthrough: z.lazy(() => GetOpportunitiesPassthrough$.inboundSchema).optional(),
            meta: z.lazy(() => GetOpportunitiesMeta$.inboundSchema).optional(),
            pagination: z.lazy(() => GetOpportunitiesPagination$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.statusCode === undefined ? null : { statusCode: v.statusCode }),
                ...(v.unified === undefined ? null : { unified: v.unified }),
                ...(v.passthrough === undefined ? null : { passthrough: v.passthrough }),
                ...(v.meta === undefined ? null : { meta: v.meta }),
                ...(v.pagination === undefined ? null : { pagination: v.pagination }),
            };
        });

    export type Outbound = {
        status?: string | undefined;
        statusCode?: GetOpportunitiesStatusCode | undefined;
        unified?: Array<GetOpportunitiesUnified$.Outbound> | undefined;
        passthrough?: GetOpportunitiesPassthrough$.Outbound | undefined;
        meta?: GetOpportunitiesMeta$.Outbound | undefined;
        pagination?: GetOpportunitiesPagination$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetOpportunitiesResponseBody> = z
        .object({
            status: z.string().optional(),
            statusCode: GetOpportunitiesStatusCode$.optional(),
            unified: z.array(z.lazy(() => GetOpportunitiesUnified$.outboundSchema)).optional(),
            passthrough: z.lazy(() => GetOpportunitiesPassthrough$.outboundSchema).optional(),
            meta: z.lazy(() => GetOpportunitiesMeta$.outboundSchema).optional(),
            pagination: z.lazy(() => GetOpportunitiesPagination$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.statusCode === undefined ? null : { statusCode: v.statusCode }),
                ...(v.unified === undefined ? null : { unified: v.unified }),
                ...(v.passthrough === undefined ? null : { passthrough: v.passthrough }),
                ...(v.meta === undefined ? null : { meta: v.meta }),
                ...(v.pagination === undefined ? null : { pagination: v.pagination }),
            };
        });
}

/** @internal */
export namespace GetOpportunitiesResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        object?: GetOpportunitiesResponseBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<GetOpportunitiesResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => GetOpportunitiesResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: GetOpportunitiesResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetOpportunitiesResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z.lazy(() => GetOpportunitiesResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
