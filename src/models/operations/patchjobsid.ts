/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export enum EmploymentType {
    FullTime = "full-time",
    PartTime = "part-time",
    Contract = "contract",
    Temporary = "temporary",
    Volunteer = "volunteer",
    Internship = "internship",
}

export enum PatchJobsIdType {
    Home = "home",
    Work = "work",
    Other = "other",
}

export type PatchJobsIdGeoLocation = {
    latitude?: number | undefined;
    longitude?: number | undefined;
    altitude?: number | undefined;
    accuracy?: number | undefined;
    altitudeAccuracy?: number | undefined;
    heading?: number | undefined;
    speed?: number | undefined;
    timestamp?: number | undefined;
};

export enum PatchJobsIdFieldType {
    Text = "text",
    Number = "number",
    Date = "date",
    Boolean = "boolean",
    Enum = "enum",
    Json = "json",
    Array = "array",
}

export type PatchJobsIdCustomFields = {
    id?: string | undefined;
    fieldName?: string | undefined;
    fieldValue?: string | undefined;
    fieldType?: PatchJobsIdFieldType | undefined;
};

export type Location = {
    id?: string | undefined;
    contactId?: string | undefined;
    accountId?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    name?: string | undefined;
    companyName?: string | undefined;
    email?: string | undefined;
    phone?: string | undefined;
    street?: string | undefined;
    addressLine2?: string | undefined;
    city?: string | undefined;
    province?: string | undefined;
    region?: string | undefined;
    postalCode?: string | undefined;
    postalCodeExtension?: string | undefined;
    country?: string | undefined;
    countryCode?: string | undefined;
    type?: PatchJobsIdType | undefined;
    geoLocation?: PatchJobsIdGeoLocation | undefined;
    customFields?: Array<PatchJobsIdCustomFields> | undefined;
    subdivisionCode?: string | undefined;
};

export enum PatchJobsIdJobsType {
    Home = "home",
    Work = "work",
    Other = "other",
}

export type PatchJobsIdJobsGeoLocation = {
    latitude?: number | undefined;
    longitude?: number | undefined;
    altitude?: number | undefined;
    accuracy?: number | undefined;
    altitudeAccuracy?: number | undefined;
    heading?: number | undefined;
    speed?: number | undefined;
    timestamp?: number | undefined;
};

export enum PatchJobsIdJobsFieldType {
    Text = "text",
    Number = "number",
    Date = "date",
    Boolean = "boolean",
    Enum = "enum",
    Json = "json",
    Array = "array",
}

export type PatchJobsIdJobsCustomFields = {
    id?: string | undefined;
    fieldName?: string | undefined;
    fieldValue?: string | undefined;
    fieldType?: PatchJobsIdJobsFieldType | undefined;
};

export type PatchJobsIdAddress = {
    id?: string | undefined;
    contactId?: string | undefined;
    accountId?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    name?: string | undefined;
    companyName?: string | undefined;
    email?: string | undefined;
    phone?: string | undefined;
    street?: string | undefined;
    addressLine2?: string | undefined;
    city?: string | undefined;
    province?: string | undefined;
    region?: string | undefined;
    postalCode?: string | undefined;
    postalCodeExtension?: string | undefined;
    country?: string | undefined;
    countryCode?: string | undefined;
    type?: PatchJobsIdJobsType | undefined;
    geoLocation?: PatchJobsIdJobsGeoLocation | undefined;
    customFields?: Array<PatchJobsIdJobsCustomFields> | undefined;
    subdivisionCode?: string | undefined;
};

export enum PatchJobsIdJobsRequestType {
    Personal = "personal",
    Business = "business",
    Other = "other",
}

export type PatchJobsIdEmails = {
    email?: string | undefined;
    type?: PatchJobsIdJobsRequestType | undefined;
};

export enum PatchJobsIdJobsRequestRequestBodyType {
    Personal = "personal",
    Business = "business",
    Other = "other",
}

export type PatchJobsIdPhones = {
    phone?: string | undefined;
    country?: string | undefined;
    countryCode?: string | undefined;
    type?: PatchJobsIdJobsRequestRequestBodyType | undefined;
};

export enum PatchJobsIdJobsRequestRequestBodyCompanyType {
    Facebook = "facebook",
    Twitter = "twitter",
    Linkedin = "linkedin",
    Instagram = "instagram",
    Tiktok = "tiktok",
    Pinterest = "pinterest",
    Youtube = "youtube",
    Other = "other",
}

export type PatchJobsIdAdditionalInfo = {};

export type PatchJobsIdSocialProfiles = {
    type?: PatchJobsIdJobsRequestRequestBodyCompanyType | undefined;
    username?: string | undefined;
    displayName?: string | undefined;
    url?: string | undefined;
    avatarUrl?: string | undefined;
    email?: string | undefined;
    additionalInfo?: PatchJobsIdAdditionalInfo | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    active?: boolean | undefined;
    deleted?: boolean | undefined;
};

export type PatchJobsIdJobsEmails = {};

export type PatchJobsIdJobsPhones = {};

export type PatchJobsIdJobsAddress = {};

export type PatchJobsIdAddresses = {};

export type PatchJobsIdNotes = {};

export type PatchJobsIdJobsSocialProfiles = {};

export type PatchJobsIdJobsRequestCustomFields = {};

export type PatchJobsIdAdditionalContacts = {
    id?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    leadId?: string | undefined;
    company?: string | undefined;
    defaultEmail?: string | undefined;
    emails?: Array<PatchJobsIdJobsEmails> | undefined;
    defaultPhone?: string | undefined;
    phones?: Array<PatchJobsIdJobsPhones> | undefined;
    address?: PatchJobsIdJobsAddress | undefined;
    addresses?: Array<PatchJobsIdAddresses> | undefined;
    birthday?: number | undefined;
    relationship?: string | undefined;
    note?: string | undefined;
    notes?: PatchJobsIdNotes | undefined;
    tags?: Array<string> | undefined;
    websites?: Array<string> | undefined;
    socialProfiles?: Array<PatchJobsIdJobsSocialProfiles> | undefined;
    isActive?: boolean | undefined;
    customFields?: Array<PatchJobsIdJobsRequestCustomFields> | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
};

export enum PatchJobsIdJobsRequestFieldType {
    Text = "text",
    Number = "number",
    Date = "date",
    Boolean = "boolean",
    Enum = "enum",
    Json = "json",
    Array = "array",
}

export type PatchJobsIdJobsRequestRequestBodyCustomFields = {
    id?: string | undefined;
    fieldName?: string | undefined;
    fieldValue?: string | undefined;
    fieldType?: PatchJobsIdJobsRequestFieldType | undefined;
};

export type Company = {
    id?: string | undefined;
    name?: string | undefined;
    legalName?: string | undefined;
    type?: string | undefined;
    industry?: string | undefined;
    address?: PatchJobsIdAddress | undefined;
    defaultEmail?: string | undefined;
    emails?: Array<PatchJobsIdEmails> | undefined;
    defaultPhone?: string | undefined;
    phones?: Array<PatchJobsIdPhones> | undefined;
    website?: string | undefined;
    foundedDate?: number | undefined;
    numberOfEmployees?: number | undefined;
    revenue?: number | undefined;
    revenueCurrency?: string | undefined;
    tags?: Array<string> | undefined;
    socialProfiles?: Array<PatchJobsIdSocialProfiles> | undefined;
    logo?: string | undefined;
    description?: string | undefined;
    stockSymbol?: string | undefined;
    parentCompanyId?: string | undefined;
    additionalContacts?: Array<PatchJobsIdAdditionalContacts> | undefined;
    incorporationCountry?: string | undefined;
    incorporationDate?: number | undefined;
    taxId?: string | undefined;
    regulatoryStatus?: string | undefined;
    dunsNumber?: string | undefined;
    customFields?: Array<PatchJobsIdJobsRequestRequestBodyCustomFields> | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
};

export enum PaymentPeriod {
    Hourly = "hourly",
    Daily = "daily",
    Weekly = "weekly",
    Biweekly = "biweekly",
    Monthly = "monthly",
    Annually = "annually",
}

export type BaseSalary = {
    value?: number | undefined;
    currency?: string | undefined;
    paymentPeriod?: PaymentPeriod | undefined;
};

export type EmploymentUnit = {
    name?: string | undefined;
    description?: string | undefined;
};

export type PatchJobsIdRequestBody = {
    id?: string | undefined;
    title?: string | undefined;
    description?: string | undefined;
    employmentType?: EmploymentType | undefined;
    location?: Location | undefined;
    remote?: boolean | undefined;
    validUntil?: number | undefined;
    company?: Company | undefined;
    baseSalary?: BaseSalary | undefined;
    qualifications?: string | undefined;
    responsibilities?: string | undefined;
    skills?: Array<string> | undefined;
    benefits?: Array<string> | undefined;
    educationRequirements?: string | undefined;
    experienceRequirements?: string | undefined;
    workHours?: string | undefined;
    industry?: string | undefined;
    jobLocationType?: string | undefined;
    occupationalCategory?: string | undefined;
    incentiveCompensation?: string | undefined;
    jobBenefits?: string | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    employmentUnit?: EmploymentUnit | undefined;
    jobImmediateStart?: boolean | undefined;
    jobFlexibleHours?: boolean | undefined;
    jobShifts?: Array<string> | undefined;
    jobTrainingProvided?: boolean | undefined;
    jobTrialPeriod?: string | undefined;
    workFromHome?: boolean | undefined;
    languagesSpoken?: Array<string> | undefined;
    applicationDeadline?: number | undefined;
    incentives?: string | undefined;
    jobStartDate?: number | undefined;
    salaryCurrency?: string | undefined;
};

export type PatchJobsIdRequest = {
    /**
     * The id of the model
     */
    id: string;
    /**
     * The unique identifier of a Connected Account
     */
    xIntegrationosConnectionKey: string;
    requestBody?: PatchJobsIdRequestBody | undefined;
};

export enum PatchJobsIdStatusCode {
    TwoHundred = 200,
    FourHundred = 400,
    FiveHundred = 500,
}

export type PatchJobsIdUnified = {
    count?: number | undefined;
};

export type PatchJobsIdPassthrough = {};

export type PatchJobsIdCache = {
    hit?: boolean | undefined;
    ttl?: number | undefined;
    key?: string | undefined;
};

export type PatchJobsIdMeta = {
    timestamp?: number | undefined;
    latency?: number | undefined;
    platformRateLimitRemaining?: number | undefined;
    rateLimitRemaining?: number | undefined;
    cache?: PatchJobsIdCache | undefined;
    transactionKey?: string | undefined;
    txn?: string | undefined;
    platform?: string | undefined;
    platformVersion?: string | undefined;
    connectionDefinitionKey?: string | undefined;
    action?: string | undefined;
    commonModel?: string | undefined;
    commonModelVersion?: string | undefined;
    connectionKey?: string | undefined;
    hash?: string | undefined;
    heartbeats?: Array<string> | undefined;
    totalTransactions?: number | undefined;
};

/**
 * Successful response
 */
export type PatchJobsIdResponseBody = {
    status?: string | undefined;
    statusCode?: PatchJobsIdStatusCode | undefined;
    unified?: PatchJobsIdUnified | undefined;
    passthrough?: PatchJobsIdPassthrough | undefined;
    meta?: PatchJobsIdMeta | undefined;
};

export type PatchJobsIdResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Successful response
     */
    object?: PatchJobsIdResponseBody | undefined;
};

/** @internal */
export const EmploymentType$ = z.nativeEnum(EmploymentType);

/** @internal */
export const PatchJobsIdType$ = z.nativeEnum(PatchJobsIdType);

/** @internal */
export namespace PatchJobsIdGeoLocation$ {
    export type Inbound = {
        latitude?: number | undefined;
        longitude?: number | undefined;
        altitude?: number | undefined;
        accuracy?: number | undefined;
        altitudeAccuracy?: number | undefined;
        heading?: number | undefined;
        speed?: number | undefined;
        timestamp?: number | undefined;
    };

    export const inboundSchema: z.ZodType<PatchJobsIdGeoLocation, z.ZodTypeDef, Inbound> = z
        .object({
            latitude: z.number().optional(),
            longitude: z.number().optional(),
            altitude: z.number().optional(),
            accuracy: z.number().optional(),
            altitudeAccuracy: z.number().optional(),
            heading: z.number().optional(),
            speed: z.number().optional(),
            timestamp: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.latitude === undefined ? null : { latitude: v.latitude }),
                ...(v.longitude === undefined ? null : { longitude: v.longitude }),
                ...(v.altitude === undefined ? null : { altitude: v.altitude }),
                ...(v.accuracy === undefined ? null : { accuracy: v.accuracy }),
                ...(v.altitudeAccuracy === undefined
                    ? null
                    : { altitudeAccuracy: v.altitudeAccuracy }),
                ...(v.heading === undefined ? null : { heading: v.heading }),
                ...(v.speed === undefined ? null : { speed: v.speed }),
                ...(v.timestamp === undefined ? null : { timestamp: v.timestamp }),
            };
        });

    export type Outbound = {
        latitude?: number | undefined;
        longitude?: number | undefined;
        altitude?: number | undefined;
        accuracy?: number | undefined;
        altitudeAccuracy?: number | undefined;
        heading?: number | undefined;
        speed?: number | undefined;
        timestamp?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchJobsIdGeoLocation> = z
        .object({
            latitude: z.number().optional(),
            longitude: z.number().optional(),
            altitude: z.number().optional(),
            accuracy: z.number().optional(),
            altitudeAccuracy: z.number().optional(),
            heading: z.number().optional(),
            speed: z.number().optional(),
            timestamp: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.latitude === undefined ? null : { latitude: v.latitude }),
                ...(v.longitude === undefined ? null : { longitude: v.longitude }),
                ...(v.altitude === undefined ? null : { altitude: v.altitude }),
                ...(v.accuracy === undefined ? null : { accuracy: v.accuracy }),
                ...(v.altitudeAccuracy === undefined
                    ? null
                    : { altitudeAccuracy: v.altitudeAccuracy }),
                ...(v.heading === undefined ? null : { heading: v.heading }),
                ...(v.speed === undefined ? null : { speed: v.speed }),
                ...(v.timestamp === undefined ? null : { timestamp: v.timestamp }),
            };
        });
}

/** @internal */
export const PatchJobsIdFieldType$ = z.nativeEnum(PatchJobsIdFieldType);

/** @internal */
export namespace PatchJobsIdCustomFields$ {
    export type Inbound = {
        id?: string | undefined;
        fieldName?: string | undefined;
        fieldValue?: string | undefined;
        fieldType?: PatchJobsIdFieldType | undefined;
    };

    export const inboundSchema: z.ZodType<PatchJobsIdCustomFields, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            fieldName: z.string().optional(),
            fieldValue: z.string().optional(),
            fieldType: PatchJobsIdFieldType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fieldName === undefined ? null : { fieldName: v.fieldName }),
                ...(v.fieldValue === undefined ? null : { fieldValue: v.fieldValue }),
                ...(v.fieldType === undefined ? null : { fieldType: v.fieldType }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        fieldName?: string | undefined;
        fieldValue?: string | undefined;
        fieldType?: PatchJobsIdFieldType | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchJobsIdCustomFields> = z
        .object({
            id: z.string().optional(),
            fieldName: z.string().optional(),
            fieldValue: z.string().optional(),
            fieldType: PatchJobsIdFieldType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fieldName === undefined ? null : { fieldName: v.fieldName }),
                ...(v.fieldValue === undefined ? null : { fieldValue: v.fieldValue }),
                ...(v.fieldType === undefined ? null : { fieldType: v.fieldType }),
            };
        });
}

/** @internal */
export namespace Location$ {
    export type Inbound = {
        id?: string | undefined;
        contactId?: string | undefined;
        accountId?: string | undefined;
        firstName?: string | undefined;
        lastName?: string | undefined;
        name?: string | undefined;
        companyName?: string | undefined;
        email?: string | undefined;
        phone?: string | undefined;
        street?: string | undefined;
        addressLine2?: string | undefined;
        city?: string | undefined;
        province?: string | undefined;
        region?: string | undefined;
        postalCode?: string | undefined;
        postalCodeExtension?: string | undefined;
        country?: string | undefined;
        countryCode?: string | undefined;
        type?: PatchJobsIdType | undefined;
        geoLocation?: PatchJobsIdGeoLocation$.Inbound | undefined;
        customFields?: Array<PatchJobsIdCustomFields$.Inbound> | undefined;
        subdivisionCode?: string | undefined;
    };

    export const inboundSchema: z.ZodType<Location, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            contactId: z.string().optional(),
            accountId: z.string().optional(),
            firstName: z.string().optional(),
            lastName: z.string().optional(),
            name: z.string().optional(),
            companyName: z.string().optional(),
            email: z.string().optional(),
            phone: z.string().optional(),
            street: z.string().optional(),
            addressLine2: z.string().optional(),
            city: z.string().optional(),
            province: z.string().optional(),
            region: z.string().optional(),
            postalCode: z.string().optional(),
            postalCodeExtension: z.string().optional(),
            country: z.string().optional(),
            countryCode: z.string().optional(),
            type: PatchJobsIdType$.optional(),
            geoLocation: z.lazy(() => PatchJobsIdGeoLocation$.inboundSchema).optional(),
            customFields: z.array(z.lazy(() => PatchJobsIdCustomFields$.inboundSchema)).optional(),
            subdivisionCode: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.contactId === undefined ? null : { contactId: v.contactId }),
                ...(v.accountId === undefined ? null : { accountId: v.accountId }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.companyName === undefined ? null : { companyName: v.companyName }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.phone === undefined ? null : { phone: v.phone }),
                ...(v.street === undefined ? null : { street: v.street }),
                ...(v.addressLine2 === undefined ? null : { addressLine2: v.addressLine2 }),
                ...(v.city === undefined ? null : { city: v.city }),
                ...(v.province === undefined ? null : { province: v.province }),
                ...(v.region === undefined ? null : { region: v.region }),
                ...(v.postalCode === undefined ? null : { postalCode: v.postalCode }),
                ...(v.postalCodeExtension === undefined
                    ? null
                    : { postalCodeExtension: v.postalCodeExtension }),
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.countryCode === undefined ? null : { countryCode: v.countryCode }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.geoLocation === undefined ? null : { geoLocation: v.geoLocation }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                ...(v.subdivisionCode === undefined
                    ? null
                    : { subdivisionCode: v.subdivisionCode }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        contactId?: string | undefined;
        accountId?: string | undefined;
        firstName?: string | undefined;
        lastName?: string | undefined;
        name?: string | undefined;
        companyName?: string | undefined;
        email?: string | undefined;
        phone?: string | undefined;
        street?: string | undefined;
        addressLine2?: string | undefined;
        city?: string | undefined;
        province?: string | undefined;
        region?: string | undefined;
        postalCode?: string | undefined;
        postalCodeExtension?: string | undefined;
        country?: string | undefined;
        countryCode?: string | undefined;
        type?: PatchJobsIdType | undefined;
        geoLocation?: PatchJobsIdGeoLocation$.Outbound | undefined;
        customFields?: Array<PatchJobsIdCustomFields$.Outbound> | undefined;
        subdivisionCode?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Location> = z
        .object({
            id: z.string().optional(),
            contactId: z.string().optional(),
            accountId: z.string().optional(),
            firstName: z.string().optional(),
            lastName: z.string().optional(),
            name: z.string().optional(),
            companyName: z.string().optional(),
            email: z.string().optional(),
            phone: z.string().optional(),
            street: z.string().optional(),
            addressLine2: z.string().optional(),
            city: z.string().optional(),
            province: z.string().optional(),
            region: z.string().optional(),
            postalCode: z.string().optional(),
            postalCodeExtension: z.string().optional(),
            country: z.string().optional(),
            countryCode: z.string().optional(),
            type: PatchJobsIdType$.optional(),
            geoLocation: z.lazy(() => PatchJobsIdGeoLocation$.outboundSchema).optional(),
            customFields: z.array(z.lazy(() => PatchJobsIdCustomFields$.outboundSchema)).optional(),
            subdivisionCode: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.contactId === undefined ? null : { contactId: v.contactId }),
                ...(v.accountId === undefined ? null : { accountId: v.accountId }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.companyName === undefined ? null : { companyName: v.companyName }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.phone === undefined ? null : { phone: v.phone }),
                ...(v.street === undefined ? null : { street: v.street }),
                ...(v.addressLine2 === undefined ? null : { addressLine2: v.addressLine2 }),
                ...(v.city === undefined ? null : { city: v.city }),
                ...(v.province === undefined ? null : { province: v.province }),
                ...(v.region === undefined ? null : { region: v.region }),
                ...(v.postalCode === undefined ? null : { postalCode: v.postalCode }),
                ...(v.postalCodeExtension === undefined
                    ? null
                    : { postalCodeExtension: v.postalCodeExtension }),
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.countryCode === undefined ? null : { countryCode: v.countryCode }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.geoLocation === undefined ? null : { geoLocation: v.geoLocation }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                ...(v.subdivisionCode === undefined
                    ? null
                    : { subdivisionCode: v.subdivisionCode }),
            };
        });
}

/** @internal */
export const PatchJobsIdJobsType$ = z.nativeEnum(PatchJobsIdJobsType);

/** @internal */
export namespace PatchJobsIdJobsGeoLocation$ {
    export type Inbound = {
        latitude?: number | undefined;
        longitude?: number | undefined;
        altitude?: number | undefined;
        accuracy?: number | undefined;
        altitudeAccuracy?: number | undefined;
        heading?: number | undefined;
        speed?: number | undefined;
        timestamp?: number | undefined;
    };

    export const inboundSchema: z.ZodType<PatchJobsIdJobsGeoLocation, z.ZodTypeDef, Inbound> = z
        .object({
            latitude: z.number().optional(),
            longitude: z.number().optional(),
            altitude: z.number().optional(),
            accuracy: z.number().optional(),
            altitudeAccuracy: z.number().optional(),
            heading: z.number().optional(),
            speed: z.number().optional(),
            timestamp: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.latitude === undefined ? null : { latitude: v.latitude }),
                ...(v.longitude === undefined ? null : { longitude: v.longitude }),
                ...(v.altitude === undefined ? null : { altitude: v.altitude }),
                ...(v.accuracy === undefined ? null : { accuracy: v.accuracy }),
                ...(v.altitudeAccuracy === undefined
                    ? null
                    : { altitudeAccuracy: v.altitudeAccuracy }),
                ...(v.heading === undefined ? null : { heading: v.heading }),
                ...(v.speed === undefined ? null : { speed: v.speed }),
                ...(v.timestamp === undefined ? null : { timestamp: v.timestamp }),
            };
        });

    export type Outbound = {
        latitude?: number | undefined;
        longitude?: number | undefined;
        altitude?: number | undefined;
        accuracy?: number | undefined;
        altitudeAccuracy?: number | undefined;
        heading?: number | undefined;
        speed?: number | undefined;
        timestamp?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchJobsIdJobsGeoLocation> = z
        .object({
            latitude: z.number().optional(),
            longitude: z.number().optional(),
            altitude: z.number().optional(),
            accuracy: z.number().optional(),
            altitudeAccuracy: z.number().optional(),
            heading: z.number().optional(),
            speed: z.number().optional(),
            timestamp: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.latitude === undefined ? null : { latitude: v.latitude }),
                ...(v.longitude === undefined ? null : { longitude: v.longitude }),
                ...(v.altitude === undefined ? null : { altitude: v.altitude }),
                ...(v.accuracy === undefined ? null : { accuracy: v.accuracy }),
                ...(v.altitudeAccuracy === undefined
                    ? null
                    : { altitudeAccuracy: v.altitudeAccuracy }),
                ...(v.heading === undefined ? null : { heading: v.heading }),
                ...(v.speed === undefined ? null : { speed: v.speed }),
                ...(v.timestamp === undefined ? null : { timestamp: v.timestamp }),
            };
        });
}

/** @internal */
export const PatchJobsIdJobsFieldType$ = z.nativeEnum(PatchJobsIdJobsFieldType);

/** @internal */
export namespace PatchJobsIdJobsCustomFields$ {
    export type Inbound = {
        id?: string | undefined;
        fieldName?: string | undefined;
        fieldValue?: string | undefined;
        fieldType?: PatchJobsIdJobsFieldType | undefined;
    };

    export const inboundSchema: z.ZodType<PatchJobsIdJobsCustomFields, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            fieldName: z.string().optional(),
            fieldValue: z.string().optional(),
            fieldType: PatchJobsIdJobsFieldType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fieldName === undefined ? null : { fieldName: v.fieldName }),
                ...(v.fieldValue === undefined ? null : { fieldValue: v.fieldValue }),
                ...(v.fieldType === undefined ? null : { fieldType: v.fieldType }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        fieldName?: string | undefined;
        fieldValue?: string | undefined;
        fieldType?: PatchJobsIdJobsFieldType | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchJobsIdJobsCustomFields> = z
        .object({
            id: z.string().optional(),
            fieldName: z.string().optional(),
            fieldValue: z.string().optional(),
            fieldType: PatchJobsIdJobsFieldType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fieldName === undefined ? null : { fieldName: v.fieldName }),
                ...(v.fieldValue === undefined ? null : { fieldValue: v.fieldValue }),
                ...(v.fieldType === undefined ? null : { fieldType: v.fieldType }),
            };
        });
}

/** @internal */
export namespace PatchJobsIdAddress$ {
    export type Inbound = {
        id?: string | undefined;
        contactId?: string | undefined;
        accountId?: string | undefined;
        firstName?: string | undefined;
        lastName?: string | undefined;
        name?: string | undefined;
        companyName?: string | undefined;
        email?: string | undefined;
        phone?: string | undefined;
        street?: string | undefined;
        addressLine2?: string | undefined;
        city?: string | undefined;
        province?: string | undefined;
        region?: string | undefined;
        postalCode?: string | undefined;
        postalCodeExtension?: string | undefined;
        country?: string | undefined;
        countryCode?: string | undefined;
        type?: PatchJobsIdJobsType | undefined;
        geoLocation?: PatchJobsIdJobsGeoLocation$.Inbound | undefined;
        customFields?: Array<PatchJobsIdJobsCustomFields$.Inbound> | undefined;
        subdivisionCode?: string | undefined;
    };

    export const inboundSchema: z.ZodType<PatchJobsIdAddress, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            contactId: z.string().optional(),
            accountId: z.string().optional(),
            firstName: z.string().optional(),
            lastName: z.string().optional(),
            name: z.string().optional(),
            companyName: z.string().optional(),
            email: z.string().optional(),
            phone: z.string().optional(),
            street: z.string().optional(),
            addressLine2: z.string().optional(),
            city: z.string().optional(),
            province: z.string().optional(),
            region: z.string().optional(),
            postalCode: z.string().optional(),
            postalCodeExtension: z.string().optional(),
            country: z.string().optional(),
            countryCode: z.string().optional(),
            type: PatchJobsIdJobsType$.optional(),
            geoLocation: z.lazy(() => PatchJobsIdJobsGeoLocation$.inboundSchema).optional(),
            customFields: z
                .array(z.lazy(() => PatchJobsIdJobsCustomFields$.inboundSchema))
                .optional(),
            subdivisionCode: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.contactId === undefined ? null : { contactId: v.contactId }),
                ...(v.accountId === undefined ? null : { accountId: v.accountId }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.companyName === undefined ? null : { companyName: v.companyName }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.phone === undefined ? null : { phone: v.phone }),
                ...(v.street === undefined ? null : { street: v.street }),
                ...(v.addressLine2 === undefined ? null : { addressLine2: v.addressLine2 }),
                ...(v.city === undefined ? null : { city: v.city }),
                ...(v.province === undefined ? null : { province: v.province }),
                ...(v.region === undefined ? null : { region: v.region }),
                ...(v.postalCode === undefined ? null : { postalCode: v.postalCode }),
                ...(v.postalCodeExtension === undefined
                    ? null
                    : { postalCodeExtension: v.postalCodeExtension }),
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.countryCode === undefined ? null : { countryCode: v.countryCode }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.geoLocation === undefined ? null : { geoLocation: v.geoLocation }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                ...(v.subdivisionCode === undefined
                    ? null
                    : { subdivisionCode: v.subdivisionCode }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        contactId?: string | undefined;
        accountId?: string | undefined;
        firstName?: string | undefined;
        lastName?: string | undefined;
        name?: string | undefined;
        companyName?: string | undefined;
        email?: string | undefined;
        phone?: string | undefined;
        street?: string | undefined;
        addressLine2?: string | undefined;
        city?: string | undefined;
        province?: string | undefined;
        region?: string | undefined;
        postalCode?: string | undefined;
        postalCodeExtension?: string | undefined;
        country?: string | undefined;
        countryCode?: string | undefined;
        type?: PatchJobsIdJobsType | undefined;
        geoLocation?: PatchJobsIdJobsGeoLocation$.Outbound | undefined;
        customFields?: Array<PatchJobsIdJobsCustomFields$.Outbound> | undefined;
        subdivisionCode?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchJobsIdAddress> = z
        .object({
            id: z.string().optional(),
            contactId: z.string().optional(),
            accountId: z.string().optional(),
            firstName: z.string().optional(),
            lastName: z.string().optional(),
            name: z.string().optional(),
            companyName: z.string().optional(),
            email: z.string().optional(),
            phone: z.string().optional(),
            street: z.string().optional(),
            addressLine2: z.string().optional(),
            city: z.string().optional(),
            province: z.string().optional(),
            region: z.string().optional(),
            postalCode: z.string().optional(),
            postalCodeExtension: z.string().optional(),
            country: z.string().optional(),
            countryCode: z.string().optional(),
            type: PatchJobsIdJobsType$.optional(),
            geoLocation: z.lazy(() => PatchJobsIdJobsGeoLocation$.outboundSchema).optional(),
            customFields: z
                .array(z.lazy(() => PatchJobsIdJobsCustomFields$.outboundSchema))
                .optional(),
            subdivisionCode: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.contactId === undefined ? null : { contactId: v.contactId }),
                ...(v.accountId === undefined ? null : { accountId: v.accountId }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.companyName === undefined ? null : { companyName: v.companyName }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.phone === undefined ? null : { phone: v.phone }),
                ...(v.street === undefined ? null : { street: v.street }),
                ...(v.addressLine2 === undefined ? null : { addressLine2: v.addressLine2 }),
                ...(v.city === undefined ? null : { city: v.city }),
                ...(v.province === undefined ? null : { province: v.province }),
                ...(v.region === undefined ? null : { region: v.region }),
                ...(v.postalCode === undefined ? null : { postalCode: v.postalCode }),
                ...(v.postalCodeExtension === undefined
                    ? null
                    : { postalCodeExtension: v.postalCodeExtension }),
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.countryCode === undefined ? null : { countryCode: v.countryCode }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.geoLocation === undefined ? null : { geoLocation: v.geoLocation }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                ...(v.subdivisionCode === undefined
                    ? null
                    : { subdivisionCode: v.subdivisionCode }),
            };
        });
}

/** @internal */
export const PatchJobsIdJobsRequestType$ = z.nativeEnum(PatchJobsIdJobsRequestType);

/** @internal */
export namespace PatchJobsIdEmails$ {
    export type Inbound = {
        email?: string | undefined;
        type?: PatchJobsIdJobsRequestType | undefined;
    };

    export const inboundSchema: z.ZodType<PatchJobsIdEmails, z.ZodTypeDef, Inbound> = z
        .object({
            email: z.string().optional(),
            type: PatchJobsIdJobsRequestType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });

    export type Outbound = {
        email?: string | undefined;
        type?: PatchJobsIdJobsRequestType | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchJobsIdEmails> = z
        .object({
            email: z.string().optional(),
            type: PatchJobsIdJobsRequestType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });
}

/** @internal */
export const PatchJobsIdJobsRequestRequestBodyType$ = z.nativeEnum(
    PatchJobsIdJobsRequestRequestBodyType
);

/** @internal */
export namespace PatchJobsIdPhones$ {
    export type Inbound = {
        phone?: string | undefined;
        country?: string | undefined;
        countryCode?: string | undefined;
        type?: PatchJobsIdJobsRequestRequestBodyType | undefined;
    };

    export const inboundSchema: z.ZodType<PatchJobsIdPhones, z.ZodTypeDef, Inbound> = z
        .object({
            phone: z.string().optional(),
            country: z.string().optional(),
            countryCode: z.string().optional(),
            type: PatchJobsIdJobsRequestRequestBodyType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.phone === undefined ? null : { phone: v.phone }),
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.countryCode === undefined ? null : { countryCode: v.countryCode }),
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });

    export type Outbound = {
        phone?: string | undefined;
        country?: string | undefined;
        countryCode?: string | undefined;
        type?: PatchJobsIdJobsRequestRequestBodyType | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchJobsIdPhones> = z
        .object({
            phone: z.string().optional(),
            country: z.string().optional(),
            countryCode: z.string().optional(),
            type: PatchJobsIdJobsRequestRequestBodyType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.phone === undefined ? null : { phone: v.phone }),
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.countryCode === undefined ? null : { countryCode: v.countryCode }),
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });
}

/** @internal */
export const PatchJobsIdJobsRequestRequestBodyCompanyType$ = z.nativeEnum(
    PatchJobsIdJobsRequestRequestBodyCompanyType
);

/** @internal */
export namespace PatchJobsIdAdditionalInfo$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<PatchJobsIdAdditionalInfo, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchJobsIdAdditionalInfo> =
        z.object({});
}

/** @internal */
export namespace PatchJobsIdSocialProfiles$ {
    export type Inbound = {
        type?: PatchJobsIdJobsRequestRequestBodyCompanyType | undefined;
        username?: string | undefined;
        displayName?: string | undefined;
        url?: string | undefined;
        avatarUrl?: string | undefined;
        email?: string | undefined;
        additionalInfo?: PatchJobsIdAdditionalInfo$.Inbound | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<PatchJobsIdSocialProfiles, z.ZodTypeDef, Inbound> = z
        .object({
            type: PatchJobsIdJobsRequestRequestBodyCompanyType$.optional(),
            username: z.string().optional(),
            displayName: z.string().optional(),
            url: z.string().optional(),
            avatarUrl: z.string().optional(),
            email: z.string().optional(),
            additionalInfo: z.lazy(() => PatchJobsIdAdditionalInfo$.inboundSchema).optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.username === undefined ? null : { username: v.username }),
                ...(v.displayName === undefined ? null : { displayName: v.displayName }),
                ...(v.url === undefined ? null : { url: v.url }),
                ...(v.avatarUrl === undefined ? null : { avatarUrl: v.avatarUrl }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.additionalInfo === undefined ? null : { additionalInfo: v.additionalInfo }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });

    export type Outbound = {
        type?: PatchJobsIdJobsRequestRequestBodyCompanyType | undefined;
        username?: string | undefined;
        displayName?: string | undefined;
        url?: string | undefined;
        avatarUrl?: string | undefined;
        email?: string | undefined;
        additionalInfo?: PatchJobsIdAdditionalInfo$.Outbound | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchJobsIdSocialProfiles> = z
        .object({
            type: PatchJobsIdJobsRequestRequestBodyCompanyType$.optional(),
            username: z.string().optional(),
            displayName: z.string().optional(),
            url: z.string().optional(),
            avatarUrl: z.string().optional(),
            email: z.string().optional(),
            additionalInfo: z.lazy(() => PatchJobsIdAdditionalInfo$.outboundSchema).optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.username === undefined ? null : { username: v.username }),
                ...(v.displayName === undefined ? null : { displayName: v.displayName }),
                ...(v.url === undefined ? null : { url: v.url }),
                ...(v.avatarUrl === undefined ? null : { avatarUrl: v.avatarUrl }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.additionalInfo === undefined ? null : { additionalInfo: v.additionalInfo }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });
}

/** @internal */
export namespace PatchJobsIdJobsEmails$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<PatchJobsIdJobsEmails, z.ZodTypeDef, Inbound> = z.object(
        {}
    );

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchJobsIdJobsEmails> =
        z.object({});
}

/** @internal */
export namespace PatchJobsIdJobsPhones$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<PatchJobsIdJobsPhones, z.ZodTypeDef, Inbound> = z.object(
        {}
    );

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchJobsIdJobsPhones> =
        z.object({});
}

/** @internal */
export namespace PatchJobsIdJobsAddress$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<PatchJobsIdJobsAddress, z.ZodTypeDef, Inbound> = z.object(
        {}
    );

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchJobsIdJobsAddress> =
        z.object({});
}

/** @internal */
export namespace PatchJobsIdAddresses$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<PatchJobsIdAddresses, z.ZodTypeDef, Inbound> = z.object(
        {}
    );

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchJobsIdAddresses> = z.object(
        {}
    );
}

/** @internal */
export namespace PatchJobsIdNotes$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<PatchJobsIdNotes, z.ZodTypeDef, Inbound> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchJobsIdNotes> = z.object({});
}

/** @internal */
export namespace PatchJobsIdJobsSocialProfiles$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<PatchJobsIdJobsSocialProfiles, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchJobsIdJobsSocialProfiles> =
        z.object({});
}

/** @internal */
export namespace PatchJobsIdJobsRequestCustomFields$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<
        PatchJobsIdJobsRequestCustomFields,
        z.ZodTypeDef,
        Inbound
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PatchJobsIdJobsRequestCustomFields
    > = z.object({});
}

/** @internal */
export namespace PatchJobsIdAdditionalContacts$ {
    export type Inbound = {
        id?: string | undefined;
        firstName?: string | undefined;
        lastName?: string | undefined;
        leadId?: string | undefined;
        company?: string | undefined;
        defaultEmail?: string | undefined;
        emails?: Array<PatchJobsIdJobsEmails$.Inbound> | undefined;
        defaultPhone?: string | undefined;
        phones?: Array<PatchJobsIdJobsPhones$.Inbound> | undefined;
        address?: PatchJobsIdJobsAddress$.Inbound | undefined;
        addresses?: Array<PatchJobsIdAddresses$.Inbound> | undefined;
        birthday?: number | undefined;
        relationship?: string | undefined;
        note?: string | undefined;
        notes?: PatchJobsIdNotes$.Inbound | undefined;
        tags?: Array<string> | undefined;
        websites?: Array<string> | undefined;
        socialProfiles?: Array<PatchJobsIdJobsSocialProfiles$.Inbound> | undefined;
        isActive?: boolean | undefined;
        customFields?: Array<PatchJobsIdJobsRequestCustomFields$.Inbound> | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
    };

    export const inboundSchema: z.ZodType<PatchJobsIdAdditionalContacts, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            firstName: z.string().optional(),
            lastName: z.string().optional(),
            leadId: z.string().optional(),
            company: z.string().optional(),
            defaultEmail: z.string().optional(),
            emails: z.array(z.lazy(() => PatchJobsIdJobsEmails$.inboundSchema)).optional(),
            defaultPhone: z.string().optional(),
            phones: z.array(z.lazy(() => PatchJobsIdJobsPhones$.inboundSchema)).optional(),
            address: z.lazy(() => PatchJobsIdJobsAddress$.inboundSchema).optional(),
            addresses: z.array(z.lazy(() => PatchJobsIdAddresses$.inboundSchema)).optional(),
            birthday: z.number().optional(),
            relationship: z.string().optional(),
            note: z.string().optional(),
            notes: z.lazy(() => PatchJobsIdNotes$.inboundSchema).optional(),
            tags: z.array(z.string()).optional(),
            websites: z.array(z.string()).optional(),
            socialProfiles: z
                .array(z.lazy(() => PatchJobsIdJobsSocialProfiles$.inboundSchema))
                .optional(),
            isActive: z.boolean().optional(),
            customFields: z
                .array(z.lazy(() => PatchJobsIdJobsRequestCustomFields$.inboundSchema))
                .optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.leadId === undefined ? null : { leadId: v.leadId }),
                ...(v.company === undefined ? null : { company: v.company }),
                ...(v.defaultEmail === undefined ? null : { defaultEmail: v.defaultEmail }),
                ...(v.emails === undefined ? null : { emails: v.emails }),
                ...(v.defaultPhone === undefined ? null : { defaultPhone: v.defaultPhone }),
                ...(v.phones === undefined ? null : { phones: v.phones }),
                ...(v.address === undefined ? null : { address: v.address }),
                ...(v.addresses === undefined ? null : { addresses: v.addresses }),
                ...(v.birthday === undefined ? null : { birthday: v.birthday }),
                ...(v.relationship === undefined ? null : { relationship: v.relationship }),
                ...(v.note === undefined ? null : { note: v.note }),
                ...(v.notes === undefined ? null : { notes: v.notes }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
                ...(v.websites === undefined ? null : { websites: v.websites }),
                ...(v.socialProfiles === undefined ? null : { socialProfiles: v.socialProfiles }),
                ...(v.isActive === undefined ? null : { isActive: v.isActive }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        firstName?: string | undefined;
        lastName?: string | undefined;
        leadId?: string | undefined;
        company?: string | undefined;
        defaultEmail?: string | undefined;
        emails?: Array<PatchJobsIdJobsEmails$.Outbound> | undefined;
        defaultPhone?: string | undefined;
        phones?: Array<PatchJobsIdJobsPhones$.Outbound> | undefined;
        address?: PatchJobsIdJobsAddress$.Outbound | undefined;
        addresses?: Array<PatchJobsIdAddresses$.Outbound> | undefined;
        birthday?: number | undefined;
        relationship?: string | undefined;
        note?: string | undefined;
        notes?: PatchJobsIdNotes$.Outbound | undefined;
        tags?: Array<string> | undefined;
        websites?: Array<string> | undefined;
        socialProfiles?: Array<PatchJobsIdJobsSocialProfiles$.Outbound> | undefined;
        isActive?: boolean | undefined;
        customFields?: Array<PatchJobsIdJobsRequestCustomFields$.Outbound> | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchJobsIdAdditionalContacts> =
        z
            .object({
                id: z.string().optional(),
                firstName: z.string().optional(),
                lastName: z.string().optional(),
                leadId: z.string().optional(),
                company: z.string().optional(),
                defaultEmail: z.string().optional(),
                emails: z.array(z.lazy(() => PatchJobsIdJobsEmails$.outboundSchema)).optional(),
                defaultPhone: z.string().optional(),
                phones: z.array(z.lazy(() => PatchJobsIdJobsPhones$.outboundSchema)).optional(),
                address: z.lazy(() => PatchJobsIdJobsAddress$.outboundSchema).optional(),
                addresses: z.array(z.lazy(() => PatchJobsIdAddresses$.outboundSchema)).optional(),
                birthday: z.number().optional(),
                relationship: z.string().optional(),
                note: z.string().optional(),
                notes: z.lazy(() => PatchJobsIdNotes$.outboundSchema).optional(),
                tags: z.array(z.string()).optional(),
                websites: z.array(z.string()).optional(),
                socialProfiles: z
                    .array(z.lazy(() => PatchJobsIdJobsSocialProfiles$.outboundSchema))
                    .optional(),
                isActive: z.boolean().optional(),
                customFields: z
                    .array(z.lazy(() => PatchJobsIdJobsRequestCustomFields$.outboundSchema))
                    .optional(),
                createdAt: z.number().optional(),
                updatedAt: z.number().optional(),
            })
            .transform((v) => {
                return {
                    ...(v.id === undefined ? null : { id: v.id }),
                    ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                    ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                    ...(v.leadId === undefined ? null : { leadId: v.leadId }),
                    ...(v.company === undefined ? null : { company: v.company }),
                    ...(v.defaultEmail === undefined ? null : { defaultEmail: v.defaultEmail }),
                    ...(v.emails === undefined ? null : { emails: v.emails }),
                    ...(v.defaultPhone === undefined ? null : { defaultPhone: v.defaultPhone }),
                    ...(v.phones === undefined ? null : { phones: v.phones }),
                    ...(v.address === undefined ? null : { address: v.address }),
                    ...(v.addresses === undefined ? null : { addresses: v.addresses }),
                    ...(v.birthday === undefined ? null : { birthday: v.birthday }),
                    ...(v.relationship === undefined ? null : { relationship: v.relationship }),
                    ...(v.note === undefined ? null : { note: v.note }),
                    ...(v.notes === undefined ? null : { notes: v.notes }),
                    ...(v.tags === undefined ? null : { tags: v.tags }),
                    ...(v.websites === undefined ? null : { websites: v.websites }),
                    ...(v.socialProfiles === undefined
                        ? null
                        : { socialProfiles: v.socialProfiles }),
                    ...(v.isActive === undefined ? null : { isActive: v.isActive }),
                    ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                    ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                    ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                };
            });
}

/** @internal */
export const PatchJobsIdJobsRequestFieldType$ = z.nativeEnum(PatchJobsIdJobsRequestFieldType);

/** @internal */
export namespace PatchJobsIdJobsRequestRequestBodyCustomFields$ {
    export type Inbound = {
        id?: string | undefined;
        fieldName?: string | undefined;
        fieldValue?: string | undefined;
        fieldType?: PatchJobsIdJobsRequestFieldType | undefined;
    };

    export const inboundSchema: z.ZodType<
        PatchJobsIdJobsRequestRequestBodyCustomFields,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            id: z.string().optional(),
            fieldName: z.string().optional(),
            fieldValue: z.string().optional(),
            fieldType: PatchJobsIdJobsRequestFieldType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fieldName === undefined ? null : { fieldName: v.fieldName }),
                ...(v.fieldValue === undefined ? null : { fieldValue: v.fieldValue }),
                ...(v.fieldType === undefined ? null : { fieldType: v.fieldType }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        fieldName?: string | undefined;
        fieldValue?: string | undefined;
        fieldType?: PatchJobsIdJobsRequestFieldType | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PatchJobsIdJobsRequestRequestBodyCustomFields
    > = z
        .object({
            id: z.string().optional(),
            fieldName: z.string().optional(),
            fieldValue: z.string().optional(),
            fieldType: PatchJobsIdJobsRequestFieldType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fieldName === undefined ? null : { fieldName: v.fieldName }),
                ...(v.fieldValue === undefined ? null : { fieldValue: v.fieldValue }),
                ...(v.fieldType === undefined ? null : { fieldType: v.fieldType }),
            };
        });
}

/** @internal */
export namespace Company$ {
    export type Inbound = {
        id?: string | undefined;
        name?: string | undefined;
        legalName?: string | undefined;
        type?: string | undefined;
        industry?: string | undefined;
        address?: PatchJobsIdAddress$.Inbound | undefined;
        defaultEmail?: string | undefined;
        emails?: Array<PatchJobsIdEmails$.Inbound> | undefined;
        defaultPhone?: string | undefined;
        phones?: Array<PatchJobsIdPhones$.Inbound> | undefined;
        website?: string | undefined;
        foundedDate?: number | undefined;
        numberOfEmployees?: number | undefined;
        revenue?: number | undefined;
        revenueCurrency?: string | undefined;
        tags?: Array<string> | undefined;
        socialProfiles?: Array<PatchJobsIdSocialProfiles$.Inbound> | undefined;
        logo?: string | undefined;
        description?: string | undefined;
        stockSymbol?: string | undefined;
        parentCompanyId?: string | undefined;
        additionalContacts?: Array<PatchJobsIdAdditionalContacts$.Inbound> | undefined;
        incorporationCountry?: string | undefined;
        incorporationDate?: number | undefined;
        taxId?: string | undefined;
        regulatoryStatus?: string | undefined;
        dunsNumber?: string | undefined;
        customFields?: Array<PatchJobsIdJobsRequestRequestBodyCustomFields$.Inbound> | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
    };

    export const inboundSchema: z.ZodType<Company, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            name: z.string().optional(),
            legalName: z.string().optional(),
            type: z.string().optional(),
            industry: z.string().optional(),
            address: z.lazy(() => PatchJobsIdAddress$.inboundSchema).optional(),
            defaultEmail: z.string().optional(),
            emails: z.array(z.lazy(() => PatchJobsIdEmails$.inboundSchema)).optional(),
            defaultPhone: z.string().optional(),
            phones: z.array(z.lazy(() => PatchJobsIdPhones$.inboundSchema)).optional(),
            website: z.string().optional(),
            foundedDate: z.number().optional(),
            numberOfEmployees: z.number().optional(),
            revenue: z.number().optional(),
            revenueCurrency: z.string().optional(),
            tags: z.array(z.string()).optional(),
            socialProfiles: z
                .array(z.lazy(() => PatchJobsIdSocialProfiles$.inboundSchema))
                .optional(),
            logo: z.string().optional(),
            description: z.string().optional(),
            stockSymbol: z.string().optional(),
            parentCompanyId: z.string().optional(),
            additionalContacts: z
                .array(z.lazy(() => PatchJobsIdAdditionalContacts$.inboundSchema))
                .optional(),
            incorporationCountry: z.string().optional(),
            incorporationDate: z.number().optional(),
            taxId: z.string().optional(),
            regulatoryStatus: z.string().optional(),
            dunsNumber: z.string().optional(),
            customFields: z
                .array(z.lazy(() => PatchJobsIdJobsRequestRequestBodyCustomFields$.inboundSchema))
                .optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.legalName === undefined ? null : { legalName: v.legalName }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.industry === undefined ? null : { industry: v.industry }),
                ...(v.address === undefined ? null : { address: v.address }),
                ...(v.defaultEmail === undefined ? null : { defaultEmail: v.defaultEmail }),
                ...(v.emails === undefined ? null : { emails: v.emails }),
                ...(v.defaultPhone === undefined ? null : { defaultPhone: v.defaultPhone }),
                ...(v.phones === undefined ? null : { phones: v.phones }),
                ...(v.website === undefined ? null : { website: v.website }),
                ...(v.foundedDate === undefined ? null : { foundedDate: v.foundedDate }),
                ...(v.numberOfEmployees === undefined
                    ? null
                    : { numberOfEmployees: v.numberOfEmployees }),
                ...(v.revenue === undefined ? null : { revenue: v.revenue }),
                ...(v.revenueCurrency === undefined
                    ? null
                    : { revenueCurrency: v.revenueCurrency }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
                ...(v.socialProfiles === undefined ? null : { socialProfiles: v.socialProfiles }),
                ...(v.logo === undefined ? null : { logo: v.logo }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.stockSymbol === undefined ? null : { stockSymbol: v.stockSymbol }),
                ...(v.parentCompanyId === undefined
                    ? null
                    : { parentCompanyId: v.parentCompanyId }),
                ...(v.additionalContacts === undefined
                    ? null
                    : { additionalContacts: v.additionalContacts }),
                ...(v.incorporationCountry === undefined
                    ? null
                    : { incorporationCountry: v.incorporationCountry }),
                ...(v.incorporationDate === undefined
                    ? null
                    : { incorporationDate: v.incorporationDate }),
                ...(v.taxId === undefined ? null : { taxId: v.taxId }),
                ...(v.regulatoryStatus === undefined
                    ? null
                    : { regulatoryStatus: v.regulatoryStatus }),
                ...(v.dunsNumber === undefined ? null : { dunsNumber: v.dunsNumber }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        name?: string | undefined;
        legalName?: string | undefined;
        type?: string | undefined;
        industry?: string | undefined;
        address?: PatchJobsIdAddress$.Outbound | undefined;
        defaultEmail?: string | undefined;
        emails?: Array<PatchJobsIdEmails$.Outbound> | undefined;
        defaultPhone?: string | undefined;
        phones?: Array<PatchJobsIdPhones$.Outbound> | undefined;
        website?: string | undefined;
        foundedDate?: number | undefined;
        numberOfEmployees?: number | undefined;
        revenue?: number | undefined;
        revenueCurrency?: string | undefined;
        tags?: Array<string> | undefined;
        socialProfiles?: Array<PatchJobsIdSocialProfiles$.Outbound> | undefined;
        logo?: string | undefined;
        description?: string | undefined;
        stockSymbol?: string | undefined;
        parentCompanyId?: string | undefined;
        additionalContacts?: Array<PatchJobsIdAdditionalContacts$.Outbound> | undefined;
        incorporationCountry?: string | undefined;
        incorporationDate?: number | undefined;
        taxId?: string | undefined;
        regulatoryStatus?: string | undefined;
        dunsNumber?: string | undefined;
        customFields?: Array<PatchJobsIdJobsRequestRequestBodyCustomFields$.Outbound> | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Company> = z
        .object({
            id: z.string().optional(),
            name: z.string().optional(),
            legalName: z.string().optional(),
            type: z.string().optional(),
            industry: z.string().optional(),
            address: z.lazy(() => PatchJobsIdAddress$.outboundSchema).optional(),
            defaultEmail: z.string().optional(),
            emails: z.array(z.lazy(() => PatchJobsIdEmails$.outboundSchema)).optional(),
            defaultPhone: z.string().optional(),
            phones: z.array(z.lazy(() => PatchJobsIdPhones$.outboundSchema)).optional(),
            website: z.string().optional(),
            foundedDate: z.number().optional(),
            numberOfEmployees: z.number().optional(),
            revenue: z.number().optional(),
            revenueCurrency: z.string().optional(),
            tags: z.array(z.string()).optional(),
            socialProfiles: z
                .array(z.lazy(() => PatchJobsIdSocialProfiles$.outboundSchema))
                .optional(),
            logo: z.string().optional(),
            description: z.string().optional(),
            stockSymbol: z.string().optional(),
            parentCompanyId: z.string().optional(),
            additionalContacts: z
                .array(z.lazy(() => PatchJobsIdAdditionalContacts$.outboundSchema))
                .optional(),
            incorporationCountry: z.string().optional(),
            incorporationDate: z.number().optional(),
            taxId: z.string().optional(),
            regulatoryStatus: z.string().optional(),
            dunsNumber: z.string().optional(),
            customFields: z
                .array(z.lazy(() => PatchJobsIdJobsRequestRequestBodyCustomFields$.outboundSchema))
                .optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.legalName === undefined ? null : { legalName: v.legalName }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.industry === undefined ? null : { industry: v.industry }),
                ...(v.address === undefined ? null : { address: v.address }),
                ...(v.defaultEmail === undefined ? null : { defaultEmail: v.defaultEmail }),
                ...(v.emails === undefined ? null : { emails: v.emails }),
                ...(v.defaultPhone === undefined ? null : { defaultPhone: v.defaultPhone }),
                ...(v.phones === undefined ? null : { phones: v.phones }),
                ...(v.website === undefined ? null : { website: v.website }),
                ...(v.foundedDate === undefined ? null : { foundedDate: v.foundedDate }),
                ...(v.numberOfEmployees === undefined
                    ? null
                    : { numberOfEmployees: v.numberOfEmployees }),
                ...(v.revenue === undefined ? null : { revenue: v.revenue }),
                ...(v.revenueCurrency === undefined
                    ? null
                    : { revenueCurrency: v.revenueCurrency }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
                ...(v.socialProfiles === undefined ? null : { socialProfiles: v.socialProfiles }),
                ...(v.logo === undefined ? null : { logo: v.logo }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.stockSymbol === undefined ? null : { stockSymbol: v.stockSymbol }),
                ...(v.parentCompanyId === undefined
                    ? null
                    : { parentCompanyId: v.parentCompanyId }),
                ...(v.additionalContacts === undefined
                    ? null
                    : { additionalContacts: v.additionalContacts }),
                ...(v.incorporationCountry === undefined
                    ? null
                    : { incorporationCountry: v.incorporationCountry }),
                ...(v.incorporationDate === undefined
                    ? null
                    : { incorporationDate: v.incorporationDate }),
                ...(v.taxId === undefined ? null : { taxId: v.taxId }),
                ...(v.regulatoryStatus === undefined
                    ? null
                    : { regulatoryStatus: v.regulatoryStatus }),
                ...(v.dunsNumber === undefined ? null : { dunsNumber: v.dunsNumber }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
            };
        });
}

/** @internal */
export const PaymentPeriod$ = z.nativeEnum(PaymentPeriod);

/** @internal */
export namespace BaseSalary$ {
    export type Inbound = {
        value?: number | undefined;
        currency?: string | undefined;
        paymentPeriod?: PaymentPeriod | undefined;
    };

    export const inboundSchema: z.ZodType<BaseSalary, z.ZodTypeDef, Inbound> = z
        .object({
            value: z.number().optional(),
            currency: z.string().optional(),
            paymentPeriod: PaymentPeriod$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.value === undefined ? null : { value: v.value }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.paymentPeriod === undefined ? null : { paymentPeriod: v.paymentPeriod }),
            };
        });

    export type Outbound = {
        value?: number | undefined;
        currency?: string | undefined;
        paymentPeriod?: PaymentPeriod | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, BaseSalary> = z
        .object({
            value: z.number().optional(),
            currency: z.string().optional(),
            paymentPeriod: PaymentPeriod$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.value === undefined ? null : { value: v.value }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.paymentPeriod === undefined ? null : { paymentPeriod: v.paymentPeriod }),
            };
        });
}

/** @internal */
export namespace EmploymentUnit$ {
    export type Inbound = {
        name?: string | undefined;
        description?: string | undefined;
    };

    export const inboundSchema: z.ZodType<EmploymentUnit, z.ZodTypeDef, Inbound> = z
        .object({
            name: z.string().optional(),
            description: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.description === undefined ? null : { description: v.description }),
            };
        });

    export type Outbound = {
        name?: string | undefined;
        description?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, EmploymentUnit> = z
        .object({
            name: z.string().optional(),
            description: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.description === undefined ? null : { description: v.description }),
            };
        });
}

/** @internal */
export namespace PatchJobsIdRequestBody$ {
    export type Inbound = {
        id?: string | undefined;
        title?: string | undefined;
        description?: string | undefined;
        employmentType?: EmploymentType | undefined;
        location?: Location$.Inbound | undefined;
        remote?: boolean | undefined;
        validUntil?: number | undefined;
        company?: Company$.Inbound | undefined;
        baseSalary?: BaseSalary$.Inbound | undefined;
        qualifications?: string | undefined;
        responsibilities?: string | undefined;
        skills?: Array<string> | undefined;
        benefits?: Array<string> | undefined;
        educationRequirements?: string | undefined;
        experienceRequirements?: string | undefined;
        workHours?: string | undefined;
        industry?: string | undefined;
        jobLocationType?: string | undefined;
        occupationalCategory?: string | undefined;
        incentiveCompensation?: string | undefined;
        jobBenefits?: string | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        employmentUnit?: EmploymentUnit$.Inbound | undefined;
        jobImmediateStart?: boolean | undefined;
        jobFlexibleHours?: boolean | undefined;
        jobShifts?: Array<string> | undefined;
        jobTrainingProvided?: boolean | undefined;
        jobTrialPeriod?: string | undefined;
        workFromHome?: boolean | undefined;
        languagesSpoken?: Array<string> | undefined;
        applicationDeadline?: number | undefined;
        incentives?: string | undefined;
        jobStartDate?: number | undefined;
        salaryCurrency?: string | undefined;
    };

    export const inboundSchema: z.ZodType<PatchJobsIdRequestBody, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            title: z.string().optional(),
            description: z.string().optional(),
            employmentType: EmploymentType$.optional(),
            location: z.lazy(() => Location$.inboundSchema).optional(),
            remote: z.boolean().optional(),
            validUntil: z.number().optional(),
            company: z.lazy(() => Company$.inboundSchema).optional(),
            baseSalary: z.lazy(() => BaseSalary$.inboundSchema).optional(),
            qualifications: z.string().optional(),
            responsibilities: z.string().optional(),
            skills: z.array(z.string()).optional(),
            benefits: z.array(z.string()).optional(),
            educationRequirements: z.string().optional(),
            experienceRequirements: z.string().optional(),
            workHours: z.string().optional(),
            industry: z.string().optional(),
            jobLocationType: z.string().optional(),
            occupationalCategory: z.string().optional(),
            incentiveCompensation: z.string().optional(),
            jobBenefits: z.string().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            employmentUnit: z.lazy(() => EmploymentUnit$.inboundSchema).optional(),
            jobImmediateStart: z.boolean().optional(),
            jobFlexibleHours: z.boolean().optional(),
            jobShifts: z.array(z.string()).optional(),
            jobTrainingProvided: z.boolean().optional(),
            jobTrialPeriod: z.string().optional(),
            workFromHome: z.boolean().optional(),
            languagesSpoken: z.array(z.string()).optional(),
            applicationDeadline: z.number().optional(),
            incentives: z.string().optional(),
            jobStartDate: z.number().optional(),
            salaryCurrency: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.employmentType === undefined ? null : { employmentType: v.employmentType }),
                ...(v.location === undefined ? null : { location: v.location }),
                ...(v.remote === undefined ? null : { remote: v.remote }),
                ...(v.validUntil === undefined ? null : { validUntil: v.validUntil }),
                ...(v.company === undefined ? null : { company: v.company }),
                ...(v.baseSalary === undefined ? null : { baseSalary: v.baseSalary }),
                ...(v.qualifications === undefined ? null : { qualifications: v.qualifications }),
                ...(v.responsibilities === undefined
                    ? null
                    : { responsibilities: v.responsibilities }),
                ...(v.skills === undefined ? null : { skills: v.skills }),
                ...(v.benefits === undefined ? null : { benefits: v.benefits }),
                ...(v.educationRequirements === undefined
                    ? null
                    : { educationRequirements: v.educationRequirements }),
                ...(v.experienceRequirements === undefined
                    ? null
                    : { experienceRequirements: v.experienceRequirements }),
                ...(v.workHours === undefined ? null : { workHours: v.workHours }),
                ...(v.industry === undefined ? null : { industry: v.industry }),
                ...(v.jobLocationType === undefined
                    ? null
                    : { jobLocationType: v.jobLocationType }),
                ...(v.occupationalCategory === undefined
                    ? null
                    : { occupationalCategory: v.occupationalCategory }),
                ...(v.incentiveCompensation === undefined
                    ? null
                    : { incentiveCompensation: v.incentiveCompensation }),
                ...(v.jobBenefits === undefined ? null : { jobBenefits: v.jobBenefits }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.employmentUnit === undefined ? null : { employmentUnit: v.employmentUnit }),
                ...(v.jobImmediateStart === undefined
                    ? null
                    : { jobImmediateStart: v.jobImmediateStart }),
                ...(v.jobFlexibleHours === undefined
                    ? null
                    : { jobFlexibleHours: v.jobFlexibleHours }),
                ...(v.jobShifts === undefined ? null : { jobShifts: v.jobShifts }),
                ...(v.jobTrainingProvided === undefined
                    ? null
                    : { jobTrainingProvided: v.jobTrainingProvided }),
                ...(v.jobTrialPeriod === undefined ? null : { jobTrialPeriod: v.jobTrialPeriod }),
                ...(v.workFromHome === undefined ? null : { workFromHome: v.workFromHome }),
                ...(v.languagesSpoken === undefined
                    ? null
                    : { languagesSpoken: v.languagesSpoken }),
                ...(v.applicationDeadline === undefined
                    ? null
                    : { applicationDeadline: v.applicationDeadline }),
                ...(v.incentives === undefined ? null : { incentives: v.incentives }),
                ...(v.jobStartDate === undefined ? null : { jobStartDate: v.jobStartDate }),
                ...(v.salaryCurrency === undefined ? null : { salaryCurrency: v.salaryCurrency }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        title?: string | undefined;
        description?: string | undefined;
        employmentType?: EmploymentType | undefined;
        location?: Location$.Outbound | undefined;
        remote?: boolean | undefined;
        validUntil?: number | undefined;
        company?: Company$.Outbound | undefined;
        baseSalary?: BaseSalary$.Outbound | undefined;
        qualifications?: string | undefined;
        responsibilities?: string | undefined;
        skills?: Array<string> | undefined;
        benefits?: Array<string> | undefined;
        educationRequirements?: string | undefined;
        experienceRequirements?: string | undefined;
        workHours?: string | undefined;
        industry?: string | undefined;
        jobLocationType?: string | undefined;
        occupationalCategory?: string | undefined;
        incentiveCompensation?: string | undefined;
        jobBenefits?: string | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        employmentUnit?: EmploymentUnit$.Outbound | undefined;
        jobImmediateStart?: boolean | undefined;
        jobFlexibleHours?: boolean | undefined;
        jobShifts?: Array<string> | undefined;
        jobTrainingProvided?: boolean | undefined;
        jobTrialPeriod?: string | undefined;
        workFromHome?: boolean | undefined;
        languagesSpoken?: Array<string> | undefined;
        applicationDeadline?: number | undefined;
        incentives?: string | undefined;
        jobStartDate?: number | undefined;
        salaryCurrency?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchJobsIdRequestBody> = z
        .object({
            id: z.string().optional(),
            title: z.string().optional(),
            description: z.string().optional(),
            employmentType: EmploymentType$.optional(),
            location: z.lazy(() => Location$.outboundSchema).optional(),
            remote: z.boolean().optional(),
            validUntil: z.number().optional(),
            company: z.lazy(() => Company$.outboundSchema).optional(),
            baseSalary: z.lazy(() => BaseSalary$.outboundSchema).optional(),
            qualifications: z.string().optional(),
            responsibilities: z.string().optional(),
            skills: z.array(z.string()).optional(),
            benefits: z.array(z.string()).optional(),
            educationRequirements: z.string().optional(),
            experienceRequirements: z.string().optional(),
            workHours: z.string().optional(),
            industry: z.string().optional(),
            jobLocationType: z.string().optional(),
            occupationalCategory: z.string().optional(),
            incentiveCompensation: z.string().optional(),
            jobBenefits: z.string().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            employmentUnit: z.lazy(() => EmploymentUnit$.outboundSchema).optional(),
            jobImmediateStart: z.boolean().optional(),
            jobFlexibleHours: z.boolean().optional(),
            jobShifts: z.array(z.string()).optional(),
            jobTrainingProvided: z.boolean().optional(),
            jobTrialPeriod: z.string().optional(),
            workFromHome: z.boolean().optional(),
            languagesSpoken: z.array(z.string()).optional(),
            applicationDeadline: z.number().optional(),
            incentives: z.string().optional(),
            jobStartDate: z.number().optional(),
            salaryCurrency: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.employmentType === undefined ? null : { employmentType: v.employmentType }),
                ...(v.location === undefined ? null : { location: v.location }),
                ...(v.remote === undefined ? null : { remote: v.remote }),
                ...(v.validUntil === undefined ? null : { validUntil: v.validUntil }),
                ...(v.company === undefined ? null : { company: v.company }),
                ...(v.baseSalary === undefined ? null : { baseSalary: v.baseSalary }),
                ...(v.qualifications === undefined ? null : { qualifications: v.qualifications }),
                ...(v.responsibilities === undefined
                    ? null
                    : { responsibilities: v.responsibilities }),
                ...(v.skills === undefined ? null : { skills: v.skills }),
                ...(v.benefits === undefined ? null : { benefits: v.benefits }),
                ...(v.educationRequirements === undefined
                    ? null
                    : { educationRequirements: v.educationRequirements }),
                ...(v.experienceRequirements === undefined
                    ? null
                    : { experienceRequirements: v.experienceRequirements }),
                ...(v.workHours === undefined ? null : { workHours: v.workHours }),
                ...(v.industry === undefined ? null : { industry: v.industry }),
                ...(v.jobLocationType === undefined
                    ? null
                    : { jobLocationType: v.jobLocationType }),
                ...(v.occupationalCategory === undefined
                    ? null
                    : { occupationalCategory: v.occupationalCategory }),
                ...(v.incentiveCompensation === undefined
                    ? null
                    : { incentiveCompensation: v.incentiveCompensation }),
                ...(v.jobBenefits === undefined ? null : { jobBenefits: v.jobBenefits }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.employmentUnit === undefined ? null : { employmentUnit: v.employmentUnit }),
                ...(v.jobImmediateStart === undefined
                    ? null
                    : { jobImmediateStart: v.jobImmediateStart }),
                ...(v.jobFlexibleHours === undefined
                    ? null
                    : { jobFlexibleHours: v.jobFlexibleHours }),
                ...(v.jobShifts === undefined ? null : { jobShifts: v.jobShifts }),
                ...(v.jobTrainingProvided === undefined
                    ? null
                    : { jobTrainingProvided: v.jobTrainingProvided }),
                ...(v.jobTrialPeriod === undefined ? null : { jobTrialPeriod: v.jobTrialPeriod }),
                ...(v.workFromHome === undefined ? null : { workFromHome: v.workFromHome }),
                ...(v.languagesSpoken === undefined
                    ? null
                    : { languagesSpoken: v.languagesSpoken }),
                ...(v.applicationDeadline === undefined
                    ? null
                    : { applicationDeadline: v.applicationDeadline }),
                ...(v.incentives === undefined ? null : { incentives: v.incentives }),
                ...(v.jobStartDate === undefined ? null : { jobStartDate: v.jobStartDate }),
                ...(v.salaryCurrency === undefined ? null : { salaryCurrency: v.salaryCurrency }),
            };
        });
}

/** @internal */
export namespace PatchJobsIdRequest$ {
    export type Inbound = {
        id: string;
        "X-INTEGRATIONOS-CONNECTION-KEY": string;
        RequestBody?: PatchJobsIdRequestBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<PatchJobsIdRequest, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string(),
            "X-INTEGRATIONOS-CONNECTION-KEY": z.string(),
            RequestBody: z.lazy(() => PatchJobsIdRequestBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                id: v.id,
                xIntegrationosConnectionKey: v["X-INTEGRATIONOS-CONNECTION-KEY"],
                ...(v.RequestBody === undefined ? null : { requestBody: v.RequestBody }),
            };
        });

    export type Outbound = {
        id: string;
        "X-INTEGRATIONOS-CONNECTION-KEY": string;
        RequestBody?: PatchJobsIdRequestBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchJobsIdRequest> = z
        .object({
            id: z.string(),
            xIntegrationosConnectionKey: z.string(),
            requestBody: z.lazy(() => PatchJobsIdRequestBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                id: v.id,
                "X-INTEGRATIONOS-CONNECTION-KEY": v.xIntegrationosConnectionKey,
                ...(v.requestBody === undefined ? null : { RequestBody: v.requestBody }),
            };
        });
}

/** @internal */
export const PatchJobsIdStatusCode$ = z.nativeEnum(PatchJobsIdStatusCode);

/** @internal */
export namespace PatchJobsIdUnified$ {
    export type Inbound = {
        count?: number | undefined;
    };

    export const inboundSchema: z.ZodType<PatchJobsIdUnified, z.ZodTypeDef, Inbound> = z
        .object({
            count: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.count === undefined ? null : { count: v.count }),
            };
        });

    export type Outbound = {
        count?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchJobsIdUnified> = z
        .object({
            count: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.count === undefined ? null : { count: v.count }),
            };
        });
}

/** @internal */
export namespace PatchJobsIdPassthrough$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<PatchJobsIdPassthrough, z.ZodTypeDef, Inbound> = z.object(
        {}
    );

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchJobsIdPassthrough> =
        z.object({});
}

/** @internal */
export namespace PatchJobsIdCache$ {
    export type Inbound = {
        hit?: boolean | undefined;
        ttl?: number | undefined;
        key?: string | undefined;
    };

    export const inboundSchema: z.ZodType<PatchJobsIdCache, z.ZodTypeDef, Inbound> = z
        .object({
            hit: z.boolean().optional(),
            ttl: z.number().int().optional(),
            key: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.hit === undefined ? null : { hit: v.hit }),
                ...(v.ttl === undefined ? null : { ttl: v.ttl }),
                ...(v.key === undefined ? null : { key: v.key }),
            };
        });

    export type Outbound = {
        hit?: boolean | undefined;
        ttl?: number | undefined;
        key?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchJobsIdCache> = z
        .object({
            hit: z.boolean().optional(),
            ttl: z.number().int().optional(),
            key: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.hit === undefined ? null : { hit: v.hit }),
                ...(v.ttl === undefined ? null : { ttl: v.ttl }),
                ...(v.key === undefined ? null : { key: v.key }),
            };
        });
}

/** @internal */
export namespace PatchJobsIdMeta$ {
    export type Inbound = {
        timestamp?: number | undefined;
        latency?: number | undefined;
        platformRateLimitRemaining?: number | undefined;
        rateLimitRemaining?: number | undefined;
        cache?: PatchJobsIdCache$.Inbound | undefined;
        transactionKey?: string | undefined;
        txn?: string | undefined;
        platform?: string | undefined;
        platformVersion?: string | undefined;
        connectionDefinitionKey?: string | undefined;
        action?: string | undefined;
        commonModel?: string | undefined;
        commonModelVersion?: string | undefined;
        connectionKey?: string | undefined;
        hash?: string | undefined;
        heartbeats?: Array<string> | undefined;
        totalTransactions?: number | undefined;
    };

    export const inboundSchema: z.ZodType<PatchJobsIdMeta, z.ZodTypeDef, Inbound> = z
        .object({
            timestamp: z.number().int().optional(),
            latency: z.number().int().optional(),
            platformRateLimitRemaining: z.number().int().optional(),
            rateLimitRemaining: z.number().int().optional(),
            cache: z.lazy(() => PatchJobsIdCache$.inboundSchema).optional(),
            transactionKey: z.string().optional(),
            txn: z.string().optional(),
            platform: z.string().optional(),
            platformVersion: z.string().optional(),
            connectionDefinitionKey: z.string().optional(),
            action: z.string().optional(),
            commonModel: z.string().optional(),
            commonModelVersion: z.string().optional(),
            connectionKey: z.string().optional(),
            hash: z.string().optional(),
            heartbeats: z.array(z.string()).optional(),
            totalTransactions: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.timestamp === undefined ? null : { timestamp: v.timestamp }),
                ...(v.latency === undefined ? null : { latency: v.latency }),
                ...(v.platformRateLimitRemaining === undefined
                    ? null
                    : { platformRateLimitRemaining: v.platformRateLimitRemaining }),
                ...(v.rateLimitRemaining === undefined
                    ? null
                    : { rateLimitRemaining: v.rateLimitRemaining }),
                ...(v.cache === undefined ? null : { cache: v.cache }),
                ...(v.transactionKey === undefined ? null : { transactionKey: v.transactionKey }),
                ...(v.txn === undefined ? null : { txn: v.txn }),
                ...(v.platform === undefined ? null : { platform: v.platform }),
                ...(v.platformVersion === undefined
                    ? null
                    : { platformVersion: v.platformVersion }),
                ...(v.connectionDefinitionKey === undefined
                    ? null
                    : { connectionDefinitionKey: v.connectionDefinitionKey }),
                ...(v.action === undefined ? null : { action: v.action }),
                ...(v.commonModel === undefined ? null : { commonModel: v.commonModel }),
                ...(v.commonModelVersion === undefined
                    ? null
                    : { commonModelVersion: v.commonModelVersion }),
                ...(v.connectionKey === undefined ? null : { connectionKey: v.connectionKey }),
                ...(v.hash === undefined ? null : { hash: v.hash }),
                ...(v.heartbeats === undefined ? null : { heartbeats: v.heartbeats }),
                ...(v.totalTransactions === undefined
                    ? null
                    : { totalTransactions: v.totalTransactions }),
            };
        });

    export type Outbound = {
        timestamp?: number | undefined;
        latency?: number | undefined;
        platformRateLimitRemaining?: number | undefined;
        rateLimitRemaining?: number | undefined;
        cache?: PatchJobsIdCache$.Outbound | undefined;
        transactionKey?: string | undefined;
        txn?: string | undefined;
        platform?: string | undefined;
        platformVersion?: string | undefined;
        connectionDefinitionKey?: string | undefined;
        action?: string | undefined;
        commonModel?: string | undefined;
        commonModelVersion?: string | undefined;
        connectionKey?: string | undefined;
        hash?: string | undefined;
        heartbeats?: Array<string> | undefined;
        totalTransactions?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchJobsIdMeta> = z
        .object({
            timestamp: z.number().int().optional(),
            latency: z.number().int().optional(),
            platformRateLimitRemaining: z.number().int().optional(),
            rateLimitRemaining: z.number().int().optional(),
            cache: z.lazy(() => PatchJobsIdCache$.outboundSchema).optional(),
            transactionKey: z.string().optional(),
            txn: z.string().optional(),
            platform: z.string().optional(),
            platformVersion: z.string().optional(),
            connectionDefinitionKey: z.string().optional(),
            action: z.string().optional(),
            commonModel: z.string().optional(),
            commonModelVersion: z.string().optional(),
            connectionKey: z.string().optional(),
            hash: z.string().optional(),
            heartbeats: z.array(z.string()).optional(),
            totalTransactions: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.timestamp === undefined ? null : { timestamp: v.timestamp }),
                ...(v.latency === undefined ? null : { latency: v.latency }),
                ...(v.platformRateLimitRemaining === undefined
                    ? null
                    : { platformRateLimitRemaining: v.platformRateLimitRemaining }),
                ...(v.rateLimitRemaining === undefined
                    ? null
                    : { rateLimitRemaining: v.rateLimitRemaining }),
                ...(v.cache === undefined ? null : { cache: v.cache }),
                ...(v.transactionKey === undefined ? null : { transactionKey: v.transactionKey }),
                ...(v.txn === undefined ? null : { txn: v.txn }),
                ...(v.platform === undefined ? null : { platform: v.platform }),
                ...(v.platformVersion === undefined
                    ? null
                    : { platformVersion: v.platformVersion }),
                ...(v.connectionDefinitionKey === undefined
                    ? null
                    : { connectionDefinitionKey: v.connectionDefinitionKey }),
                ...(v.action === undefined ? null : { action: v.action }),
                ...(v.commonModel === undefined ? null : { commonModel: v.commonModel }),
                ...(v.commonModelVersion === undefined
                    ? null
                    : { commonModelVersion: v.commonModelVersion }),
                ...(v.connectionKey === undefined ? null : { connectionKey: v.connectionKey }),
                ...(v.hash === undefined ? null : { hash: v.hash }),
                ...(v.heartbeats === undefined ? null : { heartbeats: v.heartbeats }),
                ...(v.totalTransactions === undefined
                    ? null
                    : { totalTransactions: v.totalTransactions }),
            };
        });
}

/** @internal */
export namespace PatchJobsIdResponseBody$ {
    export type Inbound = {
        status?: string | undefined;
        statusCode?: PatchJobsIdStatusCode | undefined;
        unified?: PatchJobsIdUnified$.Inbound | undefined;
        passthrough?: PatchJobsIdPassthrough$.Inbound | undefined;
        meta?: PatchJobsIdMeta$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<PatchJobsIdResponseBody, z.ZodTypeDef, Inbound> = z
        .object({
            status: z.string().optional(),
            statusCode: PatchJobsIdStatusCode$.optional(),
            unified: z.lazy(() => PatchJobsIdUnified$.inboundSchema).optional(),
            passthrough: z.lazy(() => PatchJobsIdPassthrough$.inboundSchema).optional(),
            meta: z.lazy(() => PatchJobsIdMeta$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.statusCode === undefined ? null : { statusCode: v.statusCode }),
                ...(v.unified === undefined ? null : { unified: v.unified }),
                ...(v.passthrough === undefined ? null : { passthrough: v.passthrough }),
                ...(v.meta === undefined ? null : { meta: v.meta }),
            };
        });

    export type Outbound = {
        status?: string | undefined;
        statusCode?: PatchJobsIdStatusCode | undefined;
        unified?: PatchJobsIdUnified$.Outbound | undefined;
        passthrough?: PatchJobsIdPassthrough$.Outbound | undefined;
        meta?: PatchJobsIdMeta$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchJobsIdResponseBody> = z
        .object({
            status: z.string().optional(),
            statusCode: PatchJobsIdStatusCode$.optional(),
            unified: z.lazy(() => PatchJobsIdUnified$.outboundSchema).optional(),
            passthrough: z.lazy(() => PatchJobsIdPassthrough$.outboundSchema).optional(),
            meta: z.lazy(() => PatchJobsIdMeta$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.statusCode === undefined ? null : { statusCode: v.statusCode }),
                ...(v.unified === undefined ? null : { unified: v.unified }),
                ...(v.passthrough === undefined ? null : { passthrough: v.passthrough }),
                ...(v.meta === undefined ? null : { meta: v.meta }),
            };
        });
}

/** @internal */
export namespace PatchJobsIdResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        object?: PatchJobsIdResponseBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<PatchJobsIdResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => PatchJobsIdResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: PatchJobsIdResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchJobsIdResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z.lazy(() => PatchJobsIdResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
