/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type PostLeadsCampaign = {};

export type PostLeadsAccount = {};

export type PostLeadsContacts = {};

export type PostLeadsOwner = {};

export type PostLeadsAttachments = {};

export type PostLeadsCustomFields = {};

export type PostLeadsOpportunities = {
    id?: string | undefined;
    title?: string | undefined;
    description?: string | undefined;
    amount?: number | undefined;
    currency?: string | undefined;
    stage?: string | undefined;
    probability?: number | undefined;
    closeDate?: number | undefined;
    type?: string | undefined;
    nextStep?: string | undefined;
    leadId?: string | undefined;
    leadSource?: string | undefined;
    isClosed?: boolean | undefined;
    isWon?: boolean | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    lostReason?: string | undefined;
    campaign?: PostLeadsCampaign | undefined;
    account?: PostLeadsAccount | undefined;
    contacts?: Array<PostLeadsContacts> | undefined;
    owner?: PostLeadsOwner | undefined;
    attachments?: Array<PostLeadsAttachments> | undefined;
    notes?: Array<string> | undefined;
    customFields?: Array<PostLeadsCustomFields> | undefined;
};

export enum PostLeadsType {
    Personal = "personal",
    Business = "business",
    Other = "other",
}

export type PostLeadsEmails = {
    email?: string | undefined;
    type?: PostLeadsType | undefined;
};

export enum PostLeadsLeadsType {
    Personal = "personal",
    Business = "business",
    Other = "other",
}

export type PostLeadsPhones = {
    phone?: string | undefined;
    country?: string | undefined;
    countryCode?: string | undefined;
    type?: PostLeadsLeadsType | undefined;
};

export type PostLeadsLeadSource = {
    sourceId?: string | undefined;
    sourceName?: string | undefined;
    details?: string | undefined;
};

export enum PostLeadsLeadStatus {
    New = "New",
    Open = "Open",
    InProcess = "InProcess",
    Converted = "Converted",
    Unqualified = "Unqualified",
    AttemptedToContact = "AttemptedToContact",
    Connected = "Connected",
    BadTiming = "BadTiming",
}

export enum PostLeadsLeadsRequestType {
    Home = "home",
    Work = "work",
    Other = "other",
}

export type PostLeadsGeoLocation = {};

export type PostLeadsLeadsCustomFields = {};

export type PostLeadsAddresses = {
    id?: string | undefined;
    contactId?: string | undefined;
    accountId?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    name?: string | undefined;
    companyName?: string | undefined;
    email?: string | undefined;
    phone?: string | undefined;
    street?: string | undefined;
    addressLine2?: string | undefined;
    city?: string | undefined;
    province?: string | undefined;
    region?: string | undefined;
    postalCode?: string | undefined;
    postalCodeExtension?: string | undefined;
    country?: string | undefined;
    countryCode?: string | undefined;
    type?: PostLeadsLeadsRequestType | undefined;
    geoLocation?: PostLeadsGeoLocation | undefined;
    customFields?: Array<PostLeadsLeadsCustomFields> | undefined;
    subdivisionCode?: string | undefined;
};

export enum PostLeadsPreferredContactMethod {
    Email = "Email",
    Phone = "Phone",
    Text = "Text",
    Mail = "Mail",
    InPerson = "InPerson",
}

export enum PostLeadsLeadsRequestRequestBodyType {
    Facebook = "facebook",
    Twitter = "twitter",
    Linkedin = "linkedin",
    Instagram = "instagram",
    Tiktok = "tiktok",
    Pinterest = "pinterest",
    Youtube = "youtube",
    Other = "other",
}

export type PostLeadsAdditionalInfo = {};

export type PostLeadsSocialProfiles = {
    type?: PostLeadsLeadsRequestRequestBodyType | undefined;
    username?: string | undefined;
    displayName?: string | undefined;
    url?: string | undefined;
    avatarUrl?: string | undefined;
    email?: string | undefined;
    additionalInfo?: PostLeadsAdditionalInfo | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    active?: boolean | undefined;
    deleted?: boolean | undefined;
};

export enum PostLeadsFieldType {
    Text = "text",
    Number = "number",
    Date = "date",
    Boolean = "boolean",
    Enum = "enum",
    Json = "json",
    Array = "array",
}

export type PostLeadsLeadsRequestCustomFields = {
    id?: string | undefined;
    fieldName?: string | undefined;
    fieldValue?: string | undefined;
    fieldType?: PostLeadsFieldType | undefined;
};

export enum PostLeadsPriority {
    Low = "low",
    Medium = "medium",
    High = "high",
}

export type PostLeadsAuthor = {};

export type PostLeadsLeadsAttachments = {};

export type PostLeadsSharedWith = {};

export enum PostLeadsVisibility {
    Private = "private",
    Public = "public",
    Shared = "shared",
}

export enum PostLeadsStatus {
    Active = "active",
    Archived = "archived",
}

export type PostLeadsNotes = {
    id?: string | undefined;
    title?: string | undefined;
    content?: string | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    lastAccessed?: number | undefined;
    reminder?: number | undefined;
    color?: string | undefined;
    priority?: PostLeadsPriority | undefined;
    author?: PostLeadsAuthor | undefined;
    tags?: Array<string> | undefined;
    attachments?: Array<PostLeadsLeadsAttachments> | undefined;
    sharedWith?: Array<PostLeadsSharedWith> | undefined;
    visibility?: PostLeadsVisibility | undefined;
    status?: PostLeadsStatus | undefined;
    metadata?: Array<string> | undefined;
};

export type PostLeadsRequestBody = {
    id?: string | undefined;
    name?: string | undefined;
    firstName?: string | undefined;
    middleName?: string | undefined;
    lastName?: string | undefined;
    opportunities?: Array<PostLeadsOpportunities> | undefined;
    defaultEmail?: string | undefined;
    emails?: Array<PostLeadsEmails> | undefined;
    defaultPhone?: string | undefined;
    phones?: Array<PostLeadsPhones> | undefined;
    companyName?: string | undefined;
    jobTitle?: string | undefined;
    website?: string | undefined;
    leadSource?: PostLeadsLeadSource | undefined;
    leadStatus?: PostLeadsLeadStatus | undefined;
    industry?: string | undefined;
    numberOfEmployees?: number | undefined;
    annualRevenue?: number | undefined;
    addresses?: Array<PostLeadsAddresses> | undefined;
    createdAt?: Date | undefined;
    updatedAt?: Date | undefined;
    preferredContactMethod?: PostLeadsPreferredContactMethod | undefined;
    socialProfiles?: Array<PostLeadsSocialProfiles> | undefined;
    customFields?: Array<PostLeadsLeadsRequestCustomFields> | undefined;
    notes?: Array<PostLeadsNotes> | undefined;
};

export type PostLeadsRequest = {
    /**
     * The unique identifier of a Connected Account
     */
    xIntegrationosConnectionKey: string;
    requestBody: PostLeadsRequestBody;
};

export enum PostLeadsStatusCode {
    TwoHundred = 200,
    FourHundred = 400,
    FiveHundred = 500,
}

export type PostLeadsLeadsCampaign = {};

export type PostLeadsLeadsAccount = {};

export type PostLeadsLeadsContacts = {};

export type PostLeadsLeadsOwner = {};

export type PostLeadsLeadsResponseAttachments = {};

export type PostLeadsLeadsResponse200ApplicationJSONCustomFields = {};

export type PostLeadsLeadsOpportunities = {
    id?: string | undefined;
    title?: string | undefined;
    description?: string | undefined;
    amount?: number | undefined;
    currency?: string | undefined;
    stage?: string | undefined;
    probability?: number | undefined;
    closeDate?: number | undefined;
    type?: string | undefined;
    nextStep?: string | undefined;
    leadId?: string | undefined;
    leadSource?: string | undefined;
    isClosed?: boolean | undefined;
    isWon?: boolean | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    lostReason?: string | undefined;
    campaign?: PostLeadsLeadsCampaign | undefined;
    account?: PostLeadsLeadsAccount | undefined;
    contacts?: Array<PostLeadsLeadsContacts> | undefined;
    owner?: PostLeadsLeadsOwner | undefined;
    attachments?: Array<PostLeadsLeadsResponseAttachments> | undefined;
    notes?: Array<string> | undefined;
    customFields?: Array<PostLeadsLeadsResponse200ApplicationJSONCustomFields> | undefined;
};

export enum PostLeadsLeadsResponseType {
    Personal = "personal",
    Business = "business",
    Other = "other",
}

export type PostLeadsLeadsEmails = {
    email?: string | undefined;
    type?: PostLeadsLeadsResponseType | undefined;
};

export enum PostLeadsLeadsResponse200Type {
    Personal = "personal",
    Business = "business",
    Other = "other",
}

export type PostLeadsLeadsPhones = {
    phone?: string | undefined;
    country?: string | undefined;
    countryCode?: string | undefined;
    type?: PostLeadsLeadsResponse200Type | undefined;
};

export type PostLeadsLeadsLeadSource = {
    sourceId?: string | undefined;
    sourceName?: string | undefined;
    details?: string | undefined;
};

export enum PostLeadsLeadsLeadStatus {
    New = "New",
    Open = "Open",
    InProcess = "InProcess",
    Converted = "Converted",
    Unqualified = "Unqualified",
    AttemptedToContact = "AttemptedToContact",
    Connected = "Connected",
    BadTiming = "BadTiming",
}

export enum PostLeadsLeadsResponse200ApplicationJSONType {
    Home = "home",
    Work = "work",
    Other = "other",
}

export type PostLeadsLeadsGeoLocation = {};

export type PostLeadsLeadsResponse200CustomFields = {};

export type PostLeadsLeadsAddresses = {
    id?: string | undefined;
    contactId?: string | undefined;
    accountId?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    name?: string | undefined;
    companyName?: string | undefined;
    email?: string | undefined;
    phone?: string | undefined;
    street?: string | undefined;
    addressLine2?: string | undefined;
    city?: string | undefined;
    province?: string | undefined;
    region?: string | undefined;
    postalCode?: string | undefined;
    postalCodeExtension?: string | undefined;
    country?: string | undefined;
    countryCode?: string | undefined;
    type?: PostLeadsLeadsResponse200ApplicationJSONType | undefined;
    geoLocation?: PostLeadsLeadsGeoLocation | undefined;
    customFields?: Array<PostLeadsLeadsResponse200CustomFields> | undefined;
    subdivisionCode?: string | undefined;
};

export enum PostLeadsLeadsPreferredContactMethod {
    Email = "Email",
    Phone = "Phone",
    Text = "Text",
    Mail = "Mail",
    InPerson = "InPerson",
}

export enum PostLeadsLeadsResponse200ApplicationJSONResponseBodyType {
    Facebook = "facebook",
    Twitter = "twitter",
    Linkedin = "linkedin",
    Instagram = "instagram",
    Tiktok = "tiktok",
    Pinterest = "pinterest",
    Youtube = "youtube",
    Other = "other",
}

export type PostLeadsLeadsAdditionalInfo = {};

export type PostLeadsLeadsSocialProfiles = {
    type?: PostLeadsLeadsResponse200ApplicationJSONResponseBodyType | undefined;
    username?: string | undefined;
    displayName?: string | undefined;
    url?: string | undefined;
    avatarUrl?: string | undefined;
    email?: string | undefined;
    additionalInfo?: PostLeadsLeadsAdditionalInfo | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    active?: boolean | undefined;
    deleted?: boolean | undefined;
};

export enum PostLeadsLeadsFieldType {
    Text = "text",
    Number = "number",
    Date = "date",
    Boolean = "boolean",
    Enum = "enum",
    Json = "json",
    Array = "array",
}

export type PostLeadsLeadsResponseCustomFields = {
    id?: string | undefined;
    fieldName?: string | undefined;
    fieldValue?: string | undefined;
    fieldType?: PostLeadsLeadsFieldType | undefined;
};

export enum PostLeadsLeadsPriority {
    Low = "low",
    Medium = "medium",
    High = "high",
}

export type PostLeadsLeadsAuthor = {};

export type PostLeadsLeadsResponse200Attachments = {};

export type PostLeadsLeadsSharedWith = {};

export enum PostLeadsLeadsVisibility {
    Private = "private",
    Public = "public",
    Shared = "shared",
}

export enum PostLeadsLeadsStatus {
    Active = "active",
    Archived = "archived",
}

export type PostLeadsLeadsNotes = {
    id?: string | undefined;
    title?: string | undefined;
    content?: string | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    lastAccessed?: number | undefined;
    reminder?: number | undefined;
    color?: string | undefined;
    priority?: PostLeadsLeadsPriority | undefined;
    author?: PostLeadsLeadsAuthor | undefined;
    tags?: Array<string> | undefined;
    attachments?: Array<PostLeadsLeadsResponse200Attachments> | undefined;
    sharedWith?: Array<PostLeadsLeadsSharedWith> | undefined;
    visibility?: PostLeadsLeadsVisibility | undefined;
    status?: PostLeadsLeadsStatus | undefined;
    metadata?: Array<string> | undefined;
};

export type PostLeadsUnified = {
    id?: string | undefined;
    name?: string | undefined;
    firstName?: string | undefined;
    middleName?: string | undefined;
    lastName?: string | undefined;
    opportunities?: Array<PostLeadsLeadsOpportunities> | undefined;
    defaultEmail?: string | undefined;
    emails?: Array<PostLeadsLeadsEmails> | undefined;
    defaultPhone?: string | undefined;
    phones?: Array<PostLeadsLeadsPhones> | undefined;
    companyName?: string | undefined;
    jobTitle?: string | undefined;
    website?: string | undefined;
    leadSource?: PostLeadsLeadsLeadSource | undefined;
    leadStatus?: PostLeadsLeadsLeadStatus | undefined;
    industry?: string | undefined;
    numberOfEmployees?: number | undefined;
    annualRevenue?: number | undefined;
    addresses?: Array<PostLeadsLeadsAddresses> | undefined;
    createdAt?: Date | undefined;
    updatedAt?: Date | undefined;
    preferredContactMethod?: PostLeadsLeadsPreferredContactMethod | undefined;
    socialProfiles?: Array<PostLeadsLeadsSocialProfiles> | undefined;
    customFields?: Array<PostLeadsLeadsResponseCustomFields> | undefined;
    notes?: Array<PostLeadsLeadsNotes> | undefined;
};

export type PostLeadsPassthrough = {};

export type PostLeadsCache = {
    hit?: boolean | undefined;
    ttl?: number | undefined;
    key?: string | undefined;
};

export type PostLeadsMeta = {
    timestamp?: number | undefined;
    latency?: number | undefined;
    platformRateLimitRemaining?: number | undefined;
    rateLimitRemaining?: number | undefined;
    cache?: PostLeadsCache | undefined;
    transactionKey?: string | undefined;
    txn?: string | undefined;
    platform?: string | undefined;
    platformVersion?: string | undefined;
    connectionDefinitionKey?: string | undefined;
    action?: string | undefined;
    commonModel?: string | undefined;
    commonModelVersion?: string | undefined;
    connectionKey?: string | undefined;
    hash?: string | undefined;
    heartbeats?: Array<string> | undefined;
    totalTransactions?: number | undefined;
};

/**
 * Successful response
 */
export type PostLeadsResponseBody = {
    status?: string | undefined;
    statusCode?: PostLeadsStatusCode | undefined;
    unified?: PostLeadsUnified | undefined;
    passthrough?: PostLeadsPassthrough | undefined;
    meta?: PostLeadsMeta | undefined;
};

export type PostLeadsResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Successful response
     */
    object?: PostLeadsResponseBody | undefined;
};

/** @internal */
export namespace PostLeadsCampaign$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<PostLeadsCampaign, z.ZodTypeDef, Inbound> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostLeadsCampaign> = z.object(
        {}
    );
}

/** @internal */
export namespace PostLeadsAccount$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<PostLeadsAccount, z.ZodTypeDef, Inbound> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostLeadsAccount> = z.object({});
}

/** @internal */
export namespace PostLeadsContacts$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<PostLeadsContacts, z.ZodTypeDef, Inbound> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostLeadsContacts> = z.object(
        {}
    );
}

/** @internal */
export namespace PostLeadsOwner$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<PostLeadsOwner, z.ZodTypeDef, Inbound> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostLeadsOwner> = z.object({});
}

/** @internal */
export namespace PostLeadsAttachments$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<PostLeadsAttachments, z.ZodTypeDef, Inbound> = z.object(
        {}
    );

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostLeadsAttachments> = z.object(
        {}
    );
}

/** @internal */
export namespace PostLeadsCustomFields$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<PostLeadsCustomFields, z.ZodTypeDef, Inbound> = z.object(
        {}
    );

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostLeadsCustomFields> =
        z.object({});
}

/** @internal */
export namespace PostLeadsOpportunities$ {
    export type Inbound = {
        id?: string | undefined;
        title?: string | undefined;
        description?: string | undefined;
        amount?: number | undefined;
        currency?: string | undefined;
        stage?: string | undefined;
        probability?: number | undefined;
        closeDate?: number | undefined;
        type?: string | undefined;
        nextStep?: string | undefined;
        leadId?: string | undefined;
        leadSource?: string | undefined;
        isClosed?: boolean | undefined;
        isWon?: boolean | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        lostReason?: string | undefined;
        campaign?: PostLeadsCampaign$.Inbound | undefined;
        account?: PostLeadsAccount$.Inbound | undefined;
        contacts?: Array<PostLeadsContacts$.Inbound> | undefined;
        owner?: PostLeadsOwner$.Inbound | undefined;
        attachments?: Array<PostLeadsAttachments$.Inbound> | undefined;
        notes?: Array<string> | undefined;
        customFields?: Array<PostLeadsCustomFields$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<PostLeadsOpportunities, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            title: z.string().optional(),
            description: z.string().optional(),
            amount: z.number().optional(),
            currency: z.string().optional(),
            stage: z.string().optional(),
            probability: z.number().optional(),
            closeDate: z.number().optional(),
            type: z.string().optional(),
            nextStep: z.string().optional(),
            leadId: z.string().optional(),
            leadSource: z.string().optional(),
            isClosed: z.boolean().optional(),
            isWon: z.boolean().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            lostReason: z.string().optional(),
            campaign: z.lazy(() => PostLeadsCampaign$.inboundSchema).optional(),
            account: z.lazy(() => PostLeadsAccount$.inboundSchema).optional(),
            contacts: z.array(z.lazy(() => PostLeadsContacts$.inboundSchema)).optional(),
            owner: z.lazy(() => PostLeadsOwner$.inboundSchema).optional(),
            attachments: z.array(z.lazy(() => PostLeadsAttachments$.inboundSchema)).optional(),
            notes: z.array(z.string()).optional(),
            customFields: z.array(z.lazy(() => PostLeadsCustomFields$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.amount === undefined ? null : { amount: v.amount }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.stage === undefined ? null : { stage: v.stage }),
                ...(v.probability === undefined ? null : { probability: v.probability }),
                ...(v.closeDate === undefined ? null : { closeDate: v.closeDate }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.nextStep === undefined ? null : { nextStep: v.nextStep }),
                ...(v.leadId === undefined ? null : { leadId: v.leadId }),
                ...(v.leadSource === undefined ? null : { leadSource: v.leadSource }),
                ...(v.isClosed === undefined ? null : { isClosed: v.isClosed }),
                ...(v.isWon === undefined ? null : { isWon: v.isWon }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.lostReason === undefined ? null : { lostReason: v.lostReason }),
                ...(v.campaign === undefined ? null : { campaign: v.campaign }),
                ...(v.account === undefined ? null : { account: v.account }),
                ...(v.contacts === undefined ? null : { contacts: v.contacts }),
                ...(v.owner === undefined ? null : { owner: v.owner }),
                ...(v.attachments === undefined ? null : { attachments: v.attachments }),
                ...(v.notes === undefined ? null : { notes: v.notes }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        title?: string | undefined;
        description?: string | undefined;
        amount?: number | undefined;
        currency?: string | undefined;
        stage?: string | undefined;
        probability?: number | undefined;
        closeDate?: number | undefined;
        type?: string | undefined;
        nextStep?: string | undefined;
        leadId?: string | undefined;
        leadSource?: string | undefined;
        isClosed?: boolean | undefined;
        isWon?: boolean | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        lostReason?: string | undefined;
        campaign?: PostLeadsCampaign$.Outbound | undefined;
        account?: PostLeadsAccount$.Outbound | undefined;
        contacts?: Array<PostLeadsContacts$.Outbound> | undefined;
        owner?: PostLeadsOwner$.Outbound | undefined;
        attachments?: Array<PostLeadsAttachments$.Outbound> | undefined;
        notes?: Array<string> | undefined;
        customFields?: Array<PostLeadsCustomFields$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostLeadsOpportunities> = z
        .object({
            id: z.string().optional(),
            title: z.string().optional(),
            description: z.string().optional(),
            amount: z.number().optional(),
            currency: z.string().optional(),
            stage: z.string().optional(),
            probability: z.number().optional(),
            closeDate: z.number().optional(),
            type: z.string().optional(),
            nextStep: z.string().optional(),
            leadId: z.string().optional(),
            leadSource: z.string().optional(),
            isClosed: z.boolean().optional(),
            isWon: z.boolean().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            lostReason: z.string().optional(),
            campaign: z.lazy(() => PostLeadsCampaign$.outboundSchema).optional(),
            account: z.lazy(() => PostLeadsAccount$.outboundSchema).optional(),
            contacts: z.array(z.lazy(() => PostLeadsContacts$.outboundSchema)).optional(),
            owner: z.lazy(() => PostLeadsOwner$.outboundSchema).optional(),
            attachments: z.array(z.lazy(() => PostLeadsAttachments$.outboundSchema)).optional(),
            notes: z.array(z.string()).optional(),
            customFields: z.array(z.lazy(() => PostLeadsCustomFields$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.amount === undefined ? null : { amount: v.amount }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.stage === undefined ? null : { stage: v.stage }),
                ...(v.probability === undefined ? null : { probability: v.probability }),
                ...(v.closeDate === undefined ? null : { closeDate: v.closeDate }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.nextStep === undefined ? null : { nextStep: v.nextStep }),
                ...(v.leadId === undefined ? null : { leadId: v.leadId }),
                ...(v.leadSource === undefined ? null : { leadSource: v.leadSource }),
                ...(v.isClosed === undefined ? null : { isClosed: v.isClosed }),
                ...(v.isWon === undefined ? null : { isWon: v.isWon }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.lostReason === undefined ? null : { lostReason: v.lostReason }),
                ...(v.campaign === undefined ? null : { campaign: v.campaign }),
                ...(v.account === undefined ? null : { account: v.account }),
                ...(v.contacts === undefined ? null : { contacts: v.contacts }),
                ...(v.owner === undefined ? null : { owner: v.owner }),
                ...(v.attachments === undefined ? null : { attachments: v.attachments }),
                ...(v.notes === undefined ? null : { notes: v.notes }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
            };
        });
}

/** @internal */
export const PostLeadsType$ = z.nativeEnum(PostLeadsType);

/** @internal */
export namespace PostLeadsEmails$ {
    export type Inbound = {
        email?: string | undefined;
        type?: PostLeadsType | undefined;
    };

    export const inboundSchema: z.ZodType<PostLeadsEmails, z.ZodTypeDef, Inbound> = z
        .object({
            email: z.string().optional(),
            type: PostLeadsType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });

    export type Outbound = {
        email?: string | undefined;
        type?: PostLeadsType | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostLeadsEmails> = z
        .object({
            email: z.string().optional(),
            type: PostLeadsType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });
}

/** @internal */
export const PostLeadsLeadsType$ = z.nativeEnum(PostLeadsLeadsType);

/** @internal */
export namespace PostLeadsPhones$ {
    export type Inbound = {
        phone?: string | undefined;
        country?: string | undefined;
        countryCode?: string | undefined;
        type?: PostLeadsLeadsType | undefined;
    };

    export const inboundSchema: z.ZodType<PostLeadsPhones, z.ZodTypeDef, Inbound> = z
        .object({
            phone: z.string().optional(),
            country: z.string().optional(),
            countryCode: z.string().optional(),
            type: PostLeadsLeadsType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.phone === undefined ? null : { phone: v.phone }),
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.countryCode === undefined ? null : { countryCode: v.countryCode }),
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });

    export type Outbound = {
        phone?: string | undefined;
        country?: string | undefined;
        countryCode?: string | undefined;
        type?: PostLeadsLeadsType | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostLeadsPhones> = z
        .object({
            phone: z.string().optional(),
            country: z.string().optional(),
            countryCode: z.string().optional(),
            type: PostLeadsLeadsType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.phone === undefined ? null : { phone: v.phone }),
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.countryCode === undefined ? null : { countryCode: v.countryCode }),
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });
}

/** @internal */
export namespace PostLeadsLeadSource$ {
    export type Inbound = {
        sourceId?: string | undefined;
        sourceName?: string | undefined;
        details?: string | undefined;
    };

    export const inboundSchema: z.ZodType<PostLeadsLeadSource, z.ZodTypeDef, Inbound> = z
        .object({
            sourceId: z.string().optional(),
            sourceName: z.string().optional(),
            details: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.sourceId === undefined ? null : { sourceId: v.sourceId }),
                ...(v.sourceName === undefined ? null : { sourceName: v.sourceName }),
                ...(v.details === undefined ? null : { details: v.details }),
            };
        });

    export type Outbound = {
        sourceId?: string | undefined;
        sourceName?: string | undefined;
        details?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostLeadsLeadSource> = z
        .object({
            sourceId: z.string().optional(),
            sourceName: z.string().optional(),
            details: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.sourceId === undefined ? null : { sourceId: v.sourceId }),
                ...(v.sourceName === undefined ? null : { sourceName: v.sourceName }),
                ...(v.details === undefined ? null : { details: v.details }),
            };
        });
}

/** @internal */
export const PostLeadsLeadStatus$ = z.nativeEnum(PostLeadsLeadStatus);

/** @internal */
export const PostLeadsLeadsRequestType$ = z.nativeEnum(PostLeadsLeadsRequestType);

/** @internal */
export namespace PostLeadsGeoLocation$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<PostLeadsGeoLocation, z.ZodTypeDef, Inbound> = z.object(
        {}
    );

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostLeadsGeoLocation> = z.object(
        {}
    );
}

/** @internal */
export namespace PostLeadsLeadsCustomFields$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<PostLeadsLeadsCustomFields, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostLeadsLeadsCustomFields> =
        z.object({});
}

/** @internal */
export namespace PostLeadsAddresses$ {
    export type Inbound = {
        id?: string | undefined;
        contactId?: string | undefined;
        accountId?: string | undefined;
        firstName?: string | undefined;
        lastName?: string | undefined;
        name?: string | undefined;
        companyName?: string | undefined;
        email?: string | undefined;
        phone?: string | undefined;
        street?: string | undefined;
        addressLine2?: string | undefined;
        city?: string | undefined;
        province?: string | undefined;
        region?: string | undefined;
        postalCode?: string | undefined;
        postalCodeExtension?: string | undefined;
        country?: string | undefined;
        countryCode?: string | undefined;
        type?: PostLeadsLeadsRequestType | undefined;
        geoLocation?: PostLeadsGeoLocation$.Inbound | undefined;
        customFields?: Array<PostLeadsLeadsCustomFields$.Inbound> | undefined;
        subdivisionCode?: string | undefined;
    };

    export const inboundSchema: z.ZodType<PostLeadsAddresses, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            contactId: z.string().optional(),
            accountId: z.string().optional(),
            firstName: z.string().optional(),
            lastName: z.string().optional(),
            name: z.string().optional(),
            companyName: z.string().optional(),
            email: z.string().optional(),
            phone: z.string().optional(),
            street: z.string().optional(),
            addressLine2: z.string().optional(),
            city: z.string().optional(),
            province: z.string().optional(),
            region: z.string().optional(),
            postalCode: z.string().optional(),
            postalCodeExtension: z.string().optional(),
            country: z.string().optional(),
            countryCode: z.string().optional(),
            type: PostLeadsLeadsRequestType$.optional(),
            geoLocation: z.lazy(() => PostLeadsGeoLocation$.inboundSchema).optional(),
            customFields: z
                .array(z.lazy(() => PostLeadsLeadsCustomFields$.inboundSchema))
                .optional(),
            subdivisionCode: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.contactId === undefined ? null : { contactId: v.contactId }),
                ...(v.accountId === undefined ? null : { accountId: v.accountId }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.companyName === undefined ? null : { companyName: v.companyName }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.phone === undefined ? null : { phone: v.phone }),
                ...(v.street === undefined ? null : { street: v.street }),
                ...(v.addressLine2 === undefined ? null : { addressLine2: v.addressLine2 }),
                ...(v.city === undefined ? null : { city: v.city }),
                ...(v.province === undefined ? null : { province: v.province }),
                ...(v.region === undefined ? null : { region: v.region }),
                ...(v.postalCode === undefined ? null : { postalCode: v.postalCode }),
                ...(v.postalCodeExtension === undefined
                    ? null
                    : { postalCodeExtension: v.postalCodeExtension }),
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.countryCode === undefined ? null : { countryCode: v.countryCode }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.geoLocation === undefined ? null : { geoLocation: v.geoLocation }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                ...(v.subdivisionCode === undefined
                    ? null
                    : { subdivisionCode: v.subdivisionCode }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        contactId?: string | undefined;
        accountId?: string | undefined;
        firstName?: string | undefined;
        lastName?: string | undefined;
        name?: string | undefined;
        companyName?: string | undefined;
        email?: string | undefined;
        phone?: string | undefined;
        street?: string | undefined;
        addressLine2?: string | undefined;
        city?: string | undefined;
        province?: string | undefined;
        region?: string | undefined;
        postalCode?: string | undefined;
        postalCodeExtension?: string | undefined;
        country?: string | undefined;
        countryCode?: string | undefined;
        type?: PostLeadsLeadsRequestType | undefined;
        geoLocation?: PostLeadsGeoLocation$.Outbound | undefined;
        customFields?: Array<PostLeadsLeadsCustomFields$.Outbound> | undefined;
        subdivisionCode?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostLeadsAddresses> = z
        .object({
            id: z.string().optional(),
            contactId: z.string().optional(),
            accountId: z.string().optional(),
            firstName: z.string().optional(),
            lastName: z.string().optional(),
            name: z.string().optional(),
            companyName: z.string().optional(),
            email: z.string().optional(),
            phone: z.string().optional(),
            street: z.string().optional(),
            addressLine2: z.string().optional(),
            city: z.string().optional(),
            province: z.string().optional(),
            region: z.string().optional(),
            postalCode: z.string().optional(),
            postalCodeExtension: z.string().optional(),
            country: z.string().optional(),
            countryCode: z.string().optional(),
            type: PostLeadsLeadsRequestType$.optional(),
            geoLocation: z.lazy(() => PostLeadsGeoLocation$.outboundSchema).optional(),
            customFields: z
                .array(z.lazy(() => PostLeadsLeadsCustomFields$.outboundSchema))
                .optional(),
            subdivisionCode: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.contactId === undefined ? null : { contactId: v.contactId }),
                ...(v.accountId === undefined ? null : { accountId: v.accountId }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.companyName === undefined ? null : { companyName: v.companyName }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.phone === undefined ? null : { phone: v.phone }),
                ...(v.street === undefined ? null : { street: v.street }),
                ...(v.addressLine2 === undefined ? null : { addressLine2: v.addressLine2 }),
                ...(v.city === undefined ? null : { city: v.city }),
                ...(v.province === undefined ? null : { province: v.province }),
                ...(v.region === undefined ? null : { region: v.region }),
                ...(v.postalCode === undefined ? null : { postalCode: v.postalCode }),
                ...(v.postalCodeExtension === undefined
                    ? null
                    : { postalCodeExtension: v.postalCodeExtension }),
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.countryCode === undefined ? null : { countryCode: v.countryCode }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.geoLocation === undefined ? null : { geoLocation: v.geoLocation }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                ...(v.subdivisionCode === undefined
                    ? null
                    : { subdivisionCode: v.subdivisionCode }),
            };
        });
}

/** @internal */
export const PostLeadsPreferredContactMethod$ = z.nativeEnum(PostLeadsPreferredContactMethod);

/** @internal */
export const PostLeadsLeadsRequestRequestBodyType$ = z.nativeEnum(
    PostLeadsLeadsRequestRequestBodyType
);

/** @internal */
export namespace PostLeadsAdditionalInfo$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<PostLeadsAdditionalInfo, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostLeadsAdditionalInfo> =
        z.object({});
}

/** @internal */
export namespace PostLeadsSocialProfiles$ {
    export type Inbound = {
        type?: PostLeadsLeadsRequestRequestBodyType | undefined;
        username?: string | undefined;
        displayName?: string | undefined;
        url?: string | undefined;
        avatarUrl?: string | undefined;
        email?: string | undefined;
        additionalInfo?: PostLeadsAdditionalInfo$.Inbound | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<PostLeadsSocialProfiles, z.ZodTypeDef, Inbound> = z
        .object({
            type: PostLeadsLeadsRequestRequestBodyType$.optional(),
            username: z.string().optional(),
            displayName: z.string().optional(),
            url: z.string().optional(),
            avatarUrl: z.string().optional(),
            email: z.string().optional(),
            additionalInfo: z.lazy(() => PostLeadsAdditionalInfo$.inboundSchema).optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.username === undefined ? null : { username: v.username }),
                ...(v.displayName === undefined ? null : { displayName: v.displayName }),
                ...(v.url === undefined ? null : { url: v.url }),
                ...(v.avatarUrl === undefined ? null : { avatarUrl: v.avatarUrl }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.additionalInfo === undefined ? null : { additionalInfo: v.additionalInfo }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });

    export type Outbound = {
        type?: PostLeadsLeadsRequestRequestBodyType | undefined;
        username?: string | undefined;
        displayName?: string | undefined;
        url?: string | undefined;
        avatarUrl?: string | undefined;
        email?: string | undefined;
        additionalInfo?: PostLeadsAdditionalInfo$.Outbound | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostLeadsSocialProfiles> = z
        .object({
            type: PostLeadsLeadsRequestRequestBodyType$.optional(),
            username: z.string().optional(),
            displayName: z.string().optional(),
            url: z.string().optional(),
            avatarUrl: z.string().optional(),
            email: z.string().optional(),
            additionalInfo: z.lazy(() => PostLeadsAdditionalInfo$.outboundSchema).optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.username === undefined ? null : { username: v.username }),
                ...(v.displayName === undefined ? null : { displayName: v.displayName }),
                ...(v.url === undefined ? null : { url: v.url }),
                ...(v.avatarUrl === undefined ? null : { avatarUrl: v.avatarUrl }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.additionalInfo === undefined ? null : { additionalInfo: v.additionalInfo }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });
}

/** @internal */
export const PostLeadsFieldType$ = z.nativeEnum(PostLeadsFieldType);

/** @internal */
export namespace PostLeadsLeadsRequestCustomFields$ {
    export type Inbound = {
        id?: string | undefined;
        fieldName?: string | undefined;
        fieldValue?: string | undefined;
        fieldType?: PostLeadsFieldType | undefined;
    };

    export const inboundSchema: z.ZodType<
        PostLeadsLeadsRequestCustomFields,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            id: z.string().optional(),
            fieldName: z.string().optional(),
            fieldValue: z.string().optional(),
            fieldType: PostLeadsFieldType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fieldName === undefined ? null : { fieldName: v.fieldName }),
                ...(v.fieldValue === undefined ? null : { fieldValue: v.fieldValue }),
                ...(v.fieldType === undefined ? null : { fieldType: v.fieldType }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        fieldName?: string | undefined;
        fieldValue?: string | undefined;
        fieldType?: PostLeadsFieldType | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PostLeadsLeadsRequestCustomFields
    > = z
        .object({
            id: z.string().optional(),
            fieldName: z.string().optional(),
            fieldValue: z.string().optional(),
            fieldType: PostLeadsFieldType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fieldName === undefined ? null : { fieldName: v.fieldName }),
                ...(v.fieldValue === undefined ? null : { fieldValue: v.fieldValue }),
                ...(v.fieldType === undefined ? null : { fieldType: v.fieldType }),
            };
        });
}

/** @internal */
export const PostLeadsPriority$ = z.nativeEnum(PostLeadsPriority);

/** @internal */
export namespace PostLeadsAuthor$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<PostLeadsAuthor, z.ZodTypeDef, Inbound> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostLeadsAuthor> = z.object({});
}

/** @internal */
export namespace PostLeadsLeadsAttachments$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<PostLeadsLeadsAttachments, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostLeadsLeadsAttachments> =
        z.object({});
}

/** @internal */
export namespace PostLeadsSharedWith$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<PostLeadsSharedWith, z.ZodTypeDef, Inbound> = z.object(
        {}
    );

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostLeadsSharedWith> = z.object(
        {}
    );
}

/** @internal */
export const PostLeadsVisibility$ = z.nativeEnum(PostLeadsVisibility);

/** @internal */
export const PostLeadsStatus$ = z.nativeEnum(PostLeadsStatus);

/** @internal */
export namespace PostLeadsNotes$ {
    export type Inbound = {
        id?: string | undefined;
        title?: string | undefined;
        content?: string | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        lastAccessed?: number | undefined;
        reminder?: number | undefined;
        color?: string | undefined;
        priority?: PostLeadsPriority | undefined;
        author?: PostLeadsAuthor$.Inbound | undefined;
        tags?: Array<string> | undefined;
        attachments?: Array<PostLeadsLeadsAttachments$.Inbound> | undefined;
        sharedWith?: Array<PostLeadsSharedWith$.Inbound> | undefined;
        visibility?: PostLeadsVisibility | undefined;
        status?: PostLeadsStatus | undefined;
        metadata?: Array<string> | undefined;
    };

    export const inboundSchema: z.ZodType<PostLeadsNotes, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            title: z.string().optional(),
            content: z.string().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            lastAccessed: z.number().optional(),
            reminder: z.number().optional(),
            color: z.string().optional(),
            priority: PostLeadsPriority$.optional(),
            author: z.lazy(() => PostLeadsAuthor$.inboundSchema).optional(),
            tags: z.array(z.string()).optional(),
            attachments: z.array(z.lazy(() => PostLeadsLeadsAttachments$.inboundSchema)).optional(),
            sharedWith: z.array(z.lazy(() => PostLeadsSharedWith$.inboundSchema)).optional(),
            visibility: PostLeadsVisibility$.optional(),
            status: PostLeadsStatus$.optional(),
            metadata: z.array(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.content === undefined ? null : { content: v.content }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.lastAccessed === undefined ? null : { lastAccessed: v.lastAccessed }),
                ...(v.reminder === undefined ? null : { reminder: v.reminder }),
                ...(v.color === undefined ? null : { color: v.color }),
                ...(v.priority === undefined ? null : { priority: v.priority }),
                ...(v.author === undefined ? null : { author: v.author }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
                ...(v.attachments === undefined ? null : { attachments: v.attachments }),
                ...(v.sharedWith === undefined ? null : { sharedWith: v.sharedWith }),
                ...(v.visibility === undefined ? null : { visibility: v.visibility }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        title?: string | undefined;
        content?: string | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        lastAccessed?: number | undefined;
        reminder?: number | undefined;
        color?: string | undefined;
        priority?: PostLeadsPriority | undefined;
        author?: PostLeadsAuthor$.Outbound | undefined;
        tags?: Array<string> | undefined;
        attachments?: Array<PostLeadsLeadsAttachments$.Outbound> | undefined;
        sharedWith?: Array<PostLeadsSharedWith$.Outbound> | undefined;
        visibility?: PostLeadsVisibility | undefined;
        status?: PostLeadsStatus | undefined;
        metadata?: Array<string> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostLeadsNotes> = z
        .object({
            id: z.string().optional(),
            title: z.string().optional(),
            content: z.string().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            lastAccessed: z.number().optional(),
            reminder: z.number().optional(),
            color: z.string().optional(),
            priority: PostLeadsPriority$.optional(),
            author: z.lazy(() => PostLeadsAuthor$.outboundSchema).optional(),
            tags: z.array(z.string()).optional(),
            attachments: z
                .array(z.lazy(() => PostLeadsLeadsAttachments$.outboundSchema))
                .optional(),
            sharedWith: z.array(z.lazy(() => PostLeadsSharedWith$.outboundSchema)).optional(),
            visibility: PostLeadsVisibility$.optional(),
            status: PostLeadsStatus$.optional(),
            metadata: z.array(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.content === undefined ? null : { content: v.content }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.lastAccessed === undefined ? null : { lastAccessed: v.lastAccessed }),
                ...(v.reminder === undefined ? null : { reminder: v.reminder }),
                ...(v.color === undefined ? null : { color: v.color }),
                ...(v.priority === undefined ? null : { priority: v.priority }),
                ...(v.author === undefined ? null : { author: v.author }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
                ...(v.attachments === undefined ? null : { attachments: v.attachments }),
                ...(v.sharedWith === undefined ? null : { sharedWith: v.sharedWith }),
                ...(v.visibility === undefined ? null : { visibility: v.visibility }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
            };
        });
}

/** @internal */
export namespace PostLeadsRequestBody$ {
    export type Inbound = {
        id?: string | undefined;
        name?: string | undefined;
        firstName?: string | undefined;
        middleName?: string | undefined;
        lastName?: string | undefined;
        opportunities?: Array<PostLeadsOpportunities$.Inbound> | undefined;
        defaultEmail?: string | undefined;
        emails?: Array<PostLeadsEmails$.Inbound> | undefined;
        defaultPhone?: string | undefined;
        phones?: Array<PostLeadsPhones$.Inbound> | undefined;
        companyName?: string | undefined;
        jobTitle?: string | undefined;
        website?: string | undefined;
        leadSource?: PostLeadsLeadSource$.Inbound | undefined;
        leadStatus?: PostLeadsLeadStatus | undefined;
        industry?: string | undefined;
        numberOfEmployees?: number | undefined;
        annualRevenue?: number | undefined;
        addresses?: Array<PostLeadsAddresses$.Inbound> | undefined;
        createdAt?: string | undefined;
        updatedAt?: string | undefined;
        preferredContactMethod?: PostLeadsPreferredContactMethod | undefined;
        socialProfiles?: Array<PostLeadsSocialProfiles$.Inbound> | undefined;
        customFields?: Array<PostLeadsLeadsRequestCustomFields$.Inbound> | undefined;
        notes?: Array<PostLeadsNotes$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<PostLeadsRequestBody, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            name: z.string().optional(),
            firstName: z.string().optional(),
            middleName: z.string().optional(),
            lastName: z.string().optional(),
            opportunities: z.array(z.lazy(() => PostLeadsOpportunities$.inboundSchema)).optional(),
            defaultEmail: z.string().optional(),
            emails: z.array(z.lazy(() => PostLeadsEmails$.inboundSchema)).optional(),
            defaultPhone: z.string().optional(),
            phones: z.array(z.lazy(() => PostLeadsPhones$.inboundSchema)).optional(),
            companyName: z.string().optional(),
            jobTitle: z.string().optional(),
            website: z.string().optional(),
            leadSource: z.lazy(() => PostLeadsLeadSource$.inboundSchema).optional(),
            leadStatus: PostLeadsLeadStatus$.optional(),
            industry: z.string().optional(),
            numberOfEmployees: z.number().optional(),
            annualRevenue: z.number().optional(),
            addresses: z.array(z.lazy(() => PostLeadsAddresses$.inboundSchema)).optional(),
            createdAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            updatedAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            preferredContactMethod: PostLeadsPreferredContactMethod$.optional(),
            socialProfiles: z
                .array(z.lazy(() => PostLeadsSocialProfiles$.inboundSchema))
                .optional(),
            customFields: z
                .array(z.lazy(() => PostLeadsLeadsRequestCustomFields$.inboundSchema))
                .optional(),
            notes: z.array(z.lazy(() => PostLeadsNotes$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.middleName === undefined ? null : { middleName: v.middleName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.opportunities === undefined ? null : { opportunities: v.opportunities }),
                ...(v.defaultEmail === undefined ? null : { defaultEmail: v.defaultEmail }),
                ...(v.emails === undefined ? null : { emails: v.emails }),
                ...(v.defaultPhone === undefined ? null : { defaultPhone: v.defaultPhone }),
                ...(v.phones === undefined ? null : { phones: v.phones }),
                ...(v.companyName === undefined ? null : { companyName: v.companyName }),
                ...(v.jobTitle === undefined ? null : { jobTitle: v.jobTitle }),
                ...(v.website === undefined ? null : { website: v.website }),
                ...(v.leadSource === undefined ? null : { leadSource: v.leadSource }),
                ...(v.leadStatus === undefined ? null : { leadStatus: v.leadStatus }),
                ...(v.industry === undefined ? null : { industry: v.industry }),
                ...(v.numberOfEmployees === undefined
                    ? null
                    : { numberOfEmployees: v.numberOfEmployees }),
                ...(v.annualRevenue === undefined ? null : { annualRevenue: v.annualRevenue }),
                ...(v.addresses === undefined ? null : { addresses: v.addresses }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.preferredContactMethod === undefined
                    ? null
                    : { preferredContactMethod: v.preferredContactMethod }),
                ...(v.socialProfiles === undefined ? null : { socialProfiles: v.socialProfiles }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                ...(v.notes === undefined ? null : { notes: v.notes }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        name?: string | undefined;
        firstName?: string | undefined;
        middleName?: string | undefined;
        lastName?: string | undefined;
        opportunities?: Array<PostLeadsOpportunities$.Outbound> | undefined;
        defaultEmail?: string | undefined;
        emails?: Array<PostLeadsEmails$.Outbound> | undefined;
        defaultPhone?: string | undefined;
        phones?: Array<PostLeadsPhones$.Outbound> | undefined;
        companyName?: string | undefined;
        jobTitle?: string | undefined;
        website?: string | undefined;
        leadSource?: PostLeadsLeadSource$.Outbound | undefined;
        leadStatus?: PostLeadsLeadStatus | undefined;
        industry?: string | undefined;
        numberOfEmployees?: number | undefined;
        annualRevenue?: number | undefined;
        addresses?: Array<PostLeadsAddresses$.Outbound> | undefined;
        createdAt?: string | undefined;
        updatedAt?: string | undefined;
        preferredContactMethod?: PostLeadsPreferredContactMethod | undefined;
        socialProfiles?: Array<PostLeadsSocialProfiles$.Outbound> | undefined;
        customFields?: Array<PostLeadsLeadsRequestCustomFields$.Outbound> | undefined;
        notes?: Array<PostLeadsNotes$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostLeadsRequestBody> = z
        .object({
            id: z.string().optional(),
            name: z.string().optional(),
            firstName: z.string().optional(),
            middleName: z.string().optional(),
            lastName: z.string().optional(),
            opportunities: z.array(z.lazy(() => PostLeadsOpportunities$.outboundSchema)).optional(),
            defaultEmail: z.string().optional(),
            emails: z.array(z.lazy(() => PostLeadsEmails$.outboundSchema)).optional(),
            defaultPhone: z.string().optional(),
            phones: z.array(z.lazy(() => PostLeadsPhones$.outboundSchema)).optional(),
            companyName: z.string().optional(),
            jobTitle: z.string().optional(),
            website: z.string().optional(),
            leadSource: z.lazy(() => PostLeadsLeadSource$.outboundSchema).optional(),
            leadStatus: PostLeadsLeadStatus$.optional(),
            industry: z.string().optional(),
            numberOfEmployees: z.number().optional(),
            annualRevenue: z.number().optional(),
            addresses: z.array(z.lazy(() => PostLeadsAddresses$.outboundSchema)).optional(),
            createdAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            updatedAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            preferredContactMethod: PostLeadsPreferredContactMethod$.optional(),
            socialProfiles: z
                .array(z.lazy(() => PostLeadsSocialProfiles$.outboundSchema))
                .optional(),
            customFields: z
                .array(z.lazy(() => PostLeadsLeadsRequestCustomFields$.outboundSchema))
                .optional(),
            notes: z.array(z.lazy(() => PostLeadsNotes$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.middleName === undefined ? null : { middleName: v.middleName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.opportunities === undefined ? null : { opportunities: v.opportunities }),
                ...(v.defaultEmail === undefined ? null : { defaultEmail: v.defaultEmail }),
                ...(v.emails === undefined ? null : { emails: v.emails }),
                ...(v.defaultPhone === undefined ? null : { defaultPhone: v.defaultPhone }),
                ...(v.phones === undefined ? null : { phones: v.phones }),
                ...(v.companyName === undefined ? null : { companyName: v.companyName }),
                ...(v.jobTitle === undefined ? null : { jobTitle: v.jobTitle }),
                ...(v.website === undefined ? null : { website: v.website }),
                ...(v.leadSource === undefined ? null : { leadSource: v.leadSource }),
                ...(v.leadStatus === undefined ? null : { leadStatus: v.leadStatus }),
                ...(v.industry === undefined ? null : { industry: v.industry }),
                ...(v.numberOfEmployees === undefined
                    ? null
                    : { numberOfEmployees: v.numberOfEmployees }),
                ...(v.annualRevenue === undefined ? null : { annualRevenue: v.annualRevenue }),
                ...(v.addresses === undefined ? null : { addresses: v.addresses }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.preferredContactMethod === undefined
                    ? null
                    : { preferredContactMethod: v.preferredContactMethod }),
                ...(v.socialProfiles === undefined ? null : { socialProfiles: v.socialProfiles }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                ...(v.notes === undefined ? null : { notes: v.notes }),
            };
        });
}

/** @internal */
export namespace PostLeadsRequest$ {
    export type Inbound = {
        "X-INTEGRATIONOS-CONNECTION-KEY": string;
        RequestBody: PostLeadsRequestBody$.Inbound;
    };

    export const inboundSchema: z.ZodType<PostLeadsRequest, z.ZodTypeDef, Inbound> = z
        .object({
            "X-INTEGRATIONOS-CONNECTION-KEY": z.string(),
            RequestBody: z.lazy(() => PostLeadsRequestBody$.inboundSchema),
        })
        .transform((v) => {
            return {
                xIntegrationosConnectionKey: v["X-INTEGRATIONOS-CONNECTION-KEY"],
                requestBody: v.RequestBody,
            };
        });

    export type Outbound = {
        "X-INTEGRATIONOS-CONNECTION-KEY": string;
        RequestBody: PostLeadsRequestBody$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostLeadsRequest> = z
        .object({
            xIntegrationosConnectionKey: z.string(),
            requestBody: z.lazy(() => PostLeadsRequestBody$.outboundSchema),
        })
        .transform((v) => {
            return {
                "X-INTEGRATIONOS-CONNECTION-KEY": v.xIntegrationosConnectionKey,
                RequestBody: v.requestBody,
            };
        });
}

/** @internal */
export const PostLeadsStatusCode$ = z.nativeEnum(PostLeadsStatusCode);

/** @internal */
export namespace PostLeadsLeadsCampaign$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<PostLeadsLeadsCampaign, z.ZodTypeDef, Inbound> = z.object(
        {}
    );

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostLeadsLeadsCampaign> =
        z.object({});
}

/** @internal */
export namespace PostLeadsLeadsAccount$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<PostLeadsLeadsAccount, z.ZodTypeDef, Inbound> = z.object(
        {}
    );

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostLeadsLeadsAccount> =
        z.object({});
}

/** @internal */
export namespace PostLeadsLeadsContacts$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<PostLeadsLeadsContacts, z.ZodTypeDef, Inbound> = z.object(
        {}
    );

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostLeadsLeadsContacts> =
        z.object({});
}

/** @internal */
export namespace PostLeadsLeadsOwner$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<PostLeadsLeadsOwner, z.ZodTypeDef, Inbound> = z.object(
        {}
    );

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostLeadsLeadsOwner> = z.object(
        {}
    );
}

/** @internal */
export namespace PostLeadsLeadsResponseAttachments$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<
        PostLeadsLeadsResponseAttachments,
        z.ZodTypeDef,
        Inbound
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PostLeadsLeadsResponseAttachments
    > = z.object({});
}

/** @internal */
export namespace PostLeadsLeadsResponse200ApplicationJSONCustomFields$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<
        PostLeadsLeadsResponse200ApplicationJSONCustomFields,
        z.ZodTypeDef,
        Inbound
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PostLeadsLeadsResponse200ApplicationJSONCustomFields
    > = z.object({});
}

/** @internal */
export namespace PostLeadsLeadsOpportunities$ {
    export type Inbound = {
        id?: string | undefined;
        title?: string | undefined;
        description?: string | undefined;
        amount?: number | undefined;
        currency?: string | undefined;
        stage?: string | undefined;
        probability?: number | undefined;
        closeDate?: number | undefined;
        type?: string | undefined;
        nextStep?: string | undefined;
        leadId?: string | undefined;
        leadSource?: string | undefined;
        isClosed?: boolean | undefined;
        isWon?: boolean | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        lostReason?: string | undefined;
        campaign?: PostLeadsLeadsCampaign$.Inbound | undefined;
        account?: PostLeadsLeadsAccount$.Inbound | undefined;
        contacts?: Array<PostLeadsLeadsContacts$.Inbound> | undefined;
        owner?: PostLeadsLeadsOwner$.Inbound | undefined;
        attachments?: Array<PostLeadsLeadsResponseAttachments$.Inbound> | undefined;
        notes?: Array<string> | undefined;
        customFields?:
            | Array<PostLeadsLeadsResponse200ApplicationJSONCustomFields$.Inbound>
            | undefined;
    };

    export const inboundSchema: z.ZodType<PostLeadsLeadsOpportunities, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            title: z.string().optional(),
            description: z.string().optional(),
            amount: z.number().optional(),
            currency: z.string().optional(),
            stage: z.string().optional(),
            probability: z.number().optional(),
            closeDate: z.number().optional(),
            type: z.string().optional(),
            nextStep: z.string().optional(),
            leadId: z.string().optional(),
            leadSource: z.string().optional(),
            isClosed: z.boolean().optional(),
            isWon: z.boolean().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            lostReason: z.string().optional(),
            campaign: z.lazy(() => PostLeadsLeadsCampaign$.inboundSchema).optional(),
            account: z.lazy(() => PostLeadsLeadsAccount$.inboundSchema).optional(),
            contacts: z.array(z.lazy(() => PostLeadsLeadsContacts$.inboundSchema)).optional(),
            owner: z.lazy(() => PostLeadsLeadsOwner$.inboundSchema).optional(),
            attachments: z
                .array(z.lazy(() => PostLeadsLeadsResponseAttachments$.inboundSchema))
                .optional(),
            notes: z.array(z.string()).optional(),
            customFields: z
                .array(
                    z.lazy(
                        () => PostLeadsLeadsResponse200ApplicationJSONCustomFields$.inboundSchema
                    )
                )
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.amount === undefined ? null : { amount: v.amount }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.stage === undefined ? null : { stage: v.stage }),
                ...(v.probability === undefined ? null : { probability: v.probability }),
                ...(v.closeDate === undefined ? null : { closeDate: v.closeDate }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.nextStep === undefined ? null : { nextStep: v.nextStep }),
                ...(v.leadId === undefined ? null : { leadId: v.leadId }),
                ...(v.leadSource === undefined ? null : { leadSource: v.leadSource }),
                ...(v.isClosed === undefined ? null : { isClosed: v.isClosed }),
                ...(v.isWon === undefined ? null : { isWon: v.isWon }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.lostReason === undefined ? null : { lostReason: v.lostReason }),
                ...(v.campaign === undefined ? null : { campaign: v.campaign }),
                ...(v.account === undefined ? null : { account: v.account }),
                ...(v.contacts === undefined ? null : { contacts: v.contacts }),
                ...(v.owner === undefined ? null : { owner: v.owner }),
                ...(v.attachments === undefined ? null : { attachments: v.attachments }),
                ...(v.notes === undefined ? null : { notes: v.notes }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        title?: string | undefined;
        description?: string | undefined;
        amount?: number | undefined;
        currency?: string | undefined;
        stage?: string | undefined;
        probability?: number | undefined;
        closeDate?: number | undefined;
        type?: string | undefined;
        nextStep?: string | undefined;
        leadId?: string | undefined;
        leadSource?: string | undefined;
        isClosed?: boolean | undefined;
        isWon?: boolean | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        lostReason?: string | undefined;
        campaign?: PostLeadsLeadsCampaign$.Outbound | undefined;
        account?: PostLeadsLeadsAccount$.Outbound | undefined;
        contacts?: Array<PostLeadsLeadsContacts$.Outbound> | undefined;
        owner?: PostLeadsLeadsOwner$.Outbound | undefined;
        attachments?: Array<PostLeadsLeadsResponseAttachments$.Outbound> | undefined;
        notes?: Array<string> | undefined;
        customFields?:
            | Array<PostLeadsLeadsResponse200ApplicationJSONCustomFields$.Outbound>
            | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostLeadsLeadsOpportunities> = z
        .object({
            id: z.string().optional(),
            title: z.string().optional(),
            description: z.string().optional(),
            amount: z.number().optional(),
            currency: z.string().optional(),
            stage: z.string().optional(),
            probability: z.number().optional(),
            closeDate: z.number().optional(),
            type: z.string().optional(),
            nextStep: z.string().optional(),
            leadId: z.string().optional(),
            leadSource: z.string().optional(),
            isClosed: z.boolean().optional(),
            isWon: z.boolean().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            lostReason: z.string().optional(),
            campaign: z.lazy(() => PostLeadsLeadsCampaign$.outboundSchema).optional(),
            account: z.lazy(() => PostLeadsLeadsAccount$.outboundSchema).optional(),
            contacts: z.array(z.lazy(() => PostLeadsLeadsContacts$.outboundSchema)).optional(),
            owner: z.lazy(() => PostLeadsLeadsOwner$.outboundSchema).optional(),
            attachments: z
                .array(z.lazy(() => PostLeadsLeadsResponseAttachments$.outboundSchema))
                .optional(),
            notes: z.array(z.string()).optional(),
            customFields: z
                .array(
                    z.lazy(
                        () => PostLeadsLeadsResponse200ApplicationJSONCustomFields$.outboundSchema
                    )
                )
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.amount === undefined ? null : { amount: v.amount }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.stage === undefined ? null : { stage: v.stage }),
                ...(v.probability === undefined ? null : { probability: v.probability }),
                ...(v.closeDate === undefined ? null : { closeDate: v.closeDate }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.nextStep === undefined ? null : { nextStep: v.nextStep }),
                ...(v.leadId === undefined ? null : { leadId: v.leadId }),
                ...(v.leadSource === undefined ? null : { leadSource: v.leadSource }),
                ...(v.isClosed === undefined ? null : { isClosed: v.isClosed }),
                ...(v.isWon === undefined ? null : { isWon: v.isWon }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.lostReason === undefined ? null : { lostReason: v.lostReason }),
                ...(v.campaign === undefined ? null : { campaign: v.campaign }),
                ...(v.account === undefined ? null : { account: v.account }),
                ...(v.contacts === undefined ? null : { contacts: v.contacts }),
                ...(v.owner === undefined ? null : { owner: v.owner }),
                ...(v.attachments === undefined ? null : { attachments: v.attachments }),
                ...(v.notes === undefined ? null : { notes: v.notes }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
            };
        });
}

/** @internal */
export const PostLeadsLeadsResponseType$ = z.nativeEnum(PostLeadsLeadsResponseType);

/** @internal */
export namespace PostLeadsLeadsEmails$ {
    export type Inbound = {
        email?: string | undefined;
        type?: PostLeadsLeadsResponseType | undefined;
    };

    export const inboundSchema: z.ZodType<PostLeadsLeadsEmails, z.ZodTypeDef, Inbound> = z
        .object({
            email: z.string().optional(),
            type: PostLeadsLeadsResponseType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });

    export type Outbound = {
        email?: string | undefined;
        type?: PostLeadsLeadsResponseType | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostLeadsLeadsEmails> = z
        .object({
            email: z.string().optional(),
            type: PostLeadsLeadsResponseType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });
}

/** @internal */
export const PostLeadsLeadsResponse200Type$ = z.nativeEnum(PostLeadsLeadsResponse200Type);

/** @internal */
export namespace PostLeadsLeadsPhones$ {
    export type Inbound = {
        phone?: string | undefined;
        country?: string | undefined;
        countryCode?: string | undefined;
        type?: PostLeadsLeadsResponse200Type | undefined;
    };

    export const inboundSchema: z.ZodType<PostLeadsLeadsPhones, z.ZodTypeDef, Inbound> = z
        .object({
            phone: z.string().optional(),
            country: z.string().optional(),
            countryCode: z.string().optional(),
            type: PostLeadsLeadsResponse200Type$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.phone === undefined ? null : { phone: v.phone }),
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.countryCode === undefined ? null : { countryCode: v.countryCode }),
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });

    export type Outbound = {
        phone?: string | undefined;
        country?: string | undefined;
        countryCode?: string | undefined;
        type?: PostLeadsLeadsResponse200Type | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostLeadsLeadsPhones> = z
        .object({
            phone: z.string().optional(),
            country: z.string().optional(),
            countryCode: z.string().optional(),
            type: PostLeadsLeadsResponse200Type$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.phone === undefined ? null : { phone: v.phone }),
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.countryCode === undefined ? null : { countryCode: v.countryCode }),
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });
}

/** @internal */
export namespace PostLeadsLeadsLeadSource$ {
    export type Inbound = {
        sourceId?: string | undefined;
        sourceName?: string | undefined;
        details?: string | undefined;
    };

    export const inboundSchema: z.ZodType<PostLeadsLeadsLeadSource, z.ZodTypeDef, Inbound> = z
        .object({
            sourceId: z.string().optional(),
            sourceName: z.string().optional(),
            details: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.sourceId === undefined ? null : { sourceId: v.sourceId }),
                ...(v.sourceName === undefined ? null : { sourceName: v.sourceName }),
                ...(v.details === undefined ? null : { details: v.details }),
            };
        });

    export type Outbound = {
        sourceId?: string | undefined;
        sourceName?: string | undefined;
        details?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostLeadsLeadsLeadSource> = z
        .object({
            sourceId: z.string().optional(),
            sourceName: z.string().optional(),
            details: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.sourceId === undefined ? null : { sourceId: v.sourceId }),
                ...(v.sourceName === undefined ? null : { sourceName: v.sourceName }),
                ...(v.details === undefined ? null : { details: v.details }),
            };
        });
}

/** @internal */
export const PostLeadsLeadsLeadStatus$ = z.nativeEnum(PostLeadsLeadsLeadStatus);

/** @internal */
export const PostLeadsLeadsResponse200ApplicationJSONType$ = z.nativeEnum(
    PostLeadsLeadsResponse200ApplicationJSONType
);

/** @internal */
export namespace PostLeadsLeadsGeoLocation$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<PostLeadsLeadsGeoLocation, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostLeadsLeadsGeoLocation> =
        z.object({});
}

/** @internal */
export namespace PostLeadsLeadsResponse200CustomFields$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<
        PostLeadsLeadsResponse200CustomFields,
        z.ZodTypeDef,
        Inbound
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PostLeadsLeadsResponse200CustomFields
    > = z.object({});
}

/** @internal */
export namespace PostLeadsLeadsAddresses$ {
    export type Inbound = {
        id?: string | undefined;
        contactId?: string | undefined;
        accountId?: string | undefined;
        firstName?: string | undefined;
        lastName?: string | undefined;
        name?: string | undefined;
        companyName?: string | undefined;
        email?: string | undefined;
        phone?: string | undefined;
        street?: string | undefined;
        addressLine2?: string | undefined;
        city?: string | undefined;
        province?: string | undefined;
        region?: string | undefined;
        postalCode?: string | undefined;
        postalCodeExtension?: string | undefined;
        country?: string | undefined;
        countryCode?: string | undefined;
        type?: PostLeadsLeadsResponse200ApplicationJSONType | undefined;
        geoLocation?: PostLeadsLeadsGeoLocation$.Inbound | undefined;
        customFields?: Array<PostLeadsLeadsResponse200CustomFields$.Inbound> | undefined;
        subdivisionCode?: string | undefined;
    };

    export const inboundSchema: z.ZodType<PostLeadsLeadsAddresses, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            contactId: z.string().optional(),
            accountId: z.string().optional(),
            firstName: z.string().optional(),
            lastName: z.string().optional(),
            name: z.string().optional(),
            companyName: z.string().optional(),
            email: z.string().optional(),
            phone: z.string().optional(),
            street: z.string().optional(),
            addressLine2: z.string().optional(),
            city: z.string().optional(),
            province: z.string().optional(),
            region: z.string().optional(),
            postalCode: z.string().optional(),
            postalCodeExtension: z.string().optional(),
            country: z.string().optional(),
            countryCode: z.string().optional(),
            type: PostLeadsLeadsResponse200ApplicationJSONType$.optional(),
            geoLocation: z.lazy(() => PostLeadsLeadsGeoLocation$.inboundSchema).optional(),
            customFields: z
                .array(z.lazy(() => PostLeadsLeadsResponse200CustomFields$.inboundSchema))
                .optional(),
            subdivisionCode: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.contactId === undefined ? null : { contactId: v.contactId }),
                ...(v.accountId === undefined ? null : { accountId: v.accountId }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.companyName === undefined ? null : { companyName: v.companyName }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.phone === undefined ? null : { phone: v.phone }),
                ...(v.street === undefined ? null : { street: v.street }),
                ...(v.addressLine2 === undefined ? null : { addressLine2: v.addressLine2 }),
                ...(v.city === undefined ? null : { city: v.city }),
                ...(v.province === undefined ? null : { province: v.province }),
                ...(v.region === undefined ? null : { region: v.region }),
                ...(v.postalCode === undefined ? null : { postalCode: v.postalCode }),
                ...(v.postalCodeExtension === undefined
                    ? null
                    : { postalCodeExtension: v.postalCodeExtension }),
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.countryCode === undefined ? null : { countryCode: v.countryCode }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.geoLocation === undefined ? null : { geoLocation: v.geoLocation }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                ...(v.subdivisionCode === undefined
                    ? null
                    : { subdivisionCode: v.subdivisionCode }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        contactId?: string | undefined;
        accountId?: string | undefined;
        firstName?: string | undefined;
        lastName?: string | undefined;
        name?: string | undefined;
        companyName?: string | undefined;
        email?: string | undefined;
        phone?: string | undefined;
        street?: string | undefined;
        addressLine2?: string | undefined;
        city?: string | undefined;
        province?: string | undefined;
        region?: string | undefined;
        postalCode?: string | undefined;
        postalCodeExtension?: string | undefined;
        country?: string | undefined;
        countryCode?: string | undefined;
        type?: PostLeadsLeadsResponse200ApplicationJSONType | undefined;
        geoLocation?: PostLeadsLeadsGeoLocation$.Outbound | undefined;
        customFields?: Array<PostLeadsLeadsResponse200CustomFields$.Outbound> | undefined;
        subdivisionCode?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostLeadsLeadsAddresses> = z
        .object({
            id: z.string().optional(),
            contactId: z.string().optional(),
            accountId: z.string().optional(),
            firstName: z.string().optional(),
            lastName: z.string().optional(),
            name: z.string().optional(),
            companyName: z.string().optional(),
            email: z.string().optional(),
            phone: z.string().optional(),
            street: z.string().optional(),
            addressLine2: z.string().optional(),
            city: z.string().optional(),
            province: z.string().optional(),
            region: z.string().optional(),
            postalCode: z.string().optional(),
            postalCodeExtension: z.string().optional(),
            country: z.string().optional(),
            countryCode: z.string().optional(),
            type: PostLeadsLeadsResponse200ApplicationJSONType$.optional(),
            geoLocation: z.lazy(() => PostLeadsLeadsGeoLocation$.outboundSchema).optional(),
            customFields: z
                .array(z.lazy(() => PostLeadsLeadsResponse200CustomFields$.outboundSchema))
                .optional(),
            subdivisionCode: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.contactId === undefined ? null : { contactId: v.contactId }),
                ...(v.accountId === undefined ? null : { accountId: v.accountId }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.companyName === undefined ? null : { companyName: v.companyName }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.phone === undefined ? null : { phone: v.phone }),
                ...(v.street === undefined ? null : { street: v.street }),
                ...(v.addressLine2 === undefined ? null : { addressLine2: v.addressLine2 }),
                ...(v.city === undefined ? null : { city: v.city }),
                ...(v.province === undefined ? null : { province: v.province }),
                ...(v.region === undefined ? null : { region: v.region }),
                ...(v.postalCode === undefined ? null : { postalCode: v.postalCode }),
                ...(v.postalCodeExtension === undefined
                    ? null
                    : { postalCodeExtension: v.postalCodeExtension }),
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.countryCode === undefined ? null : { countryCode: v.countryCode }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.geoLocation === undefined ? null : { geoLocation: v.geoLocation }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                ...(v.subdivisionCode === undefined
                    ? null
                    : { subdivisionCode: v.subdivisionCode }),
            };
        });
}

/** @internal */
export const PostLeadsLeadsPreferredContactMethod$ = z.nativeEnum(
    PostLeadsLeadsPreferredContactMethod
);

/** @internal */
export const PostLeadsLeadsResponse200ApplicationJSONResponseBodyType$ = z.nativeEnum(
    PostLeadsLeadsResponse200ApplicationJSONResponseBodyType
);

/** @internal */
export namespace PostLeadsLeadsAdditionalInfo$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<PostLeadsLeadsAdditionalInfo, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostLeadsLeadsAdditionalInfo> =
        z.object({});
}

/** @internal */
export namespace PostLeadsLeadsSocialProfiles$ {
    export type Inbound = {
        type?: PostLeadsLeadsResponse200ApplicationJSONResponseBodyType | undefined;
        username?: string | undefined;
        displayName?: string | undefined;
        url?: string | undefined;
        avatarUrl?: string | undefined;
        email?: string | undefined;
        additionalInfo?: PostLeadsLeadsAdditionalInfo$.Inbound | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<PostLeadsLeadsSocialProfiles, z.ZodTypeDef, Inbound> = z
        .object({
            type: PostLeadsLeadsResponse200ApplicationJSONResponseBodyType$.optional(),
            username: z.string().optional(),
            displayName: z.string().optional(),
            url: z.string().optional(),
            avatarUrl: z.string().optional(),
            email: z.string().optional(),
            additionalInfo: z.lazy(() => PostLeadsLeadsAdditionalInfo$.inboundSchema).optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.username === undefined ? null : { username: v.username }),
                ...(v.displayName === undefined ? null : { displayName: v.displayName }),
                ...(v.url === undefined ? null : { url: v.url }),
                ...(v.avatarUrl === undefined ? null : { avatarUrl: v.avatarUrl }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.additionalInfo === undefined ? null : { additionalInfo: v.additionalInfo }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });

    export type Outbound = {
        type?: PostLeadsLeadsResponse200ApplicationJSONResponseBodyType | undefined;
        username?: string | undefined;
        displayName?: string | undefined;
        url?: string | undefined;
        avatarUrl?: string | undefined;
        email?: string | undefined;
        additionalInfo?: PostLeadsLeadsAdditionalInfo$.Outbound | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostLeadsLeadsSocialProfiles> = z
        .object({
            type: PostLeadsLeadsResponse200ApplicationJSONResponseBodyType$.optional(),
            username: z.string().optional(),
            displayName: z.string().optional(),
            url: z.string().optional(),
            avatarUrl: z.string().optional(),
            email: z.string().optional(),
            additionalInfo: z.lazy(() => PostLeadsLeadsAdditionalInfo$.outboundSchema).optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.username === undefined ? null : { username: v.username }),
                ...(v.displayName === undefined ? null : { displayName: v.displayName }),
                ...(v.url === undefined ? null : { url: v.url }),
                ...(v.avatarUrl === undefined ? null : { avatarUrl: v.avatarUrl }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.additionalInfo === undefined ? null : { additionalInfo: v.additionalInfo }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });
}

/** @internal */
export const PostLeadsLeadsFieldType$ = z.nativeEnum(PostLeadsLeadsFieldType);

/** @internal */
export namespace PostLeadsLeadsResponseCustomFields$ {
    export type Inbound = {
        id?: string | undefined;
        fieldName?: string | undefined;
        fieldValue?: string | undefined;
        fieldType?: PostLeadsLeadsFieldType | undefined;
    };

    export const inboundSchema: z.ZodType<
        PostLeadsLeadsResponseCustomFields,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            id: z.string().optional(),
            fieldName: z.string().optional(),
            fieldValue: z.string().optional(),
            fieldType: PostLeadsLeadsFieldType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fieldName === undefined ? null : { fieldName: v.fieldName }),
                ...(v.fieldValue === undefined ? null : { fieldValue: v.fieldValue }),
                ...(v.fieldType === undefined ? null : { fieldType: v.fieldType }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        fieldName?: string | undefined;
        fieldValue?: string | undefined;
        fieldType?: PostLeadsLeadsFieldType | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PostLeadsLeadsResponseCustomFields
    > = z
        .object({
            id: z.string().optional(),
            fieldName: z.string().optional(),
            fieldValue: z.string().optional(),
            fieldType: PostLeadsLeadsFieldType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fieldName === undefined ? null : { fieldName: v.fieldName }),
                ...(v.fieldValue === undefined ? null : { fieldValue: v.fieldValue }),
                ...(v.fieldType === undefined ? null : { fieldType: v.fieldType }),
            };
        });
}

/** @internal */
export const PostLeadsLeadsPriority$ = z.nativeEnum(PostLeadsLeadsPriority);

/** @internal */
export namespace PostLeadsLeadsAuthor$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<PostLeadsLeadsAuthor, z.ZodTypeDef, Inbound> = z.object(
        {}
    );

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostLeadsLeadsAuthor> = z.object(
        {}
    );
}

/** @internal */
export namespace PostLeadsLeadsResponse200Attachments$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<
        PostLeadsLeadsResponse200Attachments,
        z.ZodTypeDef,
        Inbound
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PostLeadsLeadsResponse200Attachments
    > = z.object({});
}

/** @internal */
export namespace PostLeadsLeadsSharedWith$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<PostLeadsLeadsSharedWith, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostLeadsLeadsSharedWith> =
        z.object({});
}

/** @internal */
export const PostLeadsLeadsVisibility$ = z.nativeEnum(PostLeadsLeadsVisibility);

/** @internal */
export const PostLeadsLeadsStatus$ = z.nativeEnum(PostLeadsLeadsStatus);

/** @internal */
export namespace PostLeadsLeadsNotes$ {
    export type Inbound = {
        id?: string | undefined;
        title?: string | undefined;
        content?: string | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        lastAccessed?: number | undefined;
        reminder?: number | undefined;
        color?: string | undefined;
        priority?: PostLeadsLeadsPriority | undefined;
        author?: PostLeadsLeadsAuthor$.Inbound | undefined;
        tags?: Array<string> | undefined;
        attachments?: Array<PostLeadsLeadsResponse200Attachments$.Inbound> | undefined;
        sharedWith?: Array<PostLeadsLeadsSharedWith$.Inbound> | undefined;
        visibility?: PostLeadsLeadsVisibility | undefined;
        status?: PostLeadsLeadsStatus | undefined;
        metadata?: Array<string> | undefined;
    };

    export const inboundSchema: z.ZodType<PostLeadsLeadsNotes, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            title: z.string().optional(),
            content: z.string().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            lastAccessed: z.number().optional(),
            reminder: z.number().optional(),
            color: z.string().optional(),
            priority: PostLeadsLeadsPriority$.optional(),
            author: z.lazy(() => PostLeadsLeadsAuthor$.inboundSchema).optional(),
            tags: z.array(z.string()).optional(),
            attachments: z
                .array(z.lazy(() => PostLeadsLeadsResponse200Attachments$.inboundSchema))
                .optional(),
            sharedWith: z.array(z.lazy(() => PostLeadsLeadsSharedWith$.inboundSchema)).optional(),
            visibility: PostLeadsLeadsVisibility$.optional(),
            status: PostLeadsLeadsStatus$.optional(),
            metadata: z.array(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.content === undefined ? null : { content: v.content }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.lastAccessed === undefined ? null : { lastAccessed: v.lastAccessed }),
                ...(v.reminder === undefined ? null : { reminder: v.reminder }),
                ...(v.color === undefined ? null : { color: v.color }),
                ...(v.priority === undefined ? null : { priority: v.priority }),
                ...(v.author === undefined ? null : { author: v.author }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
                ...(v.attachments === undefined ? null : { attachments: v.attachments }),
                ...(v.sharedWith === undefined ? null : { sharedWith: v.sharedWith }),
                ...(v.visibility === undefined ? null : { visibility: v.visibility }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        title?: string | undefined;
        content?: string | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        lastAccessed?: number | undefined;
        reminder?: number | undefined;
        color?: string | undefined;
        priority?: PostLeadsLeadsPriority | undefined;
        author?: PostLeadsLeadsAuthor$.Outbound | undefined;
        tags?: Array<string> | undefined;
        attachments?: Array<PostLeadsLeadsResponse200Attachments$.Outbound> | undefined;
        sharedWith?: Array<PostLeadsLeadsSharedWith$.Outbound> | undefined;
        visibility?: PostLeadsLeadsVisibility | undefined;
        status?: PostLeadsLeadsStatus | undefined;
        metadata?: Array<string> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostLeadsLeadsNotes> = z
        .object({
            id: z.string().optional(),
            title: z.string().optional(),
            content: z.string().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            lastAccessed: z.number().optional(),
            reminder: z.number().optional(),
            color: z.string().optional(),
            priority: PostLeadsLeadsPriority$.optional(),
            author: z.lazy(() => PostLeadsLeadsAuthor$.outboundSchema).optional(),
            tags: z.array(z.string()).optional(),
            attachments: z
                .array(z.lazy(() => PostLeadsLeadsResponse200Attachments$.outboundSchema))
                .optional(),
            sharedWith: z.array(z.lazy(() => PostLeadsLeadsSharedWith$.outboundSchema)).optional(),
            visibility: PostLeadsLeadsVisibility$.optional(),
            status: PostLeadsLeadsStatus$.optional(),
            metadata: z.array(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.content === undefined ? null : { content: v.content }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.lastAccessed === undefined ? null : { lastAccessed: v.lastAccessed }),
                ...(v.reminder === undefined ? null : { reminder: v.reminder }),
                ...(v.color === undefined ? null : { color: v.color }),
                ...(v.priority === undefined ? null : { priority: v.priority }),
                ...(v.author === undefined ? null : { author: v.author }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
                ...(v.attachments === undefined ? null : { attachments: v.attachments }),
                ...(v.sharedWith === undefined ? null : { sharedWith: v.sharedWith }),
                ...(v.visibility === undefined ? null : { visibility: v.visibility }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
            };
        });
}

/** @internal */
export namespace PostLeadsUnified$ {
    export type Inbound = {
        id?: string | undefined;
        name?: string | undefined;
        firstName?: string | undefined;
        middleName?: string | undefined;
        lastName?: string | undefined;
        opportunities?: Array<PostLeadsLeadsOpportunities$.Inbound> | undefined;
        defaultEmail?: string | undefined;
        emails?: Array<PostLeadsLeadsEmails$.Inbound> | undefined;
        defaultPhone?: string | undefined;
        phones?: Array<PostLeadsLeadsPhones$.Inbound> | undefined;
        companyName?: string | undefined;
        jobTitle?: string | undefined;
        website?: string | undefined;
        leadSource?: PostLeadsLeadsLeadSource$.Inbound | undefined;
        leadStatus?: PostLeadsLeadsLeadStatus | undefined;
        industry?: string | undefined;
        numberOfEmployees?: number | undefined;
        annualRevenue?: number | undefined;
        addresses?: Array<PostLeadsLeadsAddresses$.Inbound> | undefined;
        createdAt?: string | undefined;
        updatedAt?: string | undefined;
        preferredContactMethod?: PostLeadsLeadsPreferredContactMethod | undefined;
        socialProfiles?: Array<PostLeadsLeadsSocialProfiles$.Inbound> | undefined;
        customFields?: Array<PostLeadsLeadsResponseCustomFields$.Inbound> | undefined;
        notes?: Array<PostLeadsLeadsNotes$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<PostLeadsUnified, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            name: z.string().optional(),
            firstName: z.string().optional(),
            middleName: z.string().optional(),
            lastName: z.string().optional(),
            opportunities: z
                .array(z.lazy(() => PostLeadsLeadsOpportunities$.inboundSchema))
                .optional(),
            defaultEmail: z.string().optional(),
            emails: z.array(z.lazy(() => PostLeadsLeadsEmails$.inboundSchema)).optional(),
            defaultPhone: z.string().optional(),
            phones: z.array(z.lazy(() => PostLeadsLeadsPhones$.inboundSchema)).optional(),
            companyName: z.string().optional(),
            jobTitle: z.string().optional(),
            website: z.string().optional(),
            leadSource: z.lazy(() => PostLeadsLeadsLeadSource$.inboundSchema).optional(),
            leadStatus: PostLeadsLeadsLeadStatus$.optional(),
            industry: z.string().optional(),
            numberOfEmployees: z.number().optional(),
            annualRevenue: z.number().optional(),
            addresses: z.array(z.lazy(() => PostLeadsLeadsAddresses$.inboundSchema)).optional(),
            createdAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            updatedAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            preferredContactMethod: PostLeadsLeadsPreferredContactMethod$.optional(),
            socialProfiles: z
                .array(z.lazy(() => PostLeadsLeadsSocialProfiles$.inboundSchema))
                .optional(),
            customFields: z
                .array(z.lazy(() => PostLeadsLeadsResponseCustomFields$.inboundSchema))
                .optional(),
            notes: z.array(z.lazy(() => PostLeadsLeadsNotes$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.middleName === undefined ? null : { middleName: v.middleName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.opportunities === undefined ? null : { opportunities: v.opportunities }),
                ...(v.defaultEmail === undefined ? null : { defaultEmail: v.defaultEmail }),
                ...(v.emails === undefined ? null : { emails: v.emails }),
                ...(v.defaultPhone === undefined ? null : { defaultPhone: v.defaultPhone }),
                ...(v.phones === undefined ? null : { phones: v.phones }),
                ...(v.companyName === undefined ? null : { companyName: v.companyName }),
                ...(v.jobTitle === undefined ? null : { jobTitle: v.jobTitle }),
                ...(v.website === undefined ? null : { website: v.website }),
                ...(v.leadSource === undefined ? null : { leadSource: v.leadSource }),
                ...(v.leadStatus === undefined ? null : { leadStatus: v.leadStatus }),
                ...(v.industry === undefined ? null : { industry: v.industry }),
                ...(v.numberOfEmployees === undefined
                    ? null
                    : { numberOfEmployees: v.numberOfEmployees }),
                ...(v.annualRevenue === undefined ? null : { annualRevenue: v.annualRevenue }),
                ...(v.addresses === undefined ? null : { addresses: v.addresses }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.preferredContactMethod === undefined
                    ? null
                    : { preferredContactMethod: v.preferredContactMethod }),
                ...(v.socialProfiles === undefined ? null : { socialProfiles: v.socialProfiles }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                ...(v.notes === undefined ? null : { notes: v.notes }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        name?: string | undefined;
        firstName?: string | undefined;
        middleName?: string | undefined;
        lastName?: string | undefined;
        opportunities?: Array<PostLeadsLeadsOpportunities$.Outbound> | undefined;
        defaultEmail?: string | undefined;
        emails?: Array<PostLeadsLeadsEmails$.Outbound> | undefined;
        defaultPhone?: string | undefined;
        phones?: Array<PostLeadsLeadsPhones$.Outbound> | undefined;
        companyName?: string | undefined;
        jobTitle?: string | undefined;
        website?: string | undefined;
        leadSource?: PostLeadsLeadsLeadSource$.Outbound | undefined;
        leadStatus?: PostLeadsLeadsLeadStatus | undefined;
        industry?: string | undefined;
        numberOfEmployees?: number | undefined;
        annualRevenue?: number | undefined;
        addresses?: Array<PostLeadsLeadsAddresses$.Outbound> | undefined;
        createdAt?: string | undefined;
        updatedAt?: string | undefined;
        preferredContactMethod?: PostLeadsLeadsPreferredContactMethod | undefined;
        socialProfiles?: Array<PostLeadsLeadsSocialProfiles$.Outbound> | undefined;
        customFields?: Array<PostLeadsLeadsResponseCustomFields$.Outbound> | undefined;
        notes?: Array<PostLeadsLeadsNotes$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostLeadsUnified> = z
        .object({
            id: z.string().optional(),
            name: z.string().optional(),
            firstName: z.string().optional(),
            middleName: z.string().optional(),
            lastName: z.string().optional(),
            opportunities: z
                .array(z.lazy(() => PostLeadsLeadsOpportunities$.outboundSchema))
                .optional(),
            defaultEmail: z.string().optional(),
            emails: z.array(z.lazy(() => PostLeadsLeadsEmails$.outboundSchema)).optional(),
            defaultPhone: z.string().optional(),
            phones: z.array(z.lazy(() => PostLeadsLeadsPhones$.outboundSchema)).optional(),
            companyName: z.string().optional(),
            jobTitle: z.string().optional(),
            website: z.string().optional(),
            leadSource: z.lazy(() => PostLeadsLeadsLeadSource$.outboundSchema).optional(),
            leadStatus: PostLeadsLeadsLeadStatus$.optional(),
            industry: z.string().optional(),
            numberOfEmployees: z.number().optional(),
            annualRevenue: z.number().optional(),
            addresses: z.array(z.lazy(() => PostLeadsLeadsAddresses$.outboundSchema)).optional(),
            createdAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            updatedAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            preferredContactMethod: PostLeadsLeadsPreferredContactMethod$.optional(),
            socialProfiles: z
                .array(z.lazy(() => PostLeadsLeadsSocialProfiles$.outboundSchema))
                .optional(),
            customFields: z
                .array(z.lazy(() => PostLeadsLeadsResponseCustomFields$.outboundSchema))
                .optional(),
            notes: z.array(z.lazy(() => PostLeadsLeadsNotes$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.middleName === undefined ? null : { middleName: v.middleName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.opportunities === undefined ? null : { opportunities: v.opportunities }),
                ...(v.defaultEmail === undefined ? null : { defaultEmail: v.defaultEmail }),
                ...(v.emails === undefined ? null : { emails: v.emails }),
                ...(v.defaultPhone === undefined ? null : { defaultPhone: v.defaultPhone }),
                ...(v.phones === undefined ? null : { phones: v.phones }),
                ...(v.companyName === undefined ? null : { companyName: v.companyName }),
                ...(v.jobTitle === undefined ? null : { jobTitle: v.jobTitle }),
                ...(v.website === undefined ? null : { website: v.website }),
                ...(v.leadSource === undefined ? null : { leadSource: v.leadSource }),
                ...(v.leadStatus === undefined ? null : { leadStatus: v.leadStatus }),
                ...(v.industry === undefined ? null : { industry: v.industry }),
                ...(v.numberOfEmployees === undefined
                    ? null
                    : { numberOfEmployees: v.numberOfEmployees }),
                ...(v.annualRevenue === undefined ? null : { annualRevenue: v.annualRevenue }),
                ...(v.addresses === undefined ? null : { addresses: v.addresses }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.preferredContactMethod === undefined
                    ? null
                    : { preferredContactMethod: v.preferredContactMethod }),
                ...(v.socialProfiles === undefined ? null : { socialProfiles: v.socialProfiles }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                ...(v.notes === undefined ? null : { notes: v.notes }),
            };
        });
}

/** @internal */
export namespace PostLeadsPassthrough$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<PostLeadsPassthrough, z.ZodTypeDef, Inbound> = z.object(
        {}
    );

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostLeadsPassthrough> = z.object(
        {}
    );
}

/** @internal */
export namespace PostLeadsCache$ {
    export type Inbound = {
        hit?: boolean | undefined;
        ttl?: number | undefined;
        key?: string | undefined;
    };

    export const inboundSchema: z.ZodType<PostLeadsCache, z.ZodTypeDef, Inbound> = z
        .object({
            hit: z.boolean().optional(),
            ttl: z.number().int().optional(),
            key: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.hit === undefined ? null : { hit: v.hit }),
                ...(v.ttl === undefined ? null : { ttl: v.ttl }),
                ...(v.key === undefined ? null : { key: v.key }),
            };
        });

    export type Outbound = {
        hit?: boolean | undefined;
        ttl?: number | undefined;
        key?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostLeadsCache> = z
        .object({
            hit: z.boolean().optional(),
            ttl: z.number().int().optional(),
            key: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.hit === undefined ? null : { hit: v.hit }),
                ...(v.ttl === undefined ? null : { ttl: v.ttl }),
                ...(v.key === undefined ? null : { key: v.key }),
            };
        });
}

/** @internal */
export namespace PostLeadsMeta$ {
    export type Inbound = {
        timestamp?: number | undefined;
        latency?: number | undefined;
        platformRateLimitRemaining?: number | undefined;
        rateLimitRemaining?: number | undefined;
        cache?: PostLeadsCache$.Inbound | undefined;
        transactionKey?: string | undefined;
        txn?: string | undefined;
        platform?: string | undefined;
        platformVersion?: string | undefined;
        connectionDefinitionKey?: string | undefined;
        action?: string | undefined;
        commonModel?: string | undefined;
        commonModelVersion?: string | undefined;
        connectionKey?: string | undefined;
        hash?: string | undefined;
        heartbeats?: Array<string> | undefined;
        totalTransactions?: number | undefined;
    };

    export const inboundSchema: z.ZodType<PostLeadsMeta, z.ZodTypeDef, Inbound> = z
        .object({
            timestamp: z.number().int().optional(),
            latency: z.number().int().optional(),
            platformRateLimitRemaining: z.number().int().optional(),
            rateLimitRemaining: z.number().int().optional(),
            cache: z.lazy(() => PostLeadsCache$.inboundSchema).optional(),
            transactionKey: z.string().optional(),
            txn: z.string().optional(),
            platform: z.string().optional(),
            platformVersion: z.string().optional(),
            connectionDefinitionKey: z.string().optional(),
            action: z.string().optional(),
            commonModel: z.string().optional(),
            commonModelVersion: z.string().optional(),
            connectionKey: z.string().optional(),
            hash: z.string().optional(),
            heartbeats: z.array(z.string()).optional(),
            totalTransactions: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.timestamp === undefined ? null : { timestamp: v.timestamp }),
                ...(v.latency === undefined ? null : { latency: v.latency }),
                ...(v.platformRateLimitRemaining === undefined
                    ? null
                    : { platformRateLimitRemaining: v.platformRateLimitRemaining }),
                ...(v.rateLimitRemaining === undefined
                    ? null
                    : { rateLimitRemaining: v.rateLimitRemaining }),
                ...(v.cache === undefined ? null : { cache: v.cache }),
                ...(v.transactionKey === undefined ? null : { transactionKey: v.transactionKey }),
                ...(v.txn === undefined ? null : { txn: v.txn }),
                ...(v.platform === undefined ? null : { platform: v.platform }),
                ...(v.platformVersion === undefined
                    ? null
                    : { platformVersion: v.platformVersion }),
                ...(v.connectionDefinitionKey === undefined
                    ? null
                    : { connectionDefinitionKey: v.connectionDefinitionKey }),
                ...(v.action === undefined ? null : { action: v.action }),
                ...(v.commonModel === undefined ? null : { commonModel: v.commonModel }),
                ...(v.commonModelVersion === undefined
                    ? null
                    : { commonModelVersion: v.commonModelVersion }),
                ...(v.connectionKey === undefined ? null : { connectionKey: v.connectionKey }),
                ...(v.hash === undefined ? null : { hash: v.hash }),
                ...(v.heartbeats === undefined ? null : { heartbeats: v.heartbeats }),
                ...(v.totalTransactions === undefined
                    ? null
                    : { totalTransactions: v.totalTransactions }),
            };
        });

    export type Outbound = {
        timestamp?: number | undefined;
        latency?: number | undefined;
        platformRateLimitRemaining?: number | undefined;
        rateLimitRemaining?: number | undefined;
        cache?: PostLeadsCache$.Outbound | undefined;
        transactionKey?: string | undefined;
        txn?: string | undefined;
        platform?: string | undefined;
        platformVersion?: string | undefined;
        connectionDefinitionKey?: string | undefined;
        action?: string | undefined;
        commonModel?: string | undefined;
        commonModelVersion?: string | undefined;
        connectionKey?: string | undefined;
        hash?: string | undefined;
        heartbeats?: Array<string> | undefined;
        totalTransactions?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostLeadsMeta> = z
        .object({
            timestamp: z.number().int().optional(),
            latency: z.number().int().optional(),
            platformRateLimitRemaining: z.number().int().optional(),
            rateLimitRemaining: z.number().int().optional(),
            cache: z.lazy(() => PostLeadsCache$.outboundSchema).optional(),
            transactionKey: z.string().optional(),
            txn: z.string().optional(),
            platform: z.string().optional(),
            platformVersion: z.string().optional(),
            connectionDefinitionKey: z.string().optional(),
            action: z.string().optional(),
            commonModel: z.string().optional(),
            commonModelVersion: z.string().optional(),
            connectionKey: z.string().optional(),
            hash: z.string().optional(),
            heartbeats: z.array(z.string()).optional(),
            totalTransactions: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.timestamp === undefined ? null : { timestamp: v.timestamp }),
                ...(v.latency === undefined ? null : { latency: v.latency }),
                ...(v.platformRateLimitRemaining === undefined
                    ? null
                    : { platformRateLimitRemaining: v.platformRateLimitRemaining }),
                ...(v.rateLimitRemaining === undefined
                    ? null
                    : { rateLimitRemaining: v.rateLimitRemaining }),
                ...(v.cache === undefined ? null : { cache: v.cache }),
                ...(v.transactionKey === undefined ? null : { transactionKey: v.transactionKey }),
                ...(v.txn === undefined ? null : { txn: v.txn }),
                ...(v.platform === undefined ? null : { platform: v.platform }),
                ...(v.platformVersion === undefined
                    ? null
                    : { platformVersion: v.platformVersion }),
                ...(v.connectionDefinitionKey === undefined
                    ? null
                    : { connectionDefinitionKey: v.connectionDefinitionKey }),
                ...(v.action === undefined ? null : { action: v.action }),
                ...(v.commonModel === undefined ? null : { commonModel: v.commonModel }),
                ...(v.commonModelVersion === undefined
                    ? null
                    : { commonModelVersion: v.commonModelVersion }),
                ...(v.connectionKey === undefined ? null : { connectionKey: v.connectionKey }),
                ...(v.hash === undefined ? null : { hash: v.hash }),
                ...(v.heartbeats === undefined ? null : { heartbeats: v.heartbeats }),
                ...(v.totalTransactions === undefined
                    ? null
                    : { totalTransactions: v.totalTransactions }),
            };
        });
}

/** @internal */
export namespace PostLeadsResponseBody$ {
    export type Inbound = {
        status?: string | undefined;
        statusCode?: PostLeadsStatusCode | undefined;
        unified?: PostLeadsUnified$.Inbound | undefined;
        passthrough?: PostLeadsPassthrough$.Inbound | undefined;
        meta?: PostLeadsMeta$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<PostLeadsResponseBody, z.ZodTypeDef, Inbound> = z
        .object({
            status: z.string().optional(),
            statusCode: PostLeadsStatusCode$.optional(),
            unified: z.lazy(() => PostLeadsUnified$.inboundSchema).optional(),
            passthrough: z.lazy(() => PostLeadsPassthrough$.inboundSchema).optional(),
            meta: z.lazy(() => PostLeadsMeta$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.statusCode === undefined ? null : { statusCode: v.statusCode }),
                ...(v.unified === undefined ? null : { unified: v.unified }),
                ...(v.passthrough === undefined ? null : { passthrough: v.passthrough }),
                ...(v.meta === undefined ? null : { meta: v.meta }),
            };
        });

    export type Outbound = {
        status?: string | undefined;
        statusCode?: PostLeadsStatusCode | undefined;
        unified?: PostLeadsUnified$.Outbound | undefined;
        passthrough?: PostLeadsPassthrough$.Outbound | undefined;
        meta?: PostLeadsMeta$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostLeadsResponseBody> = z
        .object({
            status: z.string().optional(),
            statusCode: PostLeadsStatusCode$.optional(),
            unified: z.lazy(() => PostLeadsUnified$.outboundSchema).optional(),
            passthrough: z.lazy(() => PostLeadsPassthrough$.outboundSchema).optional(),
            meta: z.lazy(() => PostLeadsMeta$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.statusCode === undefined ? null : { statusCode: v.statusCode }),
                ...(v.unified === undefined ? null : { unified: v.unified }),
                ...(v.passthrough === undefined ? null : { passthrough: v.passthrough }),
                ...(v.meta === undefined ? null : { meta: v.meta }),
            };
        });
}

/** @internal */
export namespace PostLeadsResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        object?: PostLeadsResponseBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<PostLeadsResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => PostLeadsResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: PostLeadsResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostLeadsResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z.lazy(() => PostLeadsResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
