/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export enum PostOrdersStatus {
    Pending = "pending",
    Processing = "processing",
    Confirmed = "confirmed",
    OnHold = "on-hold",
    AwaitingPayment = "awaiting-payment",
    AwaitingPickup = "awaiting-pickup",
    AwaitingShipment = "awaiting-shipment",
    Shipped = "shipped",
    Delivered = "delivered",
    Cancelled = "cancelled",
    PartiallyRefunded = "partially-refunded",
    Refunded = "refunded",
    Returned = "returned",
    Disputed = "disputed",
    Failed = "failed",
    Complete = "complete",
}

export enum PostOrdersPaymentStatus {
    Paid = "paid",
    Pending = "pending",
    Refunded = "refunded",
    PartiallyRefunded = "partially_refunded",
    Failed = "failed",
}

export enum PostOrdersType {
    Home = "home",
    Work = "work",
    Other = "other",
}

export type PostOrdersGeoLocation = {
    latitude?: number | undefined;
    longitude?: number | undefined;
    altitude?: number | undefined;
    accuracy?: number | undefined;
    altitudeAccuracy?: number | undefined;
    heading?: number | undefined;
    speed?: number | undefined;
    timestamp?: number | undefined;
};

export enum PostOrdersFieldType {
    Text = "text",
    Number = "number",
    Date = "date",
    Boolean = "boolean",
    Enum = "enum",
    Json = "json",
    Array = "array",
}

export type PostOrdersCustomFields = {
    id?: string | undefined;
    fieldName?: string | undefined;
    fieldValue?: string | undefined;
    fieldType?: PostOrdersFieldType | undefined;
};

export type PostOrdersShippingAddress = {
    id?: string | undefined;
    contactId?: string | undefined;
    accountId?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    name?: string | undefined;
    companyName?: string | undefined;
    email?: string | undefined;
    phone?: string | undefined;
    street?: string | undefined;
    addressLine2?: string | undefined;
    city?: string | undefined;
    province?: string | undefined;
    region?: string | undefined;
    postalCode?: string | undefined;
    postalCodeExtension?: string | undefined;
    country?: string | undefined;
    countryCode?: string | undefined;
    type?: PostOrdersType | undefined;
    geoLocation?: PostOrdersGeoLocation | undefined;
    customFields?: Array<PostOrdersCustomFields> | undefined;
    subdivisionCode?: string | undefined;
};

export enum PostOrdersOrdersType {
    Home = "home",
    Work = "work",
    Other = "other",
}

export type PostOrdersOrdersGeoLocation = {
    latitude?: number | undefined;
    longitude?: number | undefined;
    altitude?: number | undefined;
    accuracy?: number | undefined;
    altitudeAccuracy?: number | undefined;
    heading?: number | undefined;
    speed?: number | undefined;
    timestamp?: number | undefined;
};

export enum PostOrdersOrdersFieldType {
    Text = "text",
    Number = "number",
    Date = "date",
    Boolean = "boolean",
    Enum = "enum",
    Json = "json",
    Array = "array",
}

export type PostOrdersOrdersCustomFields = {
    id?: string | undefined;
    fieldName?: string | undefined;
    fieldValue?: string | undefined;
    fieldType?: PostOrdersOrdersFieldType | undefined;
};

export type PostOrdersBillingAddress = {
    id?: string | undefined;
    contactId?: string | undefined;
    accountId?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    name?: string | undefined;
    companyName?: string | undefined;
    email?: string | undefined;
    phone?: string | undefined;
    street?: string | undefined;
    addressLine2?: string | undefined;
    city?: string | undefined;
    province?: string | undefined;
    region?: string | undefined;
    postalCode?: string | undefined;
    postalCodeExtension?: string | undefined;
    country?: string | undefined;
    countryCode?: string | undefined;
    type?: PostOrdersOrdersType | undefined;
    geoLocation?: PostOrdersOrdersGeoLocation | undefined;
    customFields?: Array<PostOrdersOrdersCustomFields> | undefined;
    subdivisionCode?: string | undefined;
};

export type PostOrdersImage = {};

export type PostOrdersTaxLines = {};

export type PostOrdersOptions = {};

export type PostOrdersItems = {
    id?: string | undefined;
    parentId?: string | undefined;
    productId?: string | undefined;
    variantId?: string | undefined;
    quantity?: number | undefined;
    sku?: string | undefined;
    price?: number | undefined;
    currency?: string | undefined;
    linePrice?: number | undefined;
    originalPrice?: number | undefined;
    discountedPrice?: number | undefined;
    title?: string | undefined;
    variantTitle?: string | undefined;
    image?: PostOrdersImage | undefined;
    weight?: number | undefined;
    weightUnit?: string | undefined;
    requiresShipping?: boolean | undefined;
    taxable?: boolean | undefined;
    taxLines?: Array<PostOrdersTaxLines> | undefined;
    options?: Array<PostOrdersOptions> | undefined;
    fulfillableQuantity?: number | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    active?: boolean | undefined;
    deleted?: boolean | undefined;
};

export type PostOrdersRequestBody = {
    id: string;
    customerID: string;
    orderNumber: string;
    status: PostOrdersStatus;
    createdAt: number;
    updatedAt: number;
    total: number;
    subTotal: number;
    tax: number;
    shippingCost: number;
    currency: string;
    paymentStatus: PostOrdersPaymentStatus;
    paymentMethods: Array<string>;
    shippingMethod: string;
    shippingAddress: PostOrdersShippingAddress;
    billingAddress: PostOrdersBillingAddress;
    note: string;
    discounts: Array<number>;
    trackingInfo: string;
    items: Array<PostOrdersItems>;
    tags: Array<string>;
};

export type PostOrdersRequest = {
    /**
     * IntegrationOS API key
     */
    xIntegrationosSecret: string;
    /**
     * The unique identifier of a Connected Account
     */
    xIntegrationosConnectionKey: string;
    requestBody: PostOrdersRequestBody;
};

export enum PostOrdersStatusCode {
    TwoHundred = 200,
    FourHundred = 400,
    FiveHundred = 500,
}

export enum PostOrdersOrdersStatus {
    Pending = "pending",
    Processing = "processing",
    Confirmed = "confirmed",
    OnHold = "on-hold",
    AwaitingPayment = "awaiting-payment",
    AwaitingPickup = "awaiting-pickup",
    AwaitingShipment = "awaiting-shipment",
    Shipped = "shipped",
    Delivered = "delivered",
    Cancelled = "cancelled",
    PartiallyRefunded = "partially-refunded",
    Refunded = "refunded",
    Returned = "returned",
    Disputed = "disputed",
    Failed = "failed",
    Complete = "complete",
}

export enum PostOrdersOrdersPaymentStatus {
    Paid = "paid",
    Pending = "pending",
    Refunded = "refunded",
    PartiallyRefunded = "partially_refunded",
    Failed = "failed",
}

export enum PostOrdersOrdersResponseType {
    Home = "home",
    Work = "work",
    Other = "other",
}

export type PostOrdersOrdersResponseGeoLocation = {
    latitude?: number | undefined;
    longitude?: number | undefined;
    altitude?: number | undefined;
    accuracy?: number | undefined;
    altitudeAccuracy?: number | undefined;
    heading?: number | undefined;
    speed?: number | undefined;
    timestamp?: number | undefined;
};

export enum PostOrdersOrdersResponseFieldType {
    Text = "text",
    Number = "number",
    Date = "date",
    Boolean = "boolean",
    Enum = "enum",
    Json = "json",
    Array = "array",
}

export type PostOrdersOrdersResponseCustomFields = {
    id?: string | undefined;
    fieldName?: string | undefined;
    fieldValue?: string | undefined;
    fieldType?: PostOrdersOrdersResponseFieldType | undefined;
};

export type PostOrdersOrdersShippingAddress = {
    id?: string | undefined;
    contactId?: string | undefined;
    accountId?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    name?: string | undefined;
    companyName?: string | undefined;
    email?: string | undefined;
    phone?: string | undefined;
    street?: string | undefined;
    addressLine2?: string | undefined;
    city?: string | undefined;
    province?: string | undefined;
    region?: string | undefined;
    postalCode?: string | undefined;
    postalCodeExtension?: string | undefined;
    country?: string | undefined;
    countryCode?: string | undefined;
    type?: PostOrdersOrdersResponseType | undefined;
    geoLocation?: PostOrdersOrdersResponseGeoLocation | undefined;
    customFields?: Array<PostOrdersOrdersResponseCustomFields> | undefined;
    subdivisionCode?: string | undefined;
};

export enum PostOrdersOrdersResponse200Type {
    Home = "home",
    Work = "work",
    Other = "other",
}

export type PostOrdersOrdersResponse200GeoLocation = {
    latitude?: number | undefined;
    longitude?: number | undefined;
    altitude?: number | undefined;
    accuracy?: number | undefined;
    altitudeAccuracy?: number | undefined;
    heading?: number | undefined;
    speed?: number | undefined;
    timestamp?: number | undefined;
};

export enum PostOrdersOrdersResponse200FieldType {
    Text = "text",
    Number = "number",
    Date = "date",
    Boolean = "boolean",
    Enum = "enum",
    Json = "json",
    Array = "array",
}

export type PostOrdersOrdersResponse200CustomFields = {
    id?: string | undefined;
    fieldName?: string | undefined;
    fieldValue?: string | undefined;
    fieldType?: PostOrdersOrdersResponse200FieldType | undefined;
};

export type PostOrdersOrdersBillingAddress = {
    id?: string | undefined;
    contactId?: string | undefined;
    accountId?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    name?: string | undefined;
    companyName?: string | undefined;
    email?: string | undefined;
    phone?: string | undefined;
    street?: string | undefined;
    addressLine2?: string | undefined;
    city?: string | undefined;
    province?: string | undefined;
    region?: string | undefined;
    postalCode?: string | undefined;
    postalCodeExtension?: string | undefined;
    country?: string | undefined;
    countryCode?: string | undefined;
    type?: PostOrdersOrdersResponse200Type | undefined;
    geoLocation?: PostOrdersOrdersResponse200GeoLocation | undefined;
    customFields?: Array<PostOrdersOrdersResponse200CustomFields> | undefined;
    subdivisionCode?: string | undefined;
};

export type PostOrdersOrdersImage = {};

export type PostOrdersOrdersTaxLines = {};

export type PostOrdersOrdersOptions = {};

export type PostOrdersOrdersItems = {
    id?: string | undefined;
    parentId?: string | undefined;
    productId?: string | undefined;
    variantId?: string | undefined;
    quantity?: number | undefined;
    sku?: string | undefined;
    price?: number | undefined;
    currency?: string | undefined;
    linePrice?: number | undefined;
    originalPrice?: number | undefined;
    discountedPrice?: number | undefined;
    title?: string | undefined;
    variantTitle?: string | undefined;
    image?: PostOrdersOrdersImage | undefined;
    weight?: number | undefined;
    weightUnit?: string | undefined;
    requiresShipping?: boolean | undefined;
    taxable?: boolean | undefined;
    taxLines?: Array<PostOrdersOrdersTaxLines> | undefined;
    options?: Array<PostOrdersOrdersOptions> | undefined;
    fulfillableQuantity?: number | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    active?: boolean | undefined;
    deleted?: boolean | undefined;
};

export type PostOrdersUnified = {
    id?: string | undefined;
    customerID?: string | undefined;
    orderNumber?: string | undefined;
    status?: PostOrdersOrdersStatus | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    total?: number | undefined;
    subTotal?: number | undefined;
    tax?: number | undefined;
    shippingCost?: number | undefined;
    currency?: string | undefined;
    paymentStatus?: PostOrdersOrdersPaymentStatus | undefined;
    paymentMethods?: Array<string> | undefined;
    shippingMethod?: string | undefined;
    shippingAddress?: PostOrdersOrdersShippingAddress | undefined;
    billingAddress?: PostOrdersOrdersBillingAddress | undefined;
    note?: string | undefined;
    discounts?: Array<number> | undefined;
    trackingInfo?: string | undefined;
    items?: Array<PostOrdersOrdersItems> | undefined;
    tags?: Array<string> | undefined;
};

export type PostOrdersPassthrough = {};

export type PostOrdersCache = {
    hit?: boolean | undefined;
    ttl?: number | undefined;
    key?: string | undefined;
};

export type PostOrdersMeta = {
    timestamp?: number | undefined;
    latency?: number | undefined;
    platformRateLimitRemaining?: number | undefined;
    rateLimitRemaining?: number | undefined;
    cache?: PostOrdersCache | undefined;
    transactionKey?: string | undefined;
    txn?: string | undefined;
    platform?: string | undefined;
    platformVersion?: string | undefined;
    connectionDefinitionKey?: string | undefined;
    action?: string | undefined;
    commonModel?: string | undefined;
    commonModelVersion?: string | undefined;
    connectionKey?: string | undefined;
    hash?: string | undefined;
    heartbeats?: Array<string> | undefined;
    totalTransactions?: number | undefined;
};

/**
 * Successful response
 */
export type PostOrdersResponseBody = {
    status?: string | undefined;
    statusCode?: PostOrdersStatusCode | undefined;
    unified?: PostOrdersUnified | undefined;
    passthrough?: PostOrdersPassthrough | undefined;
    meta?: PostOrdersMeta | undefined;
};

export type PostOrdersResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Successful response
     */
    object?: PostOrdersResponseBody | undefined;
};

/** @internal */
export const PostOrdersStatus$ = z.nativeEnum(PostOrdersStatus);

/** @internal */
export const PostOrdersPaymentStatus$ = z.nativeEnum(PostOrdersPaymentStatus);

/** @internal */
export const PostOrdersType$ = z.nativeEnum(PostOrdersType);

/** @internal */
export namespace PostOrdersGeoLocation$ {
    export type Inbound = {
        latitude?: number | undefined;
        longitude?: number | undefined;
        altitude?: number | undefined;
        accuracy?: number | undefined;
        altitudeAccuracy?: number | undefined;
        heading?: number | undefined;
        speed?: number | undefined;
        timestamp?: number | undefined;
    };

    export const inboundSchema: z.ZodType<PostOrdersGeoLocation, z.ZodTypeDef, Inbound> = z
        .object({
            latitude: z.number().optional(),
            longitude: z.number().optional(),
            altitude: z.number().optional(),
            accuracy: z.number().optional(),
            altitudeAccuracy: z.number().optional(),
            heading: z.number().optional(),
            speed: z.number().optional(),
            timestamp: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.latitude === undefined ? null : { latitude: v.latitude }),
                ...(v.longitude === undefined ? null : { longitude: v.longitude }),
                ...(v.altitude === undefined ? null : { altitude: v.altitude }),
                ...(v.accuracy === undefined ? null : { accuracy: v.accuracy }),
                ...(v.altitudeAccuracy === undefined
                    ? null
                    : { altitudeAccuracy: v.altitudeAccuracy }),
                ...(v.heading === undefined ? null : { heading: v.heading }),
                ...(v.speed === undefined ? null : { speed: v.speed }),
                ...(v.timestamp === undefined ? null : { timestamp: v.timestamp }),
            };
        });

    export type Outbound = {
        latitude?: number | undefined;
        longitude?: number | undefined;
        altitude?: number | undefined;
        accuracy?: number | undefined;
        altitudeAccuracy?: number | undefined;
        heading?: number | undefined;
        speed?: number | undefined;
        timestamp?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostOrdersGeoLocation> = z
        .object({
            latitude: z.number().optional(),
            longitude: z.number().optional(),
            altitude: z.number().optional(),
            accuracy: z.number().optional(),
            altitudeAccuracy: z.number().optional(),
            heading: z.number().optional(),
            speed: z.number().optional(),
            timestamp: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.latitude === undefined ? null : { latitude: v.latitude }),
                ...(v.longitude === undefined ? null : { longitude: v.longitude }),
                ...(v.altitude === undefined ? null : { altitude: v.altitude }),
                ...(v.accuracy === undefined ? null : { accuracy: v.accuracy }),
                ...(v.altitudeAccuracy === undefined
                    ? null
                    : { altitudeAccuracy: v.altitudeAccuracy }),
                ...(v.heading === undefined ? null : { heading: v.heading }),
                ...(v.speed === undefined ? null : { speed: v.speed }),
                ...(v.timestamp === undefined ? null : { timestamp: v.timestamp }),
            };
        });
}

/** @internal */
export const PostOrdersFieldType$ = z.nativeEnum(PostOrdersFieldType);

/** @internal */
export namespace PostOrdersCustomFields$ {
    export type Inbound = {
        id?: string | undefined;
        fieldName?: string | undefined;
        fieldValue?: string | undefined;
        fieldType?: PostOrdersFieldType | undefined;
    };

    export const inboundSchema: z.ZodType<PostOrdersCustomFields, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            fieldName: z.string().optional(),
            fieldValue: z.string().optional(),
            fieldType: PostOrdersFieldType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fieldName === undefined ? null : { fieldName: v.fieldName }),
                ...(v.fieldValue === undefined ? null : { fieldValue: v.fieldValue }),
                ...(v.fieldType === undefined ? null : { fieldType: v.fieldType }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        fieldName?: string | undefined;
        fieldValue?: string | undefined;
        fieldType?: PostOrdersFieldType | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostOrdersCustomFields> = z
        .object({
            id: z.string().optional(),
            fieldName: z.string().optional(),
            fieldValue: z.string().optional(),
            fieldType: PostOrdersFieldType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fieldName === undefined ? null : { fieldName: v.fieldName }),
                ...(v.fieldValue === undefined ? null : { fieldValue: v.fieldValue }),
                ...(v.fieldType === undefined ? null : { fieldType: v.fieldType }),
            };
        });
}

/** @internal */
export namespace PostOrdersShippingAddress$ {
    export type Inbound = {
        id?: string | undefined;
        contactId?: string | undefined;
        accountId?: string | undefined;
        firstName?: string | undefined;
        lastName?: string | undefined;
        name?: string | undefined;
        companyName?: string | undefined;
        email?: string | undefined;
        phone?: string | undefined;
        street?: string | undefined;
        addressLine2?: string | undefined;
        city?: string | undefined;
        province?: string | undefined;
        region?: string | undefined;
        postalCode?: string | undefined;
        postalCodeExtension?: string | undefined;
        country?: string | undefined;
        countryCode?: string | undefined;
        type?: PostOrdersType | undefined;
        geoLocation?: PostOrdersGeoLocation$.Inbound | undefined;
        customFields?: Array<PostOrdersCustomFields$.Inbound> | undefined;
        subdivisionCode?: string | undefined;
    };

    export const inboundSchema: z.ZodType<PostOrdersShippingAddress, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            contactId: z.string().optional(),
            accountId: z.string().optional(),
            firstName: z.string().optional(),
            lastName: z.string().optional(),
            name: z.string().optional(),
            companyName: z.string().optional(),
            email: z.string().optional(),
            phone: z.string().optional(),
            street: z.string().optional(),
            addressLine2: z.string().optional(),
            city: z.string().optional(),
            province: z.string().optional(),
            region: z.string().optional(),
            postalCode: z.string().optional(),
            postalCodeExtension: z.string().optional(),
            country: z.string().optional(),
            countryCode: z.string().optional(),
            type: PostOrdersType$.optional(),
            geoLocation: z.lazy(() => PostOrdersGeoLocation$.inboundSchema).optional(),
            customFields: z.array(z.lazy(() => PostOrdersCustomFields$.inboundSchema)).optional(),
            subdivisionCode: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.contactId === undefined ? null : { contactId: v.contactId }),
                ...(v.accountId === undefined ? null : { accountId: v.accountId }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.companyName === undefined ? null : { companyName: v.companyName }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.phone === undefined ? null : { phone: v.phone }),
                ...(v.street === undefined ? null : { street: v.street }),
                ...(v.addressLine2 === undefined ? null : { addressLine2: v.addressLine2 }),
                ...(v.city === undefined ? null : { city: v.city }),
                ...(v.province === undefined ? null : { province: v.province }),
                ...(v.region === undefined ? null : { region: v.region }),
                ...(v.postalCode === undefined ? null : { postalCode: v.postalCode }),
                ...(v.postalCodeExtension === undefined
                    ? null
                    : { postalCodeExtension: v.postalCodeExtension }),
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.countryCode === undefined ? null : { countryCode: v.countryCode }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.geoLocation === undefined ? null : { geoLocation: v.geoLocation }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                ...(v.subdivisionCode === undefined
                    ? null
                    : { subdivisionCode: v.subdivisionCode }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        contactId?: string | undefined;
        accountId?: string | undefined;
        firstName?: string | undefined;
        lastName?: string | undefined;
        name?: string | undefined;
        companyName?: string | undefined;
        email?: string | undefined;
        phone?: string | undefined;
        street?: string | undefined;
        addressLine2?: string | undefined;
        city?: string | undefined;
        province?: string | undefined;
        region?: string | undefined;
        postalCode?: string | undefined;
        postalCodeExtension?: string | undefined;
        country?: string | undefined;
        countryCode?: string | undefined;
        type?: PostOrdersType | undefined;
        geoLocation?: PostOrdersGeoLocation$.Outbound | undefined;
        customFields?: Array<PostOrdersCustomFields$.Outbound> | undefined;
        subdivisionCode?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostOrdersShippingAddress> = z
        .object({
            id: z.string().optional(),
            contactId: z.string().optional(),
            accountId: z.string().optional(),
            firstName: z.string().optional(),
            lastName: z.string().optional(),
            name: z.string().optional(),
            companyName: z.string().optional(),
            email: z.string().optional(),
            phone: z.string().optional(),
            street: z.string().optional(),
            addressLine2: z.string().optional(),
            city: z.string().optional(),
            province: z.string().optional(),
            region: z.string().optional(),
            postalCode: z.string().optional(),
            postalCodeExtension: z.string().optional(),
            country: z.string().optional(),
            countryCode: z.string().optional(),
            type: PostOrdersType$.optional(),
            geoLocation: z.lazy(() => PostOrdersGeoLocation$.outboundSchema).optional(),
            customFields: z.array(z.lazy(() => PostOrdersCustomFields$.outboundSchema)).optional(),
            subdivisionCode: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.contactId === undefined ? null : { contactId: v.contactId }),
                ...(v.accountId === undefined ? null : { accountId: v.accountId }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.companyName === undefined ? null : { companyName: v.companyName }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.phone === undefined ? null : { phone: v.phone }),
                ...(v.street === undefined ? null : { street: v.street }),
                ...(v.addressLine2 === undefined ? null : { addressLine2: v.addressLine2 }),
                ...(v.city === undefined ? null : { city: v.city }),
                ...(v.province === undefined ? null : { province: v.province }),
                ...(v.region === undefined ? null : { region: v.region }),
                ...(v.postalCode === undefined ? null : { postalCode: v.postalCode }),
                ...(v.postalCodeExtension === undefined
                    ? null
                    : { postalCodeExtension: v.postalCodeExtension }),
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.countryCode === undefined ? null : { countryCode: v.countryCode }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.geoLocation === undefined ? null : { geoLocation: v.geoLocation }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                ...(v.subdivisionCode === undefined
                    ? null
                    : { subdivisionCode: v.subdivisionCode }),
            };
        });
}

/** @internal */
export const PostOrdersOrdersType$ = z.nativeEnum(PostOrdersOrdersType);

/** @internal */
export namespace PostOrdersOrdersGeoLocation$ {
    export type Inbound = {
        latitude?: number | undefined;
        longitude?: number | undefined;
        altitude?: number | undefined;
        accuracy?: number | undefined;
        altitudeAccuracy?: number | undefined;
        heading?: number | undefined;
        speed?: number | undefined;
        timestamp?: number | undefined;
    };

    export const inboundSchema: z.ZodType<PostOrdersOrdersGeoLocation, z.ZodTypeDef, Inbound> = z
        .object({
            latitude: z.number().optional(),
            longitude: z.number().optional(),
            altitude: z.number().optional(),
            accuracy: z.number().optional(),
            altitudeAccuracy: z.number().optional(),
            heading: z.number().optional(),
            speed: z.number().optional(),
            timestamp: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.latitude === undefined ? null : { latitude: v.latitude }),
                ...(v.longitude === undefined ? null : { longitude: v.longitude }),
                ...(v.altitude === undefined ? null : { altitude: v.altitude }),
                ...(v.accuracy === undefined ? null : { accuracy: v.accuracy }),
                ...(v.altitudeAccuracy === undefined
                    ? null
                    : { altitudeAccuracy: v.altitudeAccuracy }),
                ...(v.heading === undefined ? null : { heading: v.heading }),
                ...(v.speed === undefined ? null : { speed: v.speed }),
                ...(v.timestamp === undefined ? null : { timestamp: v.timestamp }),
            };
        });

    export type Outbound = {
        latitude?: number | undefined;
        longitude?: number | undefined;
        altitude?: number | undefined;
        accuracy?: number | undefined;
        altitudeAccuracy?: number | undefined;
        heading?: number | undefined;
        speed?: number | undefined;
        timestamp?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostOrdersOrdersGeoLocation> = z
        .object({
            latitude: z.number().optional(),
            longitude: z.number().optional(),
            altitude: z.number().optional(),
            accuracy: z.number().optional(),
            altitudeAccuracy: z.number().optional(),
            heading: z.number().optional(),
            speed: z.number().optional(),
            timestamp: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.latitude === undefined ? null : { latitude: v.latitude }),
                ...(v.longitude === undefined ? null : { longitude: v.longitude }),
                ...(v.altitude === undefined ? null : { altitude: v.altitude }),
                ...(v.accuracy === undefined ? null : { accuracy: v.accuracy }),
                ...(v.altitudeAccuracy === undefined
                    ? null
                    : { altitudeAccuracy: v.altitudeAccuracy }),
                ...(v.heading === undefined ? null : { heading: v.heading }),
                ...(v.speed === undefined ? null : { speed: v.speed }),
                ...(v.timestamp === undefined ? null : { timestamp: v.timestamp }),
            };
        });
}

/** @internal */
export const PostOrdersOrdersFieldType$ = z.nativeEnum(PostOrdersOrdersFieldType);

/** @internal */
export namespace PostOrdersOrdersCustomFields$ {
    export type Inbound = {
        id?: string | undefined;
        fieldName?: string | undefined;
        fieldValue?: string | undefined;
        fieldType?: PostOrdersOrdersFieldType | undefined;
    };

    export const inboundSchema: z.ZodType<PostOrdersOrdersCustomFields, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            fieldName: z.string().optional(),
            fieldValue: z.string().optional(),
            fieldType: PostOrdersOrdersFieldType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fieldName === undefined ? null : { fieldName: v.fieldName }),
                ...(v.fieldValue === undefined ? null : { fieldValue: v.fieldValue }),
                ...(v.fieldType === undefined ? null : { fieldType: v.fieldType }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        fieldName?: string | undefined;
        fieldValue?: string | undefined;
        fieldType?: PostOrdersOrdersFieldType | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostOrdersOrdersCustomFields> = z
        .object({
            id: z.string().optional(),
            fieldName: z.string().optional(),
            fieldValue: z.string().optional(),
            fieldType: PostOrdersOrdersFieldType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fieldName === undefined ? null : { fieldName: v.fieldName }),
                ...(v.fieldValue === undefined ? null : { fieldValue: v.fieldValue }),
                ...(v.fieldType === undefined ? null : { fieldType: v.fieldType }),
            };
        });
}

/** @internal */
export namespace PostOrdersBillingAddress$ {
    export type Inbound = {
        id?: string | undefined;
        contactId?: string | undefined;
        accountId?: string | undefined;
        firstName?: string | undefined;
        lastName?: string | undefined;
        name?: string | undefined;
        companyName?: string | undefined;
        email?: string | undefined;
        phone?: string | undefined;
        street?: string | undefined;
        addressLine2?: string | undefined;
        city?: string | undefined;
        province?: string | undefined;
        region?: string | undefined;
        postalCode?: string | undefined;
        postalCodeExtension?: string | undefined;
        country?: string | undefined;
        countryCode?: string | undefined;
        type?: PostOrdersOrdersType | undefined;
        geoLocation?: PostOrdersOrdersGeoLocation$.Inbound | undefined;
        customFields?: Array<PostOrdersOrdersCustomFields$.Inbound> | undefined;
        subdivisionCode?: string | undefined;
    };

    export const inboundSchema: z.ZodType<PostOrdersBillingAddress, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            contactId: z.string().optional(),
            accountId: z.string().optional(),
            firstName: z.string().optional(),
            lastName: z.string().optional(),
            name: z.string().optional(),
            companyName: z.string().optional(),
            email: z.string().optional(),
            phone: z.string().optional(),
            street: z.string().optional(),
            addressLine2: z.string().optional(),
            city: z.string().optional(),
            province: z.string().optional(),
            region: z.string().optional(),
            postalCode: z.string().optional(),
            postalCodeExtension: z.string().optional(),
            country: z.string().optional(),
            countryCode: z.string().optional(),
            type: PostOrdersOrdersType$.optional(),
            geoLocation: z.lazy(() => PostOrdersOrdersGeoLocation$.inboundSchema).optional(),
            customFields: z
                .array(z.lazy(() => PostOrdersOrdersCustomFields$.inboundSchema))
                .optional(),
            subdivisionCode: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.contactId === undefined ? null : { contactId: v.contactId }),
                ...(v.accountId === undefined ? null : { accountId: v.accountId }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.companyName === undefined ? null : { companyName: v.companyName }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.phone === undefined ? null : { phone: v.phone }),
                ...(v.street === undefined ? null : { street: v.street }),
                ...(v.addressLine2 === undefined ? null : { addressLine2: v.addressLine2 }),
                ...(v.city === undefined ? null : { city: v.city }),
                ...(v.province === undefined ? null : { province: v.province }),
                ...(v.region === undefined ? null : { region: v.region }),
                ...(v.postalCode === undefined ? null : { postalCode: v.postalCode }),
                ...(v.postalCodeExtension === undefined
                    ? null
                    : { postalCodeExtension: v.postalCodeExtension }),
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.countryCode === undefined ? null : { countryCode: v.countryCode }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.geoLocation === undefined ? null : { geoLocation: v.geoLocation }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                ...(v.subdivisionCode === undefined
                    ? null
                    : { subdivisionCode: v.subdivisionCode }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        contactId?: string | undefined;
        accountId?: string | undefined;
        firstName?: string | undefined;
        lastName?: string | undefined;
        name?: string | undefined;
        companyName?: string | undefined;
        email?: string | undefined;
        phone?: string | undefined;
        street?: string | undefined;
        addressLine2?: string | undefined;
        city?: string | undefined;
        province?: string | undefined;
        region?: string | undefined;
        postalCode?: string | undefined;
        postalCodeExtension?: string | undefined;
        country?: string | undefined;
        countryCode?: string | undefined;
        type?: PostOrdersOrdersType | undefined;
        geoLocation?: PostOrdersOrdersGeoLocation$.Outbound | undefined;
        customFields?: Array<PostOrdersOrdersCustomFields$.Outbound> | undefined;
        subdivisionCode?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostOrdersBillingAddress> = z
        .object({
            id: z.string().optional(),
            contactId: z.string().optional(),
            accountId: z.string().optional(),
            firstName: z.string().optional(),
            lastName: z.string().optional(),
            name: z.string().optional(),
            companyName: z.string().optional(),
            email: z.string().optional(),
            phone: z.string().optional(),
            street: z.string().optional(),
            addressLine2: z.string().optional(),
            city: z.string().optional(),
            province: z.string().optional(),
            region: z.string().optional(),
            postalCode: z.string().optional(),
            postalCodeExtension: z.string().optional(),
            country: z.string().optional(),
            countryCode: z.string().optional(),
            type: PostOrdersOrdersType$.optional(),
            geoLocation: z.lazy(() => PostOrdersOrdersGeoLocation$.outboundSchema).optional(),
            customFields: z
                .array(z.lazy(() => PostOrdersOrdersCustomFields$.outboundSchema))
                .optional(),
            subdivisionCode: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.contactId === undefined ? null : { contactId: v.contactId }),
                ...(v.accountId === undefined ? null : { accountId: v.accountId }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.companyName === undefined ? null : { companyName: v.companyName }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.phone === undefined ? null : { phone: v.phone }),
                ...(v.street === undefined ? null : { street: v.street }),
                ...(v.addressLine2 === undefined ? null : { addressLine2: v.addressLine2 }),
                ...(v.city === undefined ? null : { city: v.city }),
                ...(v.province === undefined ? null : { province: v.province }),
                ...(v.region === undefined ? null : { region: v.region }),
                ...(v.postalCode === undefined ? null : { postalCode: v.postalCode }),
                ...(v.postalCodeExtension === undefined
                    ? null
                    : { postalCodeExtension: v.postalCodeExtension }),
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.countryCode === undefined ? null : { countryCode: v.countryCode }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.geoLocation === undefined ? null : { geoLocation: v.geoLocation }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                ...(v.subdivisionCode === undefined
                    ? null
                    : { subdivisionCode: v.subdivisionCode }),
            };
        });
}

/** @internal */
export namespace PostOrdersImage$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<PostOrdersImage, z.ZodTypeDef, Inbound> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostOrdersImage> = z.object({});
}

/** @internal */
export namespace PostOrdersTaxLines$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<PostOrdersTaxLines, z.ZodTypeDef, Inbound> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostOrdersTaxLines> = z.object(
        {}
    );
}

/** @internal */
export namespace PostOrdersOptions$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<PostOrdersOptions, z.ZodTypeDef, Inbound> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostOrdersOptions> = z.object(
        {}
    );
}

/** @internal */
export namespace PostOrdersItems$ {
    export type Inbound = {
        id?: string | undefined;
        parentId?: string | undefined;
        productId?: string | undefined;
        variantId?: string | undefined;
        quantity?: number | undefined;
        sku?: string | undefined;
        price?: number | undefined;
        currency?: string | undefined;
        linePrice?: number | undefined;
        originalPrice?: number | undefined;
        discountedPrice?: number | undefined;
        title?: string | undefined;
        variantTitle?: string | undefined;
        image?: PostOrdersImage$.Inbound | undefined;
        weight?: number | undefined;
        weightUnit?: string | undefined;
        requiresShipping?: boolean | undefined;
        taxable?: boolean | undefined;
        taxLines?: Array<PostOrdersTaxLines$.Inbound> | undefined;
        options?: Array<PostOrdersOptions$.Inbound> | undefined;
        fulfillableQuantity?: number | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<PostOrdersItems, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            parentId: z.string().optional(),
            productId: z.string().optional(),
            variantId: z.string().optional(),
            quantity: z.number().optional(),
            sku: z.string().optional(),
            price: z.number().optional(),
            currency: z.string().optional(),
            linePrice: z.number().optional(),
            originalPrice: z.number().optional(),
            discountedPrice: z.number().optional(),
            title: z.string().optional(),
            variantTitle: z.string().optional(),
            image: z.lazy(() => PostOrdersImage$.inboundSchema).optional(),
            weight: z.number().optional(),
            weightUnit: z.string().optional(),
            requiresShipping: z.boolean().optional(),
            taxable: z.boolean().optional(),
            taxLines: z.array(z.lazy(() => PostOrdersTaxLines$.inboundSchema)).optional(),
            options: z.array(z.lazy(() => PostOrdersOptions$.inboundSchema)).optional(),
            fulfillableQuantity: z.number().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.parentId === undefined ? null : { parentId: v.parentId }),
                ...(v.productId === undefined ? null : { productId: v.productId }),
                ...(v.variantId === undefined ? null : { variantId: v.variantId }),
                ...(v.quantity === undefined ? null : { quantity: v.quantity }),
                ...(v.sku === undefined ? null : { sku: v.sku }),
                ...(v.price === undefined ? null : { price: v.price }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.linePrice === undefined ? null : { linePrice: v.linePrice }),
                ...(v.originalPrice === undefined ? null : { originalPrice: v.originalPrice }),
                ...(v.discountedPrice === undefined
                    ? null
                    : { discountedPrice: v.discountedPrice }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.variantTitle === undefined ? null : { variantTitle: v.variantTitle }),
                ...(v.image === undefined ? null : { image: v.image }),
                ...(v.weight === undefined ? null : { weight: v.weight }),
                ...(v.weightUnit === undefined ? null : { weightUnit: v.weightUnit }),
                ...(v.requiresShipping === undefined
                    ? null
                    : { requiresShipping: v.requiresShipping }),
                ...(v.taxable === undefined ? null : { taxable: v.taxable }),
                ...(v.taxLines === undefined ? null : { taxLines: v.taxLines }),
                ...(v.options === undefined ? null : { options: v.options }),
                ...(v.fulfillableQuantity === undefined
                    ? null
                    : { fulfillableQuantity: v.fulfillableQuantity }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        parentId?: string | undefined;
        productId?: string | undefined;
        variantId?: string | undefined;
        quantity?: number | undefined;
        sku?: string | undefined;
        price?: number | undefined;
        currency?: string | undefined;
        linePrice?: number | undefined;
        originalPrice?: number | undefined;
        discountedPrice?: number | undefined;
        title?: string | undefined;
        variantTitle?: string | undefined;
        image?: PostOrdersImage$.Outbound | undefined;
        weight?: number | undefined;
        weightUnit?: string | undefined;
        requiresShipping?: boolean | undefined;
        taxable?: boolean | undefined;
        taxLines?: Array<PostOrdersTaxLines$.Outbound> | undefined;
        options?: Array<PostOrdersOptions$.Outbound> | undefined;
        fulfillableQuantity?: number | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostOrdersItems> = z
        .object({
            id: z.string().optional(),
            parentId: z.string().optional(),
            productId: z.string().optional(),
            variantId: z.string().optional(),
            quantity: z.number().optional(),
            sku: z.string().optional(),
            price: z.number().optional(),
            currency: z.string().optional(),
            linePrice: z.number().optional(),
            originalPrice: z.number().optional(),
            discountedPrice: z.number().optional(),
            title: z.string().optional(),
            variantTitle: z.string().optional(),
            image: z.lazy(() => PostOrdersImage$.outboundSchema).optional(),
            weight: z.number().optional(),
            weightUnit: z.string().optional(),
            requiresShipping: z.boolean().optional(),
            taxable: z.boolean().optional(),
            taxLines: z.array(z.lazy(() => PostOrdersTaxLines$.outboundSchema)).optional(),
            options: z.array(z.lazy(() => PostOrdersOptions$.outboundSchema)).optional(),
            fulfillableQuantity: z.number().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.parentId === undefined ? null : { parentId: v.parentId }),
                ...(v.productId === undefined ? null : { productId: v.productId }),
                ...(v.variantId === undefined ? null : { variantId: v.variantId }),
                ...(v.quantity === undefined ? null : { quantity: v.quantity }),
                ...(v.sku === undefined ? null : { sku: v.sku }),
                ...(v.price === undefined ? null : { price: v.price }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.linePrice === undefined ? null : { linePrice: v.linePrice }),
                ...(v.originalPrice === undefined ? null : { originalPrice: v.originalPrice }),
                ...(v.discountedPrice === undefined
                    ? null
                    : { discountedPrice: v.discountedPrice }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.variantTitle === undefined ? null : { variantTitle: v.variantTitle }),
                ...(v.image === undefined ? null : { image: v.image }),
                ...(v.weight === undefined ? null : { weight: v.weight }),
                ...(v.weightUnit === undefined ? null : { weightUnit: v.weightUnit }),
                ...(v.requiresShipping === undefined
                    ? null
                    : { requiresShipping: v.requiresShipping }),
                ...(v.taxable === undefined ? null : { taxable: v.taxable }),
                ...(v.taxLines === undefined ? null : { taxLines: v.taxLines }),
                ...(v.options === undefined ? null : { options: v.options }),
                ...(v.fulfillableQuantity === undefined
                    ? null
                    : { fulfillableQuantity: v.fulfillableQuantity }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });
}

/** @internal */
export namespace PostOrdersRequestBody$ {
    export type Inbound = {
        id: string;
        customerID: string;
        orderNumber: string;
        status: PostOrdersStatus;
        createdAt: number;
        updatedAt: number;
        total: number;
        subTotal: number;
        tax: number;
        shippingCost: number;
        currency: string;
        paymentStatus: PostOrdersPaymentStatus;
        paymentMethods: Array<string>;
        shippingMethod: string;
        shippingAddress: PostOrdersShippingAddress$.Inbound;
        billingAddress: PostOrdersBillingAddress$.Inbound;
        note: string;
        discounts: Array<number>;
        trackingInfo: string;
        items: Array<PostOrdersItems$.Inbound>;
        tags: Array<string>;
    };

    export const inboundSchema: z.ZodType<PostOrdersRequestBody, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string(),
            customerID: z.string(),
            orderNumber: z.string(),
            status: PostOrdersStatus$,
            createdAt: z.number(),
            updatedAt: z.number(),
            total: z.number(),
            subTotal: z.number(),
            tax: z.number(),
            shippingCost: z.number(),
            currency: z.string(),
            paymentStatus: PostOrdersPaymentStatus$,
            paymentMethods: z.array(z.string()),
            shippingMethod: z.string(),
            shippingAddress: z.lazy(() => PostOrdersShippingAddress$.inboundSchema),
            billingAddress: z.lazy(() => PostOrdersBillingAddress$.inboundSchema),
            note: z.string(),
            discounts: z.array(z.number()),
            trackingInfo: z.string(),
            items: z.array(z.lazy(() => PostOrdersItems$.inboundSchema)),
            tags: z.array(z.string()),
        })
        .transform((v) => {
            return {
                id: v.id,
                customerID: v.customerID,
                orderNumber: v.orderNumber,
                status: v.status,
                createdAt: v.createdAt,
                updatedAt: v.updatedAt,
                total: v.total,
                subTotal: v.subTotal,
                tax: v.tax,
                shippingCost: v.shippingCost,
                currency: v.currency,
                paymentStatus: v.paymentStatus,
                paymentMethods: v.paymentMethods,
                shippingMethod: v.shippingMethod,
                shippingAddress: v.shippingAddress,
                billingAddress: v.billingAddress,
                note: v.note,
                discounts: v.discounts,
                trackingInfo: v.trackingInfo,
                items: v.items,
                tags: v.tags,
            };
        });

    export type Outbound = {
        id: string;
        customerID: string;
        orderNumber: string;
        status: PostOrdersStatus;
        createdAt: number;
        updatedAt: number;
        total: number;
        subTotal: number;
        tax: number;
        shippingCost: number;
        currency: string;
        paymentStatus: PostOrdersPaymentStatus;
        paymentMethods: Array<string>;
        shippingMethod: string;
        shippingAddress: PostOrdersShippingAddress$.Outbound;
        billingAddress: PostOrdersBillingAddress$.Outbound;
        note: string;
        discounts: Array<number>;
        trackingInfo: string;
        items: Array<PostOrdersItems$.Outbound>;
        tags: Array<string>;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostOrdersRequestBody> = z
        .object({
            id: z.string(),
            customerID: z.string(),
            orderNumber: z.string(),
            status: PostOrdersStatus$,
            createdAt: z.number(),
            updatedAt: z.number(),
            total: z.number(),
            subTotal: z.number(),
            tax: z.number(),
            shippingCost: z.number(),
            currency: z.string(),
            paymentStatus: PostOrdersPaymentStatus$,
            paymentMethods: z.array(z.string()),
            shippingMethod: z.string(),
            shippingAddress: z.lazy(() => PostOrdersShippingAddress$.outboundSchema),
            billingAddress: z.lazy(() => PostOrdersBillingAddress$.outboundSchema),
            note: z.string(),
            discounts: z.array(z.number()),
            trackingInfo: z.string(),
            items: z.array(z.lazy(() => PostOrdersItems$.outboundSchema)),
            tags: z.array(z.string()),
        })
        .transform((v) => {
            return {
                id: v.id,
                customerID: v.customerID,
                orderNumber: v.orderNumber,
                status: v.status,
                createdAt: v.createdAt,
                updatedAt: v.updatedAt,
                total: v.total,
                subTotal: v.subTotal,
                tax: v.tax,
                shippingCost: v.shippingCost,
                currency: v.currency,
                paymentStatus: v.paymentStatus,
                paymentMethods: v.paymentMethods,
                shippingMethod: v.shippingMethod,
                shippingAddress: v.shippingAddress,
                billingAddress: v.billingAddress,
                note: v.note,
                discounts: v.discounts,
                trackingInfo: v.trackingInfo,
                items: v.items,
                tags: v.tags,
            };
        });
}

/** @internal */
export namespace PostOrdersRequest$ {
    export type Inbound = {
        "X-INTEGRATIONOS-SECRET": string;
        "X-INTEGRATIONOS-CONNECTION-KEY": string;
        RequestBody: PostOrdersRequestBody$.Inbound;
    };

    export const inboundSchema: z.ZodType<PostOrdersRequest, z.ZodTypeDef, Inbound> = z
        .object({
            "X-INTEGRATIONOS-SECRET": z.string(),
            "X-INTEGRATIONOS-CONNECTION-KEY": z.string(),
            RequestBody: z.lazy(() => PostOrdersRequestBody$.inboundSchema),
        })
        .transform((v) => {
            return {
                xIntegrationosSecret: v["X-INTEGRATIONOS-SECRET"],
                xIntegrationosConnectionKey: v["X-INTEGRATIONOS-CONNECTION-KEY"],
                requestBody: v.RequestBody,
            };
        });

    export type Outbound = {
        "X-INTEGRATIONOS-SECRET": string;
        "X-INTEGRATIONOS-CONNECTION-KEY": string;
        RequestBody: PostOrdersRequestBody$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostOrdersRequest> = z
        .object({
            xIntegrationosSecret: z.string(),
            xIntegrationosConnectionKey: z.string(),
            requestBody: z.lazy(() => PostOrdersRequestBody$.outboundSchema),
        })
        .transform((v) => {
            return {
                "X-INTEGRATIONOS-SECRET": v.xIntegrationosSecret,
                "X-INTEGRATIONOS-CONNECTION-KEY": v.xIntegrationosConnectionKey,
                RequestBody: v.requestBody,
            };
        });
}

/** @internal */
export const PostOrdersStatusCode$ = z.nativeEnum(PostOrdersStatusCode);

/** @internal */
export const PostOrdersOrdersStatus$ = z.nativeEnum(PostOrdersOrdersStatus);

/** @internal */
export const PostOrdersOrdersPaymentStatus$ = z.nativeEnum(PostOrdersOrdersPaymentStatus);

/** @internal */
export const PostOrdersOrdersResponseType$ = z.nativeEnum(PostOrdersOrdersResponseType);

/** @internal */
export namespace PostOrdersOrdersResponseGeoLocation$ {
    export type Inbound = {
        latitude?: number | undefined;
        longitude?: number | undefined;
        altitude?: number | undefined;
        accuracy?: number | undefined;
        altitudeAccuracy?: number | undefined;
        heading?: number | undefined;
        speed?: number | undefined;
        timestamp?: number | undefined;
    };

    export const inboundSchema: z.ZodType<
        PostOrdersOrdersResponseGeoLocation,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            latitude: z.number().optional(),
            longitude: z.number().optional(),
            altitude: z.number().optional(),
            accuracy: z.number().optional(),
            altitudeAccuracy: z.number().optional(),
            heading: z.number().optional(),
            speed: z.number().optional(),
            timestamp: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.latitude === undefined ? null : { latitude: v.latitude }),
                ...(v.longitude === undefined ? null : { longitude: v.longitude }),
                ...(v.altitude === undefined ? null : { altitude: v.altitude }),
                ...(v.accuracy === undefined ? null : { accuracy: v.accuracy }),
                ...(v.altitudeAccuracy === undefined
                    ? null
                    : { altitudeAccuracy: v.altitudeAccuracy }),
                ...(v.heading === undefined ? null : { heading: v.heading }),
                ...(v.speed === undefined ? null : { speed: v.speed }),
                ...(v.timestamp === undefined ? null : { timestamp: v.timestamp }),
            };
        });

    export type Outbound = {
        latitude?: number | undefined;
        longitude?: number | undefined;
        altitude?: number | undefined;
        accuracy?: number | undefined;
        altitudeAccuracy?: number | undefined;
        heading?: number | undefined;
        speed?: number | undefined;
        timestamp?: number | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PostOrdersOrdersResponseGeoLocation
    > = z
        .object({
            latitude: z.number().optional(),
            longitude: z.number().optional(),
            altitude: z.number().optional(),
            accuracy: z.number().optional(),
            altitudeAccuracy: z.number().optional(),
            heading: z.number().optional(),
            speed: z.number().optional(),
            timestamp: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.latitude === undefined ? null : { latitude: v.latitude }),
                ...(v.longitude === undefined ? null : { longitude: v.longitude }),
                ...(v.altitude === undefined ? null : { altitude: v.altitude }),
                ...(v.accuracy === undefined ? null : { accuracy: v.accuracy }),
                ...(v.altitudeAccuracy === undefined
                    ? null
                    : { altitudeAccuracy: v.altitudeAccuracy }),
                ...(v.heading === undefined ? null : { heading: v.heading }),
                ...(v.speed === undefined ? null : { speed: v.speed }),
                ...(v.timestamp === undefined ? null : { timestamp: v.timestamp }),
            };
        });
}

/** @internal */
export const PostOrdersOrdersResponseFieldType$ = z.nativeEnum(PostOrdersOrdersResponseFieldType);

/** @internal */
export namespace PostOrdersOrdersResponseCustomFields$ {
    export type Inbound = {
        id?: string | undefined;
        fieldName?: string | undefined;
        fieldValue?: string | undefined;
        fieldType?: PostOrdersOrdersResponseFieldType | undefined;
    };

    export const inboundSchema: z.ZodType<
        PostOrdersOrdersResponseCustomFields,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            id: z.string().optional(),
            fieldName: z.string().optional(),
            fieldValue: z.string().optional(),
            fieldType: PostOrdersOrdersResponseFieldType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fieldName === undefined ? null : { fieldName: v.fieldName }),
                ...(v.fieldValue === undefined ? null : { fieldValue: v.fieldValue }),
                ...(v.fieldType === undefined ? null : { fieldType: v.fieldType }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        fieldName?: string | undefined;
        fieldValue?: string | undefined;
        fieldType?: PostOrdersOrdersResponseFieldType | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PostOrdersOrdersResponseCustomFields
    > = z
        .object({
            id: z.string().optional(),
            fieldName: z.string().optional(),
            fieldValue: z.string().optional(),
            fieldType: PostOrdersOrdersResponseFieldType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fieldName === undefined ? null : { fieldName: v.fieldName }),
                ...(v.fieldValue === undefined ? null : { fieldValue: v.fieldValue }),
                ...(v.fieldType === undefined ? null : { fieldType: v.fieldType }),
            };
        });
}

/** @internal */
export namespace PostOrdersOrdersShippingAddress$ {
    export type Inbound = {
        id?: string | undefined;
        contactId?: string | undefined;
        accountId?: string | undefined;
        firstName?: string | undefined;
        lastName?: string | undefined;
        name?: string | undefined;
        companyName?: string | undefined;
        email?: string | undefined;
        phone?: string | undefined;
        street?: string | undefined;
        addressLine2?: string | undefined;
        city?: string | undefined;
        province?: string | undefined;
        region?: string | undefined;
        postalCode?: string | undefined;
        postalCodeExtension?: string | undefined;
        country?: string | undefined;
        countryCode?: string | undefined;
        type?: PostOrdersOrdersResponseType | undefined;
        geoLocation?: PostOrdersOrdersResponseGeoLocation$.Inbound | undefined;
        customFields?: Array<PostOrdersOrdersResponseCustomFields$.Inbound> | undefined;
        subdivisionCode?: string | undefined;
    };

    export const inboundSchema: z.ZodType<PostOrdersOrdersShippingAddress, z.ZodTypeDef, Inbound> =
        z
            .object({
                id: z.string().optional(),
                contactId: z.string().optional(),
                accountId: z.string().optional(),
                firstName: z.string().optional(),
                lastName: z.string().optional(),
                name: z.string().optional(),
                companyName: z.string().optional(),
                email: z.string().optional(),
                phone: z.string().optional(),
                street: z.string().optional(),
                addressLine2: z.string().optional(),
                city: z.string().optional(),
                province: z.string().optional(),
                region: z.string().optional(),
                postalCode: z.string().optional(),
                postalCodeExtension: z.string().optional(),
                country: z.string().optional(),
                countryCode: z.string().optional(),
                type: PostOrdersOrdersResponseType$.optional(),
                geoLocation: z
                    .lazy(() => PostOrdersOrdersResponseGeoLocation$.inboundSchema)
                    .optional(),
                customFields: z
                    .array(z.lazy(() => PostOrdersOrdersResponseCustomFields$.inboundSchema))
                    .optional(),
                subdivisionCode: z.string().optional(),
            })
            .transform((v) => {
                return {
                    ...(v.id === undefined ? null : { id: v.id }),
                    ...(v.contactId === undefined ? null : { contactId: v.contactId }),
                    ...(v.accountId === undefined ? null : { accountId: v.accountId }),
                    ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                    ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                    ...(v.name === undefined ? null : { name: v.name }),
                    ...(v.companyName === undefined ? null : { companyName: v.companyName }),
                    ...(v.email === undefined ? null : { email: v.email }),
                    ...(v.phone === undefined ? null : { phone: v.phone }),
                    ...(v.street === undefined ? null : { street: v.street }),
                    ...(v.addressLine2 === undefined ? null : { addressLine2: v.addressLine2 }),
                    ...(v.city === undefined ? null : { city: v.city }),
                    ...(v.province === undefined ? null : { province: v.province }),
                    ...(v.region === undefined ? null : { region: v.region }),
                    ...(v.postalCode === undefined ? null : { postalCode: v.postalCode }),
                    ...(v.postalCodeExtension === undefined
                        ? null
                        : { postalCodeExtension: v.postalCodeExtension }),
                    ...(v.country === undefined ? null : { country: v.country }),
                    ...(v.countryCode === undefined ? null : { countryCode: v.countryCode }),
                    ...(v.type === undefined ? null : { type: v.type }),
                    ...(v.geoLocation === undefined ? null : { geoLocation: v.geoLocation }),
                    ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                    ...(v.subdivisionCode === undefined
                        ? null
                        : { subdivisionCode: v.subdivisionCode }),
                };
            });

    export type Outbound = {
        id?: string | undefined;
        contactId?: string | undefined;
        accountId?: string | undefined;
        firstName?: string | undefined;
        lastName?: string | undefined;
        name?: string | undefined;
        companyName?: string | undefined;
        email?: string | undefined;
        phone?: string | undefined;
        street?: string | undefined;
        addressLine2?: string | undefined;
        city?: string | undefined;
        province?: string | undefined;
        region?: string | undefined;
        postalCode?: string | undefined;
        postalCodeExtension?: string | undefined;
        country?: string | undefined;
        countryCode?: string | undefined;
        type?: PostOrdersOrdersResponseType | undefined;
        geoLocation?: PostOrdersOrdersResponseGeoLocation$.Outbound | undefined;
        customFields?: Array<PostOrdersOrdersResponseCustomFields$.Outbound> | undefined;
        subdivisionCode?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PostOrdersOrdersShippingAddress
    > = z
        .object({
            id: z.string().optional(),
            contactId: z.string().optional(),
            accountId: z.string().optional(),
            firstName: z.string().optional(),
            lastName: z.string().optional(),
            name: z.string().optional(),
            companyName: z.string().optional(),
            email: z.string().optional(),
            phone: z.string().optional(),
            street: z.string().optional(),
            addressLine2: z.string().optional(),
            city: z.string().optional(),
            province: z.string().optional(),
            region: z.string().optional(),
            postalCode: z.string().optional(),
            postalCodeExtension: z.string().optional(),
            country: z.string().optional(),
            countryCode: z.string().optional(),
            type: PostOrdersOrdersResponseType$.optional(),
            geoLocation: z
                .lazy(() => PostOrdersOrdersResponseGeoLocation$.outboundSchema)
                .optional(),
            customFields: z
                .array(z.lazy(() => PostOrdersOrdersResponseCustomFields$.outboundSchema))
                .optional(),
            subdivisionCode: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.contactId === undefined ? null : { contactId: v.contactId }),
                ...(v.accountId === undefined ? null : { accountId: v.accountId }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.companyName === undefined ? null : { companyName: v.companyName }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.phone === undefined ? null : { phone: v.phone }),
                ...(v.street === undefined ? null : { street: v.street }),
                ...(v.addressLine2 === undefined ? null : { addressLine2: v.addressLine2 }),
                ...(v.city === undefined ? null : { city: v.city }),
                ...(v.province === undefined ? null : { province: v.province }),
                ...(v.region === undefined ? null : { region: v.region }),
                ...(v.postalCode === undefined ? null : { postalCode: v.postalCode }),
                ...(v.postalCodeExtension === undefined
                    ? null
                    : { postalCodeExtension: v.postalCodeExtension }),
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.countryCode === undefined ? null : { countryCode: v.countryCode }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.geoLocation === undefined ? null : { geoLocation: v.geoLocation }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                ...(v.subdivisionCode === undefined
                    ? null
                    : { subdivisionCode: v.subdivisionCode }),
            };
        });
}

/** @internal */
export const PostOrdersOrdersResponse200Type$ = z.nativeEnum(PostOrdersOrdersResponse200Type);

/** @internal */
export namespace PostOrdersOrdersResponse200GeoLocation$ {
    export type Inbound = {
        latitude?: number | undefined;
        longitude?: number | undefined;
        altitude?: number | undefined;
        accuracy?: number | undefined;
        altitudeAccuracy?: number | undefined;
        heading?: number | undefined;
        speed?: number | undefined;
        timestamp?: number | undefined;
    };

    export const inboundSchema: z.ZodType<
        PostOrdersOrdersResponse200GeoLocation,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            latitude: z.number().optional(),
            longitude: z.number().optional(),
            altitude: z.number().optional(),
            accuracy: z.number().optional(),
            altitudeAccuracy: z.number().optional(),
            heading: z.number().optional(),
            speed: z.number().optional(),
            timestamp: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.latitude === undefined ? null : { latitude: v.latitude }),
                ...(v.longitude === undefined ? null : { longitude: v.longitude }),
                ...(v.altitude === undefined ? null : { altitude: v.altitude }),
                ...(v.accuracy === undefined ? null : { accuracy: v.accuracy }),
                ...(v.altitudeAccuracy === undefined
                    ? null
                    : { altitudeAccuracy: v.altitudeAccuracy }),
                ...(v.heading === undefined ? null : { heading: v.heading }),
                ...(v.speed === undefined ? null : { speed: v.speed }),
                ...(v.timestamp === undefined ? null : { timestamp: v.timestamp }),
            };
        });

    export type Outbound = {
        latitude?: number | undefined;
        longitude?: number | undefined;
        altitude?: number | undefined;
        accuracy?: number | undefined;
        altitudeAccuracy?: number | undefined;
        heading?: number | undefined;
        speed?: number | undefined;
        timestamp?: number | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PostOrdersOrdersResponse200GeoLocation
    > = z
        .object({
            latitude: z.number().optional(),
            longitude: z.number().optional(),
            altitude: z.number().optional(),
            accuracy: z.number().optional(),
            altitudeAccuracy: z.number().optional(),
            heading: z.number().optional(),
            speed: z.number().optional(),
            timestamp: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.latitude === undefined ? null : { latitude: v.latitude }),
                ...(v.longitude === undefined ? null : { longitude: v.longitude }),
                ...(v.altitude === undefined ? null : { altitude: v.altitude }),
                ...(v.accuracy === undefined ? null : { accuracy: v.accuracy }),
                ...(v.altitudeAccuracy === undefined
                    ? null
                    : { altitudeAccuracy: v.altitudeAccuracy }),
                ...(v.heading === undefined ? null : { heading: v.heading }),
                ...(v.speed === undefined ? null : { speed: v.speed }),
                ...(v.timestamp === undefined ? null : { timestamp: v.timestamp }),
            };
        });
}

/** @internal */
export const PostOrdersOrdersResponse200FieldType$ = z.nativeEnum(
    PostOrdersOrdersResponse200FieldType
);

/** @internal */
export namespace PostOrdersOrdersResponse200CustomFields$ {
    export type Inbound = {
        id?: string | undefined;
        fieldName?: string | undefined;
        fieldValue?: string | undefined;
        fieldType?: PostOrdersOrdersResponse200FieldType | undefined;
    };

    export const inboundSchema: z.ZodType<
        PostOrdersOrdersResponse200CustomFields,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            id: z.string().optional(),
            fieldName: z.string().optional(),
            fieldValue: z.string().optional(),
            fieldType: PostOrdersOrdersResponse200FieldType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fieldName === undefined ? null : { fieldName: v.fieldName }),
                ...(v.fieldValue === undefined ? null : { fieldValue: v.fieldValue }),
                ...(v.fieldType === undefined ? null : { fieldType: v.fieldType }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        fieldName?: string | undefined;
        fieldValue?: string | undefined;
        fieldType?: PostOrdersOrdersResponse200FieldType | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PostOrdersOrdersResponse200CustomFields
    > = z
        .object({
            id: z.string().optional(),
            fieldName: z.string().optional(),
            fieldValue: z.string().optional(),
            fieldType: PostOrdersOrdersResponse200FieldType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fieldName === undefined ? null : { fieldName: v.fieldName }),
                ...(v.fieldValue === undefined ? null : { fieldValue: v.fieldValue }),
                ...(v.fieldType === undefined ? null : { fieldType: v.fieldType }),
            };
        });
}

/** @internal */
export namespace PostOrdersOrdersBillingAddress$ {
    export type Inbound = {
        id?: string | undefined;
        contactId?: string | undefined;
        accountId?: string | undefined;
        firstName?: string | undefined;
        lastName?: string | undefined;
        name?: string | undefined;
        companyName?: string | undefined;
        email?: string | undefined;
        phone?: string | undefined;
        street?: string | undefined;
        addressLine2?: string | undefined;
        city?: string | undefined;
        province?: string | undefined;
        region?: string | undefined;
        postalCode?: string | undefined;
        postalCodeExtension?: string | undefined;
        country?: string | undefined;
        countryCode?: string | undefined;
        type?: PostOrdersOrdersResponse200Type | undefined;
        geoLocation?: PostOrdersOrdersResponse200GeoLocation$.Inbound | undefined;
        customFields?: Array<PostOrdersOrdersResponse200CustomFields$.Inbound> | undefined;
        subdivisionCode?: string | undefined;
    };

    export const inboundSchema: z.ZodType<PostOrdersOrdersBillingAddress, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            contactId: z.string().optional(),
            accountId: z.string().optional(),
            firstName: z.string().optional(),
            lastName: z.string().optional(),
            name: z.string().optional(),
            companyName: z.string().optional(),
            email: z.string().optional(),
            phone: z.string().optional(),
            street: z.string().optional(),
            addressLine2: z.string().optional(),
            city: z.string().optional(),
            province: z.string().optional(),
            region: z.string().optional(),
            postalCode: z.string().optional(),
            postalCodeExtension: z.string().optional(),
            country: z.string().optional(),
            countryCode: z.string().optional(),
            type: PostOrdersOrdersResponse200Type$.optional(),
            geoLocation: z
                .lazy(() => PostOrdersOrdersResponse200GeoLocation$.inboundSchema)
                .optional(),
            customFields: z
                .array(z.lazy(() => PostOrdersOrdersResponse200CustomFields$.inboundSchema))
                .optional(),
            subdivisionCode: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.contactId === undefined ? null : { contactId: v.contactId }),
                ...(v.accountId === undefined ? null : { accountId: v.accountId }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.companyName === undefined ? null : { companyName: v.companyName }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.phone === undefined ? null : { phone: v.phone }),
                ...(v.street === undefined ? null : { street: v.street }),
                ...(v.addressLine2 === undefined ? null : { addressLine2: v.addressLine2 }),
                ...(v.city === undefined ? null : { city: v.city }),
                ...(v.province === undefined ? null : { province: v.province }),
                ...(v.region === undefined ? null : { region: v.region }),
                ...(v.postalCode === undefined ? null : { postalCode: v.postalCode }),
                ...(v.postalCodeExtension === undefined
                    ? null
                    : { postalCodeExtension: v.postalCodeExtension }),
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.countryCode === undefined ? null : { countryCode: v.countryCode }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.geoLocation === undefined ? null : { geoLocation: v.geoLocation }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                ...(v.subdivisionCode === undefined
                    ? null
                    : { subdivisionCode: v.subdivisionCode }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        contactId?: string | undefined;
        accountId?: string | undefined;
        firstName?: string | undefined;
        lastName?: string | undefined;
        name?: string | undefined;
        companyName?: string | undefined;
        email?: string | undefined;
        phone?: string | undefined;
        street?: string | undefined;
        addressLine2?: string | undefined;
        city?: string | undefined;
        province?: string | undefined;
        region?: string | undefined;
        postalCode?: string | undefined;
        postalCodeExtension?: string | undefined;
        country?: string | undefined;
        countryCode?: string | undefined;
        type?: PostOrdersOrdersResponse200Type | undefined;
        geoLocation?: PostOrdersOrdersResponse200GeoLocation$.Outbound | undefined;
        customFields?: Array<PostOrdersOrdersResponse200CustomFields$.Outbound> | undefined;
        subdivisionCode?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostOrdersOrdersBillingAddress> =
        z
            .object({
                id: z.string().optional(),
                contactId: z.string().optional(),
                accountId: z.string().optional(),
                firstName: z.string().optional(),
                lastName: z.string().optional(),
                name: z.string().optional(),
                companyName: z.string().optional(),
                email: z.string().optional(),
                phone: z.string().optional(),
                street: z.string().optional(),
                addressLine2: z.string().optional(),
                city: z.string().optional(),
                province: z.string().optional(),
                region: z.string().optional(),
                postalCode: z.string().optional(),
                postalCodeExtension: z.string().optional(),
                country: z.string().optional(),
                countryCode: z.string().optional(),
                type: PostOrdersOrdersResponse200Type$.optional(),
                geoLocation: z
                    .lazy(() => PostOrdersOrdersResponse200GeoLocation$.outboundSchema)
                    .optional(),
                customFields: z
                    .array(z.lazy(() => PostOrdersOrdersResponse200CustomFields$.outboundSchema))
                    .optional(),
                subdivisionCode: z.string().optional(),
            })
            .transform((v) => {
                return {
                    ...(v.id === undefined ? null : { id: v.id }),
                    ...(v.contactId === undefined ? null : { contactId: v.contactId }),
                    ...(v.accountId === undefined ? null : { accountId: v.accountId }),
                    ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                    ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                    ...(v.name === undefined ? null : { name: v.name }),
                    ...(v.companyName === undefined ? null : { companyName: v.companyName }),
                    ...(v.email === undefined ? null : { email: v.email }),
                    ...(v.phone === undefined ? null : { phone: v.phone }),
                    ...(v.street === undefined ? null : { street: v.street }),
                    ...(v.addressLine2 === undefined ? null : { addressLine2: v.addressLine2 }),
                    ...(v.city === undefined ? null : { city: v.city }),
                    ...(v.province === undefined ? null : { province: v.province }),
                    ...(v.region === undefined ? null : { region: v.region }),
                    ...(v.postalCode === undefined ? null : { postalCode: v.postalCode }),
                    ...(v.postalCodeExtension === undefined
                        ? null
                        : { postalCodeExtension: v.postalCodeExtension }),
                    ...(v.country === undefined ? null : { country: v.country }),
                    ...(v.countryCode === undefined ? null : { countryCode: v.countryCode }),
                    ...(v.type === undefined ? null : { type: v.type }),
                    ...(v.geoLocation === undefined ? null : { geoLocation: v.geoLocation }),
                    ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                    ...(v.subdivisionCode === undefined
                        ? null
                        : { subdivisionCode: v.subdivisionCode }),
                };
            });
}

/** @internal */
export namespace PostOrdersOrdersImage$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<PostOrdersOrdersImage, z.ZodTypeDef, Inbound> = z.object(
        {}
    );

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostOrdersOrdersImage> =
        z.object({});
}

/** @internal */
export namespace PostOrdersOrdersTaxLines$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<PostOrdersOrdersTaxLines, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostOrdersOrdersTaxLines> =
        z.object({});
}

/** @internal */
export namespace PostOrdersOrdersOptions$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<PostOrdersOrdersOptions, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostOrdersOrdersOptions> =
        z.object({});
}

/** @internal */
export namespace PostOrdersOrdersItems$ {
    export type Inbound = {
        id?: string | undefined;
        parentId?: string | undefined;
        productId?: string | undefined;
        variantId?: string | undefined;
        quantity?: number | undefined;
        sku?: string | undefined;
        price?: number | undefined;
        currency?: string | undefined;
        linePrice?: number | undefined;
        originalPrice?: number | undefined;
        discountedPrice?: number | undefined;
        title?: string | undefined;
        variantTitle?: string | undefined;
        image?: PostOrdersOrdersImage$.Inbound | undefined;
        weight?: number | undefined;
        weightUnit?: string | undefined;
        requiresShipping?: boolean | undefined;
        taxable?: boolean | undefined;
        taxLines?: Array<PostOrdersOrdersTaxLines$.Inbound> | undefined;
        options?: Array<PostOrdersOrdersOptions$.Inbound> | undefined;
        fulfillableQuantity?: number | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<PostOrdersOrdersItems, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            parentId: z.string().optional(),
            productId: z.string().optional(),
            variantId: z.string().optional(),
            quantity: z.number().optional(),
            sku: z.string().optional(),
            price: z.number().optional(),
            currency: z.string().optional(),
            linePrice: z.number().optional(),
            originalPrice: z.number().optional(),
            discountedPrice: z.number().optional(),
            title: z.string().optional(),
            variantTitle: z.string().optional(),
            image: z.lazy(() => PostOrdersOrdersImage$.inboundSchema).optional(),
            weight: z.number().optional(),
            weightUnit: z.string().optional(),
            requiresShipping: z.boolean().optional(),
            taxable: z.boolean().optional(),
            taxLines: z.array(z.lazy(() => PostOrdersOrdersTaxLines$.inboundSchema)).optional(),
            options: z.array(z.lazy(() => PostOrdersOrdersOptions$.inboundSchema)).optional(),
            fulfillableQuantity: z.number().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.parentId === undefined ? null : { parentId: v.parentId }),
                ...(v.productId === undefined ? null : { productId: v.productId }),
                ...(v.variantId === undefined ? null : { variantId: v.variantId }),
                ...(v.quantity === undefined ? null : { quantity: v.quantity }),
                ...(v.sku === undefined ? null : { sku: v.sku }),
                ...(v.price === undefined ? null : { price: v.price }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.linePrice === undefined ? null : { linePrice: v.linePrice }),
                ...(v.originalPrice === undefined ? null : { originalPrice: v.originalPrice }),
                ...(v.discountedPrice === undefined
                    ? null
                    : { discountedPrice: v.discountedPrice }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.variantTitle === undefined ? null : { variantTitle: v.variantTitle }),
                ...(v.image === undefined ? null : { image: v.image }),
                ...(v.weight === undefined ? null : { weight: v.weight }),
                ...(v.weightUnit === undefined ? null : { weightUnit: v.weightUnit }),
                ...(v.requiresShipping === undefined
                    ? null
                    : { requiresShipping: v.requiresShipping }),
                ...(v.taxable === undefined ? null : { taxable: v.taxable }),
                ...(v.taxLines === undefined ? null : { taxLines: v.taxLines }),
                ...(v.options === undefined ? null : { options: v.options }),
                ...(v.fulfillableQuantity === undefined
                    ? null
                    : { fulfillableQuantity: v.fulfillableQuantity }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        parentId?: string | undefined;
        productId?: string | undefined;
        variantId?: string | undefined;
        quantity?: number | undefined;
        sku?: string | undefined;
        price?: number | undefined;
        currency?: string | undefined;
        linePrice?: number | undefined;
        originalPrice?: number | undefined;
        discountedPrice?: number | undefined;
        title?: string | undefined;
        variantTitle?: string | undefined;
        image?: PostOrdersOrdersImage$.Outbound | undefined;
        weight?: number | undefined;
        weightUnit?: string | undefined;
        requiresShipping?: boolean | undefined;
        taxable?: boolean | undefined;
        taxLines?: Array<PostOrdersOrdersTaxLines$.Outbound> | undefined;
        options?: Array<PostOrdersOrdersOptions$.Outbound> | undefined;
        fulfillableQuantity?: number | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostOrdersOrdersItems> = z
        .object({
            id: z.string().optional(),
            parentId: z.string().optional(),
            productId: z.string().optional(),
            variantId: z.string().optional(),
            quantity: z.number().optional(),
            sku: z.string().optional(),
            price: z.number().optional(),
            currency: z.string().optional(),
            linePrice: z.number().optional(),
            originalPrice: z.number().optional(),
            discountedPrice: z.number().optional(),
            title: z.string().optional(),
            variantTitle: z.string().optional(),
            image: z.lazy(() => PostOrdersOrdersImage$.outboundSchema).optional(),
            weight: z.number().optional(),
            weightUnit: z.string().optional(),
            requiresShipping: z.boolean().optional(),
            taxable: z.boolean().optional(),
            taxLines: z.array(z.lazy(() => PostOrdersOrdersTaxLines$.outboundSchema)).optional(),
            options: z.array(z.lazy(() => PostOrdersOrdersOptions$.outboundSchema)).optional(),
            fulfillableQuantity: z.number().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.parentId === undefined ? null : { parentId: v.parentId }),
                ...(v.productId === undefined ? null : { productId: v.productId }),
                ...(v.variantId === undefined ? null : { variantId: v.variantId }),
                ...(v.quantity === undefined ? null : { quantity: v.quantity }),
                ...(v.sku === undefined ? null : { sku: v.sku }),
                ...(v.price === undefined ? null : { price: v.price }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.linePrice === undefined ? null : { linePrice: v.linePrice }),
                ...(v.originalPrice === undefined ? null : { originalPrice: v.originalPrice }),
                ...(v.discountedPrice === undefined
                    ? null
                    : { discountedPrice: v.discountedPrice }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.variantTitle === undefined ? null : { variantTitle: v.variantTitle }),
                ...(v.image === undefined ? null : { image: v.image }),
                ...(v.weight === undefined ? null : { weight: v.weight }),
                ...(v.weightUnit === undefined ? null : { weightUnit: v.weightUnit }),
                ...(v.requiresShipping === undefined
                    ? null
                    : { requiresShipping: v.requiresShipping }),
                ...(v.taxable === undefined ? null : { taxable: v.taxable }),
                ...(v.taxLines === undefined ? null : { taxLines: v.taxLines }),
                ...(v.options === undefined ? null : { options: v.options }),
                ...(v.fulfillableQuantity === undefined
                    ? null
                    : { fulfillableQuantity: v.fulfillableQuantity }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });
}

/** @internal */
export namespace PostOrdersUnified$ {
    export type Inbound = {
        id?: string | undefined;
        customerID?: string | undefined;
        orderNumber?: string | undefined;
        status?: PostOrdersOrdersStatus | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        total?: number | undefined;
        subTotal?: number | undefined;
        tax?: number | undefined;
        shippingCost?: number | undefined;
        currency?: string | undefined;
        paymentStatus?: PostOrdersOrdersPaymentStatus | undefined;
        paymentMethods?: Array<string> | undefined;
        shippingMethod?: string | undefined;
        shippingAddress?: PostOrdersOrdersShippingAddress$.Inbound | undefined;
        billingAddress?: PostOrdersOrdersBillingAddress$.Inbound | undefined;
        note?: string | undefined;
        discounts?: Array<number> | undefined;
        trackingInfo?: string | undefined;
        items?: Array<PostOrdersOrdersItems$.Inbound> | undefined;
        tags?: Array<string> | undefined;
    };

    export const inboundSchema: z.ZodType<PostOrdersUnified, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            customerID: z.string().optional(),
            orderNumber: z.string().optional(),
            status: PostOrdersOrdersStatus$.optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            total: z.number().optional(),
            subTotal: z.number().optional(),
            tax: z.number().optional(),
            shippingCost: z.number().optional(),
            currency: z.string().optional(),
            paymentStatus: PostOrdersOrdersPaymentStatus$.optional(),
            paymentMethods: z.array(z.string()).optional(),
            shippingMethod: z.string().optional(),
            shippingAddress: z
                .lazy(() => PostOrdersOrdersShippingAddress$.inboundSchema)
                .optional(),
            billingAddress: z.lazy(() => PostOrdersOrdersBillingAddress$.inboundSchema).optional(),
            note: z.string().optional(),
            discounts: z.array(z.number()).optional(),
            trackingInfo: z.string().optional(),
            items: z.array(z.lazy(() => PostOrdersOrdersItems$.inboundSchema)).optional(),
            tags: z.array(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.customerID === undefined ? null : { customerID: v.customerID }),
                ...(v.orderNumber === undefined ? null : { orderNumber: v.orderNumber }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.total === undefined ? null : { total: v.total }),
                ...(v.subTotal === undefined ? null : { subTotal: v.subTotal }),
                ...(v.tax === undefined ? null : { tax: v.tax }),
                ...(v.shippingCost === undefined ? null : { shippingCost: v.shippingCost }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.paymentStatus === undefined ? null : { paymentStatus: v.paymentStatus }),
                ...(v.paymentMethods === undefined ? null : { paymentMethods: v.paymentMethods }),
                ...(v.shippingMethod === undefined ? null : { shippingMethod: v.shippingMethod }),
                ...(v.shippingAddress === undefined
                    ? null
                    : { shippingAddress: v.shippingAddress }),
                ...(v.billingAddress === undefined ? null : { billingAddress: v.billingAddress }),
                ...(v.note === undefined ? null : { note: v.note }),
                ...(v.discounts === undefined ? null : { discounts: v.discounts }),
                ...(v.trackingInfo === undefined ? null : { trackingInfo: v.trackingInfo }),
                ...(v.items === undefined ? null : { items: v.items }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        customerID?: string | undefined;
        orderNumber?: string | undefined;
        status?: PostOrdersOrdersStatus | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        total?: number | undefined;
        subTotal?: number | undefined;
        tax?: number | undefined;
        shippingCost?: number | undefined;
        currency?: string | undefined;
        paymentStatus?: PostOrdersOrdersPaymentStatus | undefined;
        paymentMethods?: Array<string> | undefined;
        shippingMethod?: string | undefined;
        shippingAddress?: PostOrdersOrdersShippingAddress$.Outbound | undefined;
        billingAddress?: PostOrdersOrdersBillingAddress$.Outbound | undefined;
        note?: string | undefined;
        discounts?: Array<number> | undefined;
        trackingInfo?: string | undefined;
        items?: Array<PostOrdersOrdersItems$.Outbound> | undefined;
        tags?: Array<string> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostOrdersUnified> = z
        .object({
            id: z.string().optional(),
            customerID: z.string().optional(),
            orderNumber: z.string().optional(),
            status: PostOrdersOrdersStatus$.optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            total: z.number().optional(),
            subTotal: z.number().optional(),
            tax: z.number().optional(),
            shippingCost: z.number().optional(),
            currency: z.string().optional(),
            paymentStatus: PostOrdersOrdersPaymentStatus$.optional(),
            paymentMethods: z.array(z.string()).optional(),
            shippingMethod: z.string().optional(),
            shippingAddress: z
                .lazy(() => PostOrdersOrdersShippingAddress$.outboundSchema)
                .optional(),
            billingAddress: z.lazy(() => PostOrdersOrdersBillingAddress$.outboundSchema).optional(),
            note: z.string().optional(),
            discounts: z.array(z.number()).optional(),
            trackingInfo: z.string().optional(),
            items: z.array(z.lazy(() => PostOrdersOrdersItems$.outboundSchema)).optional(),
            tags: z.array(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.customerID === undefined ? null : { customerID: v.customerID }),
                ...(v.orderNumber === undefined ? null : { orderNumber: v.orderNumber }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.total === undefined ? null : { total: v.total }),
                ...(v.subTotal === undefined ? null : { subTotal: v.subTotal }),
                ...(v.tax === undefined ? null : { tax: v.tax }),
                ...(v.shippingCost === undefined ? null : { shippingCost: v.shippingCost }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.paymentStatus === undefined ? null : { paymentStatus: v.paymentStatus }),
                ...(v.paymentMethods === undefined ? null : { paymentMethods: v.paymentMethods }),
                ...(v.shippingMethod === undefined ? null : { shippingMethod: v.shippingMethod }),
                ...(v.shippingAddress === undefined
                    ? null
                    : { shippingAddress: v.shippingAddress }),
                ...(v.billingAddress === undefined ? null : { billingAddress: v.billingAddress }),
                ...(v.note === undefined ? null : { note: v.note }),
                ...(v.discounts === undefined ? null : { discounts: v.discounts }),
                ...(v.trackingInfo === undefined ? null : { trackingInfo: v.trackingInfo }),
                ...(v.items === undefined ? null : { items: v.items }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
            };
        });
}

/** @internal */
export namespace PostOrdersPassthrough$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<PostOrdersPassthrough, z.ZodTypeDef, Inbound> = z.object(
        {}
    );

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostOrdersPassthrough> =
        z.object({});
}

/** @internal */
export namespace PostOrdersCache$ {
    export type Inbound = {
        hit?: boolean | undefined;
        ttl?: number | undefined;
        key?: string | undefined;
    };

    export const inboundSchema: z.ZodType<PostOrdersCache, z.ZodTypeDef, Inbound> = z
        .object({
            hit: z.boolean().optional(),
            ttl: z.number().int().optional(),
            key: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.hit === undefined ? null : { hit: v.hit }),
                ...(v.ttl === undefined ? null : { ttl: v.ttl }),
                ...(v.key === undefined ? null : { key: v.key }),
            };
        });

    export type Outbound = {
        hit?: boolean | undefined;
        ttl?: number | undefined;
        key?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostOrdersCache> = z
        .object({
            hit: z.boolean().optional(),
            ttl: z.number().int().optional(),
            key: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.hit === undefined ? null : { hit: v.hit }),
                ...(v.ttl === undefined ? null : { ttl: v.ttl }),
                ...(v.key === undefined ? null : { key: v.key }),
            };
        });
}

/** @internal */
export namespace PostOrdersMeta$ {
    export type Inbound = {
        timestamp?: number | undefined;
        latency?: number | undefined;
        platformRateLimitRemaining?: number | undefined;
        rateLimitRemaining?: number | undefined;
        cache?: PostOrdersCache$.Inbound | undefined;
        transactionKey?: string | undefined;
        txn?: string | undefined;
        platform?: string | undefined;
        platformVersion?: string | undefined;
        connectionDefinitionKey?: string | undefined;
        action?: string | undefined;
        commonModel?: string | undefined;
        commonModelVersion?: string | undefined;
        connectionKey?: string | undefined;
        hash?: string | undefined;
        heartbeats?: Array<string> | undefined;
        totalTransactions?: number | undefined;
    };

    export const inboundSchema: z.ZodType<PostOrdersMeta, z.ZodTypeDef, Inbound> = z
        .object({
            timestamp: z.number().int().optional(),
            latency: z.number().int().optional(),
            platformRateLimitRemaining: z.number().int().optional(),
            rateLimitRemaining: z.number().int().optional(),
            cache: z.lazy(() => PostOrdersCache$.inboundSchema).optional(),
            transactionKey: z.string().optional(),
            txn: z.string().optional(),
            platform: z.string().optional(),
            platformVersion: z.string().optional(),
            connectionDefinitionKey: z.string().optional(),
            action: z.string().optional(),
            commonModel: z.string().optional(),
            commonModelVersion: z.string().optional(),
            connectionKey: z.string().optional(),
            hash: z.string().optional(),
            heartbeats: z.array(z.string()).optional(),
            totalTransactions: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.timestamp === undefined ? null : { timestamp: v.timestamp }),
                ...(v.latency === undefined ? null : { latency: v.latency }),
                ...(v.platformRateLimitRemaining === undefined
                    ? null
                    : { platformRateLimitRemaining: v.platformRateLimitRemaining }),
                ...(v.rateLimitRemaining === undefined
                    ? null
                    : { rateLimitRemaining: v.rateLimitRemaining }),
                ...(v.cache === undefined ? null : { cache: v.cache }),
                ...(v.transactionKey === undefined ? null : { transactionKey: v.transactionKey }),
                ...(v.txn === undefined ? null : { txn: v.txn }),
                ...(v.platform === undefined ? null : { platform: v.platform }),
                ...(v.platformVersion === undefined
                    ? null
                    : { platformVersion: v.platformVersion }),
                ...(v.connectionDefinitionKey === undefined
                    ? null
                    : { connectionDefinitionKey: v.connectionDefinitionKey }),
                ...(v.action === undefined ? null : { action: v.action }),
                ...(v.commonModel === undefined ? null : { commonModel: v.commonModel }),
                ...(v.commonModelVersion === undefined
                    ? null
                    : { commonModelVersion: v.commonModelVersion }),
                ...(v.connectionKey === undefined ? null : { connectionKey: v.connectionKey }),
                ...(v.hash === undefined ? null : { hash: v.hash }),
                ...(v.heartbeats === undefined ? null : { heartbeats: v.heartbeats }),
                ...(v.totalTransactions === undefined
                    ? null
                    : { totalTransactions: v.totalTransactions }),
            };
        });

    export type Outbound = {
        timestamp?: number | undefined;
        latency?: number | undefined;
        platformRateLimitRemaining?: number | undefined;
        rateLimitRemaining?: number | undefined;
        cache?: PostOrdersCache$.Outbound | undefined;
        transactionKey?: string | undefined;
        txn?: string | undefined;
        platform?: string | undefined;
        platformVersion?: string | undefined;
        connectionDefinitionKey?: string | undefined;
        action?: string | undefined;
        commonModel?: string | undefined;
        commonModelVersion?: string | undefined;
        connectionKey?: string | undefined;
        hash?: string | undefined;
        heartbeats?: Array<string> | undefined;
        totalTransactions?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostOrdersMeta> = z
        .object({
            timestamp: z.number().int().optional(),
            latency: z.number().int().optional(),
            platformRateLimitRemaining: z.number().int().optional(),
            rateLimitRemaining: z.number().int().optional(),
            cache: z.lazy(() => PostOrdersCache$.outboundSchema).optional(),
            transactionKey: z.string().optional(),
            txn: z.string().optional(),
            platform: z.string().optional(),
            platformVersion: z.string().optional(),
            connectionDefinitionKey: z.string().optional(),
            action: z.string().optional(),
            commonModel: z.string().optional(),
            commonModelVersion: z.string().optional(),
            connectionKey: z.string().optional(),
            hash: z.string().optional(),
            heartbeats: z.array(z.string()).optional(),
            totalTransactions: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.timestamp === undefined ? null : { timestamp: v.timestamp }),
                ...(v.latency === undefined ? null : { latency: v.latency }),
                ...(v.platformRateLimitRemaining === undefined
                    ? null
                    : { platformRateLimitRemaining: v.platformRateLimitRemaining }),
                ...(v.rateLimitRemaining === undefined
                    ? null
                    : { rateLimitRemaining: v.rateLimitRemaining }),
                ...(v.cache === undefined ? null : { cache: v.cache }),
                ...(v.transactionKey === undefined ? null : { transactionKey: v.transactionKey }),
                ...(v.txn === undefined ? null : { txn: v.txn }),
                ...(v.platform === undefined ? null : { platform: v.platform }),
                ...(v.platformVersion === undefined
                    ? null
                    : { platformVersion: v.platformVersion }),
                ...(v.connectionDefinitionKey === undefined
                    ? null
                    : { connectionDefinitionKey: v.connectionDefinitionKey }),
                ...(v.action === undefined ? null : { action: v.action }),
                ...(v.commonModel === undefined ? null : { commonModel: v.commonModel }),
                ...(v.commonModelVersion === undefined
                    ? null
                    : { commonModelVersion: v.commonModelVersion }),
                ...(v.connectionKey === undefined ? null : { connectionKey: v.connectionKey }),
                ...(v.hash === undefined ? null : { hash: v.hash }),
                ...(v.heartbeats === undefined ? null : { heartbeats: v.heartbeats }),
                ...(v.totalTransactions === undefined
                    ? null
                    : { totalTransactions: v.totalTransactions }),
            };
        });
}

/** @internal */
export namespace PostOrdersResponseBody$ {
    export type Inbound = {
        status?: string | undefined;
        statusCode?: PostOrdersStatusCode | undefined;
        unified?: PostOrdersUnified$.Inbound | undefined;
        passthrough?: PostOrdersPassthrough$.Inbound | undefined;
        meta?: PostOrdersMeta$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<PostOrdersResponseBody, z.ZodTypeDef, Inbound> = z
        .object({
            status: z.string().optional(),
            statusCode: PostOrdersStatusCode$.optional(),
            unified: z.lazy(() => PostOrdersUnified$.inboundSchema).optional(),
            passthrough: z.lazy(() => PostOrdersPassthrough$.inboundSchema).optional(),
            meta: z.lazy(() => PostOrdersMeta$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.statusCode === undefined ? null : { statusCode: v.statusCode }),
                ...(v.unified === undefined ? null : { unified: v.unified }),
                ...(v.passthrough === undefined ? null : { passthrough: v.passthrough }),
                ...(v.meta === undefined ? null : { meta: v.meta }),
            };
        });

    export type Outbound = {
        status?: string | undefined;
        statusCode?: PostOrdersStatusCode | undefined;
        unified?: PostOrdersUnified$.Outbound | undefined;
        passthrough?: PostOrdersPassthrough$.Outbound | undefined;
        meta?: PostOrdersMeta$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostOrdersResponseBody> = z
        .object({
            status: z.string().optional(),
            statusCode: PostOrdersStatusCode$.optional(),
            unified: z.lazy(() => PostOrdersUnified$.outboundSchema).optional(),
            passthrough: z.lazy(() => PostOrdersPassthrough$.outboundSchema).optional(),
            meta: z.lazy(() => PostOrdersMeta$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.statusCode === undefined ? null : { statusCode: v.statusCode }),
                ...(v.unified === undefined ? null : { unified: v.unified }),
                ...(v.passthrough === undefined ? null : { passthrough: v.passthrough }),
                ...(v.meta === undefined ? null : { meta: v.meta }),
            };
        });
}

/** @internal */
export namespace PostOrdersResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        object?: PostOrdersResponseBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<PostOrdersResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => PostOrdersResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: PostOrdersResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostOrdersResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z.lazy(() => PostOrdersResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
