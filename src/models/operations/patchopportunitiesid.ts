/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export enum PatchOpportunitiesIdType {
    Email = "Email",
    SocialMedia = "Social Media",
    SearchEngine = "Search Engine",
    Display = "Display",
    Other = "Other",
}

export enum PatchOpportunitiesIdStatus {
    Planned = "Planned",
    Active = "Active",
    Paused = "Paused",
    Completed = "Completed",
    Cancelled = "Cancelled",
}

export type PerformanceMetrics = {
    impressions?: number | undefined;
    clicks?: number | undefined;
    conversions?: number | undefined;
    spend?: number | undefined;
    returnOnInvestment?: number | undefined;
    costPerClick?: number | undefined;
    costPerConversion?: number | undefined;
    conversionRate?: number | undefined;
};

export enum PatchOpportunitiesIdOpportunitiesType {
    String = "String",
    Number = "Number",
    Boolean = "Boolean",
    Date = "Date",
    Json = "Json",
    Array = "Array",
}

export type PatchOpportunitiesIdMetadata = {
    id?: string | undefined;
    key?: string | undefined;
    value?: string | undefined;
    type?: PatchOpportunitiesIdOpportunitiesType | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    entityId?: string | undefined;
    entityType?: string | undefined;
};

export enum EntityType {
    User = "User",
    Project = "Project",
    Message = "Message",
    Other = "Other",
}

export type PatchOpportunitiesIdAssociatedWith = {
    entityId?: string | undefined;
    entityType?: EntityType | undefined;
    attributes?: Array<string> | undefined;
};

export enum AccessControlType {
    Rbac = "RBAC",
    Abac = "ABAC",
    Custom = "Custom",
    None = "None",
}

export enum PatchOpportunitiesIdOpportunitiesRequestType {
    User = "User",
    Group = "Group",
}

export type AssigneeDetails = {
    identifier?: string | undefined;
    displayName?: string | undefined;
    type?: PatchOpportunitiesIdOpportunitiesRequestType | undefined;
};

export enum IdentifierType {
    String = "String",
    Number = "Number",
}

export type PatchOpportunitiesIdPermissions = {
    canView?: Array<string> | undefined;
    canEdit?: Array<string> | undefined;
    canDelete?: Array<string> | undefined;
    roles?: Array<string> | undefined;
    accessControlType?: AccessControlType | undefined;
    assigneeDetails?: AssigneeDetails | undefined;
    identifierType?: IdentifierType | undefined;
};

export type CreativeAssets = {
    id?: string | undefined;
    fileName?: string | undefined;
    fileSize?: number | undefined;
    fileType?: string | undefined;
    url?: string | undefined;
    thumbnailUrl?: string | undefined;
    previewUrl?: string | undefined;
    content?: string | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    metadata?: PatchOpportunitiesIdMetadata | undefined;
    associatedWith?: PatchOpportunitiesIdAssociatedWith | undefined;
    permissions?: PatchOpportunitiesIdPermissions | undefined;
};

export type PatchOpportunitiesIdCampaign = {
    id?: string | undefined;
    name?: string | undefined;
    type?: PatchOpportunitiesIdType | undefined;
    status?: PatchOpportunitiesIdStatus | undefined;
    startDate?: number | undefined;
    endDate?: number | undefined;
    budget?: number | undefined;
    targetAudience?: string | undefined;
    channels?: Array<string> | undefined;
    performanceMetrics?: PerformanceMetrics | undefined;
    creativeAssets?: CreativeAssets | undefined;
    tags?: Array<string> | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    active?: boolean | undefined;
    deleted?: boolean | undefined;
};

export enum AccountType {
    Customer = "Customer",
    Partner = "Partner",
    Competitor = "Competitor",
    Investor = "Investor",
    Vendor = "Vendor",
    Other = "Other",
}

export enum Rating {
    Hot = "Hot",
    Warm = "Warm",
    Cold = "Cold",
}

export enum PatchOpportunitiesIdOpportunitiesRequestRequestBodyType {
    Home = "home",
    Work = "work",
    Other = "other",
}

export type PatchOpportunitiesIdGeoLocation = {
    latitude?: number | undefined;
    longitude?: number | undefined;
    altitude?: number | undefined;
    accuracy?: number | undefined;
    altitudeAccuracy?: number | undefined;
    heading?: number | undefined;
    speed?: number | undefined;
    timestamp?: number | undefined;
};

export enum PatchOpportunitiesIdFieldType {
    Text = "text",
    Number = "number",
    Date = "date",
    Boolean = "boolean",
    Enum = "enum",
    Json = "json",
    Array = "array",
}

export type PatchOpportunitiesIdCustomFields = {
    id?: string | undefined;
    fieldName?: string | undefined;
    fieldValue?: string | undefined;
    fieldType?: PatchOpportunitiesIdFieldType | undefined;
};

export type BillingAddress = {
    id?: string | undefined;
    contactId?: string | undefined;
    accountId?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    name?: string | undefined;
    companyName?: string | undefined;
    email?: string | undefined;
    phone?: string | undefined;
    street?: string | undefined;
    addressLine2?: string | undefined;
    city?: string | undefined;
    province?: string | undefined;
    region?: string | undefined;
    postalCode?: string | undefined;
    postalCodeExtension?: string | undefined;
    country?: string | undefined;
    countryCode?: string | undefined;
    type?: PatchOpportunitiesIdOpportunitiesRequestRequestBodyType | undefined;
    geoLocation?: PatchOpportunitiesIdGeoLocation | undefined;
    customFields?: Array<PatchOpportunitiesIdCustomFields> | undefined;
    subdivisionCode?: string | undefined;
};

export enum PatchOpportunitiesIdOpportunitiesRequestRequestBodyAccountType {
    Home = "home",
    Work = "work",
    Other = "other",
}

export type PatchOpportunitiesIdOpportunitiesGeoLocation = {
    latitude?: number | undefined;
    longitude?: number | undefined;
    altitude?: number | undefined;
    accuracy?: number | undefined;
    altitudeAccuracy?: number | undefined;
    heading?: number | undefined;
    speed?: number | undefined;
    timestamp?: number | undefined;
};

export enum PatchOpportunitiesIdOpportunitiesFieldType {
    Text = "text",
    Number = "number",
    Date = "date",
    Boolean = "boolean",
    Enum = "enum",
    Json = "json",
    Array = "array",
}

export type PatchOpportunitiesIdOpportunitiesCustomFields = {
    id?: string | undefined;
    fieldName?: string | undefined;
    fieldValue?: string | undefined;
    fieldType?: PatchOpportunitiesIdOpportunitiesFieldType | undefined;
};

export type ShippingAddress = {
    id?: string | undefined;
    contactId?: string | undefined;
    accountId?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    name?: string | undefined;
    companyName?: string | undefined;
    email?: string | undefined;
    phone?: string | undefined;
    street?: string | undefined;
    addressLine2?: string | undefined;
    city?: string | undefined;
    province?: string | undefined;
    region?: string | undefined;
    postalCode?: string | undefined;
    postalCodeExtension?: string | undefined;
    country?: string | undefined;
    countryCode?: string | undefined;
    type?: PatchOpportunitiesIdOpportunitiesRequestRequestBodyAccountType | undefined;
    geoLocation?: PatchOpportunitiesIdOpportunitiesGeoLocation | undefined;
    customFields?: Array<PatchOpportunitiesIdOpportunitiesCustomFields> | undefined;
    subdivisionCode?: string | undefined;
};

export enum PatchOpportunitiesIdOpportunitiesStatus {
    Active = "Active",
    Inactive = "Inactive",
    Pending = "Pending",
    Closed = "Closed",
}

export enum PatchOpportunitiesIdOpportunitiesRequestFieldType {
    Text = "text",
    Number = "number",
    Date = "date",
    Boolean = "boolean",
    Enum = "enum",
    Json = "json",
    Array = "array",
}

export type PatchOpportunitiesIdOpportunitiesRequestCustomFields = {
    id?: string | undefined;
    fieldName?: string | undefined;
    fieldValue?: string | undefined;
    fieldType?: PatchOpportunitiesIdOpportunitiesRequestFieldType | undefined;
};

export type PatchOpportunitiesIdAccount = {
    id?: string | undefined;
    name?: string | undefined;
    industry?: string | undefined;
    accountType?: AccountType | undefined;
    rating?: Rating | undefined;
    phone?: string | undefined;
    email?: string | undefined;
    website?: string | undefined;
    billingAddress?: BillingAddress | undefined;
    shippingAddress?: ShippingAddress | undefined;
    numberOfEmployees?: number | undefined;
    annualRevenue?: number | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    status?: PatchOpportunitiesIdOpportunitiesStatus | undefined;
    ownerId?: string | undefined;
    customFields?: Array<PatchOpportunitiesIdOpportunitiesRequestCustomFields> | undefined;
    tags?: Array<string> | undefined;
};

export type PatchOpportunitiesIdEmails = {};

export type PatchOpportunitiesIdPhones = {};

export type PatchOpportunitiesIdAddress = {};

export type PatchOpportunitiesIdAddresses = {};

export type PatchOpportunitiesIdNotes = {};

export type PatchOpportunitiesIdSocialProfiles = {};

export type PatchOpportunitiesIdOpportunitiesRequestRequestBodyCustomFields = {};

export type PatchOpportunitiesIdContacts = {
    id?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    leadId?: string | undefined;
    company?: string | undefined;
    defaultEmail?: string | undefined;
    emails?: Array<PatchOpportunitiesIdEmails> | undefined;
    defaultPhone?: string | undefined;
    phones?: Array<PatchOpportunitiesIdPhones> | undefined;
    address?: PatchOpportunitiesIdAddress | undefined;
    addresses?: Array<PatchOpportunitiesIdAddresses> | undefined;
    birthday?: number | undefined;
    relationship?: string | undefined;
    note?: string | undefined;
    notes?: PatchOpportunitiesIdNotes | undefined;
    tags?: Array<string> | undefined;
    websites?: Array<string> | undefined;
    socialProfiles?: Array<PatchOpportunitiesIdSocialProfiles> | undefined;
    isActive?: boolean | undefined;
    customFields?:
        | Array<PatchOpportunitiesIdOpportunitiesRequestRequestBodyCustomFields>
        | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
};

export enum PatchOpportunitiesIdMimeType {
    ImageJpeg = "image/jpeg",
    ImagePng = "image/png",
    ImageGif = "image/gif",
    ImageSvgPlusXml = "image/svg+xml",
    ImageWebp = "image/webp",
}

export type PatchOpportunitiesIdProfilePicture = {
    id?: string | undefined;
    src?: string | undefined;
    altText?: string | undefined;
    width?: number | undefined;
    height?: number | undefined;
    thumbnailSrc?: string | undefined;
    caption?: string | undefined;
    title?: string | undefined;
    mimeType?: PatchOpportunitiesIdMimeType | undefined;
    tags?: Array<string> | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    active?: boolean | undefined;
    deleted?: boolean | undefined;
};

export enum PatchOpportunitiesIdOpportunitiesMimeType {
    ImageJpeg = "image/jpeg",
    ImagePng = "image/png",
    ImageGif = "image/gif",
    ImageSvgPlusXml = "image/svg+xml",
    ImageWebp = "image/webp",
}

export type PatchOpportunitiesIdCoverPhoto = {
    id?: string | undefined;
    src?: string | undefined;
    altText?: string | undefined;
    width?: number | undefined;
    height?: number | undefined;
    thumbnailSrc?: string | undefined;
    caption?: string | undefined;
    title?: string | undefined;
    mimeType?: PatchOpportunitiesIdOpportunitiesMimeType | undefined;
    tags?: Array<string> | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    active?: boolean | undefined;
    deleted?: boolean | undefined;
};

export enum PatchOpportunitiesIdGender {
    Male = "Male",
    Female = "Female",
    Other = "Other",
    PreferNotToSay = "Prefer not to say",
}

export enum PatchOpportunitiesIdOpportunitiesRequestRequestBodyOwnerType {
    Home = "home",
    Work = "work",
    Other = "other",
}

export type PatchOpportunitiesIdOpportunitiesRequestGeoLocation = {};

export type PatchOpportunitiesIdOpportunitiesRequestRequestBodyOwnerCustomFields = {};

export type PatchOpportunitiesIdOpportunitiesAddresses = {
    id?: string | undefined;
    contactId?: string | undefined;
    accountId?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    name?: string | undefined;
    companyName?: string | undefined;
    email?: string | undefined;
    phone?: string | undefined;
    street?: string | undefined;
    addressLine2?: string | undefined;
    city?: string | undefined;
    province?: string | undefined;
    region?: string | undefined;
    postalCode?: string | undefined;
    postalCodeExtension?: string | undefined;
    country?: string | undefined;
    countryCode?: string | undefined;
    type?: PatchOpportunitiesIdOpportunitiesRequestRequestBodyOwnerType | undefined;
    geoLocation?: PatchOpportunitiesIdOpportunitiesRequestGeoLocation | undefined;
    customFields?:
        | Array<PatchOpportunitiesIdOpportunitiesRequestRequestBodyOwnerCustomFields>
        | undefined;
    subdivisionCode?: string | undefined;
};

export enum PatchOpportunitiesIdRoles {
    User = "User",
    Admin = "Admin",
    Moderator = "Moderator",
}

export enum PatchOpportunitiesIdCommunications {
    Email = "Email",
    Sms = "SMS",
    PushNotification = "PushNotification",
}

export type PatchOpportunitiesIdPreferences = {
    id?: string | undefined;
    language?: string | undefined;
    currency?: string | undefined;
    timeZone?: string | undefined;
    communications?: PatchOpportunitiesIdCommunications | undefined;
};

export enum PatchOpportunitiesIdOpportunitiesRequestRequestBodyOwnerSocialLinksType {
    Facebook = "facebook",
    Twitter = "twitter",
    Linkedin = "linkedin",
    Instagram = "instagram",
    Tiktok = "tiktok",
    Pinterest = "pinterest",
    Youtube = "youtube",
    Other = "other",
}

export enum PatchOpportunitiesIdOpportunitiesRequestRequestBodyOwnerSocialLinksAdditionalInfoType {
    String = "String",
    Number = "Number",
    Boolean = "Boolean",
    Date = "Date",
    Json = "Json",
    Array = "Array",
}

export type PatchOpportunitiesIdAdditionalInfo = {
    id?: string | undefined;
    key?: string | undefined;
    value?: string | undefined;
    type?:
        | PatchOpportunitiesIdOpportunitiesRequestRequestBodyOwnerSocialLinksAdditionalInfoType
        | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    entityId?: string | undefined;
    entityType?: string | undefined;
};

export type PatchOpportunitiesIdSocialLinks = {
    type?: PatchOpportunitiesIdOpportunitiesRequestRequestBodyOwnerSocialLinksType | undefined;
    username?: string | undefined;
    displayName?: string | undefined;
    url?: string | undefined;
    avatarUrl?: string | undefined;
    email?: string | undefined;
    additionalInfo?: PatchOpportunitiesIdAdditionalInfo | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    active?: boolean | undefined;
    deleted?: boolean | undefined;
};

export enum PatchOpportunitiesIdOpportunitiesRequestStatus {
    Pending = "Pending",
    Verified = "Verified",
    Suspended = "Suspended",
    Inactive = "Inactive",
}

export enum PatchOpportunitiesIdProvider {
    Google = "Google",
    Facebook = "Facebook",
    Twitter = "Twitter",
    LinkedIn = "LinkedIn",
    Microsoft = "Microsoft",
    Apple = "Apple",
    Other = "Other",
}

export type PatchOpportunitiesIdSso = {
    provider?: PatchOpportunitiesIdProvider | undefined;
    providerUserId?: string | undefined;
    profileUrl?: string | undefined;
    accessToken?: string | undefined;
    refreshToken?: string | undefined;
    expiresIn?: number | undefined;
    expiryDate?: number | undefined;
    scopes?: Array<string> | undefined;
    tokenType?: string | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    active?: boolean | undefined;
    deleted?: boolean | undefined;
};

export enum PatchOpportunitiesIdOpportunitiesRequestRequestBodyOwnerPaymentMethodsType {
    CreditCard = "CreditCard",
    PayPal = "PayPal",
    BankTransfer = "BankTransfer",
    CryptoCurrency = "CryptoCurrency",
}

export type PatchOpportunitiesIdPaymentMethods = {
    id?: string | undefined;
    type?: PatchOpportunitiesIdOpportunitiesRequestRequestBodyOwnerPaymentMethodsType | undefined;
    details?: string | undefined;
    isDefault?: boolean | undefined;
};

export type PatchOpportunitiesIdOwner = {
    id?: string | undefined;
    firstName?: string | undefined;
    middleName?: string | undefined;
    lastName?: string | undefined;
    email?: string | undefined;
    username?: string | undefined;
    password?: string | undefined;
    profilePicture?: PatchOpportunitiesIdProfilePicture | undefined;
    coverPhoto?: PatchOpportunitiesIdCoverPhoto | undefined;
    gender?: PatchOpportunitiesIdGender | undefined;
    dateOfBirth?: number | undefined;
    phoneNumber?: string | undefined;
    isActive?: boolean | undefined;
    lastLogin?: number | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    addresses?: Array<PatchOpportunitiesIdOpportunitiesAddresses> | undefined;
    roles?: Array<PatchOpportunitiesIdRoles> | undefined;
    preferences?: PatchOpportunitiesIdPreferences | undefined;
    bio?: string | undefined;
    website?: string | undefined;
    socialLinks?: PatchOpportunitiesIdSocialLinks | undefined;
    status?: PatchOpportunitiesIdOpportunitiesRequestStatus | undefined;
    sso?: Array<PatchOpportunitiesIdSso> | undefined;
    paymentMethods?: PatchOpportunitiesIdPaymentMethods | undefined;
};

export type PatchOpportunitiesIdOpportunitiesMetadata = {};

export type PatchOpportunitiesIdOpportunitiesAssociatedWith = {};

export type PatchOpportunitiesIdOpportunitiesPermissions = {};

export type PatchOpportunitiesIdAttachments = {
    id?: string | undefined;
    fileName?: string | undefined;
    fileSize?: number | undefined;
    fileType?: string | undefined;
    url?: string | undefined;
    thumbnailUrl?: string | undefined;
    previewUrl?: string | undefined;
    content?: string | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    metadata?: PatchOpportunitiesIdOpportunitiesMetadata | undefined;
    associatedWith?: PatchOpportunitiesIdOpportunitiesAssociatedWith | undefined;
    permissions?: PatchOpportunitiesIdOpportunitiesPermissions | undefined;
};

export enum PatchOpportunitiesIdOpportunitiesRequestRequestBodyFieldType {
    Text = "text",
    Number = "number",
    Date = "date",
    Boolean = "boolean",
    Enum = "enum",
    Json = "json",
    Array = "array",
}

export type PatchOpportunitiesIdOpportunitiesRequestRequestBodyCustomFields1 = {
    id?: string | undefined;
    fieldName?: string | undefined;
    fieldValue?: string | undefined;
    fieldType?: PatchOpportunitiesIdOpportunitiesRequestRequestBodyFieldType | undefined;
};

export type PatchOpportunitiesIdRequestBody = {
    id?: string | undefined;
    title?: string | undefined;
    description?: string | undefined;
    amount?: number | undefined;
    currency?: string | undefined;
    stage?: string | undefined;
    probability?: number | undefined;
    closeDate?: number | undefined;
    type?: string | undefined;
    nextStep?: string | undefined;
    leadId?: string | undefined;
    leadSource?: string | undefined;
    isClosed?: boolean | undefined;
    isWon?: boolean | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    lostReason?: string | undefined;
    campaign?: PatchOpportunitiesIdCampaign | undefined;
    account?: PatchOpportunitiesIdAccount | undefined;
    contacts?: Array<PatchOpportunitiesIdContacts> | undefined;
    owner?: PatchOpportunitiesIdOwner | undefined;
    attachments?: Array<PatchOpportunitiesIdAttachments> | undefined;
    notes?: Array<string> | undefined;
    customFields?:
        | Array<PatchOpportunitiesIdOpportunitiesRequestRequestBodyCustomFields1>
        | undefined;
};

export type PatchOpportunitiesIdRequest = {
    /**
     * The id of the model
     */
    id: string;
    /**
     * The unique identifier of a Connected Account
     */
    xIntegrationosConnectionKey: string;
    requestBody?: PatchOpportunitiesIdRequestBody | undefined;
};

export enum PatchOpportunitiesIdStatusCode {
    TwoHundred = 200,
    FourHundred = 400,
    FiveHundred = 500,
}

export type PatchOpportunitiesIdUnified = {
    count?: number | undefined;
};

export type PatchOpportunitiesIdPassthrough = {};

export type PatchOpportunitiesIdCache = {
    hit?: boolean | undefined;
    ttl?: number | undefined;
    key?: string | undefined;
};

export type PatchOpportunitiesIdMeta = {
    timestamp?: number | undefined;
    latency?: number | undefined;
    platformRateLimitRemaining?: number | undefined;
    rateLimitRemaining?: number | undefined;
    cache?: PatchOpportunitiesIdCache | undefined;
    transactionKey?: string | undefined;
    txn?: string | undefined;
    platform?: string | undefined;
    platformVersion?: string | undefined;
    connectionDefinitionKey?: string | undefined;
    action?: string | undefined;
    commonModel?: string | undefined;
    commonModelVersion?: string | undefined;
    connectionKey?: string | undefined;
    hash?: string | undefined;
    heartbeats?: Array<string> | undefined;
    totalTransactions?: number | undefined;
};

/**
 * Successful response
 */
export type PatchOpportunitiesIdResponseBody = {
    status?: string | undefined;
    statusCode?: PatchOpportunitiesIdStatusCode | undefined;
    unified?: PatchOpportunitiesIdUnified | undefined;
    passthrough?: PatchOpportunitiesIdPassthrough | undefined;
    meta?: PatchOpportunitiesIdMeta | undefined;
};

export type PatchOpportunitiesIdResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Successful response
     */
    object?: PatchOpportunitiesIdResponseBody | undefined;
};

/** @internal */
export const PatchOpportunitiesIdType$ = z.nativeEnum(PatchOpportunitiesIdType);

/** @internal */
export const PatchOpportunitiesIdStatus$ = z.nativeEnum(PatchOpportunitiesIdStatus);

/** @internal */
export namespace PerformanceMetrics$ {
    export type Inbound = {
        impressions?: number | undefined;
        clicks?: number | undefined;
        conversions?: number | undefined;
        spend?: number | undefined;
        returnOnInvestment?: number | undefined;
        costPerClick?: number | undefined;
        costPerConversion?: number | undefined;
        conversionRate?: number | undefined;
    };

    export const inboundSchema: z.ZodType<PerformanceMetrics, z.ZodTypeDef, Inbound> = z
        .object({
            impressions: z.number().optional(),
            clicks: z.number().optional(),
            conversions: z.number().optional(),
            spend: z.number().optional(),
            returnOnInvestment: z.number().optional(),
            costPerClick: z.number().optional(),
            costPerConversion: z.number().optional(),
            conversionRate: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.impressions === undefined ? null : { impressions: v.impressions }),
                ...(v.clicks === undefined ? null : { clicks: v.clicks }),
                ...(v.conversions === undefined ? null : { conversions: v.conversions }),
                ...(v.spend === undefined ? null : { spend: v.spend }),
                ...(v.returnOnInvestment === undefined
                    ? null
                    : { returnOnInvestment: v.returnOnInvestment }),
                ...(v.costPerClick === undefined ? null : { costPerClick: v.costPerClick }),
                ...(v.costPerConversion === undefined
                    ? null
                    : { costPerConversion: v.costPerConversion }),
                ...(v.conversionRate === undefined ? null : { conversionRate: v.conversionRate }),
            };
        });

    export type Outbound = {
        impressions?: number | undefined;
        clicks?: number | undefined;
        conversions?: number | undefined;
        spend?: number | undefined;
        returnOnInvestment?: number | undefined;
        costPerClick?: number | undefined;
        costPerConversion?: number | undefined;
        conversionRate?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PerformanceMetrics> = z
        .object({
            impressions: z.number().optional(),
            clicks: z.number().optional(),
            conversions: z.number().optional(),
            spend: z.number().optional(),
            returnOnInvestment: z.number().optional(),
            costPerClick: z.number().optional(),
            costPerConversion: z.number().optional(),
            conversionRate: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.impressions === undefined ? null : { impressions: v.impressions }),
                ...(v.clicks === undefined ? null : { clicks: v.clicks }),
                ...(v.conversions === undefined ? null : { conversions: v.conversions }),
                ...(v.spend === undefined ? null : { spend: v.spend }),
                ...(v.returnOnInvestment === undefined
                    ? null
                    : { returnOnInvestment: v.returnOnInvestment }),
                ...(v.costPerClick === undefined ? null : { costPerClick: v.costPerClick }),
                ...(v.costPerConversion === undefined
                    ? null
                    : { costPerConversion: v.costPerConversion }),
                ...(v.conversionRate === undefined ? null : { conversionRate: v.conversionRate }),
            };
        });
}

/** @internal */
export const PatchOpportunitiesIdOpportunitiesType$ = z.nativeEnum(
    PatchOpportunitiesIdOpportunitiesType
);

/** @internal */
export namespace PatchOpportunitiesIdMetadata$ {
    export type Inbound = {
        id?: string | undefined;
        key?: string | undefined;
        value?: string | undefined;
        type?: PatchOpportunitiesIdOpportunitiesType | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        entityId?: string | undefined;
        entityType?: string | undefined;
    };

    export const inboundSchema: z.ZodType<PatchOpportunitiesIdMetadata, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            key: z.string().optional(),
            value: z.string().optional(),
            type: PatchOpportunitiesIdOpportunitiesType$.optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            entityId: z.string().optional(),
            entityType: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.key === undefined ? null : { key: v.key }),
                ...(v.value === undefined ? null : { value: v.value }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.entityId === undefined ? null : { entityId: v.entityId }),
                ...(v.entityType === undefined ? null : { entityType: v.entityType }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        key?: string | undefined;
        value?: string | undefined;
        type?: PatchOpportunitiesIdOpportunitiesType | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        entityId?: string | undefined;
        entityType?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchOpportunitiesIdMetadata> = z
        .object({
            id: z.string().optional(),
            key: z.string().optional(),
            value: z.string().optional(),
            type: PatchOpportunitiesIdOpportunitiesType$.optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            entityId: z.string().optional(),
            entityType: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.key === undefined ? null : { key: v.key }),
                ...(v.value === undefined ? null : { value: v.value }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.entityId === undefined ? null : { entityId: v.entityId }),
                ...(v.entityType === undefined ? null : { entityType: v.entityType }),
            };
        });
}

/** @internal */
export const EntityType$ = z.nativeEnum(EntityType);

/** @internal */
export namespace PatchOpportunitiesIdAssociatedWith$ {
    export type Inbound = {
        entityId?: string | undefined;
        entityType?: EntityType | undefined;
        attributes?: Array<string> | undefined;
    };

    export const inboundSchema: z.ZodType<
        PatchOpportunitiesIdAssociatedWith,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            entityId: z.string().optional(),
            entityType: EntityType$.optional(),
            attributes: z.array(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.entityId === undefined ? null : { entityId: v.entityId }),
                ...(v.entityType === undefined ? null : { entityType: v.entityType }),
                ...(v.attributes === undefined ? null : { attributes: v.attributes }),
            };
        });

    export type Outbound = {
        entityId?: string | undefined;
        entityType?: EntityType | undefined;
        attributes?: Array<string> | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PatchOpportunitiesIdAssociatedWith
    > = z
        .object({
            entityId: z.string().optional(),
            entityType: EntityType$.optional(),
            attributes: z.array(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.entityId === undefined ? null : { entityId: v.entityId }),
                ...(v.entityType === undefined ? null : { entityType: v.entityType }),
                ...(v.attributes === undefined ? null : { attributes: v.attributes }),
            };
        });
}

/** @internal */
export const AccessControlType$ = z.nativeEnum(AccessControlType);

/** @internal */
export const PatchOpportunitiesIdOpportunitiesRequestType$ = z.nativeEnum(
    PatchOpportunitiesIdOpportunitiesRequestType
);

/** @internal */
export namespace AssigneeDetails$ {
    export type Inbound = {
        identifier?: string | undefined;
        displayName?: string | undefined;
        type?: PatchOpportunitiesIdOpportunitiesRequestType | undefined;
    };

    export const inboundSchema: z.ZodType<AssigneeDetails, z.ZodTypeDef, Inbound> = z
        .object({
            identifier: z.string().optional(),
            displayName: z.string().optional(),
            type: PatchOpportunitiesIdOpportunitiesRequestType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.identifier === undefined ? null : { identifier: v.identifier }),
                ...(v.displayName === undefined ? null : { displayName: v.displayName }),
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });

    export type Outbound = {
        identifier?: string | undefined;
        displayName?: string | undefined;
        type?: PatchOpportunitiesIdOpportunitiesRequestType | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, AssigneeDetails> = z
        .object({
            identifier: z.string().optional(),
            displayName: z.string().optional(),
            type: PatchOpportunitiesIdOpportunitiesRequestType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.identifier === undefined ? null : { identifier: v.identifier }),
                ...(v.displayName === undefined ? null : { displayName: v.displayName }),
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });
}

/** @internal */
export const IdentifierType$ = z.nativeEnum(IdentifierType);

/** @internal */
export namespace PatchOpportunitiesIdPermissions$ {
    export type Inbound = {
        canView?: Array<string> | undefined;
        canEdit?: Array<string> | undefined;
        canDelete?: Array<string> | undefined;
        roles?: Array<string> | undefined;
        accessControlType?: AccessControlType | undefined;
        assigneeDetails?: AssigneeDetails$.Inbound | undefined;
        identifierType?: IdentifierType | undefined;
    };

    export const inboundSchema: z.ZodType<PatchOpportunitiesIdPermissions, z.ZodTypeDef, Inbound> =
        z
            .object({
                canView: z.array(z.string()).optional(),
                canEdit: z.array(z.string()).optional(),
                canDelete: z.array(z.string()).optional(),
                roles: z.array(z.string()).optional(),
                accessControlType: AccessControlType$.optional(),
                assigneeDetails: z.lazy(() => AssigneeDetails$.inboundSchema).optional(),
                identifierType: IdentifierType$.optional(),
            })
            .transform((v) => {
                return {
                    ...(v.canView === undefined ? null : { canView: v.canView }),
                    ...(v.canEdit === undefined ? null : { canEdit: v.canEdit }),
                    ...(v.canDelete === undefined ? null : { canDelete: v.canDelete }),
                    ...(v.roles === undefined ? null : { roles: v.roles }),
                    ...(v.accessControlType === undefined
                        ? null
                        : { accessControlType: v.accessControlType }),
                    ...(v.assigneeDetails === undefined
                        ? null
                        : { assigneeDetails: v.assigneeDetails }),
                    ...(v.identifierType === undefined
                        ? null
                        : { identifierType: v.identifierType }),
                };
            });

    export type Outbound = {
        canView?: Array<string> | undefined;
        canEdit?: Array<string> | undefined;
        canDelete?: Array<string> | undefined;
        roles?: Array<string> | undefined;
        accessControlType?: AccessControlType | undefined;
        assigneeDetails?: AssigneeDetails$.Outbound | undefined;
        identifierType?: IdentifierType | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PatchOpportunitiesIdPermissions
    > = z
        .object({
            canView: z.array(z.string()).optional(),
            canEdit: z.array(z.string()).optional(),
            canDelete: z.array(z.string()).optional(),
            roles: z.array(z.string()).optional(),
            accessControlType: AccessControlType$.optional(),
            assigneeDetails: z.lazy(() => AssigneeDetails$.outboundSchema).optional(),
            identifierType: IdentifierType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.canView === undefined ? null : { canView: v.canView }),
                ...(v.canEdit === undefined ? null : { canEdit: v.canEdit }),
                ...(v.canDelete === undefined ? null : { canDelete: v.canDelete }),
                ...(v.roles === undefined ? null : { roles: v.roles }),
                ...(v.accessControlType === undefined
                    ? null
                    : { accessControlType: v.accessControlType }),
                ...(v.assigneeDetails === undefined
                    ? null
                    : { assigneeDetails: v.assigneeDetails }),
                ...(v.identifierType === undefined ? null : { identifierType: v.identifierType }),
            };
        });
}

/** @internal */
export namespace CreativeAssets$ {
    export type Inbound = {
        id?: string | undefined;
        fileName?: string | undefined;
        fileSize?: number | undefined;
        fileType?: string | undefined;
        url?: string | undefined;
        thumbnailUrl?: string | undefined;
        previewUrl?: string | undefined;
        content?: string | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        metadata?: PatchOpportunitiesIdMetadata$.Inbound | undefined;
        associatedWith?: PatchOpportunitiesIdAssociatedWith$.Inbound | undefined;
        permissions?: PatchOpportunitiesIdPermissions$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<CreativeAssets, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            fileName: z.string().optional(),
            fileSize: z.number().optional(),
            fileType: z.string().optional(),
            url: z.string().optional(),
            thumbnailUrl: z.string().optional(),
            previewUrl: z.string().optional(),
            content: z.string().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            metadata: z.lazy(() => PatchOpportunitiesIdMetadata$.inboundSchema).optional(),
            associatedWith: z
                .lazy(() => PatchOpportunitiesIdAssociatedWith$.inboundSchema)
                .optional(),
            permissions: z.lazy(() => PatchOpportunitiesIdPermissions$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fileName === undefined ? null : { fileName: v.fileName }),
                ...(v.fileSize === undefined ? null : { fileSize: v.fileSize }),
                ...(v.fileType === undefined ? null : { fileType: v.fileType }),
                ...(v.url === undefined ? null : { url: v.url }),
                ...(v.thumbnailUrl === undefined ? null : { thumbnailUrl: v.thumbnailUrl }),
                ...(v.previewUrl === undefined ? null : { previewUrl: v.previewUrl }),
                ...(v.content === undefined ? null : { content: v.content }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                ...(v.associatedWith === undefined ? null : { associatedWith: v.associatedWith }),
                ...(v.permissions === undefined ? null : { permissions: v.permissions }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        fileName?: string | undefined;
        fileSize?: number | undefined;
        fileType?: string | undefined;
        url?: string | undefined;
        thumbnailUrl?: string | undefined;
        previewUrl?: string | undefined;
        content?: string | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        metadata?: PatchOpportunitiesIdMetadata$.Outbound | undefined;
        associatedWith?: PatchOpportunitiesIdAssociatedWith$.Outbound | undefined;
        permissions?: PatchOpportunitiesIdPermissions$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreativeAssets> = z
        .object({
            id: z.string().optional(),
            fileName: z.string().optional(),
            fileSize: z.number().optional(),
            fileType: z.string().optional(),
            url: z.string().optional(),
            thumbnailUrl: z.string().optional(),
            previewUrl: z.string().optional(),
            content: z.string().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            metadata: z.lazy(() => PatchOpportunitiesIdMetadata$.outboundSchema).optional(),
            associatedWith: z
                .lazy(() => PatchOpportunitiesIdAssociatedWith$.outboundSchema)
                .optional(),
            permissions: z.lazy(() => PatchOpportunitiesIdPermissions$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fileName === undefined ? null : { fileName: v.fileName }),
                ...(v.fileSize === undefined ? null : { fileSize: v.fileSize }),
                ...(v.fileType === undefined ? null : { fileType: v.fileType }),
                ...(v.url === undefined ? null : { url: v.url }),
                ...(v.thumbnailUrl === undefined ? null : { thumbnailUrl: v.thumbnailUrl }),
                ...(v.previewUrl === undefined ? null : { previewUrl: v.previewUrl }),
                ...(v.content === undefined ? null : { content: v.content }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                ...(v.associatedWith === undefined ? null : { associatedWith: v.associatedWith }),
                ...(v.permissions === undefined ? null : { permissions: v.permissions }),
            };
        });
}

/** @internal */
export namespace PatchOpportunitiesIdCampaign$ {
    export type Inbound = {
        id?: string | undefined;
        name?: string | undefined;
        type?: PatchOpportunitiesIdType | undefined;
        status?: PatchOpportunitiesIdStatus | undefined;
        startDate?: number | undefined;
        endDate?: number | undefined;
        budget?: number | undefined;
        targetAudience?: string | undefined;
        channels?: Array<string> | undefined;
        performanceMetrics?: PerformanceMetrics$.Inbound | undefined;
        creativeAssets?: CreativeAssets$.Inbound | undefined;
        tags?: Array<string> | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<PatchOpportunitiesIdCampaign, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            name: z.string().optional(),
            type: PatchOpportunitiesIdType$.optional(),
            status: PatchOpportunitiesIdStatus$.optional(),
            startDate: z.number().optional(),
            endDate: z.number().optional(),
            budget: z.number().optional(),
            targetAudience: z.string().optional(),
            channels: z.array(z.string()).optional(),
            performanceMetrics: z.lazy(() => PerformanceMetrics$.inboundSchema).optional(),
            creativeAssets: z.lazy(() => CreativeAssets$.inboundSchema).optional(),
            tags: z.array(z.string()).optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.startDate === undefined ? null : { startDate: v.startDate }),
                ...(v.endDate === undefined ? null : { endDate: v.endDate }),
                ...(v.budget === undefined ? null : { budget: v.budget }),
                ...(v.targetAudience === undefined ? null : { targetAudience: v.targetAudience }),
                ...(v.channels === undefined ? null : { channels: v.channels }),
                ...(v.performanceMetrics === undefined
                    ? null
                    : { performanceMetrics: v.performanceMetrics }),
                ...(v.creativeAssets === undefined ? null : { creativeAssets: v.creativeAssets }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        name?: string | undefined;
        type?: PatchOpportunitiesIdType | undefined;
        status?: PatchOpportunitiesIdStatus | undefined;
        startDate?: number | undefined;
        endDate?: number | undefined;
        budget?: number | undefined;
        targetAudience?: string | undefined;
        channels?: Array<string> | undefined;
        performanceMetrics?: PerformanceMetrics$.Outbound | undefined;
        creativeAssets?: CreativeAssets$.Outbound | undefined;
        tags?: Array<string> | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchOpportunitiesIdCampaign> = z
        .object({
            id: z.string().optional(),
            name: z.string().optional(),
            type: PatchOpportunitiesIdType$.optional(),
            status: PatchOpportunitiesIdStatus$.optional(),
            startDate: z.number().optional(),
            endDate: z.number().optional(),
            budget: z.number().optional(),
            targetAudience: z.string().optional(),
            channels: z.array(z.string()).optional(),
            performanceMetrics: z.lazy(() => PerformanceMetrics$.outboundSchema).optional(),
            creativeAssets: z.lazy(() => CreativeAssets$.outboundSchema).optional(),
            tags: z.array(z.string()).optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.startDate === undefined ? null : { startDate: v.startDate }),
                ...(v.endDate === undefined ? null : { endDate: v.endDate }),
                ...(v.budget === undefined ? null : { budget: v.budget }),
                ...(v.targetAudience === undefined ? null : { targetAudience: v.targetAudience }),
                ...(v.channels === undefined ? null : { channels: v.channels }),
                ...(v.performanceMetrics === undefined
                    ? null
                    : { performanceMetrics: v.performanceMetrics }),
                ...(v.creativeAssets === undefined ? null : { creativeAssets: v.creativeAssets }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });
}

/** @internal */
export const AccountType$ = z.nativeEnum(AccountType);

/** @internal */
export const Rating$ = z.nativeEnum(Rating);

/** @internal */
export const PatchOpportunitiesIdOpportunitiesRequestRequestBodyType$ = z.nativeEnum(
    PatchOpportunitiesIdOpportunitiesRequestRequestBodyType
);

/** @internal */
export namespace PatchOpportunitiesIdGeoLocation$ {
    export type Inbound = {
        latitude?: number | undefined;
        longitude?: number | undefined;
        altitude?: number | undefined;
        accuracy?: number | undefined;
        altitudeAccuracy?: number | undefined;
        heading?: number | undefined;
        speed?: number | undefined;
        timestamp?: number | undefined;
    };

    export const inboundSchema: z.ZodType<PatchOpportunitiesIdGeoLocation, z.ZodTypeDef, Inbound> =
        z
            .object({
                latitude: z.number().optional(),
                longitude: z.number().optional(),
                altitude: z.number().optional(),
                accuracy: z.number().optional(),
                altitudeAccuracy: z.number().optional(),
                heading: z.number().optional(),
                speed: z.number().optional(),
                timestamp: z.number().optional(),
            })
            .transform((v) => {
                return {
                    ...(v.latitude === undefined ? null : { latitude: v.latitude }),
                    ...(v.longitude === undefined ? null : { longitude: v.longitude }),
                    ...(v.altitude === undefined ? null : { altitude: v.altitude }),
                    ...(v.accuracy === undefined ? null : { accuracy: v.accuracy }),
                    ...(v.altitudeAccuracy === undefined
                        ? null
                        : { altitudeAccuracy: v.altitudeAccuracy }),
                    ...(v.heading === undefined ? null : { heading: v.heading }),
                    ...(v.speed === undefined ? null : { speed: v.speed }),
                    ...(v.timestamp === undefined ? null : { timestamp: v.timestamp }),
                };
            });

    export type Outbound = {
        latitude?: number | undefined;
        longitude?: number | undefined;
        altitude?: number | undefined;
        accuracy?: number | undefined;
        altitudeAccuracy?: number | undefined;
        heading?: number | undefined;
        speed?: number | undefined;
        timestamp?: number | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PatchOpportunitiesIdGeoLocation
    > = z
        .object({
            latitude: z.number().optional(),
            longitude: z.number().optional(),
            altitude: z.number().optional(),
            accuracy: z.number().optional(),
            altitudeAccuracy: z.number().optional(),
            heading: z.number().optional(),
            speed: z.number().optional(),
            timestamp: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.latitude === undefined ? null : { latitude: v.latitude }),
                ...(v.longitude === undefined ? null : { longitude: v.longitude }),
                ...(v.altitude === undefined ? null : { altitude: v.altitude }),
                ...(v.accuracy === undefined ? null : { accuracy: v.accuracy }),
                ...(v.altitudeAccuracy === undefined
                    ? null
                    : { altitudeAccuracy: v.altitudeAccuracy }),
                ...(v.heading === undefined ? null : { heading: v.heading }),
                ...(v.speed === undefined ? null : { speed: v.speed }),
                ...(v.timestamp === undefined ? null : { timestamp: v.timestamp }),
            };
        });
}

/** @internal */
export const PatchOpportunitiesIdFieldType$ = z.nativeEnum(PatchOpportunitiesIdFieldType);

/** @internal */
export namespace PatchOpportunitiesIdCustomFields$ {
    export type Inbound = {
        id?: string | undefined;
        fieldName?: string | undefined;
        fieldValue?: string | undefined;
        fieldType?: PatchOpportunitiesIdFieldType | undefined;
    };

    export const inboundSchema: z.ZodType<PatchOpportunitiesIdCustomFields, z.ZodTypeDef, Inbound> =
        z
            .object({
                id: z.string().optional(),
                fieldName: z.string().optional(),
                fieldValue: z.string().optional(),
                fieldType: PatchOpportunitiesIdFieldType$.optional(),
            })
            .transform((v) => {
                return {
                    ...(v.id === undefined ? null : { id: v.id }),
                    ...(v.fieldName === undefined ? null : { fieldName: v.fieldName }),
                    ...(v.fieldValue === undefined ? null : { fieldValue: v.fieldValue }),
                    ...(v.fieldType === undefined ? null : { fieldType: v.fieldType }),
                };
            });

    export type Outbound = {
        id?: string | undefined;
        fieldName?: string | undefined;
        fieldValue?: string | undefined;
        fieldType?: PatchOpportunitiesIdFieldType | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PatchOpportunitiesIdCustomFields
    > = z
        .object({
            id: z.string().optional(),
            fieldName: z.string().optional(),
            fieldValue: z.string().optional(),
            fieldType: PatchOpportunitiesIdFieldType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fieldName === undefined ? null : { fieldName: v.fieldName }),
                ...(v.fieldValue === undefined ? null : { fieldValue: v.fieldValue }),
                ...(v.fieldType === undefined ? null : { fieldType: v.fieldType }),
            };
        });
}

/** @internal */
export namespace BillingAddress$ {
    export type Inbound = {
        id?: string | undefined;
        contactId?: string | undefined;
        accountId?: string | undefined;
        firstName?: string | undefined;
        lastName?: string | undefined;
        name?: string | undefined;
        companyName?: string | undefined;
        email?: string | undefined;
        phone?: string | undefined;
        street?: string | undefined;
        addressLine2?: string | undefined;
        city?: string | undefined;
        province?: string | undefined;
        region?: string | undefined;
        postalCode?: string | undefined;
        postalCodeExtension?: string | undefined;
        country?: string | undefined;
        countryCode?: string | undefined;
        type?: PatchOpportunitiesIdOpportunitiesRequestRequestBodyType | undefined;
        geoLocation?: PatchOpportunitiesIdGeoLocation$.Inbound | undefined;
        customFields?: Array<PatchOpportunitiesIdCustomFields$.Inbound> | undefined;
        subdivisionCode?: string | undefined;
    };

    export const inboundSchema: z.ZodType<BillingAddress, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            contactId: z.string().optional(),
            accountId: z.string().optional(),
            firstName: z.string().optional(),
            lastName: z.string().optional(),
            name: z.string().optional(),
            companyName: z.string().optional(),
            email: z.string().optional(),
            phone: z.string().optional(),
            street: z.string().optional(),
            addressLine2: z.string().optional(),
            city: z.string().optional(),
            province: z.string().optional(),
            region: z.string().optional(),
            postalCode: z.string().optional(),
            postalCodeExtension: z.string().optional(),
            country: z.string().optional(),
            countryCode: z.string().optional(),
            type: PatchOpportunitiesIdOpportunitiesRequestRequestBodyType$.optional(),
            geoLocation: z.lazy(() => PatchOpportunitiesIdGeoLocation$.inboundSchema).optional(),
            customFields: z
                .array(z.lazy(() => PatchOpportunitiesIdCustomFields$.inboundSchema))
                .optional(),
            subdivisionCode: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.contactId === undefined ? null : { contactId: v.contactId }),
                ...(v.accountId === undefined ? null : { accountId: v.accountId }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.companyName === undefined ? null : { companyName: v.companyName }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.phone === undefined ? null : { phone: v.phone }),
                ...(v.street === undefined ? null : { street: v.street }),
                ...(v.addressLine2 === undefined ? null : { addressLine2: v.addressLine2 }),
                ...(v.city === undefined ? null : { city: v.city }),
                ...(v.province === undefined ? null : { province: v.province }),
                ...(v.region === undefined ? null : { region: v.region }),
                ...(v.postalCode === undefined ? null : { postalCode: v.postalCode }),
                ...(v.postalCodeExtension === undefined
                    ? null
                    : { postalCodeExtension: v.postalCodeExtension }),
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.countryCode === undefined ? null : { countryCode: v.countryCode }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.geoLocation === undefined ? null : { geoLocation: v.geoLocation }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                ...(v.subdivisionCode === undefined
                    ? null
                    : { subdivisionCode: v.subdivisionCode }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        contactId?: string | undefined;
        accountId?: string | undefined;
        firstName?: string | undefined;
        lastName?: string | undefined;
        name?: string | undefined;
        companyName?: string | undefined;
        email?: string | undefined;
        phone?: string | undefined;
        street?: string | undefined;
        addressLine2?: string | undefined;
        city?: string | undefined;
        province?: string | undefined;
        region?: string | undefined;
        postalCode?: string | undefined;
        postalCodeExtension?: string | undefined;
        country?: string | undefined;
        countryCode?: string | undefined;
        type?: PatchOpportunitiesIdOpportunitiesRequestRequestBodyType | undefined;
        geoLocation?: PatchOpportunitiesIdGeoLocation$.Outbound | undefined;
        customFields?: Array<PatchOpportunitiesIdCustomFields$.Outbound> | undefined;
        subdivisionCode?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, BillingAddress> = z
        .object({
            id: z.string().optional(),
            contactId: z.string().optional(),
            accountId: z.string().optional(),
            firstName: z.string().optional(),
            lastName: z.string().optional(),
            name: z.string().optional(),
            companyName: z.string().optional(),
            email: z.string().optional(),
            phone: z.string().optional(),
            street: z.string().optional(),
            addressLine2: z.string().optional(),
            city: z.string().optional(),
            province: z.string().optional(),
            region: z.string().optional(),
            postalCode: z.string().optional(),
            postalCodeExtension: z.string().optional(),
            country: z.string().optional(),
            countryCode: z.string().optional(),
            type: PatchOpportunitiesIdOpportunitiesRequestRequestBodyType$.optional(),
            geoLocation: z.lazy(() => PatchOpportunitiesIdGeoLocation$.outboundSchema).optional(),
            customFields: z
                .array(z.lazy(() => PatchOpportunitiesIdCustomFields$.outboundSchema))
                .optional(),
            subdivisionCode: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.contactId === undefined ? null : { contactId: v.contactId }),
                ...(v.accountId === undefined ? null : { accountId: v.accountId }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.companyName === undefined ? null : { companyName: v.companyName }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.phone === undefined ? null : { phone: v.phone }),
                ...(v.street === undefined ? null : { street: v.street }),
                ...(v.addressLine2 === undefined ? null : { addressLine2: v.addressLine2 }),
                ...(v.city === undefined ? null : { city: v.city }),
                ...(v.province === undefined ? null : { province: v.province }),
                ...(v.region === undefined ? null : { region: v.region }),
                ...(v.postalCode === undefined ? null : { postalCode: v.postalCode }),
                ...(v.postalCodeExtension === undefined
                    ? null
                    : { postalCodeExtension: v.postalCodeExtension }),
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.countryCode === undefined ? null : { countryCode: v.countryCode }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.geoLocation === undefined ? null : { geoLocation: v.geoLocation }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                ...(v.subdivisionCode === undefined
                    ? null
                    : { subdivisionCode: v.subdivisionCode }),
            };
        });
}

/** @internal */
export const PatchOpportunitiesIdOpportunitiesRequestRequestBodyAccountType$ = z.nativeEnum(
    PatchOpportunitiesIdOpportunitiesRequestRequestBodyAccountType
);

/** @internal */
export namespace PatchOpportunitiesIdOpportunitiesGeoLocation$ {
    export type Inbound = {
        latitude?: number | undefined;
        longitude?: number | undefined;
        altitude?: number | undefined;
        accuracy?: number | undefined;
        altitudeAccuracy?: number | undefined;
        heading?: number | undefined;
        speed?: number | undefined;
        timestamp?: number | undefined;
    };

    export const inboundSchema: z.ZodType<
        PatchOpportunitiesIdOpportunitiesGeoLocation,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            latitude: z.number().optional(),
            longitude: z.number().optional(),
            altitude: z.number().optional(),
            accuracy: z.number().optional(),
            altitudeAccuracy: z.number().optional(),
            heading: z.number().optional(),
            speed: z.number().optional(),
            timestamp: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.latitude === undefined ? null : { latitude: v.latitude }),
                ...(v.longitude === undefined ? null : { longitude: v.longitude }),
                ...(v.altitude === undefined ? null : { altitude: v.altitude }),
                ...(v.accuracy === undefined ? null : { accuracy: v.accuracy }),
                ...(v.altitudeAccuracy === undefined
                    ? null
                    : { altitudeAccuracy: v.altitudeAccuracy }),
                ...(v.heading === undefined ? null : { heading: v.heading }),
                ...(v.speed === undefined ? null : { speed: v.speed }),
                ...(v.timestamp === undefined ? null : { timestamp: v.timestamp }),
            };
        });

    export type Outbound = {
        latitude?: number | undefined;
        longitude?: number | undefined;
        altitude?: number | undefined;
        accuracy?: number | undefined;
        altitudeAccuracy?: number | undefined;
        heading?: number | undefined;
        speed?: number | undefined;
        timestamp?: number | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PatchOpportunitiesIdOpportunitiesGeoLocation
    > = z
        .object({
            latitude: z.number().optional(),
            longitude: z.number().optional(),
            altitude: z.number().optional(),
            accuracy: z.number().optional(),
            altitudeAccuracy: z.number().optional(),
            heading: z.number().optional(),
            speed: z.number().optional(),
            timestamp: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.latitude === undefined ? null : { latitude: v.latitude }),
                ...(v.longitude === undefined ? null : { longitude: v.longitude }),
                ...(v.altitude === undefined ? null : { altitude: v.altitude }),
                ...(v.accuracy === undefined ? null : { accuracy: v.accuracy }),
                ...(v.altitudeAccuracy === undefined
                    ? null
                    : { altitudeAccuracy: v.altitudeAccuracy }),
                ...(v.heading === undefined ? null : { heading: v.heading }),
                ...(v.speed === undefined ? null : { speed: v.speed }),
                ...(v.timestamp === undefined ? null : { timestamp: v.timestamp }),
            };
        });
}

/** @internal */
export const PatchOpportunitiesIdOpportunitiesFieldType$ = z.nativeEnum(
    PatchOpportunitiesIdOpportunitiesFieldType
);

/** @internal */
export namespace PatchOpportunitiesIdOpportunitiesCustomFields$ {
    export type Inbound = {
        id?: string | undefined;
        fieldName?: string | undefined;
        fieldValue?: string | undefined;
        fieldType?: PatchOpportunitiesIdOpportunitiesFieldType | undefined;
    };

    export const inboundSchema: z.ZodType<
        PatchOpportunitiesIdOpportunitiesCustomFields,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            id: z.string().optional(),
            fieldName: z.string().optional(),
            fieldValue: z.string().optional(),
            fieldType: PatchOpportunitiesIdOpportunitiesFieldType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fieldName === undefined ? null : { fieldName: v.fieldName }),
                ...(v.fieldValue === undefined ? null : { fieldValue: v.fieldValue }),
                ...(v.fieldType === undefined ? null : { fieldType: v.fieldType }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        fieldName?: string | undefined;
        fieldValue?: string | undefined;
        fieldType?: PatchOpportunitiesIdOpportunitiesFieldType | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PatchOpportunitiesIdOpportunitiesCustomFields
    > = z
        .object({
            id: z.string().optional(),
            fieldName: z.string().optional(),
            fieldValue: z.string().optional(),
            fieldType: PatchOpportunitiesIdOpportunitiesFieldType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fieldName === undefined ? null : { fieldName: v.fieldName }),
                ...(v.fieldValue === undefined ? null : { fieldValue: v.fieldValue }),
                ...(v.fieldType === undefined ? null : { fieldType: v.fieldType }),
            };
        });
}

/** @internal */
export namespace ShippingAddress$ {
    export type Inbound = {
        id?: string | undefined;
        contactId?: string | undefined;
        accountId?: string | undefined;
        firstName?: string | undefined;
        lastName?: string | undefined;
        name?: string | undefined;
        companyName?: string | undefined;
        email?: string | undefined;
        phone?: string | undefined;
        street?: string | undefined;
        addressLine2?: string | undefined;
        city?: string | undefined;
        province?: string | undefined;
        region?: string | undefined;
        postalCode?: string | undefined;
        postalCodeExtension?: string | undefined;
        country?: string | undefined;
        countryCode?: string | undefined;
        type?: PatchOpportunitiesIdOpportunitiesRequestRequestBodyAccountType | undefined;
        geoLocation?: PatchOpportunitiesIdOpportunitiesGeoLocation$.Inbound | undefined;
        customFields?: Array<PatchOpportunitiesIdOpportunitiesCustomFields$.Inbound> | undefined;
        subdivisionCode?: string | undefined;
    };

    export const inboundSchema: z.ZodType<ShippingAddress, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            contactId: z.string().optional(),
            accountId: z.string().optional(),
            firstName: z.string().optional(),
            lastName: z.string().optional(),
            name: z.string().optional(),
            companyName: z.string().optional(),
            email: z.string().optional(),
            phone: z.string().optional(),
            street: z.string().optional(),
            addressLine2: z.string().optional(),
            city: z.string().optional(),
            province: z.string().optional(),
            region: z.string().optional(),
            postalCode: z.string().optional(),
            postalCodeExtension: z.string().optional(),
            country: z.string().optional(),
            countryCode: z.string().optional(),
            type: PatchOpportunitiesIdOpportunitiesRequestRequestBodyAccountType$.optional(),
            geoLocation: z
                .lazy(() => PatchOpportunitiesIdOpportunitiesGeoLocation$.inboundSchema)
                .optional(),
            customFields: z
                .array(z.lazy(() => PatchOpportunitiesIdOpportunitiesCustomFields$.inboundSchema))
                .optional(),
            subdivisionCode: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.contactId === undefined ? null : { contactId: v.contactId }),
                ...(v.accountId === undefined ? null : { accountId: v.accountId }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.companyName === undefined ? null : { companyName: v.companyName }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.phone === undefined ? null : { phone: v.phone }),
                ...(v.street === undefined ? null : { street: v.street }),
                ...(v.addressLine2 === undefined ? null : { addressLine2: v.addressLine2 }),
                ...(v.city === undefined ? null : { city: v.city }),
                ...(v.province === undefined ? null : { province: v.province }),
                ...(v.region === undefined ? null : { region: v.region }),
                ...(v.postalCode === undefined ? null : { postalCode: v.postalCode }),
                ...(v.postalCodeExtension === undefined
                    ? null
                    : { postalCodeExtension: v.postalCodeExtension }),
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.countryCode === undefined ? null : { countryCode: v.countryCode }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.geoLocation === undefined ? null : { geoLocation: v.geoLocation }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                ...(v.subdivisionCode === undefined
                    ? null
                    : { subdivisionCode: v.subdivisionCode }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        contactId?: string | undefined;
        accountId?: string | undefined;
        firstName?: string | undefined;
        lastName?: string | undefined;
        name?: string | undefined;
        companyName?: string | undefined;
        email?: string | undefined;
        phone?: string | undefined;
        street?: string | undefined;
        addressLine2?: string | undefined;
        city?: string | undefined;
        province?: string | undefined;
        region?: string | undefined;
        postalCode?: string | undefined;
        postalCodeExtension?: string | undefined;
        country?: string | undefined;
        countryCode?: string | undefined;
        type?: PatchOpportunitiesIdOpportunitiesRequestRequestBodyAccountType | undefined;
        geoLocation?: PatchOpportunitiesIdOpportunitiesGeoLocation$.Outbound | undefined;
        customFields?: Array<PatchOpportunitiesIdOpportunitiesCustomFields$.Outbound> | undefined;
        subdivisionCode?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ShippingAddress> = z
        .object({
            id: z.string().optional(),
            contactId: z.string().optional(),
            accountId: z.string().optional(),
            firstName: z.string().optional(),
            lastName: z.string().optional(),
            name: z.string().optional(),
            companyName: z.string().optional(),
            email: z.string().optional(),
            phone: z.string().optional(),
            street: z.string().optional(),
            addressLine2: z.string().optional(),
            city: z.string().optional(),
            province: z.string().optional(),
            region: z.string().optional(),
            postalCode: z.string().optional(),
            postalCodeExtension: z.string().optional(),
            country: z.string().optional(),
            countryCode: z.string().optional(),
            type: PatchOpportunitiesIdOpportunitiesRequestRequestBodyAccountType$.optional(),
            geoLocation: z
                .lazy(() => PatchOpportunitiesIdOpportunitiesGeoLocation$.outboundSchema)
                .optional(),
            customFields: z
                .array(z.lazy(() => PatchOpportunitiesIdOpportunitiesCustomFields$.outboundSchema))
                .optional(),
            subdivisionCode: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.contactId === undefined ? null : { contactId: v.contactId }),
                ...(v.accountId === undefined ? null : { accountId: v.accountId }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.companyName === undefined ? null : { companyName: v.companyName }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.phone === undefined ? null : { phone: v.phone }),
                ...(v.street === undefined ? null : { street: v.street }),
                ...(v.addressLine2 === undefined ? null : { addressLine2: v.addressLine2 }),
                ...(v.city === undefined ? null : { city: v.city }),
                ...(v.province === undefined ? null : { province: v.province }),
                ...(v.region === undefined ? null : { region: v.region }),
                ...(v.postalCode === undefined ? null : { postalCode: v.postalCode }),
                ...(v.postalCodeExtension === undefined
                    ? null
                    : { postalCodeExtension: v.postalCodeExtension }),
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.countryCode === undefined ? null : { countryCode: v.countryCode }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.geoLocation === undefined ? null : { geoLocation: v.geoLocation }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                ...(v.subdivisionCode === undefined
                    ? null
                    : { subdivisionCode: v.subdivisionCode }),
            };
        });
}

/** @internal */
export const PatchOpportunitiesIdOpportunitiesStatus$ = z.nativeEnum(
    PatchOpportunitiesIdOpportunitiesStatus
);

/** @internal */
export const PatchOpportunitiesIdOpportunitiesRequestFieldType$ = z.nativeEnum(
    PatchOpportunitiesIdOpportunitiesRequestFieldType
);

/** @internal */
export namespace PatchOpportunitiesIdOpportunitiesRequestCustomFields$ {
    export type Inbound = {
        id?: string | undefined;
        fieldName?: string | undefined;
        fieldValue?: string | undefined;
        fieldType?: PatchOpportunitiesIdOpportunitiesRequestFieldType | undefined;
    };

    export const inboundSchema: z.ZodType<
        PatchOpportunitiesIdOpportunitiesRequestCustomFields,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            id: z.string().optional(),
            fieldName: z.string().optional(),
            fieldValue: z.string().optional(),
            fieldType: PatchOpportunitiesIdOpportunitiesRequestFieldType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fieldName === undefined ? null : { fieldName: v.fieldName }),
                ...(v.fieldValue === undefined ? null : { fieldValue: v.fieldValue }),
                ...(v.fieldType === undefined ? null : { fieldType: v.fieldType }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        fieldName?: string | undefined;
        fieldValue?: string | undefined;
        fieldType?: PatchOpportunitiesIdOpportunitiesRequestFieldType | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PatchOpportunitiesIdOpportunitiesRequestCustomFields
    > = z
        .object({
            id: z.string().optional(),
            fieldName: z.string().optional(),
            fieldValue: z.string().optional(),
            fieldType: PatchOpportunitiesIdOpportunitiesRequestFieldType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fieldName === undefined ? null : { fieldName: v.fieldName }),
                ...(v.fieldValue === undefined ? null : { fieldValue: v.fieldValue }),
                ...(v.fieldType === undefined ? null : { fieldType: v.fieldType }),
            };
        });
}

/** @internal */
export namespace PatchOpportunitiesIdAccount$ {
    export type Inbound = {
        id?: string | undefined;
        name?: string | undefined;
        industry?: string | undefined;
        accountType?: AccountType | undefined;
        rating?: Rating | undefined;
        phone?: string | undefined;
        email?: string | undefined;
        website?: string | undefined;
        billingAddress?: BillingAddress$.Inbound | undefined;
        shippingAddress?: ShippingAddress$.Inbound | undefined;
        numberOfEmployees?: number | undefined;
        annualRevenue?: number | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        status?: PatchOpportunitiesIdOpportunitiesStatus | undefined;
        ownerId?: string | undefined;
        customFields?:
            | Array<PatchOpportunitiesIdOpportunitiesRequestCustomFields$.Inbound>
            | undefined;
        tags?: Array<string> | undefined;
    };

    export const inboundSchema: z.ZodType<PatchOpportunitiesIdAccount, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            name: z.string().optional(),
            industry: z.string().optional(),
            accountType: AccountType$.optional(),
            rating: Rating$.optional(),
            phone: z.string().optional(),
            email: z.string().optional(),
            website: z.string().optional(),
            billingAddress: z.lazy(() => BillingAddress$.inboundSchema).optional(),
            shippingAddress: z.lazy(() => ShippingAddress$.inboundSchema).optional(),
            numberOfEmployees: z.number().optional(),
            annualRevenue: z.number().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            status: PatchOpportunitiesIdOpportunitiesStatus$.optional(),
            ownerId: z.string().optional(),
            customFields: z
                .array(
                    z.lazy(
                        () => PatchOpportunitiesIdOpportunitiesRequestCustomFields$.inboundSchema
                    )
                )
                .optional(),
            tags: z.array(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.industry === undefined ? null : { industry: v.industry }),
                ...(v.accountType === undefined ? null : { accountType: v.accountType }),
                ...(v.rating === undefined ? null : { rating: v.rating }),
                ...(v.phone === undefined ? null : { phone: v.phone }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.website === undefined ? null : { website: v.website }),
                ...(v.billingAddress === undefined ? null : { billingAddress: v.billingAddress }),
                ...(v.shippingAddress === undefined
                    ? null
                    : { shippingAddress: v.shippingAddress }),
                ...(v.numberOfEmployees === undefined
                    ? null
                    : { numberOfEmployees: v.numberOfEmployees }),
                ...(v.annualRevenue === undefined ? null : { annualRevenue: v.annualRevenue }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.ownerId === undefined ? null : { ownerId: v.ownerId }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        name?: string | undefined;
        industry?: string | undefined;
        accountType?: AccountType | undefined;
        rating?: Rating | undefined;
        phone?: string | undefined;
        email?: string | undefined;
        website?: string | undefined;
        billingAddress?: BillingAddress$.Outbound | undefined;
        shippingAddress?: ShippingAddress$.Outbound | undefined;
        numberOfEmployees?: number | undefined;
        annualRevenue?: number | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        status?: PatchOpportunitiesIdOpportunitiesStatus | undefined;
        ownerId?: string | undefined;
        customFields?:
            | Array<PatchOpportunitiesIdOpportunitiesRequestCustomFields$.Outbound>
            | undefined;
        tags?: Array<string> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchOpportunitiesIdAccount> = z
        .object({
            id: z.string().optional(),
            name: z.string().optional(),
            industry: z.string().optional(),
            accountType: AccountType$.optional(),
            rating: Rating$.optional(),
            phone: z.string().optional(),
            email: z.string().optional(),
            website: z.string().optional(),
            billingAddress: z.lazy(() => BillingAddress$.outboundSchema).optional(),
            shippingAddress: z.lazy(() => ShippingAddress$.outboundSchema).optional(),
            numberOfEmployees: z.number().optional(),
            annualRevenue: z.number().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            status: PatchOpportunitiesIdOpportunitiesStatus$.optional(),
            ownerId: z.string().optional(),
            customFields: z
                .array(
                    z.lazy(
                        () => PatchOpportunitiesIdOpportunitiesRequestCustomFields$.outboundSchema
                    )
                )
                .optional(),
            tags: z.array(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.industry === undefined ? null : { industry: v.industry }),
                ...(v.accountType === undefined ? null : { accountType: v.accountType }),
                ...(v.rating === undefined ? null : { rating: v.rating }),
                ...(v.phone === undefined ? null : { phone: v.phone }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.website === undefined ? null : { website: v.website }),
                ...(v.billingAddress === undefined ? null : { billingAddress: v.billingAddress }),
                ...(v.shippingAddress === undefined
                    ? null
                    : { shippingAddress: v.shippingAddress }),
                ...(v.numberOfEmployees === undefined
                    ? null
                    : { numberOfEmployees: v.numberOfEmployees }),
                ...(v.annualRevenue === undefined ? null : { annualRevenue: v.annualRevenue }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.ownerId === undefined ? null : { ownerId: v.ownerId }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
            };
        });
}

/** @internal */
export namespace PatchOpportunitiesIdEmails$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<PatchOpportunitiesIdEmails, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchOpportunitiesIdEmails> =
        z.object({});
}

/** @internal */
export namespace PatchOpportunitiesIdPhones$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<PatchOpportunitiesIdPhones, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchOpportunitiesIdPhones> =
        z.object({});
}

/** @internal */
export namespace PatchOpportunitiesIdAddress$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<PatchOpportunitiesIdAddress, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchOpportunitiesIdAddress> =
        z.object({});
}

/** @internal */
export namespace PatchOpportunitiesIdAddresses$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<PatchOpportunitiesIdAddresses, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchOpportunitiesIdAddresses> =
        z.object({});
}

/** @internal */
export namespace PatchOpportunitiesIdNotes$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<PatchOpportunitiesIdNotes, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchOpportunitiesIdNotes> =
        z.object({});
}

/** @internal */
export namespace PatchOpportunitiesIdSocialProfiles$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<
        PatchOpportunitiesIdSocialProfiles,
        z.ZodTypeDef,
        Inbound
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PatchOpportunitiesIdSocialProfiles
    > = z.object({});
}

/** @internal */
export namespace PatchOpportunitiesIdOpportunitiesRequestRequestBodyCustomFields$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<
        PatchOpportunitiesIdOpportunitiesRequestRequestBodyCustomFields,
        z.ZodTypeDef,
        Inbound
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PatchOpportunitiesIdOpportunitiesRequestRequestBodyCustomFields
    > = z.object({});
}

/** @internal */
export namespace PatchOpportunitiesIdContacts$ {
    export type Inbound = {
        id?: string | undefined;
        firstName?: string | undefined;
        lastName?: string | undefined;
        leadId?: string | undefined;
        company?: string | undefined;
        defaultEmail?: string | undefined;
        emails?: Array<PatchOpportunitiesIdEmails$.Inbound> | undefined;
        defaultPhone?: string | undefined;
        phones?: Array<PatchOpportunitiesIdPhones$.Inbound> | undefined;
        address?: PatchOpportunitiesIdAddress$.Inbound | undefined;
        addresses?: Array<PatchOpportunitiesIdAddresses$.Inbound> | undefined;
        birthday?: number | undefined;
        relationship?: string | undefined;
        note?: string | undefined;
        notes?: PatchOpportunitiesIdNotes$.Inbound | undefined;
        tags?: Array<string> | undefined;
        websites?: Array<string> | undefined;
        socialProfiles?: Array<PatchOpportunitiesIdSocialProfiles$.Inbound> | undefined;
        isActive?: boolean | undefined;
        customFields?:
            | Array<PatchOpportunitiesIdOpportunitiesRequestRequestBodyCustomFields$.Inbound>
            | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
    };

    export const inboundSchema: z.ZodType<PatchOpportunitiesIdContacts, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            firstName: z.string().optional(),
            lastName: z.string().optional(),
            leadId: z.string().optional(),
            company: z.string().optional(),
            defaultEmail: z.string().optional(),
            emails: z.array(z.lazy(() => PatchOpportunitiesIdEmails$.inboundSchema)).optional(),
            defaultPhone: z.string().optional(),
            phones: z.array(z.lazy(() => PatchOpportunitiesIdPhones$.inboundSchema)).optional(),
            address: z.lazy(() => PatchOpportunitiesIdAddress$.inboundSchema).optional(),
            addresses: z
                .array(z.lazy(() => PatchOpportunitiesIdAddresses$.inboundSchema))
                .optional(),
            birthday: z.number().optional(),
            relationship: z.string().optional(),
            note: z.string().optional(),
            notes: z.lazy(() => PatchOpportunitiesIdNotes$.inboundSchema).optional(),
            tags: z.array(z.string()).optional(),
            websites: z.array(z.string()).optional(),
            socialProfiles: z
                .array(z.lazy(() => PatchOpportunitiesIdSocialProfiles$.inboundSchema))
                .optional(),
            isActive: z.boolean().optional(),
            customFields: z
                .array(
                    z.lazy(
                        () =>
                            PatchOpportunitiesIdOpportunitiesRequestRequestBodyCustomFields$.inboundSchema
                    )
                )
                .optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.leadId === undefined ? null : { leadId: v.leadId }),
                ...(v.company === undefined ? null : { company: v.company }),
                ...(v.defaultEmail === undefined ? null : { defaultEmail: v.defaultEmail }),
                ...(v.emails === undefined ? null : { emails: v.emails }),
                ...(v.defaultPhone === undefined ? null : { defaultPhone: v.defaultPhone }),
                ...(v.phones === undefined ? null : { phones: v.phones }),
                ...(v.address === undefined ? null : { address: v.address }),
                ...(v.addresses === undefined ? null : { addresses: v.addresses }),
                ...(v.birthday === undefined ? null : { birthday: v.birthday }),
                ...(v.relationship === undefined ? null : { relationship: v.relationship }),
                ...(v.note === undefined ? null : { note: v.note }),
                ...(v.notes === undefined ? null : { notes: v.notes }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
                ...(v.websites === undefined ? null : { websites: v.websites }),
                ...(v.socialProfiles === undefined ? null : { socialProfiles: v.socialProfiles }),
                ...(v.isActive === undefined ? null : { isActive: v.isActive }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        firstName?: string | undefined;
        lastName?: string | undefined;
        leadId?: string | undefined;
        company?: string | undefined;
        defaultEmail?: string | undefined;
        emails?: Array<PatchOpportunitiesIdEmails$.Outbound> | undefined;
        defaultPhone?: string | undefined;
        phones?: Array<PatchOpportunitiesIdPhones$.Outbound> | undefined;
        address?: PatchOpportunitiesIdAddress$.Outbound | undefined;
        addresses?: Array<PatchOpportunitiesIdAddresses$.Outbound> | undefined;
        birthday?: number | undefined;
        relationship?: string | undefined;
        note?: string | undefined;
        notes?: PatchOpportunitiesIdNotes$.Outbound | undefined;
        tags?: Array<string> | undefined;
        websites?: Array<string> | undefined;
        socialProfiles?: Array<PatchOpportunitiesIdSocialProfiles$.Outbound> | undefined;
        isActive?: boolean | undefined;
        customFields?:
            | Array<PatchOpportunitiesIdOpportunitiesRequestRequestBodyCustomFields$.Outbound>
            | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchOpportunitiesIdContacts> = z
        .object({
            id: z.string().optional(),
            firstName: z.string().optional(),
            lastName: z.string().optional(),
            leadId: z.string().optional(),
            company: z.string().optional(),
            defaultEmail: z.string().optional(),
            emails: z.array(z.lazy(() => PatchOpportunitiesIdEmails$.outboundSchema)).optional(),
            defaultPhone: z.string().optional(),
            phones: z.array(z.lazy(() => PatchOpportunitiesIdPhones$.outboundSchema)).optional(),
            address: z.lazy(() => PatchOpportunitiesIdAddress$.outboundSchema).optional(),
            addresses: z
                .array(z.lazy(() => PatchOpportunitiesIdAddresses$.outboundSchema))
                .optional(),
            birthday: z.number().optional(),
            relationship: z.string().optional(),
            note: z.string().optional(),
            notes: z.lazy(() => PatchOpportunitiesIdNotes$.outboundSchema).optional(),
            tags: z.array(z.string()).optional(),
            websites: z.array(z.string()).optional(),
            socialProfiles: z
                .array(z.lazy(() => PatchOpportunitiesIdSocialProfiles$.outboundSchema))
                .optional(),
            isActive: z.boolean().optional(),
            customFields: z
                .array(
                    z.lazy(
                        () =>
                            PatchOpportunitiesIdOpportunitiesRequestRequestBodyCustomFields$.outboundSchema
                    )
                )
                .optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.leadId === undefined ? null : { leadId: v.leadId }),
                ...(v.company === undefined ? null : { company: v.company }),
                ...(v.defaultEmail === undefined ? null : { defaultEmail: v.defaultEmail }),
                ...(v.emails === undefined ? null : { emails: v.emails }),
                ...(v.defaultPhone === undefined ? null : { defaultPhone: v.defaultPhone }),
                ...(v.phones === undefined ? null : { phones: v.phones }),
                ...(v.address === undefined ? null : { address: v.address }),
                ...(v.addresses === undefined ? null : { addresses: v.addresses }),
                ...(v.birthday === undefined ? null : { birthday: v.birthday }),
                ...(v.relationship === undefined ? null : { relationship: v.relationship }),
                ...(v.note === undefined ? null : { note: v.note }),
                ...(v.notes === undefined ? null : { notes: v.notes }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
                ...(v.websites === undefined ? null : { websites: v.websites }),
                ...(v.socialProfiles === undefined ? null : { socialProfiles: v.socialProfiles }),
                ...(v.isActive === undefined ? null : { isActive: v.isActive }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
            };
        });
}

/** @internal */
export const PatchOpportunitiesIdMimeType$ = z.nativeEnum(PatchOpportunitiesIdMimeType);

/** @internal */
export namespace PatchOpportunitiesIdProfilePicture$ {
    export type Inbound = {
        id?: string | undefined;
        src?: string | undefined;
        altText?: string | undefined;
        width?: number | undefined;
        height?: number | undefined;
        thumbnailSrc?: string | undefined;
        caption?: string | undefined;
        title?: string | undefined;
        mimeType?: PatchOpportunitiesIdMimeType | undefined;
        tags?: Array<string> | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<
        PatchOpportunitiesIdProfilePicture,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            id: z.string().optional(),
            src: z.string().optional(),
            altText: z.string().optional(),
            width: z.number().optional(),
            height: z.number().optional(),
            thumbnailSrc: z.string().optional(),
            caption: z.string().optional(),
            title: z.string().optional(),
            mimeType: PatchOpportunitiesIdMimeType$.optional(),
            tags: z.array(z.string()).optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.src === undefined ? null : { src: v.src }),
                ...(v.altText === undefined ? null : { altText: v.altText }),
                ...(v.width === undefined ? null : { width: v.width }),
                ...(v.height === undefined ? null : { height: v.height }),
                ...(v.thumbnailSrc === undefined ? null : { thumbnailSrc: v.thumbnailSrc }),
                ...(v.caption === undefined ? null : { caption: v.caption }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.mimeType === undefined ? null : { mimeType: v.mimeType }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        src?: string | undefined;
        altText?: string | undefined;
        width?: number | undefined;
        height?: number | undefined;
        thumbnailSrc?: string | undefined;
        caption?: string | undefined;
        title?: string | undefined;
        mimeType?: PatchOpportunitiesIdMimeType | undefined;
        tags?: Array<string> | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PatchOpportunitiesIdProfilePicture
    > = z
        .object({
            id: z.string().optional(),
            src: z.string().optional(),
            altText: z.string().optional(),
            width: z.number().optional(),
            height: z.number().optional(),
            thumbnailSrc: z.string().optional(),
            caption: z.string().optional(),
            title: z.string().optional(),
            mimeType: PatchOpportunitiesIdMimeType$.optional(),
            tags: z.array(z.string()).optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.src === undefined ? null : { src: v.src }),
                ...(v.altText === undefined ? null : { altText: v.altText }),
                ...(v.width === undefined ? null : { width: v.width }),
                ...(v.height === undefined ? null : { height: v.height }),
                ...(v.thumbnailSrc === undefined ? null : { thumbnailSrc: v.thumbnailSrc }),
                ...(v.caption === undefined ? null : { caption: v.caption }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.mimeType === undefined ? null : { mimeType: v.mimeType }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });
}

/** @internal */
export const PatchOpportunitiesIdOpportunitiesMimeType$ = z.nativeEnum(
    PatchOpportunitiesIdOpportunitiesMimeType
);

/** @internal */
export namespace PatchOpportunitiesIdCoverPhoto$ {
    export type Inbound = {
        id?: string | undefined;
        src?: string | undefined;
        altText?: string | undefined;
        width?: number | undefined;
        height?: number | undefined;
        thumbnailSrc?: string | undefined;
        caption?: string | undefined;
        title?: string | undefined;
        mimeType?: PatchOpportunitiesIdOpportunitiesMimeType | undefined;
        tags?: Array<string> | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<PatchOpportunitiesIdCoverPhoto, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            src: z.string().optional(),
            altText: z.string().optional(),
            width: z.number().optional(),
            height: z.number().optional(),
            thumbnailSrc: z.string().optional(),
            caption: z.string().optional(),
            title: z.string().optional(),
            mimeType: PatchOpportunitiesIdOpportunitiesMimeType$.optional(),
            tags: z.array(z.string()).optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.src === undefined ? null : { src: v.src }),
                ...(v.altText === undefined ? null : { altText: v.altText }),
                ...(v.width === undefined ? null : { width: v.width }),
                ...(v.height === undefined ? null : { height: v.height }),
                ...(v.thumbnailSrc === undefined ? null : { thumbnailSrc: v.thumbnailSrc }),
                ...(v.caption === undefined ? null : { caption: v.caption }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.mimeType === undefined ? null : { mimeType: v.mimeType }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        src?: string | undefined;
        altText?: string | undefined;
        width?: number | undefined;
        height?: number | undefined;
        thumbnailSrc?: string | undefined;
        caption?: string | undefined;
        title?: string | undefined;
        mimeType?: PatchOpportunitiesIdOpportunitiesMimeType | undefined;
        tags?: Array<string> | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchOpportunitiesIdCoverPhoto> =
        z
            .object({
                id: z.string().optional(),
                src: z.string().optional(),
                altText: z.string().optional(),
                width: z.number().optional(),
                height: z.number().optional(),
                thumbnailSrc: z.string().optional(),
                caption: z.string().optional(),
                title: z.string().optional(),
                mimeType: PatchOpportunitiesIdOpportunitiesMimeType$.optional(),
                tags: z.array(z.string()).optional(),
                createdAt: z.number().optional(),
                updatedAt: z.number().optional(),
                active: z.boolean().optional(),
                deleted: z.boolean().optional(),
            })
            .transform((v) => {
                return {
                    ...(v.id === undefined ? null : { id: v.id }),
                    ...(v.src === undefined ? null : { src: v.src }),
                    ...(v.altText === undefined ? null : { altText: v.altText }),
                    ...(v.width === undefined ? null : { width: v.width }),
                    ...(v.height === undefined ? null : { height: v.height }),
                    ...(v.thumbnailSrc === undefined ? null : { thumbnailSrc: v.thumbnailSrc }),
                    ...(v.caption === undefined ? null : { caption: v.caption }),
                    ...(v.title === undefined ? null : { title: v.title }),
                    ...(v.mimeType === undefined ? null : { mimeType: v.mimeType }),
                    ...(v.tags === undefined ? null : { tags: v.tags }),
                    ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                    ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                    ...(v.active === undefined ? null : { active: v.active }),
                    ...(v.deleted === undefined ? null : { deleted: v.deleted }),
                };
            });
}

/** @internal */
export const PatchOpportunitiesIdGender$ = z.nativeEnum(PatchOpportunitiesIdGender);

/** @internal */
export const PatchOpportunitiesIdOpportunitiesRequestRequestBodyOwnerType$ = z.nativeEnum(
    PatchOpportunitiesIdOpportunitiesRequestRequestBodyOwnerType
);

/** @internal */
export namespace PatchOpportunitiesIdOpportunitiesRequestGeoLocation$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<
        PatchOpportunitiesIdOpportunitiesRequestGeoLocation,
        z.ZodTypeDef,
        Inbound
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PatchOpportunitiesIdOpportunitiesRequestGeoLocation
    > = z.object({});
}

/** @internal */
export namespace PatchOpportunitiesIdOpportunitiesRequestRequestBodyOwnerCustomFields$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<
        PatchOpportunitiesIdOpportunitiesRequestRequestBodyOwnerCustomFields,
        z.ZodTypeDef,
        Inbound
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PatchOpportunitiesIdOpportunitiesRequestRequestBodyOwnerCustomFields
    > = z.object({});
}

/** @internal */
export namespace PatchOpportunitiesIdOpportunitiesAddresses$ {
    export type Inbound = {
        id?: string | undefined;
        contactId?: string | undefined;
        accountId?: string | undefined;
        firstName?: string | undefined;
        lastName?: string | undefined;
        name?: string | undefined;
        companyName?: string | undefined;
        email?: string | undefined;
        phone?: string | undefined;
        street?: string | undefined;
        addressLine2?: string | undefined;
        city?: string | undefined;
        province?: string | undefined;
        region?: string | undefined;
        postalCode?: string | undefined;
        postalCodeExtension?: string | undefined;
        country?: string | undefined;
        countryCode?: string | undefined;
        type?: PatchOpportunitiesIdOpportunitiesRequestRequestBodyOwnerType | undefined;
        geoLocation?: PatchOpportunitiesIdOpportunitiesRequestGeoLocation$.Inbound | undefined;
        customFields?:
            | Array<PatchOpportunitiesIdOpportunitiesRequestRequestBodyOwnerCustomFields$.Inbound>
            | undefined;
        subdivisionCode?: string | undefined;
    };

    export const inboundSchema: z.ZodType<
        PatchOpportunitiesIdOpportunitiesAddresses,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            id: z.string().optional(),
            contactId: z.string().optional(),
            accountId: z.string().optional(),
            firstName: z.string().optional(),
            lastName: z.string().optional(),
            name: z.string().optional(),
            companyName: z.string().optional(),
            email: z.string().optional(),
            phone: z.string().optional(),
            street: z.string().optional(),
            addressLine2: z.string().optional(),
            city: z.string().optional(),
            province: z.string().optional(),
            region: z.string().optional(),
            postalCode: z.string().optional(),
            postalCodeExtension: z.string().optional(),
            country: z.string().optional(),
            countryCode: z.string().optional(),
            type: PatchOpportunitiesIdOpportunitiesRequestRequestBodyOwnerType$.optional(),
            geoLocation: z
                .lazy(() => PatchOpportunitiesIdOpportunitiesRequestGeoLocation$.inboundSchema)
                .optional(),
            customFields: z
                .array(
                    z.lazy(
                        () =>
                            PatchOpportunitiesIdOpportunitiesRequestRequestBodyOwnerCustomFields$.inboundSchema
                    )
                )
                .optional(),
            subdivisionCode: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.contactId === undefined ? null : { contactId: v.contactId }),
                ...(v.accountId === undefined ? null : { accountId: v.accountId }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.companyName === undefined ? null : { companyName: v.companyName }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.phone === undefined ? null : { phone: v.phone }),
                ...(v.street === undefined ? null : { street: v.street }),
                ...(v.addressLine2 === undefined ? null : { addressLine2: v.addressLine2 }),
                ...(v.city === undefined ? null : { city: v.city }),
                ...(v.province === undefined ? null : { province: v.province }),
                ...(v.region === undefined ? null : { region: v.region }),
                ...(v.postalCode === undefined ? null : { postalCode: v.postalCode }),
                ...(v.postalCodeExtension === undefined
                    ? null
                    : { postalCodeExtension: v.postalCodeExtension }),
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.countryCode === undefined ? null : { countryCode: v.countryCode }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.geoLocation === undefined ? null : { geoLocation: v.geoLocation }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                ...(v.subdivisionCode === undefined
                    ? null
                    : { subdivisionCode: v.subdivisionCode }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        contactId?: string | undefined;
        accountId?: string | undefined;
        firstName?: string | undefined;
        lastName?: string | undefined;
        name?: string | undefined;
        companyName?: string | undefined;
        email?: string | undefined;
        phone?: string | undefined;
        street?: string | undefined;
        addressLine2?: string | undefined;
        city?: string | undefined;
        province?: string | undefined;
        region?: string | undefined;
        postalCode?: string | undefined;
        postalCodeExtension?: string | undefined;
        country?: string | undefined;
        countryCode?: string | undefined;
        type?: PatchOpportunitiesIdOpportunitiesRequestRequestBodyOwnerType | undefined;
        geoLocation?: PatchOpportunitiesIdOpportunitiesRequestGeoLocation$.Outbound | undefined;
        customFields?:
            | Array<PatchOpportunitiesIdOpportunitiesRequestRequestBodyOwnerCustomFields$.Outbound>
            | undefined;
        subdivisionCode?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PatchOpportunitiesIdOpportunitiesAddresses
    > = z
        .object({
            id: z.string().optional(),
            contactId: z.string().optional(),
            accountId: z.string().optional(),
            firstName: z.string().optional(),
            lastName: z.string().optional(),
            name: z.string().optional(),
            companyName: z.string().optional(),
            email: z.string().optional(),
            phone: z.string().optional(),
            street: z.string().optional(),
            addressLine2: z.string().optional(),
            city: z.string().optional(),
            province: z.string().optional(),
            region: z.string().optional(),
            postalCode: z.string().optional(),
            postalCodeExtension: z.string().optional(),
            country: z.string().optional(),
            countryCode: z.string().optional(),
            type: PatchOpportunitiesIdOpportunitiesRequestRequestBodyOwnerType$.optional(),
            geoLocation: z
                .lazy(() => PatchOpportunitiesIdOpportunitiesRequestGeoLocation$.outboundSchema)
                .optional(),
            customFields: z
                .array(
                    z.lazy(
                        () =>
                            PatchOpportunitiesIdOpportunitiesRequestRequestBodyOwnerCustomFields$.outboundSchema
                    )
                )
                .optional(),
            subdivisionCode: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.contactId === undefined ? null : { contactId: v.contactId }),
                ...(v.accountId === undefined ? null : { accountId: v.accountId }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.companyName === undefined ? null : { companyName: v.companyName }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.phone === undefined ? null : { phone: v.phone }),
                ...(v.street === undefined ? null : { street: v.street }),
                ...(v.addressLine2 === undefined ? null : { addressLine2: v.addressLine2 }),
                ...(v.city === undefined ? null : { city: v.city }),
                ...(v.province === undefined ? null : { province: v.province }),
                ...(v.region === undefined ? null : { region: v.region }),
                ...(v.postalCode === undefined ? null : { postalCode: v.postalCode }),
                ...(v.postalCodeExtension === undefined
                    ? null
                    : { postalCodeExtension: v.postalCodeExtension }),
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.countryCode === undefined ? null : { countryCode: v.countryCode }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.geoLocation === undefined ? null : { geoLocation: v.geoLocation }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                ...(v.subdivisionCode === undefined
                    ? null
                    : { subdivisionCode: v.subdivisionCode }),
            };
        });
}

/** @internal */
export const PatchOpportunitiesIdRoles$ = z.nativeEnum(PatchOpportunitiesIdRoles);

/** @internal */
export const PatchOpportunitiesIdCommunications$ = z.nativeEnum(PatchOpportunitiesIdCommunications);

/** @internal */
export namespace PatchOpportunitiesIdPreferences$ {
    export type Inbound = {
        id?: string | undefined;
        language?: string | undefined;
        currency?: string | undefined;
        timeZone?: string | undefined;
        communications?: PatchOpportunitiesIdCommunications | undefined;
    };

    export const inboundSchema: z.ZodType<PatchOpportunitiesIdPreferences, z.ZodTypeDef, Inbound> =
        z
            .object({
                id: z.string().optional(),
                language: z.string().optional(),
                currency: z.string().optional(),
                timeZone: z.string().optional(),
                communications: PatchOpportunitiesIdCommunications$.optional(),
            })
            .transform((v) => {
                return {
                    ...(v.id === undefined ? null : { id: v.id }),
                    ...(v.language === undefined ? null : { language: v.language }),
                    ...(v.currency === undefined ? null : { currency: v.currency }),
                    ...(v.timeZone === undefined ? null : { timeZone: v.timeZone }),
                    ...(v.communications === undefined
                        ? null
                        : { communications: v.communications }),
                };
            });

    export type Outbound = {
        id?: string | undefined;
        language?: string | undefined;
        currency?: string | undefined;
        timeZone?: string | undefined;
        communications?: PatchOpportunitiesIdCommunications | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PatchOpportunitiesIdPreferences
    > = z
        .object({
            id: z.string().optional(),
            language: z.string().optional(),
            currency: z.string().optional(),
            timeZone: z.string().optional(),
            communications: PatchOpportunitiesIdCommunications$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.language === undefined ? null : { language: v.language }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.timeZone === undefined ? null : { timeZone: v.timeZone }),
                ...(v.communications === undefined ? null : { communications: v.communications }),
            };
        });
}

/** @internal */
export const PatchOpportunitiesIdOpportunitiesRequestRequestBodyOwnerSocialLinksType$ =
    z.nativeEnum(PatchOpportunitiesIdOpportunitiesRequestRequestBodyOwnerSocialLinksType);

/** @internal */
export const PatchOpportunitiesIdOpportunitiesRequestRequestBodyOwnerSocialLinksAdditionalInfoType$ =
    z.nativeEnum(
        PatchOpportunitiesIdOpportunitiesRequestRequestBodyOwnerSocialLinksAdditionalInfoType
    );

/** @internal */
export namespace PatchOpportunitiesIdAdditionalInfo$ {
    export type Inbound = {
        id?: string | undefined;
        key?: string | undefined;
        value?: string | undefined;
        type?:
            | PatchOpportunitiesIdOpportunitiesRequestRequestBodyOwnerSocialLinksAdditionalInfoType
            | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        entityId?: string | undefined;
        entityType?: string | undefined;
    };

    export const inboundSchema: z.ZodType<
        PatchOpportunitiesIdAdditionalInfo,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            id: z.string().optional(),
            key: z.string().optional(),
            value: z.string().optional(),
            type: PatchOpportunitiesIdOpportunitiesRequestRequestBodyOwnerSocialLinksAdditionalInfoType$.optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            entityId: z.string().optional(),
            entityType: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.key === undefined ? null : { key: v.key }),
                ...(v.value === undefined ? null : { value: v.value }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.entityId === undefined ? null : { entityId: v.entityId }),
                ...(v.entityType === undefined ? null : { entityType: v.entityType }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        key?: string | undefined;
        value?: string | undefined;
        type?:
            | PatchOpportunitiesIdOpportunitiesRequestRequestBodyOwnerSocialLinksAdditionalInfoType
            | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        entityId?: string | undefined;
        entityType?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PatchOpportunitiesIdAdditionalInfo
    > = z
        .object({
            id: z.string().optional(),
            key: z.string().optional(),
            value: z.string().optional(),
            type: PatchOpportunitiesIdOpportunitiesRequestRequestBodyOwnerSocialLinksAdditionalInfoType$.optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            entityId: z.string().optional(),
            entityType: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.key === undefined ? null : { key: v.key }),
                ...(v.value === undefined ? null : { value: v.value }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.entityId === undefined ? null : { entityId: v.entityId }),
                ...(v.entityType === undefined ? null : { entityType: v.entityType }),
            };
        });
}

/** @internal */
export namespace PatchOpportunitiesIdSocialLinks$ {
    export type Inbound = {
        type?: PatchOpportunitiesIdOpportunitiesRequestRequestBodyOwnerSocialLinksType | undefined;
        username?: string | undefined;
        displayName?: string | undefined;
        url?: string | undefined;
        avatarUrl?: string | undefined;
        email?: string | undefined;
        additionalInfo?: PatchOpportunitiesIdAdditionalInfo$.Inbound | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<PatchOpportunitiesIdSocialLinks, z.ZodTypeDef, Inbound> =
        z
            .object({
                type: PatchOpportunitiesIdOpportunitiesRequestRequestBodyOwnerSocialLinksType$.optional(),
                username: z.string().optional(),
                displayName: z.string().optional(),
                url: z.string().optional(),
                avatarUrl: z.string().optional(),
                email: z.string().optional(),
                additionalInfo: z
                    .lazy(() => PatchOpportunitiesIdAdditionalInfo$.inboundSchema)
                    .optional(),
                createdAt: z.number().optional(),
                updatedAt: z.number().optional(),
                active: z.boolean().optional(),
                deleted: z.boolean().optional(),
            })
            .transform((v) => {
                return {
                    ...(v.type === undefined ? null : { type: v.type }),
                    ...(v.username === undefined ? null : { username: v.username }),
                    ...(v.displayName === undefined ? null : { displayName: v.displayName }),
                    ...(v.url === undefined ? null : { url: v.url }),
                    ...(v.avatarUrl === undefined ? null : { avatarUrl: v.avatarUrl }),
                    ...(v.email === undefined ? null : { email: v.email }),
                    ...(v.additionalInfo === undefined
                        ? null
                        : { additionalInfo: v.additionalInfo }),
                    ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                    ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                    ...(v.active === undefined ? null : { active: v.active }),
                    ...(v.deleted === undefined ? null : { deleted: v.deleted }),
                };
            });

    export type Outbound = {
        type?: PatchOpportunitiesIdOpportunitiesRequestRequestBodyOwnerSocialLinksType | undefined;
        username?: string | undefined;
        displayName?: string | undefined;
        url?: string | undefined;
        avatarUrl?: string | undefined;
        email?: string | undefined;
        additionalInfo?: PatchOpportunitiesIdAdditionalInfo$.Outbound | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PatchOpportunitiesIdSocialLinks
    > = z
        .object({
            type: PatchOpportunitiesIdOpportunitiesRequestRequestBodyOwnerSocialLinksType$.optional(),
            username: z.string().optional(),
            displayName: z.string().optional(),
            url: z.string().optional(),
            avatarUrl: z.string().optional(),
            email: z.string().optional(),
            additionalInfo: z
                .lazy(() => PatchOpportunitiesIdAdditionalInfo$.outboundSchema)
                .optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.username === undefined ? null : { username: v.username }),
                ...(v.displayName === undefined ? null : { displayName: v.displayName }),
                ...(v.url === undefined ? null : { url: v.url }),
                ...(v.avatarUrl === undefined ? null : { avatarUrl: v.avatarUrl }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.additionalInfo === undefined ? null : { additionalInfo: v.additionalInfo }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });
}

/** @internal */
export const PatchOpportunitiesIdOpportunitiesRequestStatus$ = z.nativeEnum(
    PatchOpportunitiesIdOpportunitiesRequestStatus
);

/** @internal */
export const PatchOpportunitiesIdProvider$ = z.nativeEnum(PatchOpportunitiesIdProvider);

/** @internal */
export namespace PatchOpportunitiesIdSso$ {
    export type Inbound = {
        provider?: PatchOpportunitiesIdProvider | undefined;
        providerUserId?: string | undefined;
        profileUrl?: string | undefined;
        accessToken?: string | undefined;
        refreshToken?: string | undefined;
        expiresIn?: number | undefined;
        expiryDate?: number | undefined;
        scopes?: Array<string> | undefined;
        tokenType?: string | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<PatchOpportunitiesIdSso, z.ZodTypeDef, Inbound> = z
        .object({
            provider: PatchOpportunitiesIdProvider$.optional(),
            providerUserId: z.string().optional(),
            profileUrl: z.string().optional(),
            accessToken: z.string().optional(),
            refreshToken: z.string().optional(),
            expiresIn: z.number().optional(),
            expiryDate: z.number().optional(),
            scopes: z.array(z.string()).optional(),
            tokenType: z.string().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.provider === undefined ? null : { provider: v.provider }),
                ...(v.providerUserId === undefined ? null : { providerUserId: v.providerUserId }),
                ...(v.profileUrl === undefined ? null : { profileUrl: v.profileUrl }),
                ...(v.accessToken === undefined ? null : { accessToken: v.accessToken }),
                ...(v.refreshToken === undefined ? null : { refreshToken: v.refreshToken }),
                ...(v.expiresIn === undefined ? null : { expiresIn: v.expiresIn }),
                ...(v.expiryDate === undefined ? null : { expiryDate: v.expiryDate }),
                ...(v.scopes === undefined ? null : { scopes: v.scopes }),
                ...(v.tokenType === undefined ? null : { tokenType: v.tokenType }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });

    export type Outbound = {
        provider?: PatchOpportunitiesIdProvider | undefined;
        providerUserId?: string | undefined;
        profileUrl?: string | undefined;
        accessToken?: string | undefined;
        refreshToken?: string | undefined;
        expiresIn?: number | undefined;
        expiryDate?: number | undefined;
        scopes?: Array<string> | undefined;
        tokenType?: string | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchOpportunitiesIdSso> = z
        .object({
            provider: PatchOpportunitiesIdProvider$.optional(),
            providerUserId: z.string().optional(),
            profileUrl: z.string().optional(),
            accessToken: z.string().optional(),
            refreshToken: z.string().optional(),
            expiresIn: z.number().optional(),
            expiryDate: z.number().optional(),
            scopes: z.array(z.string()).optional(),
            tokenType: z.string().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.provider === undefined ? null : { provider: v.provider }),
                ...(v.providerUserId === undefined ? null : { providerUserId: v.providerUserId }),
                ...(v.profileUrl === undefined ? null : { profileUrl: v.profileUrl }),
                ...(v.accessToken === undefined ? null : { accessToken: v.accessToken }),
                ...(v.refreshToken === undefined ? null : { refreshToken: v.refreshToken }),
                ...(v.expiresIn === undefined ? null : { expiresIn: v.expiresIn }),
                ...(v.expiryDate === undefined ? null : { expiryDate: v.expiryDate }),
                ...(v.scopes === undefined ? null : { scopes: v.scopes }),
                ...(v.tokenType === undefined ? null : { tokenType: v.tokenType }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });
}

/** @internal */
export const PatchOpportunitiesIdOpportunitiesRequestRequestBodyOwnerPaymentMethodsType$ =
    z.nativeEnum(PatchOpportunitiesIdOpportunitiesRequestRequestBodyOwnerPaymentMethodsType);

/** @internal */
export namespace PatchOpportunitiesIdPaymentMethods$ {
    export type Inbound = {
        id?: string | undefined;
        type?:
            | PatchOpportunitiesIdOpportunitiesRequestRequestBodyOwnerPaymentMethodsType
            | undefined;
        details?: string | undefined;
        isDefault?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<
        PatchOpportunitiesIdPaymentMethods,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            id: z.string().optional(),
            type: PatchOpportunitiesIdOpportunitiesRequestRequestBodyOwnerPaymentMethodsType$.optional(),
            details: z.string().optional(),
            isDefault: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.details === undefined ? null : { details: v.details }),
                ...(v.isDefault === undefined ? null : { isDefault: v.isDefault }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        type?:
            | PatchOpportunitiesIdOpportunitiesRequestRequestBodyOwnerPaymentMethodsType
            | undefined;
        details?: string | undefined;
        isDefault?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PatchOpportunitiesIdPaymentMethods
    > = z
        .object({
            id: z.string().optional(),
            type: PatchOpportunitiesIdOpportunitiesRequestRequestBodyOwnerPaymentMethodsType$.optional(),
            details: z.string().optional(),
            isDefault: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.details === undefined ? null : { details: v.details }),
                ...(v.isDefault === undefined ? null : { isDefault: v.isDefault }),
            };
        });
}

/** @internal */
export namespace PatchOpportunitiesIdOwner$ {
    export type Inbound = {
        id?: string | undefined;
        firstName?: string | undefined;
        middleName?: string | undefined;
        lastName?: string | undefined;
        email?: string | undefined;
        username?: string | undefined;
        password?: string | undefined;
        profilePicture?: PatchOpportunitiesIdProfilePicture$.Inbound | undefined;
        coverPhoto?: PatchOpportunitiesIdCoverPhoto$.Inbound | undefined;
        gender?: PatchOpportunitiesIdGender | undefined;
        dateOfBirth?: number | undefined;
        phoneNumber?: string | undefined;
        isActive?: boolean | undefined;
        lastLogin?: number | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        addresses?: Array<PatchOpportunitiesIdOpportunitiesAddresses$.Inbound> | undefined;
        roles?: Array<PatchOpportunitiesIdRoles> | undefined;
        preferences?: PatchOpportunitiesIdPreferences$.Inbound | undefined;
        bio?: string | undefined;
        website?: string | undefined;
        socialLinks?: PatchOpportunitiesIdSocialLinks$.Inbound | undefined;
        status?: PatchOpportunitiesIdOpportunitiesRequestStatus | undefined;
        sso?: Array<PatchOpportunitiesIdSso$.Inbound> | undefined;
        paymentMethods?: PatchOpportunitiesIdPaymentMethods$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<PatchOpportunitiesIdOwner, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            firstName: z.string().optional(),
            middleName: z.string().optional(),
            lastName: z.string().optional(),
            email: z.string().optional(),
            username: z.string().optional(),
            password: z.string().optional(),
            profilePicture: z
                .lazy(() => PatchOpportunitiesIdProfilePicture$.inboundSchema)
                .optional(),
            coverPhoto: z.lazy(() => PatchOpportunitiesIdCoverPhoto$.inboundSchema).optional(),
            gender: PatchOpportunitiesIdGender$.optional(),
            dateOfBirth: z.number().optional(),
            phoneNumber: z.string().optional(),
            isActive: z.boolean().optional(),
            lastLogin: z.number().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            addresses: z
                .array(z.lazy(() => PatchOpportunitiesIdOpportunitiesAddresses$.inboundSchema))
                .optional(),
            roles: z.array(PatchOpportunitiesIdRoles$).optional(),
            preferences: z.lazy(() => PatchOpportunitiesIdPreferences$.inboundSchema).optional(),
            bio: z.string().optional(),
            website: z.string().optional(),
            socialLinks: z.lazy(() => PatchOpportunitiesIdSocialLinks$.inboundSchema).optional(),
            status: PatchOpportunitiesIdOpportunitiesRequestStatus$.optional(),
            sso: z.array(z.lazy(() => PatchOpportunitiesIdSso$.inboundSchema)).optional(),
            paymentMethods: z
                .lazy(() => PatchOpportunitiesIdPaymentMethods$.inboundSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.middleName === undefined ? null : { middleName: v.middleName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.username === undefined ? null : { username: v.username }),
                ...(v.password === undefined ? null : { password: v.password }),
                ...(v.profilePicture === undefined ? null : { profilePicture: v.profilePicture }),
                ...(v.coverPhoto === undefined ? null : { coverPhoto: v.coverPhoto }),
                ...(v.gender === undefined ? null : { gender: v.gender }),
                ...(v.dateOfBirth === undefined ? null : { dateOfBirth: v.dateOfBirth }),
                ...(v.phoneNumber === undefined ? null : { phoneNumber: v.phoneNumber }),
                ...(v.isActive === undefined ? null : { isActive: v.isActive }),
                ...(v.lastLogin === undefined ? null : { lastLogin: v.lastLogin }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.addresses === undefined ? null : { addresses: v.addresses }),
                ...(v.roles === undefined ? null : { roles: v.roles }),
                ...(v.preferences === undefined ? null : { preferences: v.preferences }),
                ...(v.bio === undefined ? null : { bio: v.bio }),
                ...(v.website === undefined ? null : { website: v.website }),
                ...(v.socialLinks === undefined ? null : { socialLinks: v.socialLinks }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.sso === undefined ? null : { sso: v.sso }),
                ...(v.paymentMethods === undefined ? null : { paymentMethods: v.paymentMethods }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        firstName?: string | undefined;
        middleName?: string | undefined;
        lastName?: string | undefined;
        email?: string | undefined;
        username?: string | undefined;
        password?: string | undefined;
        profilePicture?: PatchOpportunitiesIdProfilePicture$.Outbound | undefined;
        coverPhoto?: PatchOpportunitiesIdCoverPhoto$.Outbound | undefined;
        gender?: PatchOpportunitiesIdGender | undefined;
        dateOfBirth?: number | undefined;
        phoneNumber?: string | undefined;
        isActive?: boolean | undefined;
        lastLogin?: number | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        addresses?: Array<PatchOpportunitiesIdOpportunitiesAddresses$.Outbound> | undefined;
        roles?: Array<PatchOpportunitiesIdRoles> | undefined;
        preferences?: PatchOpportunitiesIdPreferences$.Outbound | undefined;
        bio?: string | undefined;
        website?: string | undefined;
        socialLinks?: PatchOpportunitiesIdSocialLinks$.Outbound | undefined;
        status?: PatchOpportunitiesIdOpportunitiesRequestStatus | undefined;
        sso?: Array<PatchOpportunitiesIdSso$.Outbound> | undefined;
        paymentMethods?: PatchOpportunitiesIdPaymentMethods$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchOpportunitiesIdOwner> = z
        .object({
            id: z.string().optional(),
            firstName: z.string().optional(),
            middleName: z.string().optional(),
            lastName: z.string().optional(),
            email: z.string().optional(),
            username: z.string().optional(),
            password: z.string().optional(),
            profilePicture: z
                .lazy(() => PatchOpportunitiesIdProfilePicture$.outboundSchema)
                .optional(),
            coverPhoto: z.lazy(() => PatchOpportunitiesIdCoverPhoto$.outboundSchema).optional(),
            gender: PatchOpportunitiesIdGender$.optional(),
            dateOfBirth: z.number().optional(),
            phoneNumber: z.string().optional(),
            isActive: z.boolean().optional(),
            lastLogin: z.number().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            addresses: z
                .array(z.lazy(() => PatchOpportunitiesIdOpportunitiesAddresses$.outboundSchema))
                .optional(),
            roles: z.array(PatchOpportunitiesIdRoles$).optional(),
            preferences: z.lazy(() => PatchOpportunitiesIdPreferences$.outboundSchema).optional(),
            bio: z.string().optional(),
            website: z.string().optional(),
            socialLinks: z.lazy(() => PatchOpportunitiesIdSocialLinks$.outboundSchema).optional(),
            status: PatchOpportunitiesIdOpportunitiesRequestStatus$.optional(),
            sso: z.array(z.lazy(() => PatchOpportunitiesIdSso$.outboundSchema)).optional(),
            paymentMethods: z
                .lazy(() => PatchOpportunitiesIdPaymentMethods$.outboundSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.middleName === undefined ? null : { middleName: v.middleName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.username === undefined ? null : { username: v.username }),
                ...(v.password === undefined ? null : { password: v.password }),
                ...(v.profilePicture === undefined ? null : { profilePicture: v.profilePicture }),
                ...(v.coverPhoto === undefined ? null : { coverPhoto: v.coverPhoto }),
                ...(v.gender === undefined ? null : { gender: v.gender }),
                ...(v.dateOfBirth === undefined ? null : { dateOfBirth: v.dateOfBirth }),
                ...(v.phoneNumber === undefined ? null : { phoneNumber: v.phoneNumber }),
                ...(v.isActive === undefined ? null : { isActive: v.isActive }),
                ...(v.lastLogin === undefined ? null : { lastLogin: v.lastLogin }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.addresses === undefined ? null : { addresses: v.addresses }),
                ...(v.roles === undefined ? null : { roles: v.roles }),
                ...(v.preferences === undefined ? null : { preferences: v.preferences }),
                ...(v.bio === undefined ? null : { bio: v.bio }),
                ...(v.website === undefined ? null : { website: v.website }),
                ...(v.socialLinks === undefined ? null : { socialLinks: v.socialLinks }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.sso === undefined ? null : { sso: v.sso }),
                ...(v.paymentMethods === undefined ? null : { paymentMethods: v.paymentMethods }),
            };
        });
}

/** @internal */
export namespace PatchOpportunitiesIdOpportunitiesMetadata$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<
        PatchOpportunitiesIdOpportunitiesMetadata,
        z.ZodTypeDef,
        Inbound
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PatchOpportunitiesIdOpportunitiesMetadata
    > = z.object({});
}

/** @internal */
export namespace PatchOpportunitiesIdOpportunitiesAssociatedWith$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<
        PatchOpportunitiesIdOpportunitiesAssociatedWith,
        z.ZodTypeDef,
        Inbound
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PatchOpportunitiesIdOpportunitiesAssociatedWith
    > = z.object({});
}

/** @internal */
export namespace PatchOpportunitiesIdOpportunitiesPermissions$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<
        PatchOpportunitiesIdOpportunitiesPermissions,
        z.ZodTypeDef,
        Inbound
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PatchOpportunitiesIdOpportunitiesPermissions
    > = z.object({});
}

/** @internal */
export namespace PatchOpportunitiesIdAttachments$ {
    export type Inbound = {
        id?: string | undefined;
        fileName?: string | undefined;
        fileSize?: number | undefined;
        fileType?: string | undefined;
        url?: string | undefined;
        thumbnailUrl?: string | undefined;
        previewUrl?: string | undefined;
        content?: string | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        metadata?: PatchOpportunitiesIdOpportunitiesMetadata$.Inbound | undefined;
        associatedWith?: PatchOpportunitiesIdOpportunitiesAssociatedWith$.Inbound | undefined;
        permissions?: PatchOpportunitiesIdOpportunitiesPermissions$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<PatchOpportunitiesIdAttachments, z.ZodTypeDef, Inbound> =
        z
            .object({
                id: z.string().optional(),
                fileName: z.string().optional(),
                fileSize: z.number().optional(),
                fileType: z.string().optional(),
                url: z.string().optional(),
                thumbnailUrl: z.string().optional(),
                previewUrl: z.string().optional(),
                content: z.string().optional(),
                createdAt: z.number().optional(),
                updatedAt: z.number().optional(),
                metadata: z
                    .lazy(() => PatchOpportunitiesIdOpportunitiesMetadata$.inboundSchema)
                    .optional(),
                associatedWith: z
                    .lazy(() => PatchOpportunitiesIdOpportunitiesAssociatedWith$.inboundSchema)
                    .optional(),
                permissions: z
                    .lazy(() => PatchOpportunitiesIdOpportunitiesPermissions$.inboundSchema)
                    .optional(),
            })
            .transform((v) => {
                return {
                    ...(v.id === undefined ? null : { id: v.id }),
                    ...(v.fileName === undefined ? null : { fileName: v.fileName }),
                    ...(v.fileSize === undefined ? null : { fileSize: v.fileSize }),
                    ...(v.fileType === undefined ? null : { fileType: v.fileType }),
                    ...(v.url === undefined ? null : { url: v.url }),
                    ...(v.thumbnailUrl === undefined ? null : { thumbnailUrl: v.thumbnailUrl }),
                    ...(v.previewUrl === undefined ? null : { previewUrl: v.previewUrl }),
                    ...(v.content === undefined ? null : { content: v.content }),
                    ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                    ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                    ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                    ...(v.associatedWith === undefined
                        ? null
                        : { associatedWith: v.associatedWith }),
                    ...(v.permissions === undefined ? null : { permissions: v.permissions }),
                };
            });

    export type Outbound = {
        id?: string | undefined;
        fileName?: string | undefined;
        fileSize?: number | undefined;
        fileType?: string | undefined;
        url?: string | undefined;
        thumbnailUrl?: string | undefined;
        previewUrl?: string | undefined;
        content?: string | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        metadata?: PatchOpportunitiesIdOpportunitiesMetadata$.Outbound | undefined;
        associatedWith?: PatchOpportunitiesIdOpportunitiesAssociatedWith$.Outbound | undefined;
        permissions?: PatchOpportunitiesIdOpportunitiesPermissions$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PatchOpportunitiesIdAttachments
    > = z
        .object({
            id: z.string().optional(),
            fileName: z.string().optional(),
            fileSize: z.number().optional(),
            fileType: z.string().optional(),
            url: z.string().optional(),
            thumbnailUrl: z.string().optional(),
            previewUrl: z.string().optional(),
            content: z.string().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            metadata: z
                .lazy(() => PatchOpportunitiesIdOpportunitiesMetadata$.outboundSchema)
                .optional(),
            associatedWith: z
                .lazy(() => PatchOpportunitiesIdOpportunitiesAssociatedWith$.outboundSchema)
                .optional(),
            permissions: z
                .lazy(() => PatchOpportunitiesIdOpportunitiesPermissions$.outboundSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fileName === undefined ? null : { fileName: v.fileName }),
                ...(v.fileSize === undefined ? null : { fileSize: v.fileSize }),
                ...(v.fileType === undefined ? null : { fileType: v.fileType }),
                ...(v.url === undefined ? null : { url: v.url }),
                ...(v.thumbnailUrl === undefined ? null : { thumbnailUrl: v.thumbnailUrl }),
                ...(v.previewUrl === undefined ? null : { previewUrl: v.previewUrl }),
                ...(v.content === undefined ? null : { content: v.content }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                ...(v.associatedWith === undefined ? null : { associatedWith: v.associatedWith }),
                ...(v.permissions === undefined ? null : { permissions: v.permissions }),
            };
        });
}

/** @internal */
export const PatchOpportunitiesIdOpportunitiesRequestRequestBodyFieldType$ = z.nativeEnum(
    PatchOpportunitiesIdOpportunitiesRequestRequestBodyFieldType
);

/** @internal */
export namespace PatchOpportunitiesIdOpportunitiesRequestRequestBodyCustomFields1$ {
    export type Inbound = {
        id?: string | undefined;
        fieldName?: string | undefined;
        fieldValue?: string | undefined;
        fieldType?: PatchOpportunitiesIdOpportunitiesRequestRequestBodyFieldType | undefined;
    };

    export const inboundSchema: z.ZodType<
        PatchOpportunitiesIdOpportunitiesRequestRequestBodyCustomFields1,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            id: z.string().optional(),
            fieldName: z.string().optional(),
            fieldValue: z.string().optional(),
            fieldType: PatchOpportunitiesIdOpportunitiesRequestRequestBodyFieldType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fieldName === undefined ? null : { fieldName: v.fieldName }),
                ...(v.fieldValue === undefined ? null : { fieldValue: v.fieldValue }),
                ...(v.fieldType === undefined ? null : { fieldType: v.fieldType }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        fieldName?: string | undefined;
        fieldValue?: string | undefined;
        fieldType?: PatchOpportunitiesIdOpportunitiesRequestRequestBodyFieldType | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PatchOpportunitiesIdOpportunitiesRequestRequestBodyCustomFields1
    > = z
        .object({
            id: z.string().optional(),
            fieldName: z.string().optional(),
            fieldValue: z.string().optional(),
            fieldType: PatchOpportunitiesIdOpportunitiesRequestRequestBodyFieldType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fieldName === undefined ? null : { fieldName: v.fieldName }),
                ...(v.fieldValue === undefined ? null : { fieldValue: v.fieldValue }),
                ...(v.fieldType === undefined ? null : { fieldType: v.fieldType }),
            };
        });
}

/** @internal */
export namespace PatchOpportunitiesIdRequestBody$ {
    export type Inbound = {
        id?: string | undefined;
        title?: string | undefined;
        description?: string | undefined;
        amount?: number | undefined;
        currency?: string | undefined;
        stage?: string | undefined;
        probability?: number | undefined;
        closeDate?: number | undefined;
        type?: string | undefined;
        nextStep?: string | undefined;
        leadId?: string | undefined;
        leadSource?: string | undefined;
        isClosed?: boolean | undefined;
        isWon?: boolean | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        lostReason?: string | undefined;
        campaign?: PatchOpportunitiesIdCampaign$.Inbound | undefined;
        account?: PatchOpportunitiesIdAccount$.Inbound | undefined;
        contacts?: Array<PatchOpportunitiesIdContacts$.Inbound> | undefined;
        owner?: PatchOpportunitiesIdOwner$.Inbound | undefined;
        attachments?: Array<PatchOpportunitiesIdAttachments$.Inbound> | undefined;
        notes?: Array<string> | undefined;
        customFields?:
            | Array<PatchOpportunitiesIdOpportunitiesRequestRequestBodyCustomFields1$.Inbound>
            | undefined;
    };

    export const inboundSchema: z.ZodType<PatchOpportunitiesIdRequestBody, z.ZodTypeDef, Inbound> =
        z
            .object({
                id: z.string().optional(),
                title: z.string().optional(),
                description: z.string().optional(),
                amount: z.number().optional(),
                currency: z.string().optional(),
                stage: z.string().optional(),
                probability: z.number().optional(),
                closeDate: z.number().optional(),
                type: z.string().optional(),
                nextStep: z.string().optional(),
                leadId: z.string().optional(),
                leadSource: z.string().optional(),
                isClosed: z.boolean().optional(),
                isWon: z.boolean().optional(),
                createdAt: z.number().optional(),
                updatedAt: z.number().optional(),
                lostReason: z.string().optional(),
                campaign: z.lazy(() => PatchOpportunitiesIdCampaign$.inboundSchema).optional(),
                account: z.lazy(() => PatchOpportunitiesIdAccount$.inboundSchema).optional(),
                contacts: z
                    .array(z.lazy(() => PatchOpportunitiesIdContacts$.inboundSchema))
                    .optional(),
                owner: z.lazy(() => PatchOpportunitiesIdOwner$.inboundSchema).optional(),
                attachments: z
                    .array(z.lazy(() => PatchOpportunitiesIdAttachments$.inboundSchema))
                    .optional(),
                notes: z.array(z.string()).optional(),
                customFields: z
                    .array(
                        z.lazy(
                            () =>
                                PatchOpportunitiesIdOpportunitiesRequestRequestBodyCustomFields1$.inboundSchema
                        )
                    )
                    .optional(),
            })
            .transform((v) => {
                return {
                    ...(v.id === undefined ? null : { id: v.id }),
                    ...(v.title === undefined ? null : { title: v.title }),
                    ...(v.description === undefined ? null : { description: v.description }),
                    ...(v.amount === undefined ? null : { amount: v.amount }),
                    ...(v.currency === undefined ? null : { currency: v.currency }),
                    ...(v.stage === undefined ? null : { stage: v.stage }),
                    ...(v.probability === undefined ? null : { probability: v.probability }),
                    ...(v.closeDate === undefined ? null : { closeDate: v.closeDate }),
                    ...(v.type === undefined ? null : { type: v.type }),
                    ...(v.nextStep === undefined ? null : { nextStep: v.nextStep }),
                    ...(v.leadId === undefined ? null : { leadId: v.leadId }),
                    ...(v.leadSource === undefined ? null : { leadSource: v.leadSource }),
                    ...(v.isClosed === undefined ? null : { isClosed: v.isClosed }),
                    ...(v.isWon === undefined ? null : { isWon: v.isWon }),
                    ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                    ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                    ...(v.lostReason === undefined ? null : { lostReason: v.lostReason }),
                    ...(v.campaign === undefined ? null : { campaign: v.campaign }),
                    ...(v.account === undefined ? null : { account: v.account }),
                    ...(v.contacts === undefined ? null : { contacts: v.contacts }),
                    ...(v.owner === undefined ? null : { owner: v.owner }),
                    ...(v.attachments === undefined ? null : { attachments: v.attachments }),
                    ...(v.notes === undefined ? null : { notes: v.notes }),
                    ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                };
            });

    export type Outbound = {
        id?: string | undefined;
        title?: string | undefined;
        description?: string | undefined;
        amount?: number | undefined;
        currency?: string | undefined;
        stage?: string | undefined;
        probability?: number | undefined;
        closeDate?: number | undefined;
        type?: string | undefined;
        nextStep?: string | undefined;
        leadId?: string | undefined;
        leadSource?: string | undefined;
        isClosed?: boolean | undefined;
        isWon?: boolean | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        lostReason?: string | undefined;
        campaign?: PatchOpportunitiesIdCampaign$.Outbound | undefined;
        account?: PatchOpportunitiesIdAccount$.Outbound | undefined;
        contacts?: Array<PatchOpportunitiesIdContacts$.Outbound> | undefined;
        owner?: PatchOpportunitiesIdOwner$.Outbound | undefined;
        attachments?: Array<PatchOpportunitiesIdAttachments$.Outbound> | undefined;
        notes?: Array<string> | undefined;
        customFields?:
            | Array<PatchOpportunitiesIdOpportunitiesRequestRequestBodyCustomFields1$.Outbound>
            | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PatchOpportunitiesIdRequestBody
    > = z
        .object({
            id: z.string().optional(),
            title: z.string().optional(),
            description: z.string().optional(),
            amount: z.number().optional(),
            currency: z.string().optional(),
            stage: z.string().optional(),
            probability: z.number().optional(),
            closeDate: z.number().optional(),
            type: z.string().optional(),
            nextStep: z.string().optional(),
            leadId: z.string().optional(),
            leadSource: z.string().optional(),
            isClosed: z.boolean().optional(),
            isWon: z.boolean().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            lostReason: z.string().optional(),
            campaign: z.lazy(() => PatchOpportunitiesIdCampaign$.outboundSchema).optional(),
            account: z.lazy(() => PatchOpportunitiesIdAccount$.outboundSchema).optional(),
            contacts: z
                .array(z.lazy(() => PatchOpportunitiesIdContacts$.outboundSchema))
                .optional(),
            owner: z.lazy(() => PatchOpportunitiesIdOwner$.outboundSchema).optional(),
            attachments: z
                .array(z.lazy(() => PatchOpportunitiesIdAttachments$.outboundSchema))
                .optional(),
            notes: z.array(z.string()).optional(),
            customFields: z
                .array(
                    z.lazy(
                        () =>
                            PatchOpportunitiesIdOpportunitiesRequestRequestBodyCustomFields1$.outboundSchema
                    )
                )
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.amount === undefined ? null : { amount: v.amount }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.stage === undefined ? null : { stage: v.stage }),
                ...(v.probability === undefined ? null : { probability: v.probability }),
                ...(v.closeDate === undefined ? null : { closeDate: v.closeDate }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.nextStep === undefined ? null : { nextStep: v.nextStep }),
                ...(v.leadId === undefined ? null : { leadId: v.leadId }),
                ...(v.leadSource === undefined ? null : { leadSource: v.leadSource }),
                ...(v.isClosed === undefined ? null : { isClosed: v.isClosed }),
                ...(v.isWon === undefined ? null : { isWon: v.isWon }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.lostReason === undefined ? null : { lostReason: v.lostReason }),
                ...(v.campaign === undefined ? null : { campaign: v.campaign }),
                ...(v.account === undefined ? null : { account: v.account }),
                ...(v.contacts === undefined ? null : { contacts: v.contacts }),
                ...(v.owner === undefined ? null : { owner: v.owner }),
                ...(v.attachments === undefined ? null : { attachments: v.attachments }),
                ...(v.notes === undefined ? null : { notes: v.notes }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
            };
        });
}

/** @internal */
export namespace PatchOpportunitiesIdRequest$ {
    export type Inbound = {
        id: string;
        "X-INTEGRATIONOS-CONNECTION-KEY": string;
        RequestBody?: PatchOpportunitiesIdRequestBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<PatchOpportunitiesIdRequest, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string(),
            "X-INTEGRATIONOS-CONNECTION-KEY": z.string(),
            RequestBody: z.lazy(() => PatchOpportunitiesIdRequestBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                id: v.id,
                xIntegrationosConnectionKey: v["X-INTEGRATIONOS-CONNECTION-KEY"],
                ...(v.RequestBody === undefined ? null : { requestBody: v.RequestBody }),
            };
        });

    export type Outbound = {
        id: string;
        "X-INTEGRATIONOS-CONNECTION-KEY": string;
        RequestBody?: PatchOpportunitiesIdRequestBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchOpportunitiesIdRequest> = z
        .object({
            id: z.string(),
            xIntegrationosConnectionKey: z.string(),
            requestBody: z.lazy(() => PatchOpportunitiesIdRequestBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                id: v.id,
                "X-INTEGRATIONOS-CONNECTION-KEY": v.xIntegrationosConnectionKey,
                ...(v.requestBody === undefined ? null : { RequestBody: v.requestBody }),
            };
        });
}

/** @internal */
export const PatchOpportunitiesIdStatusCode$ = z.nativeEnum(PatchOpportunitiesIdStatusCode);

/** @internal */
export namespace PatchOpportunitiesIdUnified$ {
    export type Inbound = {
        count?: number | undefined;
    };

    export const inboundSchema: z.ZodType<PatchOpportunitiesIdUnified, z.ZodTypeDef, Inbound> = z
        .object({
            count: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.count === undefined ? null : { count: v.count }),
            };
        });

    export type Outbound = {
        count?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchOpportunitiesIdUnified> = z
        .object({
            count: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.count === undefined ? null : { count: v.count }),
            };
        });
}

/** @internal */
export namespace PatchOpportunitiesIdPassthrough$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<PatchOpportunitiesIdPassthrough, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PatchOpportunitiesIdPassthrough
    > = z.object({});
}

/** @internal */
export namespace PatchOpportunitiesIdCache$ {
    export type Inbound = {
        hit?: boolean | undefined;
        ttl?: number | undefined;
        key?: string | undefined;
    };

    export const inboundSchema: z.ZodType<PatchOpportunitiesIdCache, z.ZodTypeDef, Inbound> = z
        .object({
            hit: z.boolean().optional(),
            ttl: z.number().int().optional(),
            key: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.hit === undefined ? null : { hit: v.hit }),
                ...(v.ttl === undefined ? null : { ttl: v.ttl }),
                ...(v.key === undefined ? null : { key: v.key }),
            };
        });

    export type Outbound = {
        hit?: boolean | undefined;
        ttl?: number | undefined;
        key?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchOpportunitiesIdCache> = z
        .object({
            hit: z.boolean().optional(),
            ttl: z.number().int().optional(),
            key: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.hit === undefined ? null : { hit: v.hit }),
                ...(v.ttl === undefined ? null : { ttl: v.ttl }),
                ...(v.key === undefined ? null : { key: v.key }),
            };
        });
}

/** @internal */
export namespace PatchOpportunitiesIdMeta$ {
    export type Inbound = {
        timestamp?: number | undefined;
        latency?: number | undefined;
        platformRateLimitRemaining?: number | undefined;
        rateLimitRemaining?: number | undefined;
        cache?: PatchOpportunitiesIdCache$.Inbound | undefined;
        transactionKey?: string | undefined;
        txn?: string | undefined;
        platform?: string | undefined;
        platformVersion?: string | undefined;
        connectionDefinitionKey?: string | undefined;
        action?: string | undefined;
        commonModel?: string | undefined;
        commonModelVersion?: string | undefined;
        connectionKey?: string | undefined;
        hash?: string | undefined;
        heartbeats?: Array<string> | undefined;
        totalTransactions?: number | undefined;
    };

    export const inboundSchema: z.ZodType<PatchOpportunitiesIdMeta, z.ZodTypeDef, Inbound> = z
        .object({
            timestamp: z.number().int().optional(),
            latency: z.number().int().optional(),
            platformRateLimitRemaining: z.number().int().optional(),
            rateLimitRemaining: z.number().int().optional(),
            cache: z.lazy(() => PatchOpportunitiesIdCache$.inboundSchema).optional(),
            transactionKey: z.string().optional(),
            txn: z.string().optional(),
            platform: z.string().optional(),
            platformVersion: z.string().optional(),
            connectionDefinitionKey: z.string().optional(),
            action: z.string().optional(),
            commonModel: z.string().optional(),
            commonModelVersion: z.string().optional(),
            connectionKey: z.string().optional(),
            hash: z.string().optional(),
            heartbeats: z.array(z.string()).optional(),
            totalTransactions: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.timestamp === undefined ? null : { timestamp: v.timestamp }),
                ...(v.latency === undefined ? null : { latency: v.latency }),
                ...(v.platformRateLimitRemaining === undefined
                    ? null
                    : { platformRateLimitRemaining: v.platformRateLimitRemaining }),
                ...(v.rateLimitRemaining === undefined
                    ? null
                    : { rateLimitRemaining: v.rateLimitRemaining }),
                ...(v.cache === undefined ? null : { cache: v.cache }),
                ...(v.transactionKey === undefined ? null : { transactionKey: v.transactionKey }),
                ...(v.txn === undefined ? null : { txn: v.txn }),
                ...(v.platform === undefined ? null : { platform: v.platform }),
                ...(v.platformVersion === undefined
                    ? null
                    : { platformVersion: v.platformVersion }),
                ...(v.connectionDefinitionKey === undefined
                    ? null
                    : { connectionDefinitionKey: v.connectionDefinitionKey }),
                ...(v.action === undefined ? null : { action: v.action }),
                ...(v.commonModel === undefined ? null : { commonModel: v.commonModel }),
                ...(v.commonModelVersion === undefined
                    ? null
                    : { commonModelVersion: v.commonModelVersion }),
                ...(v.connectionKey === undefined ? null : { connectionKey: v.connectionKey }),
                ...(v.hash === undefined ? null : { hash: v.hash }),
                ...(v.heartbeats === undefined ? null : { heartbeats: v.heartbeats }),
                ...(v.totalTransactions === undefined
                    ? null
                    : { totalTransactions: v.totalTransactions }),
            };
        });

    export type Outbound = {
        timestamp?: number | undefined;
        latency?: number | undefined;
        platformRateLimitRemaining?: number | undefined;
        rateLimitRemaining?: number | undefined;
        cache?: PatchOpportunitiesIdCache$.Outbound | undefined;
        transactionKey?: string | undefined;
        txn?: string | undefined;
        platform?: string | undefined;
        platformVersion?: string | undefined;
        connectionDefinitionKey?: string | undefined;
        action?: string | undefined;
        commonModel?: string | undefined;
        commonModelVersion?: string | undefined;
        connectionKey?: string | undefined;
        hash?: string | undefined;
        heartbeats?: Array<string> | undefined;
        totalTransactions?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchOpportunitiesIdMeta> = z
        .object({
            timestamp: z.number().int().optional(),
            latency: z.number().int().optional(),
            platformRateLimitRemaining: z.number().int().optional(),
            rateLimitRemaining: z.number().int().optional(),
            cache: z.lazy(() => PatchOpportunitiesIdCache$.outboundSchema).optional(),
            transactionKey: z.string().optional(),
            txn: z.string().optional(),
            platform: z.string().optional(),
            platformVersion: z.string().optional(),
            connectionDefinitionKey: z.string().optional(),
            action: z.string().optional(),
            commonModel: z.string().optional(),
            commonModelVersion: z.string().optional(),
            connectionKey: z.string().optional(),
            hash: z.string().optional(),
            heartbeats: z.array(z.string()).optional(),
            totalTransactions: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.timestamp === undefined ? null : { timestamp: v.timestamp }),
                ...(v.latency === undefined ? null : { latency: v.latency }),
                ...(v.platformRateLimitRemaining === undefined
                    ? null
                    : { platformRateLimitRemaining: v.platformRateLimitRemaining }),
                ...(v.rateLimitRemaining === undefined
                    ? null
                    : { rateLimitRemaining: v.rateLimitRemaining }),
                ...(v.cache === undefined ? null : { cache: v.cache }),
                ...(v.transactionKey === undefined ? null : { transactionKey: v.transactionKey }),
                ...(v.txn === undefined ? null : { txn: v.txn }),
                ...(v.platform === undefined ? null : { platform: v.platform }),
                ...(v.platformVersion === undefined
                    ? null
                    : { platformVersion: v.platformVersion }),
                ...(v.connectionDefinitionKey === undefined
                    ? null
                    : { connectionDefinitionKey: v.connectionDefinitionKey }),
                ...(v.action === undefined ? null : { action: v.action }),
                ...(v.commonModel === undefined ? null : { commonModel: v.commonModel }),
                ...(v.commonModelVersion === undefined
                    ? null
                    : { commonModelVersion: v.commonModelVersion }),
                ...(v.connectionKey === undefined ? null : { connectionKey: v.connectionKey }),
                ...(v.hash === undefined ? null : { hash: v.hash }),
                ...(v.heartbeats === undefined ? null : { heartbeats: v.heartbeats }),
                ...(v.totalTransactions === undefined
                    ? null
                    : { totalTransactions: v.totalTransactions }),
            };
        });
}

/** @internal */
export namespace PatchOpportunitiesIdResponseBody$ {
    export type Inbound = {
        status?: string | undefined;
        statusCode?: PatchOpportunitiesIdStatusCode | undefined;
        unified?: PatchOpportunitiesIdUnified$.Inbound | undefined;
        passthrough?: PatchOpportunitiesIdPassthrough$.Inbound | undefined;
        meta?: PatchOpportunitiesIdMeta$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<PatchOpportunitiesIdResponseBody, z.ZodTypeDef, Inbound> =
        z
            .object({
                status: z.string().optional(),
                statusCode: PatchOpportunitiesIdStatusCode$.optional(),
                unified: z.lazy(() => PatchOpportunitiesIdUnified$.inboundSchema).optional(),
                passthrough: z
                    .lazy(() => PatchOpportunitiesIdPassthrough$.inboundSchema)
                    .optional(),
                meta: z.lazy(() => PatchOpportunitiesIdMeta$.inboundSchema).optional(),
            })
            .transform((v) => {
                return {
                    ...(v.status === undefined ? null : { status: v.status }),
                    ...(v.statusCode === undefined ? null : { statusCode: v.statusCode }),
                    ...(v.unified === undefined ? null : { unified: v.unified }),
                    ...(v.passthrough === undefined ? null : { passthrough: v.passthrough }),
                    ...(v.meta === undefined ? null : { meta: v.meta }),
                };
            });

    export type Outbound = {
        status?: string | undefined;
        statusCode?: PatchOpportunitiesIdStatusCode | undefined;
        unified?: PatchOpportunitiesIdUnified$.Outbound | undefined;
        passthrough?: PatchOpportunitiesIdPassthrough$.Outbound | undefined;
        meta?: PatchOpportunitiesIdMeta$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PatchOpportunitiesIdResponseBody
    > = z
        .object({
            status: z.string().optional(),
            statusCode: PatchOpportunitiesIdStatusCode$.optional(),
            unified: z.lazy(() => PatchOpportunitiesIdUnified$.outboundSchema).optional(),
            passthrough: z.lazy(() => PatchOpportunitiesIdPassthrough$.outboundSchema).optional(),
            meta: z.lazy(() => PatchOpportunitiesIdMeta$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.statusCode === undefined ? null : { statusCode: v.statusCode }),
                ...(v.unified === undefined ? null : { unified: v.unified }),
                ...(v.passthrough === undefined ? null : { passthrough: v.passthrough }),
                ...(v.meta === undefined ? null : { meta: v.meta }),
            };
        });
}

/** @internal */
export namespace PatchOpportunitiesIdResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        object?: PatchOpportunitiesIdResponseBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<PatchOpportunitiesIdResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => PatchOpportunitiesIdResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: PatchOpportunitiesIdResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchOpportunitiesIdResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z.lazy(() => PatchOpportunitiesIdResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
