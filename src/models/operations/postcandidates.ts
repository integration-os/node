/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export enum PostCandidatesType {
    String = "String",
    Number = "Number",
    Boolean = "Boolean",
    Date = "Date",
    Json = "Json",
    Array = "Array",
}

export type PostCandidatesMetadata = {
    id?: string | undefined;
    key?: string | undefined;
    value?: string | undefined;
    type?: PostCandidatesType | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    entityId?: string | undefined;
    entityType?: string | undefined;
};

export enum PostCandidatesEntityType {
    User = "User",
    Project = "Project",
    Message = "Message",
    Other = "Other",
}

export type PostCandidatesAssociatedWith = {
    entityId?: string | undefined;
    entityType?: PostCandidatesEntityType | undefined;
    attributes?: Array<string> | undefined;
};

export enum PostCandidatesAccessControlType {
    Rbac = "RBAC",
    Abac = "ABAC",
    Custom = "Custom",
    None = "None",
}

export enum PostCandidatesCandidatesType {
    User = "User",
    Group = "Group",
}

export type PostCandidatesAssigneeDetails = {
    identifier?: string | undefined;
    displayName?: string | undefined;
    type?: PostCandidatesCandidatesType | undefined;
};

export enum PostCandidatesIdentifierType {
    String = "String",
    Number = "Number",
}

export type PostCandidatesPermissions = {
    canView?: Array<string> | undefined;
    canEdit?: Array<string> | undefined;
    canDelete?: Array<string> | undefined;
    roles?: Array<string> | undefined;
    accessControlType?: PostCandidatesAccessControlType | undefined;
    assigneeDetails?: PostCandidatesAssigneeDetails | undefined;
    identifierType?: PostCandidatesIdentifierType | undefined;
};

export type PostCandidatesResume = {
    id?: string | undefined;
    fileName?: string | undefined;
    fileSize?: number | undefined;
    fileType?: string | undefined;
    url?: string | undefined;
    thumbnailUrl?: string | undefined;
    previewUrl?: string | undefined;
    content?: string | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    metadata?: PostCandidatesMetadata | undefined;
    associatedWith?: PostCandidatesAssociatedWith | undefined;
    permissions?: PostCandidatesPermissions | undefined;
};

export enum PostCandidatesCandidatesRequestType {
    String = "String",
    Number = "Number",
    Boolean = "Boolean",
    Date = "Date",
    Json = "Json",
    Array = "Array",
}

export type PostCandidatesCandidatesMetadata = {
    id?: string | undefined;
    key?: string | undefined;
    value?: string | undefined;
    type?: PostCandidatesCandidatesRequestType | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    entityId?: string | undefined;
    entityType?: string | undefined;
};

export enum PostCandidatesCandidatesEntityType {
    User = "User",
    Project = "Project",
    Message = "Message",
    Other = "Other",
}

export type PostCandidatesCandidatesAssociatedWith = {
    entityId?: string | undefined;
    entityType?: PostCandidatesCandidatesEntityType | undefined;
    attributes?: Array<string> | undefined;
};

export enum PostCandidatesCandidatesAccessControlType {
    Rbac = "RBAC",
    Abac = "ABAC",
    Custom = "Custom",
    None = "None",
}

export enum PostCandidatesCandidatesRequestRequestBodyType {
    User = "User",
    Group = "Group",
}

export type PostCandidatesCandidatesAssigneeDetails = {
    identifier?: string | undefined;
    displayName?: string | undefined;
    type?: PostCandidatesCandidatesRequestRequestBodyType | undefined;
};

export enum PostCandidatesCandidatesIdentifierType {
    String = "String",
    Number = "Number",
}

export type PostCandidatesCandidatesPermissions = {
    canView?: Array<string> | undefined;
    canEdit?: Array<string> | undefined;
    canDelete?: Array<string> | undefined;
    roles?: Array<string> | undefined;
    accessControlType?: PostCandidatesCandidatesAccessControlType | undefined;
    assigneeDetails?: PostCandidatesCandidatesAssigneeDetails | undefined;
    identifierType?: PostCandidatesCandidatesIdentifierType | undefined;
};

export type PostCandidatesCoverLetter = {
    id?: string | undefined;
    fileName?: string | undefined;
    fileSize?: number | undefined;
    fileType?: string | undefined;
    url?: string | undefined;
    thumbnailUrl?: string | undefined;
    previewUrl?: string | undefined;
    content?: string | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    metadata?: PostCandidatesCandidatesMetadata | undefined;
    associatedWith?: PostCandidatesCandidatesAssociatedWith | undefined;
    permissions?: PostCandidatesCandidatesPermissions | undefined;
};

export enum PostCandidatesMimeType {
    ImageJpeg = "image/jpeg",
    ImagePng = "image/png",
    ImageGif = "image/gif",
    ImageSvgPlusXml = "image/svg+xml",
    ImageWebp = "image/webp",
}

export type PostCandidatesProfilePicture = {
    id?: string | undefined;
    src?: string | undefined;
    altText?: string | undefined;
    width?: number | undefined;
    height?: number | undefined;
    thumbnailSrc?: string | undefined;
    caption?: string | undefined;
    title?: string | undefined;
    mimeType?: PostCandidatesMimeType | undefined;
    tags?: Array<string> | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    active?: boolean | undefined;
    deleted?: boolean | undefined;
};

export enum PostCandidatesCandidatesRequestRequestBodySocialProfilesType {
    Facebook = "facebook",
    Twitter = "twitter",
    Linkedin = "linkedin",
    Instagram = "instagram",
    Tiktok = "tiktok",
    Pinterest = "pinterest",
    Youtube = "youtube",
    Other = "other",
}

export type PostCandidatesAdditionalInfo = {};

export type PostCandidatesSocialProfiles = {
    type?: PostCandidatesCandidatesRequestRequestBodySocialProfilesType | undefined;
    username?: string | undefined;
    displayName?: string | undefined;
    url?: string | undefined;
    avatarUrl?: string | undefined;
    email?: string | undefined;
    additionalInfo?: PostCandidatesAdditionalInfo | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    active?: boolean | undefined;
    deleted?: boolean | undefined;
};

export type PostCandidatesEducations = {
    institution?: string | undefined;
    degree?: string | undefined;
    fieldOfStudy?: string | undefined;
    startDate?: number | undefined;
    endDate?: number | undefined;
    gpa?: number | undefined;
};

export type PostCandidatesWorkExperiences = {
    company?: string | undefined;
    position?: string | undefined;
    startDate?: number | undefined;
    endDate?: number | undefined;
    description?: string | undefined;
};

export type PostCandidatesReferences = {
    name?: string | undefined;
    relationship?: string | undefined;
    company?: string | undefined;
    position?: string | undefined;
    email?: string | undefined;
    phoneNumber?: string | undefined;
};

export enum PostCandidatesStatus {
    New = "New",
    InReview = "InReview",
    Interviewing = "Interviewing",
    OfferExtended = "OfferExtended",
    Hired = "Hired",
    NotSelected = "NotSelected",
}

export enum PostCandidatesFieldType {
    Text = "text",
    Number = "number",
    Date = "date",
    Boolean = "boolean",
    Enum = "enum",
    Json = "json",
    Array = "array",
}

export type PostCandidatesCustomFields = {
    id?: string | undefined;
    fieldName?: string | undefined;
    fieldValue?: string | undefined;
    fieldType?: PostCandidatesFieldType | undefined;
};

export enum PostCandidatesPriority {
    Low = "low",
    Medium = "medium",
    High = "high",
}

export type PostCandidatesAuthor = {};

export type PostCandidatesAttachments = {};

export type PostCandidatesSharedWith = {};

export enum PostCandidatesVisibility {
    Private = "private",
    Public = "public",
    Shared = "shared",
}

export enum PostCandidatesCandidatesStatus {
    Active = "active",
    Archived = "archived",
}

export type PostCandidatesNotes = {
    id?: string | undefined;
    title?: string | undefined;
    content?: string | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    lastAccessed?: number | undefined;
    reminder?: number | undefined;
    color?: string | undefined;
    priority?: PostCandidatesPriority | undefined;
    author?: PostCandidatesAuthor | undefined;
    tags?: Array<string> | undefined;
    attachments?: Array<PostCandidatesAttachments> | undefined;
    sharedWith?: Array<PostCandidatesSharedWith> | undefined;
    visibility?: PostCandidatesVisibility | undefined;
    status?: PostCandidatesCandidatesStatus | undefined;
    metadata?: Array<string> | undefined;
};

export type PostCandidatesRequestBody = {
    id?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    email?: string | undefined;
    phoneNumber?: string | undefined;
    role?: string | undefined;
    jobId?: string | undefined;
    resume?: PostCandidatesResume | undefined;
    coverLetter?: PostCandidatesCoverLetter | undefined;
    profilePicture?: PostCandidatesProfilePicture | undefined;
    socialProfiles?: Array<PostCandidatesSocialProfiles> | undefined;
    websites?: Array<string> | undefined;
    skills?: Array<string> | undefined;
    languages?: Array<string> | undefined;
    certifications?: Array<string> | undefined;
    educations?: Array<PostCandidatesEducations> | undefined;
    workExperiences?: Array<PostCandidatesWorkExperiences> | undefined;
    references?: Array<PostCandidatesReferences> | undefined;
    availability?: number | undefined;
    preferredWorkLocation?: string | undefined;
    status?: PostCandidatesStatus | undefined;
    customFields?: Array<PostCandidatesCustomFields> | undefined;
    notes?: Array<PostCandidatesNotes> | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
};

export type PostCandidatesRequest = {
    /**
     * The unique identifier of a Connected Account
     */
    xIntegrationosConnectionKey: string;
    requestBody: PostCandidatesRequestBody;
};

export enum PostCandidatesStatusCode {
    TwoHundred = 200,
    FourHundred = 400,
    FiveHundred = 500,
}

export enum PostCandidatesCandidatesResponse200ApplicationJSONType {
    String = "String",
    Number = "Number",
    Boolean = "Boolean",
    Date = "Date",
    Json = "Json",
    Array = "Array",
}

export type PostCandidatesCandidatesResponseMetadata = {
    id?: string | undefined;
    key?: string | undefined;
    value?: string | undefined;
    type?: PostCandidatesCandidatesResponse200ApplicationJSONType | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    entityId?: string | undefined;
    entityType?: string | undefined;
};

export enum PostCandidatesCandidatesResponseEntityType {
    User = "User",
    Project = "Project",
    Message = "Message",
    Other = "Other",
}

export type PostCandidatesCandidatesResponseAssociatedWith = {
    entityId?: string | undefined;
    entityType?: PostCandidatesCandidatesResponseEntityType | undefined;
    attributes?: Array<string> | undefined;
};

export enum PostCandidatesCandidatesResponseAccessControlType {
    Rbac = "RBAC",
    Abac = "ABAC",
    Custom = "Custom",
    None = "None",
}

export enum PostCandidatesCandidatesResponse200ApplicationJSONResponseBodyUnifiedType {
    User = "User",
    Group = "Group",
}

export type PostCandidatesCandidatesResponseAssigneeDetails = {
    identifier?: string | undefined;
    displayName?: string | undefined;
    type?: PostCandidatesCandidatesResponse200ApplicationJSONResponseBodyUnifiedType | undefined;
};

export enum PostCandidatesCandidatesResponseIdentifierType {
    String = "String",
    Number = "Number",
}

export type PostCandidatesCandidatesResponsePermissions = {
    canView?: Array<string> | undefined;
    canEdit?: Array<string> | undefined;
    canDelete?: Array<string> | undefined;
    roles?: Array<string> | undefined;
    accessControlType?: PostCandidatesCandidatesResponseAccessControlType | undefined;
    assigneeDetails?: PostCandidatesCandidatesResponseAssigneeDetails | undefined;
    identifierType?: PostCandidatesCandidatesResponseIdentifierType | undefined;
};

export type PostCandidatesCandidatesResume = {
    id?: string | undefined;
    fileName?: string | undefined;
    fileSize?: number | undefined;
    fileType?: string | undefined;
    url?: string | undefined;
    thumbnailUrl?: string | undefined;
    previewUrl?: string | undefined;
    content?: string | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    metadata?: PostCandidatesCandidatesResponseMetadata | undefined;
    associatedWith?: PostCandidatesCandidatesResponseAssociatedWith | undefined;
    permissions?: PostCandidatesCandidatesResponsePermissions | undefined;
};

export enum PostCandidatesCandidatesResponse200Type {
    String = "String",
    Number = "Number",
    Boolean = "Boolean",
    Date = "Date",
    Json = "Json",
    Array = "Array",
}

export type PostCandidatesCandidatesResponse200Metadata = {
    id?: string | undefined;
    key?: string | undefined;
    value?: string | undefined;
    type?: PostCandidatesCandidatesResponse200Type | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    entityId?: string | undefined;
    entityType?: string | undefined;
};

export enum PostCandidatesCandidatesResponse200EntityType {
    User = "User",
    Project = "Project",
    Message = "Message",
    Other = "Other",
}

export type PostCandidatesCandidatesResponse200AssociatedWith = {
    entityId?: string | undefined;
    entityType?: PostCandidatesCandidatesResponse200EntityType | undefined;
    attributes?: Array<string> | undefined;
};

export enum PostCandidatesCandidatesResponse200AccessControlType {
    Rbac = "RBAC",
    Abac = "ABAC",
    Custom = "Custom",
    None = "None",
}

export enum PostCandidatesCandidatesResponse200ApplicationJSONResponseBodyType {
    User = "User",
    Group = "Group",
}

export type PostCandidatesCandidatesResponse200AssigneeDetails = {
    identifier?: string | undefined;
    displayName?: string | undefined;
    type?: PostCandidatesCandidatesResponse200ApplicationJSONResponseBodyType | undefined;
};

export enum PostCandidatesCandidatesResponse200IdentifierType {
    String = "String",
    Number = "Number",
}

export type PostCandidatesCandidatesResponse200Permissions = {
    canView?: Array<string> | undefined;
    canEdit?: Array<string> | undefined;
    canDelete?: Array<string> | undefined;
    roles?: Array<string> | undefined;
    accessControlType?: PostCandidatesCandidatesResponse200AccessControlType | undefined;
    assigneeDetails?: PostCandidatesCandidatesResponse200AssigneeDetails | undefined;
    identifierType?: PostCandidatesCandidatesResponse200IdentifierType | undefined;
};

export type PostCandidatesCandidatesCoverLetter = {
    id?: string | undefined;
    fileName?: string | undefined;
    fileSize?: number | undefined;
    fileType?: string | undefined;
    url?: string | undefined;
    thumbnailUrl?: string | undefined;
    previewUrl?: string | undefined;
    content?: string | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    metadata?: PostCandidatesCandidatesResponse200Metadata | undefined;
    associatedWith?: PostCandidatesCandidatesResponse200AssociatedWith | undefined;
    permissions?: PostCandidatesCandidatesResponse200Permissions | undefined;
};

export enum PostCandidatesCandidatesMimeType {
    ImageJpeg = "image/jpeg",
    ImagePng = "image/png",
    ImageGif = "image/gif",
    ImageSvgPlusXml = "image/svg+xml",
    ImageWebp = "image/webp",
}

export type PostCandidatesCandidatesProfilePicture = {
    id?: string | undefined;
    src?: string | undefined;
    altText?: string | undefined;
    width?: number | undefined;
    height?: number | undefined;
    thumbnailSrc?: string | undefined;
    caption?: string | undefined;
    title?: string | undefined;
    mimeType?: PostCandidatesCandidatesMimeType | undefined;
    tags?: Array<string> | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    active?: boolean | undefined;
    deleted?: boolean | undefined;
};

export enum PostCandidatesCandidatesResponseType {
    Facebook = "facebook",
    Twitter = "twitter",
    Linkedin = "linkedin",
    Instagram = "instagram",
    Tiktok = "tiktok",
    Pinterest = "pinterest",
    Youtube = "youtube",
    Other = "other",
}

export type PostCandidatesCandidatesAdditionalInfo = {};

export type PostCandidatesCandidatesSocialProfiles = {
    type?: PostCandidatesCandidatesResponseType | undefined;
    username?: string | undefined;
    displayName?: string | undefined;
    url?: string | undefined;
    avatarUrl?: string | undefined;
    email?: string | undefined;
    additionalInfo?: PostCandidatesCandidatesAdditionalInfo | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    active?: boolean | undefined;
    deleted?: boolean | undefined;
};

export type PostCandidatesCandidatesEducations = {
    institution?: string | undefined;
    degree?: string | undefined;
    fieldOfStudy?: string | undefined;
    startDate?: number | undefined;
    endDate?: number | undefined;
    gpa?: number | undefined;
};

export type PostCandidatesCandidatesWorkExperiences = {
    company?: string | undefined;
    position?: string | undefined;
    startDate?: number | undefined;
    endDate?: number | undefined;
    description?: string | undefined;
};

export type PostCandidatesCandidatesReferences = {
    name?: string | undefined;
    relationship?: string | undefined;
    company?: string | undefined;
    position?: string | undefined;
    email?: string | undefined;
    phoneNumber?: string | undefined;
};

export enum PostCandidatesCandidatesResponseStatus {
    New = "New",
    InReview = "InReview",
    Interviewing = "Interviewing",
    OfferExtended = "OfferExtended",
    Hired = "Hired",
    NotSelected = "NotSelected",
}

export enum PostCandidatesCandidatesFieldType {
    Text = "text",
    Number = "number",
    Date = "date",
    Boolean = "boolean",
    Enum = "enum",
    Json = "json",
    Array = "array",
}

export type PostCandidatesCandidatesCustomFields = {
    id?: string | undefined;
    fieldName?: string | undefined;
    fieldValue?: string | undefined;
    fieldType?: PostCandidatesCandidatesFieldType | undefined;
};

export enum PostCandidatesCandidatesPriority {
    Low = "low",
    Medium = "medium",
    High = "high",
}

export type PostCandidatesCandidatesAuthor = {};

export type PostCandidatesCandidatesAttachments = {};

export type PostCandidatesCandidatesSharedWith = {};

export enum PostCandidatesCandidatesVisibility {
    Private = "private",
    Public = "public",
    Shared = "shared",
}

export enum PostCandidatesCandidatesResponse200Status {
    Active = "active",
    Archived = "archived",
}

export type PostCandidatesCandidatesNotes = {
    id?: string | undefined;
    title?: string | undefined;
    content?: string | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    lastAccessed?: number | undefined;
    reminder?: number | undefined;
    color?: string | undefined;
    priority?: PostCandidatesCandidatesPriority | undefined;
    author?: PostCandidatesCandidatesAuthor | undefined;
    tags?: Array<string> | undefined;
    attachments?: Array<PostCandidatesCandidatesAttachments> | undefined;
    sharedWith?: Array<PostCandidatesCandidatesSharedWith> | undefined;
    visibility?: PostCandidatesCandidatesVisibility | undefined;
    status?: PostCandidatesCandidatesResponse200Status | undefined;
    metadata?: Array<string> | undefined;
};

export type PostCandidatesUnified = {
    id?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    email?: string | undefined;
    phoneNumber?: string | undefined;
    role?: string | undefined;
    jobId?: string | undefined;
    resume?: PostCandidatesCandidatesResume | undefined;
    coverLetter?: PostCandidatesCandidatesCoverLetter | undefined;
    profilePicture?: PostCandidatesCandidatesProfilePicture | undefined;
    socialProfiles?: Array<PostCandidatesCandidatesSocialProfiles> | undefined;
    websites?: Array<string> | undefined;
    skills?: Array<string> | undefined;
    languages?: Array<string> | undefined;
    certifications?: Array<string> | undefined;
    educations?: Array<PostCandidatesCandidatesEducations> | undefined;
    workExperiences?: Array<PostCandidatesCandidatesWorkExperiences> | undefined;
    references?: Array<PostCandidatesCandidatesReferences> | undefined;
    availability?: number | undefined;
    preferredWorkLocation?: string | undefined;
    status?: PostCandidatesCandidatesResponseStatus | undefined;
    customFields?: Array<PostCandidatesCandidatesCustomFields> | undefined;
    notes?: Array<PostCandidatesCandidatesNotes> | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
};

export type PostCandidatesPassthrough = {};

export type PostCandidatesCache = {
    hit?: boolean | undefined;
    ttl?: number | undefined;
    key?: string | undefined;
};

export type PostCandidatesMeta = {
    timestamp?: number | undefined;
    latency?: number | undefined;
    platformRateLimitRemaining?: number | undefined;
    rateLimitRemaining?: number | undefined;
    cache?: PostCandidatesCache | undefined;
    transactionKey?: string | undefined;
    txn?: string | undefined;
    platform?: string | undefined;
    platformVersion?: string | undefined;
    connectionDefinitionKey?: string | undefined;
    action?: string | undefined;
    commonModel?: string | undefined;
    commonModelVersion?: string | undefined;
    connectionKey?: string | undefined;
    hash?: string | undefined;
    heartbeats?: Array<string> | undefined;
    totalTransactions?: number | undefined;
};

/**
 * Successful response
 */
export type PostCandidatesResponseBody = {
    status?: string | undefined;
    statusCode?: PostCandidatesStatusCode | undefined;
    unified?: PostCandidatesUnified | undefined;
    passthrough?: PostCandidatesPassthrough | undefined;
    meta?: PostCandidatesMeta | undefined;
};

export type PostCandidatesResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Successful response
     */
    object?: PostCandidatesResponseBody | undefined;
};

/** @internal */
export const PostCandidatesType$ = z.nativeEnum(PostCandidatesType);

/** @internal */
export namespace PostCandidatesMetadata$ {
    export type Inbound = {
        id?: string | undefined;
        key?: string | undefined;
        value?: string | undefined;
        type?: PostCandidatesType | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        entityId?: string | undefined;
        entityType?: string | undefined;
    };

    export const inboundSchema: z.ZodType<PostCandidatesMetadata, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            key: z.string().optional(),
            value: z.string().optional(),
            type: PostCandidatesType$.optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            entityId: z.string().optional(),
            entityType: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.key === undefined ? null : { key: v.key }),
                ...(v.value === undefined ? null : { value: v.value }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.entityId === undefined ? null : { entityId: v.entityId }),
                ...(v.entityType === undefined ? null : { entityType: v.entityType }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        key?: string | undefined;
        value?: string | undefined;
        type?: PostCandidatesType | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        entityId?: string | undefined;
        entityType?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostCandidatesMetadata> = z
        .object({
            id: z.string().optional(),
            key: z.string().optional(),
            value: z.string().optional(),
            type: PostCandidatesType$.optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            entityId: z.string().optional(),
            entityType: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.key === undefined ? null : { key: v.key }),
                ...(v.value === undefined ? null : { value: v.value }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.entityId === undefined ? null : { entityId: v.entityId }),
                ...(v.entityType === undefined ? null : { entityType: v.entityType }),
            };
        });
}

/** @internal */
export const PostCandidatesEntityType$ = z.nativeEnum(PostCandidatesEntityType);

/** @internal */
export namespace PostCandidatesAssociatedWith$ {
    export type Inbound = {
        entityId?: string | undefined;
        entityType?: PostCandidatesEntityType | undefined;
        attributes?: Array<string> | undefined;
    };

    export const inboundSchema: z.ZodType<PostCandidatesAssociatedWith, z.ZodTypeDef, Inbound> = z
        .object({
            entityId: z.string().optional(),
            entityType: PostCandidatesEntityType$.optional(),
            attributes: z.array(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.entityId === undefined ? null : { entityId: v.entityId }),
                ...(v.entityType === undefined ? null : { entityType: v.entityType }),
                ...(v.attributes === undefined ? null : { attributes: v.attributes }),
            };
        });

    export type Outbound = {
        entityId?: string | undefined;
        entityType?: PostCandidatesEntityType | undefined;
        attributes?: Array<string> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostCandidatesAssociatedWith> = z
        .object({
            entityId: z.string().optional(),
            entityType: PostCandidatesEntityType$.optional(),
            attributes: z.array(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.entityId === undefined ? null : { entityId: v.entityId }),
                ...(v.entityType === undefined ? null : { entityType: v.entityType }),
                ...(v.attributes === undefined ? null : { attributes: v.attributes }),
            };
        });
}

/** @internal */
export const PostCandidatesAccessControlType$ = z.nativeEnum(PostCandidatesAccessControlType);

/** @internal */
export const PostCandidatesCandidatesType$ = z.nativeEnum(PostCandidatesCandidatesType);

/** @internal */
export namespace PostCandidatesAssigneeDetails$ {
    export type Inbound = {
        identifier?: string | undefined;
        displayName?: string | undefined;
        type?: PostCandidatesCandidatesType | undefined;
    };

    export const inboundSchema: z.ZodType<PostCandidatesAssigneeDetails, z.ZodTypeDef, Inbound> = z
        .object({
            identifier: z.string().optional(),
            displayName: z.string().optional(),
            type: PostCandidatesCandidatesType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.identifier === undefined ? null : { identifier: v.identifier }),
                ...(v.displayName === undefined ? null : { displayName: v.displayName }),
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });

    export type Outbound = {
        identifier?: string | undefined;
        displayName?: string | undefined;
        type?: PostCandidatesCandidatesType | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostCandidatesAssigneeDetails> =
        z
            .object({
                identifier: z.string().optional(),
                displayName: z.string().optional(),
                type: PostCandidatesCandidatesType$.optional(),
            })
            .transform((v) => {
                return {
                    ...(v.identifier === undefined ? null : { identifier: v.identifier }),
                    ...(v.displayName === undefined ? null : { displayName: v.displayName }),
                    ...(v.type === undefined ? null : { type: v.type }),
                };
            });
}

/** @internal */
export const PostCandidatesIdentifierType$ = z.nativeEnum(PostCandidatesIdentifierType);

/** @internal */
export namespace PostCandidatesPermissions$ {
    export type Inbound = {
        canView?: Array<string> | undefined;
        canEdit?: Array<string> | undefined;
        canDelete?: Array<string> | undefined;
        roles?: Array<string> | undefined;
        accessControlType?: PostCandidatesAccessControlType | undefined;
        assigneeDetails?: PostCandidatesAssigneeDetails$.Inbound | undefined;
        identifierType?: PostCandidatesIdentifierType | undefined;
    };

    export const inboundSchema: z.ZodType<PostCandidatesPermissions, z.ZodTypeDef, Inbound> = z
        .object({
            canView: z.array(z.string()).optional(),
            canEdit: z.array(z.string()).optional(),
            canDelete: z.array(z.string()).optional(),
            roles: z.array(z.string()).optional(),
            accessControlType: PostCandidatesAccessControlType$.optional(),
            assigneeDetails: z.lazy(() => PostCandidatesAssigneeDetails$.inboundSchema).optional(),
            identifierType: PostCandidatesIdentifierType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.canView === undefined ? null : { canView: v.canView }),
                ...(v.canEdit === undefined ? null : { canEdit: v.canEdit }),
                ...(v.canDelete === undefined ? null : { canDelete: v.canDelete }),
                ...(v.roles === undefined ? null : { roles: v.roles }),
                ...(v.accessControlType === undefined
                    ? null
                    : { accessControlType: v.accessControlType }),
                ...(v.assigneeDetails === undefined
                    ? null
                    : { assigneeDetails: v.assigneeDetails }),
                ...(v.identifierType === undefined ? null : { identifierType: v.identifierType }),
            };
        });

    export type Outbound = {
        canView?: Array<string> | undefined;
        canEdit?: Array<string> | undefined;
        canDelete?: Array<string> | undefined;
        roles?: Array<string> | undefined;
        accessControlType?: PostCandidatesAccessControlType | undefined;
        assigneeDetails?: PostCandidatesAssigneeDetails$.Outbound | undefined;
        identifierType?: PostCandidatesIdentifierType | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostCandidatesPermissions> = z
        .object({
            canView: z.array(z.string()).optional(),
            canEdit: z.array(z.string()).optional(),
            canDelete: z.array(z.string()).optional(),
            roles: z.array(z.string()).optional(),
            accessControlType: PostCandidatesAccessControlType$.optional(),
            assigneeDetails: z.lazy(() => PostCandidatesAssigneeDetails$.outboundSchema).optional(),
            identifierType: PostCandidatesIdentifierType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.canView === undefined ? null : { canView: v.canView }),
                ...(v.canEdit === undefined ? null : { canEdit: v.canEdit }),
                ...(v.canDelete === undefined ? null : { canDelete: v.canDelete }),
                ...(v.roles === undefined ? null : { roles: v.roles }),
                ...(v.accessControlType === undefined
                    ? null
                    : { accessControlType: v.accessControlType }),
                ...(v.assigneeDetails === undefined
                    ? null
                    : { assigneeDetails: v.assigneeDetails }),
                ...(v.identifierType === undefined ? null : { identifierType: v.identifierType }),
            };
        });
}

/** @internal */
export namespace PostCandidatesResume$ {
    export type Inbound = {
        id?: string | undefined;
        fileName?: string | undefined;
        fileSize?: number | undefined;
        fileType?: string | undefined;
        url?: string | undefined;
        thumbnailUrl?: string | undefined;
        previewUrl?: string | undefined;
        content?: string | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        metadata?: PostCandidatesMetadata$.Inbound | undefined;
        associatedWith?: PostCandidatesAssociatedWith$.Inbound | undefined;
        permissions?: PostCandidatesPermissions$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<PostCandidatesResume, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            fileName: z.string().optional(),
            fileSize: z.number().optional(),
            fileType: z.string().optional(),
            url: z.string().optional(),
            thumbnailUrl: z.string().optional(),
            previewUrl: z.string().optional(),
            content: z.string().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            metadata: z.lazy(() => PostCandidatesMetadata$.inboundSchema).optional(),
            associatedWith: z.lazy(() => PostCandidatesAssociatedWith$.inboundSchema).optional(),
            permissions: z.lazy(() => PostCandidatesPermissions$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fileName === undefined ? null : { fileName: v.fileName }),
                ...(v.fileSize === undefined ? null : { fileSize: v.fileSize }),
                ...(v.fileType === undefined ? null : { fileType: v.fileType }),
                ...(v.url === undefined ? null : { url: v.url }),
                ...(v.thumbnailUrl === undefined ? null : { thumbnailUrl: v.thumbnailUrl }),
                ...(v.previewUrl === undefined ? null : { previewUrl: v.previewUrl }),
                ...(v.content === undefined ? null : { content: v.content }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                ...(v.associatedWith === undefined ? null : { associatedWith: v.associatedWith }),
                ...(v.permissions === undefined ? null : { permissions: v.permissions }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        fileName?: string | undefined;
        fileSize?: number | undefined;
        fileType?: string | undefined;
        url?: string | undefined;
        thumbnailUrl?: string | undefined;
        previewUrl?: string | undefined;
        content?: string | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        metadata?: PostCandidatesMetadata$.Outbound | undefined;
        associatedWith?: PostCandidatesAssociatedWith$.Outbound | undefined;
        permissions?: PostCandidatesPermissions$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostCandidatesResume> = z
        .object({
            id: z.string().optional(),
            fileName: z.string().optional(),
            fileSize: z.number().optional(),
            fileType: z.string().optional(),
            url: z.string().optional(),
            thumbnailUrl: z.string().optional(),
            previewUrl: z.string().optional(),
            content: z.string().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            metadata: z.lazy(() => PostCandidatesMetadata$.outboundSchema).optional(),
            associatedWith: z.lazy(() => PostCandidatesAssociatedWith$.outboundSchema).optional(),
            permissions: z.lazy(() => PostCandidatesPermissions$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fileName === undefined ? null : { fileName: v.fileName }),
                ...(v.fileSize === undefined ? null : { fileSize: v.fileSize }),
                ...(v.fileType === undefined ? null : { fileType: v.fileType }),
                ...(v.url === undefined ? null : { url: v.url }),
                ...(v.thumbnailUrl === undefined ? null : { thumbnailUrl: v.thumbnailUrl }),
                ...(v.previewUrl === undefined ? null : { previewUrl: v.previewUrl }),
                ...(v.content === undefined ? null : { content: v.content }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                ...(v.associatedWith === undefined ? null : { associatedWith: v.associatedWith }),
                ...(v.permissions === undefined ? null : { permissions: v.permissions }),
            };
        });
}

/** @internal */
export const PostCandidatesCandidatesRequestType$ = z.nativeEnum(
    PostCandidatesCandidatesRequestType
);

/** @internal */
export namespace PostCandidatesCandidatesMetadata$ {
    export type Inbound = {
        id?: string | undefined;
        key?: string | undefined;
        value?: string | undefined;
        type?: PostCandidatesCandidatesRequestType | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        entityId?: string | undefined;
        entityType?: string | undefined;
    };

    export const inboundSchema: z.ZodType<PostCandidatesCandidatesMetadata, z.ZodTypeDef, Inbound> =
        z
            .object({
                id: z.string().optional(),
                key: z.string().optional(),
                value: z.string().optional(),
                type: PostCandidatesCandidatesRequestType$.optional(),
                createdAt: z.number().optional(),
                updatedAt: z.number().optional(),
                entityId: z.string().optional(),
                entityType: z.string().optional(),
            })
            .transform((v) => {
                return {
                    ...(v.id === undefined ? null : { id: v.id }),
                    ...(v.key === undefined ? null : { key: v.key }),
                    ...(v.value === undefined ? null : { value: v.value }),
                    ...(v.type === undefined ? null : { type: v.type }),
                    ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                    ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                    ...(v.entityId === undefined ? null : { entityId: v.entityId }),
                    ...(v.entityType === undefined ? null : { entityType: v.entityType }),
                };
            });

    export type Outbound = {
        id?: string | undefined;
        key?: string | undefined;
        value?: string | undefined;
        type?: PostCandidatesCandidatesRequestType | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        entityId?: string | undefined;
        entityType?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PostCandidatesCandidatesMetadata
    > = z
        .object({
            id: z.string().optional(),
            key: z.string().optional(),
            value: z.string().optional(),
            type: PostCandidatesCandidatesRequestType$.optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            entityId: z.string().optional(),
            entityType: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.key === undefined ? null : { key: v.key }),
                ...(v.value === undefined ? null : { value: v.value }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.entityId === undefined ? null : { entityId: v.entityId }),
                ...(v.entityType === undefined ? null : { entityType: v.entityType }),
            };
        });
}

/** @internal */
export const PostCandidatesCandidatesEntityType$ = z.nativeEnum(PostCandidatesCandidatesEntityType);

/** @internal */
export namespace PostCandidatesCandidatesAssociatedWith$ {
    export type Inbound = {
        entityId?: string | undefined;
        entityType?: PostCandidatesCandidatesEntityType | undefined;
        attributes?: Array<string> | undefined;
    };

    export const inboundSchema: z.ZodType<
        PostCandidatesCandidatesAssociatedWith,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            entityId: z.string().optional(),
            entityType: PostCandidatesCandidatesEntityType$.optional(),
            attributes: z.array(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.entityId === undefined ? null : { entityId: v.entityId }),
                ...(v.entityType === undefined ? null : { entityType: v.entityType }),
                ...(v.attributes === undefined ? null : { attributes: v.attributes }),
            };
        });

    export type Outbound = {
        entityId?: string | undefined;
        entityType?: PostCandidatesCandidatesEntityType | undefined;
        attributes?: Array<string> | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PostCandidatesCandidatesAssociatedWith
    > = z
        .object({
            entityId: z.string().optional(),
            entityType: PostCandidatesCandidatesEntityType$.optional(),
            attributes: z.array(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.entityId === undefined ? null : { entityId: v.entityId }),
                ...(v.entityType === undefined ? null : { entityType: v.entityType }),
                ...(v.attributes === undefined ? null : { attributes: v.attributes }),
            };
        });
}

/** @internal */
export const PostCandidatesCandidatesAccessControlType$ = z.nativeEnum(
    PostCandidatesCandidatesAccessControlType
);

/** @internal */
export const PostCandidatesCandidatesRequestRequestBodyType$ = z.nativeEnum(
    PostCandidatesCandidatesRequestRequestBodyType
);

/** @internal */
export namespace PostCandidatesCandidatesAssigneeDetails$ {
    export type Inbound = {
        identifier?: string | undefined;
        displayName?: string | undefined;
        type?: PostCandidatesCandidatesRequestRequestBodyType | undefined;
    };

    export const inboundSchema: z.ZodType<
        PostCandidatesCandidatesAssigneeDetails,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            identifier: z.string().optional(),
            displayName: z.string().optional(),
            type: PostCandidatesCandidatesRequestRequestBodyType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.identifier === undefined ? null : { identifier: v.identifier }),
                ...(v.displayName === undefined ? null : { displayName: v.displayName }),
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });

    export type Outbound = {
        identifier?: string | undefined;
        displayName?: string | undefined;
        type?: PostCandidatesCandidatesRequestRequestBodyType | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PostCandidatesCandidatesAssigneeDetails
    > = z
        .object({
            identifier: z.string().optional(),
            displayName: z.string().optional(),
            type: PostCandidatesCandidatesRequestRequestBodyType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.identifier === undefined ? null : { identifier: v.identifier }),
                ...(v.displayName === undefined ? null : { displayName: v.displayName }),
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });
}

/** @internal */
export const PostCandidatesCandidatesIdentifierType$ = z.nativeEnum(
    PostCandidatesCandidatesIdentifierType
);

/** @internal */
export namespace PostCandidatesCandidatesPermissions$ {
    export type Inbound = {
        canView?: Array<string> | undefined;
        canEdit?: Array<string> | undefined;
        canDelete?: Array<string> | undefined;
        roles?: Array<string> | undefined;
        accessControlType?: PostCandidatesCandidatesAccessControlType | undefined;
        assigneeDetails?: PostCandidatesCandidatesAssigneeDetails$.Inbound | undefined;
        identifierType?: PostCandidatesCandidatesIdentifierType | undefined;
    };

    export const inboundSchema: z.ZodType<
        PostCandidatesCandidatesPermissions,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            canView: z.array(z.string()).optional(),
            canEdit: z.array(z.string()).optional(),
            canDelete: z.array(z.string()).optional(),
            roles: z.array(z.string()).optional(),
            accessControlType: PostCandidatesCandidatesAccessControlType$.optional(),
            assigneeDetails: z
                .lazy(() => PostCandidatesCandidatesAssigneeDetails$.inboundSchema)
                .optional(),
            identifierType: PostCandidatesCandidatesIdentifierType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.canView === undefined ? null : { canView: v.canView }),
                ...(v.canEdit === undefined ? null : { canEdit: v.canEdit }),
                ...(v.canDelete === undefined ? null : { canDelete: v.canDelete }),
                ...(v.roles === undefined ? null : { roles: v.roles }),
                ...(v.accessControlType === undefined
                    ? null
                    : { accessControlType: v.accessControlType }),
                ...(v.assigneeDetails === undefined
                    ? null
                    : { assigneeDetails: v.assigneeDetails }),
                ...(v.identifierType === undefined ? null : { identifierType: v.identifierType }),
            };
        });

    export type Outbound = {
        canView?: Array<string> | undefined;
        canEdit?: Array<string> | undefined;
        canDelete?: Array<string> | undefined;
        roles?: Array<string> | undefined;
        accessControlType?: PostCandidatesCandidatesAccessControlType | undefined;
        assigneeDetails?: PostCandidatesCandidatesAssigneeDetails$.Outbound | undefined;
        identifierType?: PostCandidatesCandidatesIdentifierType | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PostCandidatesCandidatesPermissions
    > = z
        .object({
            canView: z.array(z.string()).optional(),
            canEdit: z.array(z.string()).optional(),
            canDelete: z.array(z.string()).optional(),
            roles: z.array(z.string()).optional(),
            accessControlType: PostCandidatesCandidatesAccessControlType$.optional(),
            assigneeDetails: z
                .lazy(() => PostCandidatesCandidatesAssigneeDetails$.outboundSchema)
                .optional(),
            identifierType: PostCandidatesCandidatesIdentifierType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.canView === undefined ? null : { canView: v.canView }),
                ...(v.canEdit === undefined ? null : { canEdit: v.canEdit }),
                ...(v.canDelete === undefined ? null : { canDelete: v.canDelete }),
                ...(v.roles === undefined ? null : { roles: v.roles }),
                ...(v.accessControlType === undefined
                    ? null
                    : { accessControlType: v.accessControlType }),
                ...(v.assigneeDetails === undefined
                    ? null
                    : { assigneeDetails: v.assigneeDetails }),
                ...(v.identifierType === undefined ? null : { identifierType: v.identifierType }),
            };
        });
}

/** @internal */
export namespace PostCandidatesCoverLetter$ {
    export type Inbound = {
        id?: string | undefined;
        fileName?: string | undefined;
        fileSize?: number | undefined;
        fileType?: string | undefined;
        url?: string | undefined;
        thumbnailUrl?: string | undefined;
        previewUrl?: string | undefined;
        content?: string | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        metadata?: PostCandidatesCandidatesMetadata$.Inbound | undefined;
        associatedWith?: PostCandidatesCandidatesAssociatedWith$.Inbound | undefined;
        permissions?: PostCandidatesCandidatesPermissions$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<PostCandidatesCoverLetter, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            fileName: z.string().optional(),
            fileSize: z.number().optional(),
            fileType: z.string().optional(),
            url: z.string().optional(),
            thumbnailUrl: z.string().optional(),
            previewUrl: z.string().optional(),
            content: z.string().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            metadata: z.lazy(() => PostCandidatesCandidatesMetadata$.inboundSchema).optional(),
            associatedWith: z
                .lazy(() => PostCandidatesCandidatesAssociatedWith$.inboundSchema)
                .optional(),
            permissions: z
                .lazy(() => PostCandidatesCandidatesPermissions$.inboundSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fileName === undefined ? null : { fileName: v.fileName }),
                ...(v.fileSize === undefined ? null : { fileSize: v.fileSize }),
                ...(v.fileType === undefined ? null : { fileType: v.fileType }),
                ...(v.url === undefined ? null : { url: v.url }),
                ...(v.thumbnailUrl === undefined ? null : { thumbnailUrl: v.thumbnailUrl }),
                ...(v.previewUrl === undefined ? null : { previewUrl: v.previewUrl }),
                ...(v.content === undefined ? null : { content: v.content }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                ...(v.associatedWith === undefined ? null : { associatedWith: v.associatedWith }),
                ...(v.permissions === undefined ? null : { permissions: v.permissions }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        fileName?: string | undefined;
        fileSize?: number | undefined;
        fileType?: string | undefined;
        url?: string | undefined;
        thumbnailUrl?: string | undefined;
        previewUrl?: string | undefined;
        content?: string | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        metadata?: PostCandidatesCandidatesMetadata$.Outbound | undefined;
        associatedWith?: PostCandidatesCandidatesAssociatedWith$.Outbound | undefined;
        permissions?: PostCandidatesCandidatesPermissions$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostCandidatesCoverLetter> = z
        .object({
            id: z.string().optional(),
            fileName: z.string().optional(),
            fileSize: z.number().optional(),
            fileType: z.string().optional(),
            url: z.string().optional(),
            thumbnailUrl: z.string().optional(),
            previewUrl: z.string().optional(),
            content: z.string().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            metadata: z.lazy(() => PostCandidatesCandidatesMetadata$.outboundSchema).optional(),
            associatedWith: z
                .lazy(() => PostCandidatesCandidatesAssociatedWith$.outboundSchema)
                .optional(),
            permissions: z
                .lazy(() => PostCandidatesCandidatesPermissions$.outboundSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fileName === undefined ? null : { fileName: v.fileName }),
                ...(v.fileSize === undefined ? null : { fileSize: v.fileSize }),
                ...(v.fileType === undefined ? null : { fileType: v.fileType }),
                ...(v.url === undefined ? null : { url: v.url }),
                ...(v.thumbnailUrl === undefined ? null : { thumbnailUrl: v.thumbnailUrl }),
                ...(v.previewUrl === undefined ? null : { previewUrl: v.previewUrl }),
                ...(v.content === undefined ? null : { content: v.content }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                ...(v.associatedWith === undefined ? null : { associatedWith: v.associatedWith }),
                ...(v.permissions === undefined ? null : { permissions: v.permissions }),
            };
        });
}

/** @internal */
export const PostCandidatesMimeType$ = z.nativeEnum(PostCandidatesMimeType);

/** @internal */
export namespace PostCandidatesProfilePicture$ {
    export type Inbound = {
        id?: string | undefined;
        src?: string | undefined;
        altText?: string | undefined;
        width?: number | undefined;
        height?: number | undefined;
        thumbnailSrc?: string | undefined;
        caption?: string | undefined;
        title?: string | undefined;
        mimeType?: PostCandidatesMimeType | undefined;
        tags?: Array<string> | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<PostCandidatesProfilePicture, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            src: z.string().optional(),
            altText: z.string().optional(),
            width: z.number().optional(),
            height: z.number().optional(),
            thumbnailSrc: z.string().optional(),
            caption: z.string().optional(),
            title: z.string().optional(),
            mimeType: PostCandidatesMimeType$.optional(),
            tags: z.array(z.string()).optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.src === undefined ? null : { src: v.src }),
                ...(v.altText === undefined ? null : { altText: v.altText }),
                ...(v.width === undefined ? null : { width: v.width }),
                ...(v.height === undefined ? null : { height: v.height }),
                ...(v.thumbnailSrc === undefined ? null : { thumbnailSrc: v.thumbnailSrc }),
                ...(v.caption === undefined ? null : { caption: v.caption }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.mimeType === undefined ? null : { mimeType: v.mimeType }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        src?: string | undefined;
        altText?: string | undefined;
        width?: number | undefined;
        height?: number | undefined;
        thumbnailSrc?: string | undefined;
        caption?: string | undefined;
        title?: string | undefined;
        mimeType?: PostCandidatesMimeType | undefined;
        tags?: Array<string> | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostCandidatesProfilePicture> = z
        .object({
            id: z.string().optional(),
            src: z.string().optional(),
            altText: z.string().optional(),
            width: z.number().optional(),
            height: z.number().optional(),
            thumbnailSrc: z.string().optional(),
            caption: z.string().optional(),
            title: z.string().optional(),
            mimeType: PostCandidatesMimeType$.optional(),
            tags: z.array(z.string()).optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.src === undefined ? null : { src: v.src }),
                ...(v.altText === undefined ? null : { altText: v.altText }),
                ...(v.width === undefined ? null : { width: v.width }),
                ...(v.height === undefined ? null : { height: v.height }),
                ...(v.thumbnailSrc === undefined ? null : { thumbnailSrc: v.thumbnailSrc }),
                ...(v.caption === undefined ? null : { caption: v.caption }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.mimeType === undefined ? null : { mimeType: v.mimeType }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });
}

/** @internal */
export const PostCandidatesCandidatesRequestRequestBodySocialProfilesType$ = z.nativeEnum(
    PostCandidatesCandidatesRequestRequestBodySocialProfilesType
);

/** @internal */
export namespace PostCandidatesAdditionalInfo$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<PostCandidatesAdditionalInfo, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostCandidatesAdditionalInfo> =
        z.object({});
}

/** @internal */
export namespace PostCandidatesSocialProfiles$ {
    export type Inbound = {
        type?: PostCandidatesCandidatesRequestRequestBodySocialProfilesType | undefined;
        username?: string | undefined;
        displayName?: string | undefined;
        url?: string | undefined;
        avatarUrl?: string | undefined;
        email?: string | undefined;
        additionalInfo?: PostCandidatesAdditionalInfo$.Inbound | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<PostCandidatesSocialProfiles, z.ZodTypeDef, Inbound> = z
        .object({
            type: PostCandidatesCandidatesRequestRequestBodySocialProfilesType$.optional(),
            username: z.string().optional(),
            displayName: z.string().optional(),
            url: z.string().optional(),
            avatarUrl: z.string().optional(),
            email: z.string().optional(),
            additionalInfo: z.lazy(() => PostCandidatesAdditionalInfo$.inboundSchema).optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.username === undefined ? null : { username: v.username }),
                ...(v.displayName === undefined ? null : { displayName: v.displayName }),
                ...(v.url === undefined ? null : { url: v.url }),
                ...(v.avatarUrl === undefined ? null : { avatarUrl: v.avatarUrl }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.additionalInfo === undefined ? null : { additionalInfo: v.additionalInfo }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });

    export type Outbound = {
        type?: PostCandidatesCandidatesRequestRequestBodySocialProfilesType | undefined;
        username?: string | undefined;
        displayName?: string | undefined;
        url?: string | undefined;
        avatarUrl?: string | undefined;
        email?: string | undefined;
        additionalInfo?: PostCandidatesAdditionalInfo$.Outbound | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostCandidatesSocialProfiles> = z
        .object({
            type: PostCandidatesCandidatesRequestRequestBodySocialProfilesType$.optional(),
            username: z.string().optional(),
            displayName: z.string().optional(),
            url: z.string().optional(),
            avatarUrl: z.string().optional(),
            email: z.string().optional(),
            additionalInfo: z.lazy(() => PostCandidatesAdditionalInfo$.outboundSchema).optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.username === undefined ? null : { username: v.username }),
                ...(v.displayName === undefined ? null : { displayName: v.displayName }),
                ...(v.url === undefined ? null : { url: v.url }),
                ...(v.avatarUrl === undefined ? null : { avatarUrl: v.avatarUrl }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.additionalInfo === undefined ? null : { additionalInfo: v.additionalInfo }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });
}

/** @internal */
export namespace PostCandidatesEducations$ {
    export type Inbound = {
        institution?: string | undefined;
        degree?: string | undefined;
        fieldOfStudy?: string | undefined;
        startDate?: number | undefined;
        endDate?: number | undefined;
        gpa?: number | undefined;
    };

    export const inboundSchema: z.ZodType<PostCandidatesEducations, z.ZodTypeDef, Inbound> = z
        .object({
            institution: z.string().optional(),
            degree: z.string().optional(),
            fieldOfStudy: z.string().optional(),
            startDate: z.number().optional(),
            endDate: z.number().optional(),
            gpa: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.institution === undefined ? null : { institution: v.institution }),
                ...(v.degree === undefined ? null : { degree: v.degree }),
                ...(v.fieldOfStudy === undefined ? null : { fieldOfStudy: v.fieldOfStudy }),
                ...(v.startDate === undefined ? null : { startDate: v.startDate }),
                ...(v.endDate === undefined ? null : { endDate: v.endDate }),
                ...(v.gpa === undefined ? null : { gpa: v.gpa }),
            };
        });

    export type Outbound = {
        institution?: string | undefined;
        degree?: string | undefined;
        fieldOfStudy?: string | undefined;
        startDate?: number | undefined;
        endDate?: number | undefined;
        gpa?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostCandidatesEducations> = z
        .object({
            institution: z.string().optional(),
            degree: z.string().optional(),
            fieldOfStudy: z.string().optional(),
            startDate: z.number().optional(),
            endDate: z.number().optional(),
            gpa: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.institution === undefined ? null : { institution: v.institution }),
                ...(v.degree === undefined ? null : { degree: v.degree }),
                ...(v.fieldOfStudy === undefined ? null : { fieldOfStudy: v.fieldOfStudy }),
                ...(v.startDate === undefined ? null : { startDate: v.startDate }),
                ...(v.endDate === undefined ? null : { endDate: v.endDate }),
                ...(v.gpa === undefined ? null : { gpa: v.gpa }),
            };
        });
}

/** @internal */
export namespace PostCandidatesWorkExperiences$ {
    export type Inbound = {
        company?: string | undefined;
        position?: string | undefined;
        startDate?: number | undefined;
        endDate?: number | undefined;
        description?: string | undefined;
    };

    export const inboundSchema: z.ZodType<PostCandidatesWorkExperiences, z.ZodTypeDef, Inbound> = z
        .object({
            company: z.string().optional(),
            position: z.string().optional(),
            startDate: z.number().optional(),
            endDate: z.number().optional(),
            description: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.company === undefined ? null : { company: v.company }),
                ...(v.position === undefined ? null : { position: v.position }),
                ...(v.startDate === undefined ? null : { startDate: v.startDate }),
                ...(v.endDate === undefined ? null : { endDate: v.endDate }),
                ...(v.description === undefined ? null : { description: v.description }),
            };
        });

    export type Outbound = {
        company?: string | undefined;
        position?: string | undefined;
        startDate?: number | undefined;
        endDate?: number | undefined;
        description?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostCandidatesWorkExperiences> =
        z
            .object({
                company: z.string().optional(),
                position: z.string().optional(),
                startDate: z.number().optional(),
                endDate: z.number().optional(),
                description: z.string().optional(),
            })
            .transform((v) => {
                return {
                    ...(v.company === undefined ? null : { company: v.company }),
                    ...(v.position === undefined ? null : { position: v.position }),
                    ...(v.startDate === undefined ? null : { startDate: v.startDate }),
                    ...(v.endDate === undefined ? null : { endDate: v.endDate }),
                    ...(v.description === undefined ? null : { description: v.description }),
                };
            });
}

/** @internal */
export namespace PostCandidatesReferences$ {
    export type Inbound = {
        name?: string | undefined;
        relationship?: string | undefined;
        company?: string | undefined;
        position?: string | undefined;
        email?: string | undefined;
        phoneNumber?: string | undefined;
    };

    export const inboundSchema: z.ZodType<PostCandidatesReferences, z.ZodTypeDef, Inbound> = z
        .object({
            name: z.string().optional(),
            relationship: z.string().optional(),
            company: z.string().optional(),
            position: z.string().optional(),
            email: z.string().optional(),
            phoneNumber: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.relationship === undefined ? null : { relationship: v.relationship }),
                ...(v.company === undefined ? null : { company: v.company }),
                ...(v.position === undefined ? null : { position: v.position }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.phoneNumber === undefined ? null : { phoneNumber: v.phoneNumber }),
            };
        });

    export type Outbound = {
        name?: string | undefined;
        relationship?: string | undefined;
        company?: string | undefined;
        position?: string | undefined;
        email?: string | undefined;
        phoneNumber?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostCandidatesReferences> = z
        .object({
            name: z.string().optional(),
            relationship: z.string().optional(),
            company: z.string().optional(),
            position: z.string().optional(),
            email: z.string().optional(),
            phoneNumber: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.relationship === undefined ? null : { relationship: v.relationship }),
                ...(v.company === undefined ? null : { company: v.company }),
                ...(v.position === undefined ? null : { position: v.position }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.phoneNumber === undefined ? null : { phoneNumber: v.phoneNumber }),
            };
        });
}

/** @internal */
export const PostCandidatesStatus$ = z.nativeEnum(PostCandidatesStatus);

/** @internal */
export const PostCandidatesFieldType$ = z.nativeEnum(PostCandidatesFieldType);

/** @internal */
export namespace PostCandidatesCustomFields$ {
    export type Inbound = {
        id?: string | undefined;
        fieldName?: string | undefined;
        fieldValue?: string | undefined;
        fieldType?: PostCandidatesFieldType | undefined;
    };

    export const inboundSchema: z.ZodType<PostCandidatesCustomFields, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            fieldName: z.string().optional(),
            fieldValue: z.string().optional(),
            fieldType: PostCandidatesFieldType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fieldName === undefined ? null : { fieldName: v.fieldName }),
                ...(v.fieldValue === undefined ? null : { fieldValue: v.fieldValue }),
                ...(v.fieldType === undefined ? null : { fieldType: v.fieldType }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        fieldName?: string | undefined;
        fieldValue?: string | undefined;
        fieldType?: PostCandidatesFieldType | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostCandidatesCustomFields> = z
        .object({
            id: z.string().optional(),
            fieldName: z.string().optional(),
            fieldValue: z.string().optional(),
            fieldType: PostCandidatesFieldType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fieldName === undefined ? null : { fieldName: v.fieldName }),
                ...(v.fieldValue === undefined ? null : { fieldValue: v.fieldValue }),
                ...(v.fieldType === undefined ? null : { fieldType: v.fieldType }),
            };
        });
}

/** @internal */
export const PostCandidatesPriority$ = z.nativeEnum(PostCandidatesPriority);

/** @internal */
export namespace PostCandidatesAuthor$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<PostCandidatesAuthor, z.ZodTypeDef, Inbound> = z.object(
        {}
    );

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostCandidatesAuthor> = z.object(
        {}
    );
}

/** @internal */
export namespace PostCandidatesAttachments$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<PostCandidatesAttachments, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostCandidatesAttachments> =
        z.object({});
}

/** @internal */
export namespace PostCandidatesSharedWith$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<PostCandidatesSharedWith, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostCandidatesSharedWith> =
        z.object({});
}

/** @internal */
export const PostCandidatesVisibility$ = z.nativeEnum(PostCandidatesVisibility);

/** @internal */
export const PostCandidatesCandidatesStatus$ = z.nativeEnum(PostCandidatesCandidatesStatus);

/** @internal */
export namespace PostCandidatesNotes$ {
    export type Inbound = {
        id?: string | undefined;
        title?: string | undefined;
        content?: string | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        lastAccessed?: number | undefined;
        reminder?: number | undefined;
        color?: string | undefined;
        priority?: PostCandidatesPriority | undefined;
        author?: PostCandidatesAuthor$.Inbound | undefined;
        tags?: Array<string> | undefined;
        attachments?: Array<PostCandidatesAttachments$.Inbound> | undefined;
        sharedWith?: Array<PostCandidatesSharedWith$.Inbound> | undefined;
        visibility?: PostCandidatesVisibility | undefined;
        status?: PostCandidatesCandidatesStatus | undefined;
        metadata?: Array<string> | undefined;
    };

    export const inboundSchema: z.ZodType<PostCandidatesNotes, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            title: z.string().optional(),
            content: z.string().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            lastAccessed: z.number().optional(),
            reminder: z.number().optional(),
            color: z.string().optional(),
            priority: PostCandidatesPriority$.optional(),
            author: z.lazy(() => PostCandidatesAuthor$.inboundSchema).optional(),
            tags: z.array(z.string()).optional(),
            attachments: z.array(z.lazy(() => PostCandidatesAttachments$.inboundSchema)).optional(),
            sharedWith: z.array(z.lazy(() => PostCandidatesSharedWith$.inboundSchema)).optional(),
            visibility: PostCandidatesVisibility$.optional(),
            status: PostCandidatesCandidatesStatus$.optional(),
            metadata: z.array(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.content === undefined ? null : { content: v.content }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.lastAccessed === undefined ? null : { lastAccessed: v.lastAccessed }),
                ...(v.reminder === undefined ? null : { reminder: v.reminder }),
                ...(v.color === undefined ? null : { color: v.color }),
                ...(v.priority === undefined ? null : { priority: v.priority }),
                ...(v.author === undefined ? null : { author: v.author }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
                ...(v.attachments === undefined ? null : { attachments: v.attachments }),
                ...(v.sharedWith === undefined ? null : { sharedWith: v.sharedWith }),
                ...(v.visibility === undefined ? null : { visibility: v.visibility }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        title?: string | undefined;
        content?: string | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        lastAccessed?: number | undefined;
        reminder?: number | undefined;
        color?: string | undefined;
        priority?: PostCandidatesPriority | undefined;
        author?: PostCandidatesAuthor$.Outbound | undefined;
        tags?: Array<string> | undefined;
        attachments?: Array<PostCandidatesAttachments$.Outbound> | undefined;
        sharedWith?: Array<PostCandidatesSharedWith$.Outbound> | undefined;
        visibility?: PostCandidatesVisibility | undefined;
        status?: PostCandidatesCandidatesStatus | undefined;
        metadata?: Array<string> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostCandidatesNotes> = z
        .object({
            id: z.string().optional(),
            title: z.string().optional(),
            content: z.string().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            lastAccessed: z.number().optional(),
            reminder: z.number().optional(),
            color: z.string().optional(),
            priority: PostCandidatesPriority$.optional(),
            author: z.lazy(() => PostCandidatesAuthor$.outboundSchema).optional(),
            tags: z.array(z.string()).optional(),
            attachments: z
                .array(z.lazy(() => PostCandidatesAttachments$.outboundSchema))
                .optional(),
            sharedWith: z.array(z.lazy(() => PostCandidatesSharedWith$.outboundSchema)).optional(),
            visibility: PostCandidatesVisibility$.optional(),
            status: PostCandidatesCandidatesStatus$.optional(),
            metadata: z.array(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.content === undefined ? null : { content: v.content }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.lastAccessed === undefined ? null : { lastAccessed: v.lastAccessed }),
                ...(v.reminder === undefined ? null : { reminder: v.reminder }),
                ...(v.color === undefined ? null : { color: v.color }),
                ...(v.priority === undefined ? null : { priority: v.priority }),
                ...(v.author === undefined ? null : { author: v.author }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
                ...(v.attachments === undefined ? null : { attachments: v.attachments }),
                ...(v.sharedWith === undefined ? null : { sharedWith: v.sharedWith }),
                ...(v.visibility === undefined ? null : { visibility: v.visibility }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
            };
        });
}

/** @internal */
export namespace PostCandidatesRequestBody$ {
    export type Inbound = {
        id?: string | undefined;
        firstName?: string | undefined;
        lastName?: string | undefined;
        email?: string | undefined;
        phoneNumber?: string | undefined;
        role?: string | undefined;
        jobId?: string | undefined;
        resume?: PostCandidatesResume$.Inbound | undefined;
        coverLetter?: PostCandidatesCoverLetter$.Inbound | undefined;
        profilePicture?: PostCandidatesProfilePicture$.Inbound | undefined;
        socialProfiles?: Array<PostCandidatesSocialProfiles$.Inbound> | undefined;
        websites?: Array<string> | undefined;
        skills?: Array<string> | undefined;
        languages?: Array<string> | undefined;
        certifications?: Array<string> | undefined;
        educations?: Array<PostCandidatesEducations$.Inbound> | undefined;
        workExperiences?: Array<PostCandidatesWorkExperiences$.Inbound> | undefined;
        references?: Array<PostCandidatesReferences$.Inbound> | undefined;
        availability?: number | undefined;
        preferredWorkLocation?: string | undefined;
        status?: PostCandidatesStatus | undefined;
        customFields?: Array<PostCandidatesCustomFields$.Inbound> | undefined;
        notes?: Array<PostCandidatesNotes$.Inbound> | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
    };

    export const inboundSchema: z.ZodType<PostCandidatesRequestBody, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            firstName: z.string().optional(),
            lastName: z.string().optional(),
            email: z.string().optional(),
            phoneNumber: z.string().optional(),
            role: z.string().optional(),
            jobId: z.string().optional(),
            resume: z.lazy(() => PostCandidatesResume$.inboundSchema).optional(),
            coverLetter: z.lazy(() => PostCandidatesCoverLetter$.inboundSchema).optional(),
            profilePicture: z.lazy(() => PostCandidatesProfilePicture$.inboundSchema).optional(),
            socialProfiles: z
                .array(z.lazy(() => PostCandidatesSocialProfiles$.inboundSchema))
                .optional(),
            websites: z.array(z.string()).optional(),
            skills: z.array(z.string()).optional(),
            languages: z.array(z.string()).optional(),
            certifications: z.array(z.string()).optional(),
            educations: z.array(z.lazy(() => PostCandidatesEducations$.inboundSchema)).optional(),
            workExperiences: z
                .array(z.lazy(() => PostCandidatesWorkExperiences$.inboundSchema))
                .optional(),
            references: z.array(z.lazy(() => PostCandidatesReferences$.inboundSchema)).optional(),
            availability: z.number().optional(),
            preferredWorkLocation: z.string().optional(),
            status: PostCandidatesStatus$.optional(),
            customFields: z
                .array(z.lazy(() => PostCandidatesCustomFields$.inboundSchema))
                .optional(),
            notes: z.array(z.lazy(() => PostCandidatesNotes$.inboundSchema)).optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.phoneNumber === undefined ? null : { phoneNumber: v.phoneNumber }),
                ...(v.role === undefined ? null : { role: v.role }),
                ...(v.jobId === undefined ? null : { jobId: v.jobId }),
                ...(v.resume === undefined ? null : { resume: v.resume }),
                ...(v.coverLetter === undefined ? null : { coverLetter: v.coverLetter }),
                ...(v.profilePicture === undefined ? null : { profilePicture: v.profilePicture }),
                ...(v.socialProfiles === undefined ? null : { socialProfiles: v.socialProfiles }),
                ...(v.websites === undefined ? null : { websites: v.websites }),
                ...(v.skills === undefined ? null : { skills: v.skills }),
                ...(v.languages === undefined ? null : { languages: v.languages }),
                ...(v.certifications === undefined ? null : { certifications: v.certifications }),
                ...(v.educations === undefined ? null : { educations: v.educations }),
                ...(v.workExperiences === undefined
                    ? null
                    : { workExperiences: v.workExperiences }),
                ...(v.references === undefined ? null : { references: v.references }),
                ...(v.availability === undefined ? null : { availability: v.availability }),
                ...(v.preferredWorkLocation === undefined
                    ? null
                    : { preferredWorkLocation: v.preferredWorkLocation }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                ...(v.notes === undefined ? null : { notes: v.notes }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        firstName?: string | undefined;
        lastName?: string | undefined;
        email?: string | undefined;
        phoneNumber?: string | undefined;
        role?: string | undefined;
        jobId?: string | undefined;
        resume?: PostCandidatesResume$.Outbound | undefined;
        coverLetter?: PostCandidatesCoverLetter$.Outbound | undefined;
        profilePicture?: PostCandidatesProfilePicture$.Outbound | undefined;
        socialProfiles?: Array<PostCandidatesSocialProfiles$.Outbound> | undefined;
        websites?: Array<string> | undefined;
        skills?: Array<string> | undefined;
        languages?: Array<string> | undefined;
        certifications?: Array<string> | undefined;
        educations?: Array<PostCandidatesEducations$.Outbound> | undefined;
        workExperiences?: Array<PostCandidatesWorkExperiences$.Outbound> | undefined;
        references?: Array<PostCandidatesReferences$.Outbound> | undefined;
        availability?: number | undefined;
        preferredWorkLocation?: string | undefined;
        status?: PostCandidatesStatus | undefined;
        customFields?: Array<PostCandidatesCustomFields$.Outbound> | undefined;
        notes?: Array<PostCandidatesNotes$.Outbound> | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostCandidatesRequestBody> = z
        .object({
            id: z.string().optional(),
            firstName: z.string().optional(),
            lastName: z.string().optional(),
            email: z.string().optional(),
            phoneNumber: z.string().optional(),
            role: z.string().optional(),
            jobId: z.string().optional(),
            resume: z.lazy(() => PostCandidatesResume$.outboundSchema).optional(),
            coverLetter: z.lazy(() => PostCandidatesCoverLetter$.outboundSchema).optional(),
            profilePicture: z.lazy(() => PostCandidatesProfilePicture$.outboundSchema).optional(),
            socialProfiles: z
                .array(z.lazy(() => PostCandidatesSocialProfiles$.outboundSchema))
                .optional(),
            websites: z.array(z.string()).optional(),
            skills: z.array(z.string()).optional(),
            languages: z.array(z.string()).optional(),
            certifications: z.array(z.string()).optional(),
            educations: z.array(z.lazy(() => PostCandidatesEducations$.outboundSchema)).optional(),
            workExperiences: z
                .array(z.lazy(() => PostCandidatesWorkExperiences$.outboundSchema))
                .optional(),
            references: z.array(z.lazy(() => PostCandidatesReferences$.outboundSchema)).optional(),
            availability: z.number().optional(),
            preferredWorkLocation: z.string().optional(),
            status: PostCandidatesStatus$.optional(),
            customFields: z
                .array(z.lazy(() => PostCandidatesCustomFields$.outboundSchema))
                .optional(),
            notes: z.array(z.lazy(() => PostCandidatesNotes$.outboundSchema)).optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.phoneNumber === undefined ? null : { phoneNumber: v.phoneNumber }),
                ...(v.role === undefined ? null : { role: v.role }),
                ...(v.jobId === undefined ? null : { jobId: v.jobId }),
                ...(v.resume === undefined ? null : { resume: v.resume }),
                ...(v.coverLetter === undefined ? null : { coverLetter: v.coverLetter }),
                ...(v.profilePicture === undefined ? null : { profilePicture: v.profilePicture }),
                ...(v.socialProfiles === undefined ? null : { socialProfiles: v.socialProfiles }),
                ...(v.websites === undefined ? null : { websites: v.websites }),
                ...(v.skills === undefined ? null : { skills: v.skills }),
                ...(v.languages === undefined ? null : { languages: v.languages }),
                ...(v.certifications === undefined ? null : { certifications: v.certifications }),
                ...(v.educations === undefined ? null : { educations: v.educations }),
                ...(v.workExperiences === undefined
                    ? null
                    : { workExperiences: v.workExperiences }),
                ...(v.references === undefined ? null : { references: v.references }),
                ...(v.availability === undefined ? null : { availability: v.availability }),
                ...(v.preferredWorkLocation === undefined
                    ? null
                    : { preferredWorkLocation: v.preferredWorkLocation }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                ...(v.notes === undefined ? null : { notes: v.notes }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
            };
        });
}

/** @internal */
export namespace PostCandidatesRequest$ {
    export type Inbound = {
        "X-INTEGRATIONOS-CONNECTION-KEY": string;
        RequestBody: PostCandidatesRequestBody$.Inbound;
    };

    export const inboundSchema: z.ZodType<PostCandidatesRequest, z.ZodTypeDef, Inbound> = z
        .object({
            "X-INTEGRATIONOS-CONNECTION-KEY": z.string(),
            RequestBody: z.lazy(() => PostCandidatesRequestBody$.inboundSchema),
        })
        .transform((v) => {
            return {
                xIntegrationosConnectionKey: v["X-INTEGRATIONOS-CONNECTION-KEY"],
                requestBody: v.RequestBody,
            };
        });

    export type Outbound = {
        "X-INTEGRATIONOS-CONNECTION-KEY": string;
        RequestBody: PostCandidatesRequestBody$.Outbound;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostCandidatesRequest> = z
        .object({
            xIntegrationosConnectionKey: z.string(),
            requestBody: z.lazy(() => PostCandidatesRequestBody$.outboundSchema),
        })
        .transform((v) => {
            return {
                "X-INTEGRATIONOS-CONNECTION-KEY": v.xIntegrationosConnectionKey,
                RequestBody: v.requestBody,
            };
        });
}

/** @internal */
export const PostCandidatesStatusCode$ = z.nativeEnum(PostCandidatesStatusCode);

/** @internal */
export const PostCandidatesCandidatesResponse200ApplicationJSONType$ = z.nativeEnum(
    PostCandidatesCandidatesResponse200ApplicationJSONType
);

/** @internal */
export namespace PostCandidatesCandidatesResponseMetadata$ {
    export type Inbound = {
        id?: string | undefined;
        key?: string | undefined;
        value?: string | undefined;
        type?: PostCandidatesCandidatesResponse200ApplicationJSONType | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        entityId?: string | undefined;
        entityType?: string | undefined;
    };

    export const inboundSchema: z.ZodType<
        PostCandidatesCandidatesResponseMetadata,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            id: z.string().optional(),
            key: z.string().optional(),
            value: z.string().optional(),
            type: PostCandidatesCandidatesResponse200ApplicationJSONType$.optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            entityId: z.string().optional(),
            entityType: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.key === undefined ? null : { key: v.key }),
                ...(v.value === undefined ? null : { value: v.value }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.entityId === undefined ? null : { entityId: v.entityId }),
                ...(v.entityType === undefined ? null : { entityType: v.entityType }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        key?: string | undefined;
        value?: string | undefined;
        type?: PostCandidatesCandidatesResponse200ApplicationJSONType | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        entityId?: string | undefined;
        entityType?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PostCandidatesCandidatesResponseMetadata
    > = z
        .object({
            id: z.string().optional(),
            key: z.string().optional(),
            value: z.string().optional(),
            type: PostCandidatesCandidatesResponse200ApplicationJSONType$.optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            entityId: z.string().optional(),
            entityType: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.key === undefined ? null : { key: v.key }),
                ...(v.value === undefined ? null : { value: v.value }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.entityId === undefined ? null : { entityId: v.entityId }),
                ...(v.entityType === undefined ? null : { entityType: v.entityType }),
            };
        });
}

/** @internal */
export const PostCandidatesCandidatesResponseEntityType$ = z.nativeEnum(
    PostCandidatesCandidatesResponseEntityType
);

/** @internal */
export namespace PostCandidatesCandidatesResponseAssociatedWith$ {
    export type Inbound = {
        entityId?: string | undefined;
        entityType?: PostCandidatesCandidatesResponseEntityType | undefined;
        attributes?: Array<string> | undefined;
    };

    export const inboundSchema: z.ZodType<
        PostCandidatesCandidatesResponseAssociatedWith,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            entityId: z.string().optional(),
            entityType: PostCandidatesCandidatesResponseEntityType$.optional(),
            attributes: z.array(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.entityId === undefined ? null : { entityId: v.entityId }),
                ...(v.entityType === undefined ? null : { entityType: v.entityType }),
                ...(v.attributes === undefined ? null : { attributes: v.attributes }),
            };
        });

    export type Outbound = {
        entityId?: string | undefined;
        entityType?: PostCandidatesCandidatesResponseEntityType | undefined;
        attributes?: Array<string> | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PostCandidatesCandidatesResponseAssociatedWith
    > = z
        .object({
            entityId: z.string().optional(),
            entityType: PostCandidatesCandidatesResponseEntityType$.optional(),
            attributes: z.array(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.entityId === undefined ? null : { entityId: v.entityId }),
                ...(v.entityType === undefined ? null : { entityType: v.entityType }),
                ...(v.attributes === undefined ? null : { attributes: v.attributes }),
            };
        });
}

/** @internal */
export const PostCandidatesCandidatesResponseAccessControlType$ = z.nativeEnum(
    PostCandidatesCandidatesResponseAccessControlType
);

/** @internal */
export const PostCandidatesCandidatesResponse200ApplicationJSONResponseBodyUnifiedType$ =
    z.nativeEnum(PostCandidatesCandidatesResponse200ApplicationJSONResponseBodyUnifiedType);

/** @internal */
export namespace PostCandidatesCandidatesResponseAssigneeDetails$ {
    export type Inbound = {
        identifier?: string | undefined;
        displayName?: string | undefined;
        type?:
            | PostCandidatesCandidatesResponse200ApplicationJSONResponseBodyUnifiedType
            | undefined;
    };

    export const inboundSchema: z.ZodType<
        PostCandidatesCandidatesResponseAssigneeDetails,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            identifier: z.string().optional(),
            displayName: z.string().optional(),
            type: PostCandidatesCandidatesResponse200ApplicationJSONResponseBodyUnifiedType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.identifier === undefined ? null : { identifier: v.identifier }),
                ...(v.displayName === undefined ? null : { displayName: v.displayName }),
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });

    export type Outbound = {
        identifier?: string | undefined;
        displayName?: string | undefined;
        type?:
            | PostCandidatesCandidatesResponse200ApplicationJSONResponseBodyUnifiedType
            | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PostCandidatesCandidatesResponseAssigneeDetails
    > = z
        .object({
            identifier: z.string().optional(),
            displayName: z.string().optional(),
            type: PostCandidatesCandidatesResponse200ApplicationJSONResponseBodyUnifiedType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.identifier === undefined ? null : { identifier: v.identifier }),
                ...(v.displayName === undefined ? null : { displayName: v.displayName }),
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });
}

/** @internal */
export const PostCandidatesCandidatesResponseIdentifierType$ = z.nativeEnum(
    PostCandidatesCandidatesResponseIdentifierType
);

/** @internal */
export namespace PostCandidatesCandidatesResponsePermissions$ {
    export type Inbound = {
        canView?: Array<string> | undefined;
        canEdit?: Array<string> | undefined;
        canDelete?: Array<string> | undefined;
        roles?: Array<string> | undefined;
        accessControlType?: PostCandidatesCandidatesResponseAccessControlType | undefined;
        assigneeDetails?: PostCandidatesCandidatesResponseAssigneeDetails$.Inbound | undefined;
        identifierType?: PostCandidatesCandidatesResponseIdentifierType | undefined;
    };

    export const inboundSchema: z.ZodType<
        PostCandidatesCandidatesResponsePermissions,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            canView: z.array(z.string()).optional(),
            canEdit: z.array(z.string()).optional(),
            canDelete: z.array(z.string()).optional(),
            roles: z.array(z.string()).optional(),
            accessControlType: PostCandidatesCandidatesResponseAccessControlType$.optional(),
            assigneeDetails: z
                .lazy(() => PostCandidatesCandidatesResponseAssigneeDetails$.inboundSchema)
                .optional(),
            identifierType: PostCandidatesCandidatesResponseIdentifierType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.canView === undefined ? null : { canView: v.canView }),
                ...(v.canEdit === undefined ? null : { canEdit: v.canEdit }),
                ...(v.canDelete === undefined ? null : { canDelete: v.canDelete }),
                ...(v.roles === undefined ? null : { roles: v.roles }),
                ...(v.accessControlType === undefined
                    ? null
                    : { accessControlType: v.accessControlType }),
                ...(v.assigneeDetails === undefined
                    ? null
                    : { assigneeDetails: v.assigneeDetails }),
                ...(v.identifierType === undefined ? null : { identifierType: v.identifierType }),
            };
        });

    export type Outbound = {
        canView?: Array<string> | undefined;
        canEdit?: Array<string> | undefined;
        canDelete?: Array<string> | undefined;
        roles?: Array<string> | undefined;
        accessControlType?: PostCandidatesCandidatesResponseAccessControlType | undefined;
        assigneeDetails?: PostCandidatesCandidatesResponseAssigneeDetails$.Outbound | undefined;
        identifierType?: PostCandidatesCandidatesResponseIdentifierType | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PostCandidatesCandidatesResponsePermissions
    > = z
        .object({
            canView: z.array(z.string()).optional(),
            canEdit: z.array(z.string()).optional(),
            canDelete: z.array(z.string()).optional(),
            roles: z.array(z.string()).optional(),
            accessControlType: PostCandidatesCandidatesResponseAccessControlType$.optional(),
            assigneeDetails: z
                .lazy(() => PostCandidatesCandidatesResponseAssigneeDetails$.outboundSchema)
                .optional(),
            identifierType: PostCandidatesCandidatesResponseIdentifierType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.canView === undefined ? null : { canView: v.canView }),
                ...(v.canEdit === undefined ? null : { canEdit: v.canEdit }),
                ...(v.canDelete === undefined ? null : { canDelete: v.canDelete }),
                ...(v.roles === undefined ? null : { roles: v.roles }),
                ...(v.accessControlType === undefined
                    ? null
                    : { accessControlType: v.accessControlType }),
                ...(v.assigneeDetails === undefined
                    ? null
                    : { assigneeDetails: v.assigneeDetails }),
                ...(v.identifierType === undefined ? null : { identifierType: v.identifierType }),
            };
        });
}

/** @internal */
export namespace PostCandidatesCandidatesResume$ {
    export type Inbound = {
        id?: string | undefined;
        fileName?: string | undefined;
        fileSize?: number | undefined;
        fileType?: string | undefined;
        url?: string | undefined;
        thumbnailUrl?: string | undefined;
        previewUrl?: string | undefined;
        content?: string | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        metadata?: PostCandidatesCandidatesResponseMetadata$.Inbound | undefined;
        associatedWith?: PostCandidatesCandidatesResponseAssociatedWith$.Inbound | undefined;
        permissions?: PostCandidatesCandidatesResponsePermissions$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<PostCandidatesCandidatesResume, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            fileName: z.string().optional(),
            fileSize: z.number().optional(),
            fileType: z.string().optional(),
            url: z.string().optional(),
            thumbnailUrl: z.string().optional(),
            previewUrl: z.string().optional(),
            content: z.string().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            metadata: z
                .lazy(() => PostCandidatesCandidatesResponseMetadata$.inboundSchema)
                .optional(),
            associatedWith: z
                .lazy(() => PostCandidatesCandidatesResponseAssociatedWith$.inboundSchema)
                .optional(),
            permissions: z
                .lazy(() => PostCandidatesCandidatesResponsePermissions$.inboundSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fileName === undefined ? null : { fileName: v.fileName }),
                ...(v.fileSize === undefined ? null : { fileSize: v.fileSize }),
                ...(v.fileType === undefined ? null : { fileType: v.fileType }),
                ...(v.url === undefined ? null : { url: v.url }),
                ...(v.thumbnailUrl === undefined ? null : { thumbnailUrl: v.thumbnailUrl }),
                ...(v.previewUrl === undefined ? null : { previewUrl: v.previewUrl }),
                ...(v.content === undefined ? null : { content: v.content }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                ...(v.associatedWith === undefined ? null : { associatedWith: v.associatedWith }),
                ...(v.permissions === undefined ? null : { permissions: v.permissions }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        fileName?: string | undefined;
        fileSize?: number | undefined;
        fileType?: string | undefined;
        url?: string | undefined;
        thumbnailUrl?: string | undefined;
        previewUrl?: string | undefined;
        content?: string | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        metadata?: PostCandidatesCandidatesResponseMetadata$.Outbound | undefined;
        associatedWith?: PostCandidatesCandidatesResponseAssociatedWith$.Outbound | undefined;
        permissions?: PostCandidatesCandidatesResponsePermissions$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostCandidatesCandidatesResume> =
        z
            .object({
                id: z.string().optional(),
                fileName: z.string().optional(),
                fileSize: z.number().optional(),
                fileType: z.string().optional(),
                url: z.string().optional(),
                thumbnailUrl: z.string().optional(),
                previewUrl: z.string().optional(),
                content: z.string().optional(),
                createdAt: z.number().optional(),
                updatedAt: z.number().optional(),
                metadata: z
                    .lazy(() => PostCandidatesCandidatesResponseMetadata$.outboundSchema)
                    .optional(),
                associatedWith: z
                    .lazy(() => PostCandidatesCandidatesResponseAssociatedWith$.outboundSchema)
                    .optional(),
                permissions: z
                    .lazy(() => PostCandidatesCandidatesResponsePermissions$.outboundSchema)
                    .optional(),
            })
            .transform((v) => {
                return {
                    ...(v.id === undefined ? null : { id: v.id }),
                    ...(v.fileName === undefined ? null : { fileName: v.fileName }),
                    ...(v.fileSize === undefined ? null : { fileSize: v.fileSize }),
                    ...(v.fileType === undefined ? null : { fileType: v.fileType }),
                    ...(v.url === undefined ? null : { url: v.url }),
                    ...(v.thumbnailUrl === undefined ? null : { thumbnailUrl: v.thumbnailUrl }),
                    ...(v.previewUrl === undefined ? null : { previewUrl: v.previewUrl }),
                    ...(v.content === undefined ? null : { content: v.content }),
                    ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                    ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                    ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                    ...(v.associatedWith === undefined
                        ? null
                        : { associatedWith: v.associatedWith }),
                    ...(v.permissions === undefined ? null : { permissions: v.permissions }),
                };
            });
}

/** @internal */
export const PostCandidatesCandidatesResponse200Type$ = z.nativeEnum(
    PostCandidatesCandidatesResponse200Type
);

/** @internal */
export namespace PostCandidatesCandidatesResponse200Metadata$ {
    export type Inbound = {
        id?: string | undefined;
        key?: string | undefined;
        value?: string | undefined;
        type?: PostCandidatesCandidatesResponse200Type | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        entityId?: string | undefined;
        entityType?: string | undefined;
    };

    export const inboundSchema: z.ZodType<
        PostCandidatesCandidatesResponse200Metadata,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            id: z.string().optional(),
            key: z.string().optional(),
            value: z.string().optional(),
            type: PostCandidatesCandidatesResponse200Type$.optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            entityId: z.string().optional(),
            entityType: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.key === undefined ? null : { key: v.key }),
                ...(v.value === undefined ? null : { value: v.value }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.entityId === undefined ? null : { entityId: v.entityId }),
                ...(v.entityType === undefined ? null : { entityType: v.entityType }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        key?: string | undefined;
        value?: string | undefined;
        type?: PostCandidatesCandidatesResponse200Type | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        entityId?: string | undefined;
        entityType?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PostCandidatesCandidatesResponse200Metadata
    > = z
        .object({
            id: z.string().optional(),
            key: z.string().optional(),
            value: z.string().optional(),
            type: PostCandidatesCandidatesResponse200Type$.optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            entityId: z.string().optional(),
            entityType: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.key === undefined ? null : { key: v.key }),
                ...(v.value === undefined ? null : { value: v.value }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.entityId === undefined ? null : { entityId: v.entityId }),
                ...(v.entityType === undefined ? null : { entityType: v.entityType }),
            };
        });
}

/** @internal */
export const PostCandidatesCandidatesResponse200EntityType$ = z.nativeEnum(
    PostCandidatesCandidatesResponse200EntityType
);

/** @internal */
export namespace PostCandidatesCandidatesResponse200AssociatedWith$ {
    export type Inbound = {
        entityId?: string | undefined;
        entityType?: PostCandidatesCandidatesResponse200EntityType | undefined;
        attributes?: Array<string> | undefined;
    };

    export const inboundSchema: z.ZodType<
        PostCandidatesCandidatesResponse200AssociatedWith,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            entityId: z.string().optional(),
            entityType: PostCandidatesCandidatesResponse200EntityType$.optional(),
            attributes: z.array(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.entityId === undefined ? null : { entityId: v.entityId }),
                ...(v.entityType === undefined ? null : { entityType: v.entityType }),
                ...(v.attributes === undefined ? null : { attributes: v.attributes }),
            };
        });

    export type Outbound = {
        entityId?: string | undefined;
        entityType?: PostCandidatesCandidatesResponse200EntityType | undefined;
        attributes?: Array<string> | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PostCandidatesCandidatesResponse200AssociatedWith
    > = z
        .object({
            entityId: z.string().optional(),
            entityType: PostCandidatesCandidatesResponse200EntityType$.optional(),
            attributes: z.array(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.entityId === undefined ? null : { entityId: v.entityId }),
                ...(v.entityType === undefined ? null : { entityType: v.entityType }),
                ...(v.attributes === undefined ? null : { attributes: v.attributes }),
            };
        });
}

/** @internal */
export const PostCandidatesCandidatesResponse200AccessControlType$ = z.nativeEnum(
    PostCandidatesCandidatesResponse200AccessControlType
);

/** @internal */
export const PostCandidatesCandidatesResponse200ApplicationJSONResponseBodyType$ = z.nativeEnum(
    PostCandidatesCandidatesResponse200ApplicationJSONResponseBodyType
);

/** @internal */
export namespace PostCandidatesCandidatesResponse200AssigneeDetails$ {
    export type Inbound = {
        identifier?: string | undefined;
        displayName?: string | undefined;
        type?: PostCandidatesCandidatesResponse200ApplicationJSONResponseBodyType | undefined;
    };

    export const inboundSchema: z.ZodType<
        PostCandidatesCandidatesResponse200AssigneeDetails,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            identifier: z.string().optional(),
            displayName: z.string().optional(),
            type: PostCandidatesCandidatesResponse200ApplicationJSONResponseBodyType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.identifier === undefined ? null : { identifier: v.identifier }),
                ...(v.displayName === undefined ? null : { displayName: v.displayName }),
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });

    export type Outbound = {
        identifier?: string | undefined;
        displayName?: string | undefined;
        type?: PostCandidatesCandidatesResponse200ApplicationJSONResponseBodyType | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PostCandidatesCandidatesResponse200AssigneeDetails
    > = z
        .object({
            identifier: z.string().optional(),
            displayName: z.string().optional(),
            type: PostCandidatesCandidatesResponse200ApplicationJSONResponseBodyType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.identifier === undefined ? null : { identifier: v.identifier }),
                ...(v.displayName === undefined ? null : { displayName: v.displayName }),
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });
}

/** @internal */
export const PostCandidatesCandidatesResponse200IdentifierType$ = z.nativeEnum(
    PostCandidatesCandidatesResponse200IdentifierType
);

/** @internal */
export namespace PostCandidatesCandidatesResponse200Permissions$ {
    export type Inbound = {
        canView?: Array<string> | undefined;
        canEdit?: Array<string> | undefined;
        canDelete?: Array<string> | undefined;
        roles?: Array<string> | undefined;
        accessControlType?: PostCandidatesCandidatesResponse200AccessControlType | undefined;
        assigneeDetails?: PostCandidatesCandidatesResponse200AssigneeDetails$.Inbound | undefined;
        identifierType?: PostCandidatesCandidatesResponse200IdentifierType | undefined;
    };

    export const inboundSchema: z.ZodType<
        PostCandidatesCandidatesResponse200Permissions,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            canView: z.array(z.string()).optional(),
            canEdit: z.array(z.string()).optional(),
            canDelete: z.array(z.string()).optional(),
            roles: z.array(z.string()).optional(),
            accessControlType: PostCandidatesCandidatesResponse200AccessControlType$.optional(),
            assigneeDetails: z
                .lazy(() => PostCandidatesCandidatesResponse200AssigneeDetails$.inboundSchema)
                .optional(),
            identifierType: PostCandidatesCandidatesResponse200IdentifierType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.canView === undefined ? null : { canView: v.canView }),
                ...(v.canEdit === undefined ? null : { canEdit: v.canEdit }),
                ...(v.canDelete === undefined ? null : { canDelete: v.canDelete }),
                ...(v.roles === undefined ? null : { roles: v.roles }),
                ...(v.accessControlType === undefined
                    ? null
                    : { accessControlType: v.accessControlType }),
                ...(v.assigneeDetails === undefined
                    ? null
                    : { assigneeDetails: v.assigneeDetails }),
                ...(v.identifierType === undefined ? null : { identifierType: v.identifierType }),
            };
        });

    export type Outbound = {
        canView?: Array<string> | undefined;
        canEdit?: Array<string> | undefined;
        canDelete?: Array<string> | undefined;
        roles?: Array<string> | undefined;
        accessControlType?: PostCandidatesCandidatesResponse200AccessControlType | undefined;
        assigneeDetails?: PostCandidatesCandidatesResponse200AssigneeDetails$.Outbound | undefined;
        identifierType?: PostCandidatesCandidatesResponse200IdentifierType | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PostCandidatesCandidatesResponse200Permissions
    > = z
        .object({
            canView: z.array(z.string()).optional(),
            canEdit: z.array(z.string()).optional(),
            canDelete: z.array(z.string()).optional(),
            roles: z.array(z.string()).optional(),
            accessControlType: PostCandidatesCandidatesResponse200AccessControlType$.optional(),
            assigneeDetails: z
                .lazy(() => PostCandidatesCandidatesResponse200AssigneeDetails$.outboundSchema)
                .optional(),
            identifierType: PostCandidatesCandidatesResponse200IdentifierType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.canView === undefined ? null : { canView: v.canView }),
                ...(v.canEdit === undefined ? null : { canEdit: v.canEdit }),
                ...(v.canDelete === undefined ? null : { canDelete: v.canDelete }),
                ...(v.roles === undefined ? null : { roles: v.roles }),
                ...(v.accessControlType === undefined
                    ? null
                    : { accessControlType: v.accessControlType }),
                ...(v.assigneeDetails === undefined
                    ? null
                    : { assigneeDetails: v.assigneeDetails }),
                ...(v.identifierType === undefined ? null : { identifierType: v.identifierType }),
            };
        });
}

/** @internal */
export namespace PostCandidatesCandidatesCoverLetter$ {
    export type Inbound = {
        id?: string | undefined;
        fileName?: string | undefined;
        fileSize?: number | undefined;
        fileType?: string | undefined;
        url?: string | undefined;
        thumbnailUrl?: string | undefined;
        previewUrl?: string | undefined;
        content?: string | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        metadata?: PostCandidatesCandidatesResponse200Metadata$.Inbound | undefined;
        associatedWith?: PostCandidatesCandidatesResponse200AssociatedWith$.Inbound | undefined;
        permissions?: PostCandidatesCandidatesResponse200Permissions$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<
        PostCandidatesCandidatesCoverLetter,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            id: z.string().optional(),
            fileName: z.string().optional(),
            fileSize: z.number().optional(),
            fileType: z.string().optional(),
            url: z.string().optional(),
            thumbnailUrl: z.string().optional(),
            previewUrl: z.string().optional(),
            content: z.string().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            metadata: z
                .lazy(() => PostCandidatesCandidatesResponse200Metadata$.inboundSchema)
                .optional(),
            associatedWith: z
                .lazy(() => PostCandidatesCandidatesResponse200AssociatedWith$.inboundSchema)
                .optional(),
            permissions: z
                .lazy(() => PostCandidatesCandidatesResponse200Permissions$.inboundSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fileName === undefined ? null : { fileName: v.fileName }),
                ...(v.fileSize === undefined ? null : { fileSize: v.fileSize }),
                ...(v.fileType === undefined ? null : { fileType: v.fileType }),
                ...(v.url === undefined ? null : { url: v.url }),
                ...(v.thumbnailUrl === undefined ? null : { thumbnailUrl: v.thumbnailUrl }),
                ...(v.previewUrl === undefined ? null : { previewUrl: v.previewUrl }),
                ...(v.content === undefined ? null : { content: v.content }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                ...(v.associatedWith === undefined ? null : { associatedWith: v.associatedWith }),
                ...(v.permissions === undefined ? null : { permissions: v.permissions }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        fileName?: string | undefined;
        fileSize?: number | undefined;
        fileType?: string | undefined;
        url?: string | undefined;
        thumbnailUrl?: string | undefined;
        previewUrl?: string | undefined;
        content?: string | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        metadata?: PostCandidatesCandidatesResponse200Metadata$.Outbound | undefined;
        associatedWith?: PostCandidatesCandidatesResponse200AssociatedWith$.Outbound | undefined;
        permissions?: PostCandidatesCandidatesResponse200Permissions$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PostCandidatesCandidatesCoverLetter
    > = z
        .object({
            id: z.string().optional(),
            fileName: z.string().optional(),
            fileSize: z.number().optional(),
            fileType: z.string().optional(),
            url: z.string().optional(),
            thumbnailUrl: z.string().optional(),
            previewUrl: z.string().optional(),
            content: z.string().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            metadata: z
                .lazy(() => PostCandidatesCandidatesResponse200Metadata$.outboundSchema)
                .optional(),
            associatedWith: z
                .lazy(() => PostCandidatesCandidatesResponse200AssociatedWith$.outboundSchema)
                .optional(),
            permissions: z
                .lazy(() => PostCandidatesCandidatesResponse200Permissions$.outboundSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fileName === undefined ? null : { fileName: v.fileName }),
                ...(v.fileSize === undefined ? null : { fileSize: v.fileSize }),
                ...(v.fileType === undefined ? null : { fileType: v.fileType }),
                ...(v.url === undefined ? null : { url: v.url }),
                ...(v.thumbnailUrl === undefined ? null : { thumbnailUrl: v.thumbnailUrl }),
                ...(v.previewUrl === undefined ? null : { previewUrl: v.previewUrl }),
                ...(v.content === undefined ? null : { content: v.content }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                ...(v.associatedWith === undefined ? null : { associatedWith: v.associatedWith }),
                ...(v.permissions === undefined ? null : { permissions: v.permissions }),
            };
        });
}

/** @internal */
export const PostCandidatesCandidatesMimeType$ = z.nativeEnum(PostCandidatesCandidatesMimeType);

/** @internal */
export namespace PostCandidatesCandidatesProfilePicture$ {
    export type Inbound = {
        id?: string | undefined;
        src?: string | undefined;
        altText?: string | undefined;
        width?: number | undefined;
        height?: number | undefined;
        thumbnailSrc?: string | undefined;
        caption?: string | undefined;
        title?: string | undefined;
        mimeType?: PostCandidatesCandidatesMimeType | undefined;
        tags?: Array<string> | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<
        PostCandidatesCandidatesProfilePicture,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            id: z.string().optional(),
            src: z.string().optional(),
            altText: z.string().optional(),
            width: z.number().optional(),
            height: z.number().optional(),
            thumbnailSrc: z.string().optional(),
            caption: z.string().optional(),
            title: z.string().optional(),
            mimeType: PostCandidatesCandidatesMimeType$.optional(),
            tags: z.array(z.string()).optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.src === undefined ? null : { src: v.src }),
                ...(v.altText === undefined ? null : { altText: v.altText }),
                ...(v.width === undefined ? null : { width: v.width }),
                ...(v.height === undefined ? null : { height: v.height }),
                ...(v.thumbnailSrc === undefined ? null : { thumbnailSrc: v.thumbnailSrc }),
                ...(v.caption === undefined ? null : { caption: v.caption }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.mimeType === undefined ? null : { mimeType: v.mimeType }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        src?: string | undefined;
        altText?: string | undefined;
        width?: number | undefined;
        height?: number | undefined;
        thumbnailSrc?: string | undefined;
        caption?: string | undefined;
        title?: string | undefined;
        mimeType?: PostCandidatesCandidatesMimeType | undefined;
        tags?: Array<string> | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PostCandidatesCandidatesProfilePicture
    > = z
        .object({
            id: z.string().optional(),
            src: z.string().optional(),
            altText: z.string().optional(),
            width: z.number().optional(),
            height: z.number().optional(),
            thumbnailSrc: z.string().optional(),
            caption: z.string().optional(),
            title: z.string().optional(),
            mimeType: PostCandidatesCandidatesMimeType$.optional(),
            tags: z.array(z.string()).optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.src === undefined ? null : { src: v.src }),
                ...(v.altText === undefined ? null : { altText: v.altText }),
                ...(v.width === undefined ? null : { width: v.width }),
                ...(v.height === undefined ? null : { height: v.height }),
                ...(v.thumbnailSrc === undefined ? null : { thumbnailSrc: v.thumbnailSrc }),
                ...(v.caption === undefined ? null : { caption: v.caption }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.mimeType === undefined ? null : { mimeType: v.mimeType }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });
}

/** @internal */
export const PostCandidatesCandidatesResponseType$ = z.nativeEnum(
    PostCandidatesCandidatesResponseType
);

/** @internal */
export namespace PostCandidatesCandidatesAdditionalInfo$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<
        PostCandidatesCandidatesAdditionalInfo,
        z.ZodTypeDef,
        Inbound
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PostCandidatesCandidatesAdditionalInfo
    > = z.object({});
}

/** @internal */
export namespace PostCandidatesCandidatesSocialProfiles$ {
    export type Inbound = {
        type?: PostCandidatesCandidatesResponseType | undefined;
        username?: string | undefined;
        displayName?: string | undefined;
        url?: string | undefined;
        avatarUrl?: string | undefined;
        email?: string | undefined;
        additionalInfo?: PostCandidatesCandidatesAdditionalInfo$.Inbound | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<
        PostCandidatesCandidatesSocialProfiles,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            type: PostCandidatesCandidatesResponseType$.optional(),
            username: z.string().optional(),
            displayName: z.string().optional(),
            url: z.string().optional(),
            avatarUrl: z.string().optional(),
            email: z.string().optional(),
            additionalInfo: z
                .lazy(() => PostCandidatesCandidatesAdditionalInfo$.inboundSchema)
                .optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.username === undefined ? null : { username: v.username }),
                ...(v.displayName === undefined ? null : { displayName: v.displayName }),
                ...(v.url === undefined ? null : { url: v.url }),
                ...(v.avatarUrl === undefined ? null : { avatarUrl: v.avatarUrl }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.additionalInfo === undefined ? null : { additionalInfo: v.additionalInfo }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });

    export type Outbound = {
        type?: PostCandidatesCandidatesResponseType | undefined;
        username?: string | undefined;
        displayName?: string | undefined;
        url?: string | undefined;
        avatarUrl?: string | undefined;
        email?: string | undefined;
        additionalInfo?: PostCandidatesCandidatesAdditionalInfo$.Outbound | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PostCandidatesCandidatesSocialProfiles
    > = z
        .object({
            type: PostCandidatesCandidatesResponseType$.optional(),
            username: z.string().optional(),
            displayName: z.string().optional(),
            url: z.string().optional(),
            avatarUrl: z.string().optional(),
            email: z.string().optional(),
            additionalInfo: z
                .lazy(() => PostCandidatesCandidatesAdditionalInfo$.outboundSchema)
                .optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.username === undefined ? null : { username: v.username }),
                ...(v.displayName === undefined ? null : { displayName: v.displayName }),
                ...(v.url === undefined ? null : { url: v.url }),
                ...(v.avatarUrl === undefined ? null : { avatarUrl: v.avatarUrl }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.additionalInfo === undefined ? null : { additionalInfo: v.additionalInfo }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });
}

/** @internal */
export namespace PostCandidatesCandidatesEducations$ {
    export type Inbound = {
        institution?: string | undefined;
        degree?: string | undefined;
        fieldOfStudy?: string | undefined;
        startDate?: number | undefined;
        endDate?: number | undefined;
        gpa?: number | undefined;
    };

    export const inboundSchema: z.ZodType<
        PostCandidatesCandidatesEducations,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            institution: z.string().optional(),
            degree: z.string().optional(),
            fieldOfStudy: z.string().optional(),
            startDate: z.number().optional(),
            endDate: z.number().optional(),
            gpa: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.institution === undefined ? null : { institution: v.institution }),
                ...(v.degree === undefined ? null : { degree: v.degree }),
                ...(v.fieldOfStudy === undefined ? null : { fieldOfStudy: v.fieldOfStudy }),
                ...(v.startDate === undefined ? null : { startDate: v.startDate }),
                ...(v.endDate === undefined ? null : { endDate: v.endDate }),
                ...(v.gpa === undefined ? null : { gpa: v.gpa }),
            };
        });

    export type Outbound = {
        institution?: string | undefined;
        degree?: string | undefined;
        fieldOfStudy?: string | undefined;
        startDate?: number | undefined;
        endDate?: number | undefined;
        gpa?: number | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PostCandidatesCandidatesEducations
    > = z
        .object({
            institution: z.string().optional(),
            degree: z.string().optional(),
            fieldOfStudy: z.string().optional(),
            startDate: z.number().optional(),
            endDate: z.number().optional(),
            gpa: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.institution === undefined ? null : { institution: v.institution }),
                ...(v.degree === undefined ? null : { degree: v.degree }),
                ...(v.fieldOfStudy === undefined ? null : { fieldOfStudy: v.fieldOfStudy }),
                ...(v.startDate === undefined ? null : { startDate: v.startDate }),
                ...(v.endDate === undefined ? null : { endDate: v.endDate }),
                ...(v.gpa === undefined ? null : { gpa: v.gpa }),
            };
        });
}

/** @internal */
export namespace PostCandidatesCandidatesWorkExperiences$ {
    export type Inbound = {
        company?: string | undefined;
        position?: string | undefined;
        startDate?: number | undefined;
        endDate?: number | undefined;
        description?: string | undefined;
    };

    export const inboundSchema: z.ZodType<
        PostCandidatesCandidatesWorkExperiences,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            company: z.string().optional(),
            position: z.string().optional(),
            startDate: z.number().optional(),
            endDate: z.number().optional(),
            description: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.company === undefined ? null : { company: v.company }),
                ...(v.position === undefined ? null : { position: v.position }),
                ...(v.startDate === undefined ? null : { startDate: v.startDate }),
                ...(v.endDate === undefined ? null : { endDate: v.endDate }),
                ...(v.description === undefined ? null : { description: v.description }),
            };
        });

    export type Outbound = {
        company?: string | undefined;
        position?: string | undefined;
        startDate?: number | undefined;
        endDate?: number | undefined;
        description?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PostCandidatesCandidatesWorkExperiences
    > = z
        .object({
            company: z.string().optional(),
            position: z.string().optional(),
            startDate: z.number().optional(),
            endDate: z.number().optional(),
            description: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.company === undefined ? null : { company: v.company }),
                ...(v.position === undefined ? null : { position: v.position }),
                ...(v.startDate === undefined ? null : { startDate: v.startDate }),
                ...(v.endDate === undefined ? null : { endDate: v.endDate }),
                ...(v.description === undefined ? null : { description: v.description }),
            };
        });
}

/** @internal */
export namespace PostCandidatesCandidatesReferences$ {
    export type Inbound = {
        name?: string | undefined;
        relationship?: string | undefined;
        company?: string | undefined;
        position?: string | undefined;
        email?: string | undefined;
        phoneNumber?: string | undefined;
    };

    export const inboundSchema: z.ZodType<
        PostCandidatesCandidatesReferences,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            name: z.string().optional(),
            relationship: z.string().optional(),
            company: z.string().optional(),
            position: z.string().optional(),
            email: z.string().optional(),
            phoneNumber: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.relationship === undefined ? null : { relationship: v.relationship }),
                ...(v.company === undefined ? null : { company: v.company }),
                ...(v.position === undefined ? null : { position: v.position }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.phoneNumber === undefined ? null : { phoneNumber: v.phoneNumber }),
            };
        });

    export type Outbound = {
        name?: string | undefined;
        relationship?: string | undefined;
        company?: string | undefined;
        position?: string | undefined;
        email?: string | undefined;
        phoneNumber?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PostCandidatesCandidatesReferences
    > = z
        .object({
            name: z.string().optional(),
            relationship: z.string().optional(),
            company: z.string().optional(),
            position: z.string().optional(),
            email: z.string().optional(),
            phoneNumber: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.relationship === undefined ? null : { relationship: v.relationship }),
                ...(v.company === undefined ? null : { company: v.company }),
                ...(v.position === undefined ? null : { position: v.position }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.phoneNumber === undefined ? null : { phoneNumber: v.phoneNumber }),
            };
        });
}

/** @internal */
export const PostCandidatesCandidatesResponseStatus$ = z.nativeEnum(
    PostCandidatesCandidatesResponseStatus
);

/** @internal */
export const PostCandidatesCandidatesFieldType$ = z.nativeEnum(PostCandidatesCandidatesFieldType);

/** @internal */
export namespace PostCandidatesCandidatesCustomFields$ {
    export type Inbound = {
        id?: string | undefined;
        fieldName?: string | undefined;
        fieldValue?: string | undefined;
        fieldType?: PostCandidatesCandidatesFieldType | undefined;
    };

    export const inboundSchema: z.ZodType<
        PostCandidatesCandidatesCustomFields,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            id: z.string().optional(),
            fieldName: z.string().optional(),
            fieldValue: z.string().optional(),
            fieldType: PostCandidatesCandidatesFieldType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fieldName === undefined ? null : { fieldName: v.fieldName }),
                ...(v.fieldValue === undefined ? null : { fieldValue: v.fieldValue }),
                ...(v.fieldType === undefined ? null : { fieldType: v.fieldType }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        fieldName?: string | undefined;
        fieldValue?: string | undefined;
        fieldType?: PostCandidatesCandidatesFieldType | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PostCandidatesCandidatesCustomFields
    > = z
        .object({
            id: z.string().optional(),
            fieldName: z.string().optional(),
            fieldValue: z.string().optional(),
            fieldType: PostCandidatesCandidatesFieldType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fieldName === undefined ? null : { fieldName: v.fieldName }),
                ...(v.fieldValue === undefined ? null : { fieldValue: v.fieldValue }),
                ...(v.fieldType === undefined ? null : { fieldType: v.fieldType }),
            };
        });
}

/** @internal */
export const PostCandidatesCandidatesPriority$ = z.nativeEnum(PostCandidatesCandidatesPriority);

/** @internal */
export namespace PostCandidatesCandidatesAuthor$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<PostCandidatesCandidatesAuthor, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostCandidatesCandidatesAuthor> =
        z.object({});
}

/** @internal */
export namespace PostCandidatesCandidatesAttachments$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<
        PostCandidatesCandidatesAttachments,
        z.ZodTypeDef,
        Inbound
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PostCandidatesCandidatesAttachments
    > = z.object({});
}

/** @internal */
export namespace PostCandidatesCandidatesSharedWith$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<
        PostCandidatesCandidatesSharedWith,
        z.ZodTypeDef,
        Inbound
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PostCandidatesCandidatesSharedWith
    > = z.object({});
}

/** @internal */
export const PostCandidatesCandidatesVisibility$ = z.nativeEnum(PostCandidatesCandidatesVisibility);

/** @internal */
export const PostCandidatesCandidatesResponse200Status$ = z.nativeEnum(
    PostCandidatesCandidatesResponse200Status
);

/** @internal */
export namespace PostCandidatesCandidatesNotes$ {
    export type Inbound = {
        id?: string | undefined;
        title?: string | undefined;
        content?: string | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        lastAccessed?: number | undefined;
        reminder?: number | undefined;
        color?: string | undefined;
        priority?: PostCandidatesCandidatesPriority | undefined;
        author?: PostCandidatesCandidatesAuthor$.Inbound | undefined;
        tags?: Array<string> | undefined;
        attachments?: Array<PostCandidatesCandidatesAttachments$.Inbound> | undefined;
        sharedWith?: Array<PostCandidatesCandidatesSharedWith$.Inbound> | undefined;
        visibility?: PostCandidatesCandidatesVisibility | undefined;
        status?: PostCandidatesCandidatesResponse200Status | undefined;
        metadata?: Array<string> | undefined;
    };

    export const inboundSchema: z.ZodType<PostCandidatesCandidatesNotes, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            title: z.string().optional(),
            content: z.string().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            lastAccessed: z.number().optional(),
            reminder: z.number().optional(),
            color: z.string().optional(),
            priority: PostCandidatesCandidatesPriority$.optional(),
            author: z.lazy(() => PostCandidatesCandidatesAuthor$.inboundSchema).optional(),
            tags: z.array(z.string()).optional(),
            attachments: z
                .array(z.lazy(() => PostCandidatesCandidatesAttachments$.inboundSchema))
                .optional(),
            sharedWith: z
                .array(z.lazy(() => PostCandidatesCandidatesSharedWith$.inboundSchema))
                .optional(),
            visibility: PostCandidatesCandidatesVisibility$.optional(),
            status: PostCandidatesCandidatesResponse200Status$.optional(),
            metadata: z.array(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.content === undefined ? null : { content: v.content }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.lastAccessed === undefined ? null : { lastAccessed: v.lastAccessed }),
                ...(v.reminder === undefined ? null : { reminder: v.reminder }),
                ...(v.color === undefined ? null : { color: v.color }),
                ...(v.priority === undefined ? null : { priority: v.priority }),
                ...(v.author === undefined ? null : { author: v.author }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
                ...(v.attachments === undefined ? null : { attachments: v.attachments }),
                ...(v.sharedWith === undefined ? null : { sharedWith: v.sharedWith }),
                ...(v.visibility === undefined ? null : { visibility: v.visibility }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        title?: string | undefined;
        content?: string | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        lastAccessed?: number | undefined;
        reminder?: number | undefined;
        color?: string | undefined;
        priority?: PostCandidatesCandidatesPriority | undefined;
        author?: PostCandidatesCandidatesAuthor$.Outbound | undefined;
        tags?: Array<string> | undefined;
        attachments?: Array<PostCandidatesCandidatesAttachments$.Outbound> | undefined;
        sharedWith?: Array<PostCandidatesCandidatesSharedWith$.Outbound> | undefined;
        visibility?: PostCandidatesCandidatesVisibility | undefined;
        status?: PostCandidatesCandidatesResponse200Status | undefined;
        metadata?: Array<string> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostCandidatesCandidatesNotes> =
        z
            .object({
                id: z.string().optional(),
                title: z.string().optional(),
                content: z.string().optional(),
                createdAt: z.number().optional(),
                updatedAt: z.number().optional(),
                lastAccessed: z.number().optional(),
                reminder: z.number().optional(),
                color: z.string().optional(),
                priority: PostCandidatesCandidatesPriority$.optional(),
                author: z.lazy(() => PostCandidatesCandidatesAuthor$.outboundSchema).optional(),
                tags: z.array(z.string()).optional(),
                attachments: z
                    .array(z.lazy(() => PostCandidatesCandidatesAttachments$.outboundSchema))
                    .optional(),
                sharedWith: z
                    .array(z.lazy(() => PostCandidatesCandidatesSharedWith$.outboundSchema))
                    .optional(),
                visibility: PostCandidatesCandidatesVisibility$.optional(),
                status: PostCandidatesCandidatesResponse200Status$.optional(),
                metadata: z.array(z.string()).optional(),
            })
            .transform((v) => {
                return {
                    ...(v.id === undefined ? null : { id: v.id }),
                    ...(v.title === undefined ? null : { title: v.title }),
                    ...(v.content === undefined ? null : { content: v.content }),
                    ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                    ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                    ...(v.lastAccessed === undefined ? null : { lastAccessed: v.lastAccessed }),
                    ...(v.reminder === undefined ? null : { reminder: v.reminder }),
                    ...(v.color === undefined ? null : { color: v.color }),
                    ...(v.priority === undefined ? null : { priority: v.priority }),
                    ...(v.author === undefined ? null : { author: v.author }),
                    ...(v.tags === undefined ? null : { tags: v.tags }),
                    ...(v.attachments === undefined ? null : { attachments: v.attachments }),
                    ...(v.sharedWith === undefined ? null : { sharedWith: v.sharedWith }),
                    ...(v.visibility === undefined ? null : { visibility: v.visibility }),
                    ...(v.status === undefined ? null : { status: v.status }),
                    ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                };
            });
}

/** @internal */
export namespace PostCandidatesUnified$ {
    export type Inbound = {
        id?: string | undefined;
        firstName?: string | undefined;
        lastName?: string | undefined;
        email?: string | undefined;
        phoneNumber?: string | undefined;
        role?: string | undefined;
        jobId?: string | undefined;
        resume?: PostCandidatesCandidatesResume$.Inbound | undefined;
        coverLetter?: PostCandidatesCandidatesCoverLetter$.Inbound | undefined;
        profilePicture?: PostCandidatesCandidatesProfilePicture$.Inbound | undefined;
        socialProfiles?: Array<PostCandidatesCandidatesSocialProfiles$.Inbound> | undefined;
        websites?: Array<string> | undefined;
        skills?: Array<string> | undefined;
        languages?: Array<string> | undefined;
        certifications?: Array<string> | undefined;
        educations?: Array<PostCandidatesCandidatesEducations$.Inbound> | undefined;
        workExperiences?: Array<PostCandidatesCandidatesWorkExperiences$.Inbound> | undefined;
        references?: Array<PostCandidatesCandidatesReferences$.Inbound> | undefined;
        availability?: number | undefined;
        preferredWorkLocation?: string | undefined;
        status?: PostCandidatesCandidatesResponseStatus | undefined;
        customFields?: Array<PostCandidatesCandidatesCustomFields$.Inbound> | undefined;
        notes?: Array<PostCandidatesCandidatesNotes$.Inbound> | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
    };

    export const inboundSchema: z.ZodType<PostCandidatesUnified, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            firstName: z.string().optional(),
            lastName: z.string().optional(),
            email: z.string().optional(),
            phoneNumber: z.string().optional(),
            role: z.string().optional(),
            jobId: z.string().optional(),
            resume: z.lazy(() => PostCandidatesCandidatesResume$.inboundSchema).optional(),
            coverLetter: z
                .lazy(() => PostCandidatesCandidatesCoverLetter$.inboundSchema)
                .optional(),
            profilePicture: z
                .lazy(() => PostCandidatesCandidatesProfilePicture$.inboundSchema)
                .optional(),
            socialProfiles: z
                .array(z.lazy(() => PostCandidatesCandidatesSocialProfiles$.inboundSchema))
                .optional(),
            websites: z.array(z.string()).optional(),
            skills: z.array(z.string()).optional(),
            languages: z.array(z.string()).optional(),
            certifications: z.array(z.string()).optional(),
            educations: z
                .array(z.lazy(() => PostCandidatesCandidatesEducations$.inboundSchema))
                .optional(),
            workExperiences: z
                .array(z.lazy(() => PostCandidatesCandidatesWorkExperiences$.inboundSchema))
                .optional(),
            references: z
                .array(z.lazy(() => PostCandidatesCandidatesReferences$.inboundSchema))
                .optional(),
            availability: z.number().optional(),
            preferredWorkLocation: z.string().optional(),
            status: PostCandidatesCandidatesResponseStatus$.optional(),
            customFields: z
                .array(z.lazy(() => PostCandidatesCandidatesCustomFields$.inboundSchema))
                .optional(),
            notes: z.array(z.lazy(() => PostCandidatesCandidatesNotes$.inboundSchema)).optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.phoneNumber === undefined ? null : { phoneNumber: v.phoneNumber }),
                ...(v.role === undefined ? null : { role: v.role }),
                ...(v.jobId === undefined ? null : { jobId: v.jobId }),
                ...(v.resume === undefined ? null : { resume: v.resume }),
                ...(v.coverLetter === undefined ? null : { coverLetter: v.coverLetter }),
                ...(v.profilePicture === undefined ? null : { profilePicture: v.profilePicture }),
                ...(v.socialProfiles === undefined ? null : { socialProfiles: v.socialProfiles }),
                ...(v.websites === undefined ? null : { websites: v.websites }),
                ...(v.skills === undefined ? null : { skills: v.skills }),
                ...(v.languages === undefined ? null : { languages: v.languages }),
                ...(v.certifications === undefined ? null : { certifications: v.certifications }),
                ...(v.educations === undefined ? null : { educations: v.educations }),
                ...(v.workExperiences === undefined
                    ? null
                    : { workExperiences: v.workExperiences }),
                ...(v.references === undefined ? null : { references: v.references }),
                ...(v.availability === undefined ? null : { availability: v.availability }),
                ...(v.preferredWorkLocation === undefined
                    ? null
                    : { preferredWorkLocation: v.preferredWorkLocation }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                ...(v.notes === undefined ? null : { notes: v.notes }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        firstName?: string | undefined;
        lastName?: string | undefined;
        email?: string | undefined;
        phoneNumber?: string | undefined;
        role?: string | undefined;
        jobId?: string | undefined;
        resume?: PostCandidatesCandidatesResume$.Outbound | undefined;
        coverLetter?: PostCandidatesCandidatesCoverLetter$.Outbound | undefined;
        profilePicture?: PostCandidatesCandidatesProfilePicture$.Outbound | undefined;
        socialProfiles?: Array<PostCandidatesCandidatesSocialProfiles$.Outbound> | undefined;
        websites?: Array<string> | undefined;
        skills?: Array<string> | undefined;
        languages?: Array<string> | undefined;
        certifications?: Array<string> | undefined;
        educations?: Array<PostCandidatesCandidatesEducations$.Outbound> | undefined;
        workExperiences?: Array<PostCandidatesCandidatesWorkExperiences$.Outbound> | undefined;
        references?: Array<PostCandidatesCandidatesReferences$.Outbound> | undefined;
        availability?: number | undefined;
        preferredWorkLocation?: string | undefined;
        status?: PostCandidatesCandidatesResponseStatus | undefined;
        customFields?: Array<PostCandidatesCandidatesCustomFields$.Outbound> | undefined;
        notes?: Array<PostCandidatesCandidatesNotes$.Outbound> | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostCandidatesUnified> = z
        .object({
            id: z.string().optional(),
            firstName: z.string().optional(),
            lastName: z.string().optional(),
            email: z.string().optional(),
            phoneNumber: z.string().optional(),
            role: z.string().optional(),
            jobId: z.string().optional(),
            resume: z.lazy(() => PostCandidatesCandidatesResume$.outboundSchema).optional(),
            coverLetter: z
                .lazy(() => PostCandidatesCandidatesCoverLetter$.outboundSchema)
                .optional(),
            profilePicture: z
                .lazy(() => PostCandidatesCandidatesProfilePicture$.outboundSchema)
                .optional(),
            socialProfiles: z
                .array(z.lazy(() => PostCandidatesCandidatesSocialProfiles$.outboundSchema))
                .optional(),
            websites: z.array(z.string()).optional(),
            skills: z.array(z.string()).optional(),
            languages: z.array(z.string()).optional(),
            certifications: z.array(z.string()).optional(),
            educations: z
                .array(z.lazy(() => PostCandidatesCandidatesEducations$.outboundSchema))
                .optional(),
            workExperiences: z
                .array(z.lazy(() => PostCandidatesCandidatesWorkExperiences$.outboundSchema))
                .optional(),
            references: z
                .array(z.lazy(() => PostCandidatesCandidatesReferences$.outboundSchema))
                .optional(),
            availability: z.number().optional(),
            preferredWorkLocation: z.string().optional(),
            status: PostCandidatesCandidatesResponseStatus$.optional(),
            customFields: z
                .array(z.lazy(() => PostCandidatesCandidatesCustomFields$.outboundSchema))
                .optional(),
            notes: z.array(z.lazy(() => PostCandidatesCandidatesNotes$.outboundSchema)).optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.phoneNumber === undefined ? null : { phoneNumber: v.phoneNumber }),
                ...(v.role === undefined ? null : { role: v.role }),
                ...(v.jobId === undefined ? null : { jobId: v.jobId }),
                ...(v.resume === undefined ? null : { resume: v.resume }),
                ...(v.coverLetter === undefined ? null : { coverLetter: v.coverLetter }),
                ...(v.profilePicture === undefined ? null : { profilePicture: v.profilePicture }),
                ...(v.socialProfiles === undefined ? null : { socialProfiles: v.socialProfiles }),
                ...(v.websites === undefined ? null : { websites: v.websites }),
                ...(v.skills === undefined ? null : { skills: v.skills }),
                ...(v.languages === undefined ? null : { languages: v.languages }),
                ...(v.certifications === undefined ? null : { certifications: v.certifications }),
                ...(v.educations === undefined ? null : { educations: v.educations }),
                ...(v.workExperiences === undefined
                    ? null
                    : { workExperiences: v.workExperiences }),
                ...(v.references === undefined ? null : { references: v.references }),
                ...(v.availability === undefined ? null : { availability: v.availability }),
                ...(v.preferredWorkLocation === undefined
                    ? null
                    : { preferredWorkLocation: v.preferredWorkLocation }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                ...(v.notes === undefined ? null : { notes: v.notes }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
            };
        });
}

/** @internal */
export namespace PostCandidatesPassthrough$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<PostCandidatesPassthrough, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostCandidatesPassthrough> =
        z.object({});
}

/** @internal */
export namespace PostCandidatesCache$ {
    export type Inbound = {
        hit?: boolean | undefined;
        ttl?: number | undefined;
        key?: string | undefined;
    };

    export const inboundSchema: z.ZodType<PostCandidatesCache, z.ZodTypeDef, Inbound> = z
        .object({
            hit: z.boolean().optional(),
            ttl: z.number().int().optional(),
            key: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.hit === undefined ? null : { hit: v.hit }),
                ...(v.ttl === undefined ? null : { ttl: v.ttl }),
                ...(v.key === undefined ? null : { key: v.key }),
            };
        });

    export type Outbound = {
        hit?: boolean | undefined;
        ttl?: number | undefined;
        key?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostCandidatesCache> = z
        .object({
            hit: z.boolean().optional(),
            ttl: z.number().int().optional(),
            key: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.hit === undefined ? null : { hit: v.hit }),
                ...(v.ttl === undefined ? null : { ttl: v.ttl }),
                ...(v.key === undefined ? null : { key: v.key }),
            };
        });
}

/** @internal */
export namespace PostCandidatesMeta$ {
    export type Inbound = {
        timestamp?: number | undefined;
        latency?: number | undefined;
        platformRateLimitRemaining?: number | undefined;
        rateLimitRemaining?: number | undefined;
        cache?: PostCandidatesCache$.Inbound | undefined;
        transactionKey?: string | undefined;
        txn?: string | undefined;
        platform?: string | undefined;
        platformVersion?: string | undefined;
        connectionDefinitionKey?: string | undefined;
        action?: string | undefined;
        commonModel?: string | undefined;
        commonModelVersion?: string | undefined;
        connectionKey?: string | undefined;
        hash?: string | undefined;
        heartbeats?: Array<string> | undefined;
        totalTransactions?: number | undefined;
    };

    export const inboundSchema: z.ZodType<PostCandidatesMeta, z.ZodTypeDef, Inbound> = z
        .object({
            timestamp: z.number().int().optional(),
            latency: z.number().int().optional(),
            platformRateLimitRemaining: z.number().int().optional(),
            rateLimitRemaining: z.number().int().optional(),
            cache: z.lazy(() => PostCandidatesCache$.inboundSchema).optional(),
            transactionKey: z.string().optional(),
            txn: z.string().optional(),
            platform: z.string().optional(),
            platformVersion: z.string().optional(),
            connectionDefinitionKey: z.string().optional(),
            action: z.string().optional(),
            commonModel: z.string().optional(),
            commonModelVersion: z.string().optional(),
            connectionKey: z.string().optional(),
            hash: z.string().optional(),
            heartbeats: z.array(z.string()).optional(),
            totalTransactions: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.timestamp === undefined ? null : { timestamp: v.timestamp }),
                ...(v.latency === undefined ? null : { latency: v.latency }),
                ...(v.platformRateLimitRemaining === undefined
                    ? null
                    : { platformRateLimitRemaining: v.platformRateLimitRemaining }),
                ...(v.rateLimitRemaining === undefined
                    ? null
                    : { rateLimitRemaining: v.rateLimitRemaining }),
                ...(v.cache === undefined ? null : { cache: v.cache }),
                ...(v.transactionKey === undefined ? null : { transactionKey: v.transactionKey }),
                ...(v.txn === undefined ? null : { txn: v.txn }),
                ...(v.platform === undefined ? null : { platform: v.platform }),
                ...(v.platformVersion === undefined
                    ? null
                    : { platformVersion: v.platformVersion }),
                ...(v.connectionDefinitionKey === undefined
                    ? null
                    : { connectionDefinitionKey: v.connectionDefinitionKey }),
                ...(v.action === undefined ? null : { action: v.action }),
                ...(v.commonModel === undefined ? null : { commonModel: v.commonModel }),
                ...(v.commonModelVersion === undefined
                    ? null
                    : { commonModelVersion: v.commonModelVersion }),
                ...(v.connectionKey === undefined ? null : { connectionKey: v.connectionKey }),
                ...(v.hash === undefined ? null : { hash: v.hash }),
                ...(v.heartbeats === undefined ? null : { heartbeats: v.heartbeats }),
                ...(v.totalTransactions === undefined
                    ? null
                    : { totalTransactions: v.totalTransactions }),
            };
        });

    export type Outbound = {
        timestamp?: number | undefined;
        latency?: number | undefined;
        platformRateLimitRemaining?: number | undefined;
        rateLimitRemaining?: number | undefined;
        cache?: PostCandidatesCache$.Outbound | undefined;
        transactionKey?: string | undefined;
        txn?: string | undefined;
        platform?: string | undefined;
        platformVersion?: string | undefined;
        connectionDefinitionKey?: string | undefined;
        action?: string | undefined;
        commonModel?: string | undefined;
        commonModelVersion?: string | undefined;
        connectionKey?: string | undefined;
        hash?: string | undefined;
        heartbeats?: Array<string> | undefined;
        totalTransactions?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostCandidatesMeta> = z
        .object({
            timestamp: z.number().int().optional(),
            latency: z.number().int().optional(),
            platformRateLimitRemaining: z.number().int().optional(),
            rateLimitRemaining: z.number().int().optional(),
            cache: z.lazy(() => PostCandidatesCache$.outboundSchema).optional(),
            transactionKey: z.string().optional(),
            txn: z.string().optional(),
            platform: z.string().optional(),
            platformVersion: z.string().optional(),
            connectionDefinitionKey: z.string().optional(),
            action: z.string().optional(),
            commonModel: z.string().optional(),
            commonModelVersion: z.string().optional(),
            connectionKey: z.string().optional(),
            hash: z.string().optional(),
            heartbeats: z.array(z.string()).optional(),
            totalTransactions: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.timestamp === undefined ? null : { timestamp: v.timestamp }),
                ...(v.latency === undefined ? null : { latency: v.latency }),
                ...(v.platformRateLimitRemaining === undefined
                    ? null
                    : { platformRateLimitRemaining: v.platformRateLimitRemaining }),
                ...(v.rateLimitRemaining === undefined
                    ? null
                    : { rateLimitRemaining: v.rateLimitRemaining }),
                ...(v.cache === undefined ? null : { cache: v.cache }),
                ...(v.transactionKey === undefined ? null : { transactionKey: v.transactionKey }),
                ...(v.txn === undefined ? null : { txn: v.txn }),
                ...(v.platform === undefined ? null : { platform: v.platform }),
                ...(v.platformVersion === undefined
                    ? null
                    : { platformVersion: v.platformVersion }),
                ...(v.connectionDefinitionKey === undefined
                    ? null
                    : { connectionDefinitionKey: v.connectionDefinitionKey }),
                ...(v.action === undefined ? null : { action: v.action }),
                ...(v.commonModel === undefined ? null : { commonModel: v.commonModel }),
                ...(v.commonModelVersion === undefined
                    ? null
                    : { commonModelVersion: v.commonModelVersion }),
                ...(v.connectionKey === undefined ? null : { connectionKey: v.connectionKey }),
                ...(v.hash === undefined ? null : { hash: v.hash }),
                ...(v.heartbeats === undefined ? null : { heartbeats: v.heartbeats }),
                ...(v.totalTransactions === undefined
                    ? null
                    : { totalTransactions: v.totalTransactions }),
            };
        });
}

/** @internal */
export namespace PostCandidatesResponseBody$ {
    export type Inbound = {
        status?: string | undefined;
        statusCode?: PostCandidatesStatusCode | undefined;
        unified?: PostCandidatesUnified$.Inbound | undefined;
        passthrough?: PostCandidatesPassthrough$.Inbound | undefined;
        meta?: PostCandidatesMeta$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<PostCandidatesResponseBody, z.ZodTypeDef, Inbound> = z
        .object({
            status: z.string().optional(),
            statusCode: PostCandidatesStatusCode$.optional(),
            unified: z.lazy(() => PostCandidatesUnified$.inboundSchema).optional(),
            passthrough: z.lazy(() => PostCandidatesPassthrough$.inboundSchema).optional(),
            meta: z.lazy(() => PostCandidatesMeta$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.statusCode === undefined ? null : { statusCode: v.statusCode }),
                ...(v.unified === undefined ? null : { unified: v.unified }),
                ...(v.passthrough === undefined ? null : { passthrough: v.passthrough }),
                ...(v.meta === undefined ? null : { meta: v.meta }),
            };
        });

    export type Outbound = {
        status?: string | undefined;
        statusCode?: PostCandidatesStatusCode | undefined;
        unified?: PostCandidatesUnified$.Outbound | undefined;
        passthrough?: PostCandidatesPassthrough$.Outbound | undefined;
        meta?: PostCandidatesMeta$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostCandidatesResponseBody> = z
        .object({
            status: z.string().optional(),
            statusCode: PostCandidatesStatusCode$.optional(),
            unified: z.lazy(() => PostCandidatesUnified$.outboundSchema).optional(),
            passthrough: z.lazy(() => PostCandidatesPassthrough$.outboundSchema).optional(),
            meta: z.lazy(() => PostCandidatesMeta$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.statusCode === undefined ? null : { statusCode: v.statusCode }),
                ...(v.unified === undefined ? null : { unified: v.unified }),
                ...(v.passthrough === undefined ? null : { passthrough: v.passthrough }),
                ...(v.meta === undefined ? null : { meta: v.meta }),
            };
        });
}

/** @internal */
export namespace PostCandidatesResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        object?: PostCandidatesResponseBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<PostCandidatesResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => PostCandidatesResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: PostCandidatesResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PostCandidatesResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z.lazy(() => PostCandidatesResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
