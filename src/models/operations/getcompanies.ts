/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type GetCompaniesRequest = {
    /**
     * IntegrationOS API key
     */
    xIntegrationosSecret: string;
    /**
     * The unique identifier of a Connected Account
     */
    xIntegrationosConnectionKey: string;
};

export enum GetCompaniesStatusCode {
    TwoHundred = 200,
    FourHundred = 400,
    FiveHundred = 500,
}

export enum GetCompaniesType {
    Home = "home",
    Work = "work",
    Other = "other",
}

export type GetCompaniesGeoLocation = {
    latitude?: number | undefined;
    longitude?: number | undefined;
    altitude?: number | undefined;
    accuracy?: number | undefined;
    altitudeAccuracy?: number | undefined;
    heading?: number | undefined;
    speed?: number | undefined;
    timestamp?: number | undefined;
};

export enum GetCompaniesFieldType {
    Text = "text",
    Number = "number",
    Date = "date",
    Boolean = "boolean",
    Enum = "enum",
    Json = "json",
    Array = "array",
}

export type GetCompaniesCustomFields = {
    id?: string | undefined;
    fieldName?: string | undefined;
    fieldValue?: string | undefined;
    fieldType?: GetCompaniesFieldType | undefined;
};

export type GetCompaniesAddress = {
    id?: string | undefined;
    contactId?: string | undefined;
    accountId?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    name?: string | undefined;
    companyName?: string | undefined;
    email?: string | undefined;
    phone?: string | undefined;
    street?: string | undefined;
    addressLine2?: string | undefined;
    city?: string | undefined;
    province?: string | undefined;
    region?: string | undefined;
    postalCode?: string | undefined;
    postalCodeExtension?: string | undefined;
    country?: string | undefined;
    countryCode?: string | undefined;
    type?: GetCompaniesType | undefined;
    geoLocation?: GetCompaniesGeoLocation | undefined;
    customFields?: Array<GetCompaniesCustomFields> | undefined;
    subdivisionCode?: string | undefined;
};

export enum GetCompaniesCompaniesType {
    Facebook = "facebook",
    Twitter = "twitter",
    Linkedin = "linkedin",
    Instagram = "instagram",
    Tiktok = "tiktok",
    Pinterest = "pinterest",
    Youtube = "youtube",
    Other = "other",
}

export type GetCompaniesAdditionalInfo = {};

export type GetCompaniesSocialProfiles = {
    type?: GetCompaniesCompaniesType | undefined;
    username?: string | undefined;
    displayName?: string | undefined;
    url?: string | undefined;
    avatarUrl?: string | undefined;
    email?: string | undefined;
    additionalInfo?: GetCompaniesAdditionalInfo | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    active?: boolean | undefined;
    deleted?: boolean | undefined;
};

export type GetCompaniesCompaniesAddress = {};

export type GetCompaniesAddresses = {};

export type GetCompaniesNotes = {};

export type GetCompaniesCompaniesSocialProfiles = {};

export type GetCompaniesCompaniesCustomFields = {};

export type GetCompaniesAdditionalContacts = {
    id?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    company?: string | undefined;
    email?: string | undefined;
    emails?: Array<string> | undefined;
    phone?: string | undefined;
    phones?: Array<string> | undefined;
    address?: GetCompaniesCompaniesAddress | undefined;
    addresses?: Array<GetCompaniesAddresses> | undefined;
    birthday?: number | undefined;
    relationship?: string | undefined;
    note?: string | undefined;
    notes?: GetCompaniesNotes | undefined;
    tags?: Array<string> | undefined;
    websites?: Array<string> | undefined;
    socialProfiles?: Array<GetCompaniesCompaniesSocialProfiles> | undefined;
    customFields?: Array<GetCompaniesCompaniesCustomFields> | undefined;
};

export type GetCompaniesUnified = {
    id?: number | undefined;
    name?: string | undefined;
    legalName?: string | undefined;
    type?: string | undefined;
    industry?: string | undefined;
    address?: GetCompaniesAddress | undefined;
    phone?: string | undefined;
    email?: string | undefined;
    website?: string | undefined;
    foundedDate?: number | undefined;
    numberOfEmployees?: number | undefined;
    revenue?: number | undefined;
    revenueCurrency?: string | undefined;
    tags?: Array<string> | undefined;
    socialProfiles?: Array<GetCompaniesSocialProfiles> | undefined;
    logo?: string | undefined;
    description?: string | undefined;
    stockSymbol?: string | undefined;
    parentCompanyId?: string | undefined;
    additionalContacts?: Array<GetCompaniesAdditionalContacts> | undefined;
    incorporationCountry?: string | undefined;
    incorporationDate?: number | undefined;
    taxId?: string | undefined;
    regulatoryStatus?: string | undefined;
    dunsNumber?: string | undefined;
};

export type GetCompaniesPassthrough = {};

export type GetCompaniesCache = {
    hit?: boolean | undefined;
    ttl?: number | undefined;
    key?: string | undefined;
};

export type GetCompaniesMeta = {
    timestamp?: number | undefined;
    latency?: number | undefined;
    platformRateLimitRemaining?: number | undefined;
    rateLimitRemaining?: number | undefined;
    cache?: GetCompaniesCache | undefined;
    transactionKey?: string | undefined;
    txn?: string | undefined;
    platform?: string | undefined;
    platformVersion?: string | undefined;
    connectionDefinitionKey?: string | undefined;
    action?: string | undefined;
    commonModel?: string | undefined;
    commonModelVersion?: string | undefined;
    connectionKey?: string | undefined;
    hash?: string | undefined;
    heartbeats?: Array<string> | undefined;
    totalTransactions?: number | undefined;
};

export type GetCompaniesPagination = {
    cursor?: string | undefined;
    limit?: number | undefined;
};

/**
 * Successful response
 */
export type GetCompaniesResponseBody = {
    status?: string | undefined;
    statusCode?: GetCompaniesStatusCode | undefined;
    unified?: Array<GetCompaniesUnified> | undefined;
    passthrough?: GetCompaniesPassthrough | undefined;
    meta?: GetCompaniesMeta | undefined;
    pagination?: GetCompaniesPagination | undefined;
};

export type GetCompaniesResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Successful response
     */
    object?: GetCompaniesResponseBody | undefined;
};

/** @internal */
export namespace GetCompaniesRequest$ {
    export type Inbound = {
        "X-INTEGRATIONOS-SECRET": string;
        "X-INTEGRATIONOS-CONNECTION-KEY": string;
    };

    export const inboundSchema: z.ZodType<GetCompaniesRequest, z.ZodTypeDef, Inbound> = z
        .object({
            "X-INTEGRATIONOS-SECRET": z.string(),
            "X-INTEGRATIONOS-CONNECTION-KEY": z.string(),
        })
        .transform((v) => {
            return {
                xIntegrationosSecret: v["X-INTEGRATIONOS-SECRET"],
                xIntegrationosConnectionKey: v["X-INTEGRATIONOS-CONNECTION-KEY"],
            };
        });

    export type Outbound = {
        "X-INTEGRATIONOS-SECRET": string;
        "X-INTEGRATIONOS-CONNECTION-KEY": string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetCompaniesRequest> = z
        .object({
            xIntegrationosSecret: z.string(),
            xIntegrationosConnectionKey: z.string(),
        })
        .transform((v) => {
            return {
                "X-INTEGRATIONOS-SECRET": v.xIntegrationosSecret,
                "X-INTEGRATIONOS-CONNECTION-KEY": v.xIntegrationosConnectionKey,
            };
        });
}

/** @internal */
export const GetCompaniesStatusCode$ = z.nativeEnum(GetCompaniesStatusCode);

/** @internal */
export const GetCompaniesType$ = z.nativeEnum(GetCompaniesType);

/** @internal */
export namespace GetCompaniesGeoLocation$ {
    export type Inbound = {
        latitude?: number | undefined;
        longitude?: number | undefined;
        altitude?: number | undefined;
        accuracy?: number | undefined;
        altitudeAccuracy?: number | undefined;
        heading?: number | undefined;
        speed?: number | undefined;
        timestamp?: number | undefined;
    };

    export const inboundSchema: z.ZodType<GetCompaniesGeoLocation, z.ZodTypeDef, Inbound> = z
        .object({
            latitude: z.number().optional(),
            longitude: z.number().optional(),
            altitude: z.number().optional(),
            accuracy: z.number().optional(),
            altitudeAccuracy: z.number().optional(),
            heading: z.number().optional(),
            speed: z.number().optional(),
            timestamp: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.latitude === undefined ? null : { latitude: v.latitude }),
                ...(v.longitude === undefined ? null : { longitude: v.longitude }),
                ...(v.altitude === undefined ? null : { altitude: v.altitude }),
                ...(v.accuracy === undefined ? null : { accuracy: v.accuracy }),
                ...(v.altitudeAccuracy === undefined
                    ? null
                    : { altitudeAccuracy: v.altitudeAccuracy }),
                ...(v.heading === undefined ? null : { heading: v.heading }),
                ...(v.speed === undefined ? null : { speed: v.speed }),
                ...(v.timestamp === undefined ? null : { timestamp: v.timestamp }),
            };
        });

    export type Outbound = {
        latitude?: number | undefined;
        longitude?: number | undefined;
        altitude?: number | undefined;
        accuracy?: number | undefined;
        altitudeAccuracy?: number | undefined;
        heading?: number | undefined;
        speed?: number | undefined;
        timestamp?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetCompaniesGeoLocation> = z
        .object({
            latitude: z.number().optional(),
            longitude: z.number().optional(),
            altitude: z.number().optional(),
            accuracy: z.number().optional(),
            altitudeAccuracy: z.number().optional(),
            heading: z.number().optional(),
            speed: z.number().optional(),
            timestamp: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.latitude === undefined ? null : { latitude: v.latitude }),
                ...(v.longitude === undefined ? null : { longitude: v.longitude }),
                ...(v.altitude === undefined ? null : { altitude: v.altitude }),
                ...(v.accuracy === undefined ? null : { accuracy: v.accuracy }),
                ...(v.altitudeAccuracy === undefined
                    ? null
                    : { altitudeAccuracy: v.altitudeAccuracy }),
                ...(v.heading === undefined ? null : { heading: v.heading }),
                ...(v.speed === undefined ? null : { speed: v.speed }),
                ...(v.timestamp === undefined ? null : { timestamp: v.timestamp }),
            };
        });
}

/** @internal */
export const GetCompaniesFieldType$ = z.nativeEnum(GetCompaniesFieldType);

/** @internal */
export namespace GetCompaniesCustomFields$ {
    export type Inbound = {
        id?: string | undefined;
        fieldName?: string | undefined;
        fieldValue?: string | undefined;
        fieldType?: GetCompaniesFieldType | undefined;
    };

    export const inboundSchema: z.ZodType<GetCompaniesCustomFields, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            fieldName: z.string().optional(),
            fieldValue: z.string().optional(),
            fieldType: GetCompaniesFieldType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fieldName === undefined ? null : { fieldName: v.fieldName }),
                ...(v.fieldValue === undefined ? null : { fieldValue: v.fieldValue }),
                ...(v.fieldType === undefined ? null : { fieldType: v.fieldType }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        fieldName?: string | undefined;
        fieldValue?: string | undefined;
        fieldType?: GetCompaniesFieldType | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetCompaniesCustomFields> = z
        .object({
            id: z.string().optional(),
            fieldName: z.string().optional(),
            fieldValue: z.string().optional(),
            fieldType: GetCompaniesFieldType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fieldName === undefined ? null : { fieldName: v.fieldName }),
                ...(v.fieldValue === undefined ? null : { fieldValue: v.fieldValue }),
                ...(v.fieldType === undefined ? null : { fieldType: v.fieldType }),
            };
        });
}

/** @internal */
export namespace GetCompaniesAddress$ {
    export type Inbound = {
        id?: string | undefined;
        contactId?: string | undefined;
        accountId?: string | undefined;
        firstName?: string | undefined;
        lastName?: string | undefined;
        name?: string | undefined;
        companyName?: string | undefined;
        email?: string | undefined;
        phone?: string | undefined;
        street?: string | undefined;
        addressLine2?: string | undefined;
        city?: string | undefined;
        province?: string | undefined;
        region?: string | undefined;
        postalCode?: string | undefined;
        postalCodeExtension?: string | undefined;
        country?: string | undefined;
        countryCode?: string | undefined;
        type?: GetCompaniesType | undefined;
        geoLocation?: GetCompaniesGeoLocation$.Inbound | undefined;
        customFields?: Array<GetCompaniesCustomFields$.Inbound> | undefined;
        subdivisionCode?: string | undefined;
    };

    export const inboundSchema: z.ZodType<GetCompaniesAddress, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            contactId: z.string().optional(),
            accountId: z.string().optional(),
            firstName: z.string().optional(),
            lastName: z.string().optional(),
            name: z.string().optional(),
            companyName: z.string().optional(),
            email: z.string().optional(),
            phone: z.string().optional(),
            street: z.string().optional(),
            addressLine2: z.string().optional(),
            city: z.string().optional(),
            province: z.string().optional(),
            region: z.string().optional(),
            postalCode: z.string().optional(),
            postalCodeExtension: z.string().optional(),
            country: z.string().optional(),
            countryCode: z.string().optional(),
            type: GetCompaniesType$.optional(),
            geoLocation: z.lazy(() => GetCompaniesGeoLocation$.inboundSchema).optional(),
            customFields: z.array(z.lazy(() => GetCompaniesCustomFields$.inboundSchema)).optional(),
            subdivisionCode: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.contactId === undefined ? null : { contactId: v.contactId }),
                ...(v.accountId === undefined ? null : { accountId: v.accountId }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.companyName === undefined ? null : { companyName: v.companyName }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.phone === undefined ? null : { phone: v.phone }),
                ...(v.street === undefined ? null : { street: v.street }),
                ...(v.addressLine2 === undefined ? null : { addressLine2: v.addressLine2 }),
                ...(v.city === undefined ? null : { city: v.city }),
                ...(v.province === undefined ? null : { province: v.province }),
                ...(v.region === undefined ? null : { region: v.region }),
                ...(v.postalCode === undefined ? null : { postalCode: v.postalCode }),
                ...(v.postalCodeExtension === undefined
                    ? null
                    : { postalCodeExtension: v.postalCodeExtension }),
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.countryCode === undefined ? null : { countryCode: v.countryCode }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.geoLocation === undefined ? null : { geoLocation: v.geoLocation }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                ...(v.subdivisionCode === undefined
                    ? null
                    : { subdivisionCode: v.subdivisionCode }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        contactId?: string | undefined;
        accountId?: string | undefined;
        firstName?: string | undefined;
        lastName?: string | undefined;
        name?: string | undefined;
        companyName?: string | undefined;
        email?: string | undefined;
        phone?: string | undefined;
        street?: string | undefined;
        addressLine2?: string | undefined;
        city?: string | undefined;
        province?: string | undefined;
        region?: string | undefined;
        postalCode?: string | undefined;
        postalCodeExtension?: string | undefined;
        country?: string | undefined;
        countryCode?: string | undefined;
        type?: GetCompaniesType | undefined;
        geoLocation?: GetCompaniesGeoLocation$.Outbound | undefined;
        customFields?: Array<GetCompaniesCustomFields$.Outbound> | undefined;
        subdivisionCode?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetCompaniesAddress> = z
        .object({
            id: z.string().optional(),
            contactId: z.string().optional(),
            accountId: z.string().optional(),
            firstName: z.string().optional(),
            lastName: z.string().optional(),
            name: z.string().optional(),
            companyName: z.string().optional(),
            email: z.string().optional(),
            phone: z.string().optional(),
            street: z.string().optional(),
            addressLine2: z.string().optional(),
            city: z.string().optional(),
            province: z.string().optional(),
            region: z.string().optional(),
            postalCode: z.string().optional(),
            postalCodeExtension: z.string().optional(),
            country: z.string().optional(),
            countryCode: z.string().optional(),
            type: GetCompaniesType$.optional(),
            geoLocation: z.lazy(() => GetCompaniesGeoLocation$.outboundSchema).optional(),
            customFields: z
                .array(z.lazy(() => GetCompaniesCustomFields$.outboundSchema))
                .optional(),
            subdivisionCode: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.contactId === undefined ? null : { contactId: v.contactId }),
                ...(v.accountId === undefined ? null : { accountId: v.accountId }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.companyName === undefined ? null : { companyName: v.companyName }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.phone === undefined ? null : { phone: v.phone }),
                ...(v.street === undefined ? null : { street: v.street }),
                ...(v.addressLine2 === undefined ? null : { addressLine2: v.addressLine2 }),
                ...(v.city === undefined ? null : { city: v.city }),
                ...(v.province === undefined ? null : { province: v.province }),
                ...(v.region === undefined ? null : { region: v.region }),
                ...(v.postalCode === undefined ? null : { postalCode: v.postalCode }),
                ...(v.postalCodeExtension === undefined
                    ? null
                    : { postalCodeExtension: v.postalCodeExtension }),
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.countryCode === undefined ? null : { countryCode: v.countryCode }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.geoLocation === undefined ? null : { geoLocation: v.geoLocation }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                ...(v.subdivisionCode === undefined
                    ? null
                    : { subdivisionCode: v.subdivisionCode }),
            };
        });
}

/** @internal */
export const GetCompaniesCompaniesType$ = z.nativeEnum(GetCompaniesCompaniesType);

/** @internal */
export namespace GetCompaniesAdditionalInfo$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<GetCompaniesAdditionalInfo, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetCompaniesAdditionalInfo> =
        z.object({});
}

/** @internal */
export namespace GetCompaniesSocialProfiles$ {
    export type Inbound = {
        type?: GetCompaniesCompaniesType | undefined;
        username?: string | undefined;
        displayName?: string | undefined;
        url?: string | undefined;
        avatarUrl?: string | undefined;
        email?: string | undefined;
        additionalInfo?: GetCompaniesAdditionalInfo$.Inbound | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<GetCompaniesSocialProfiles, z.ZodTypeDef, Inbound> = z
        .object({
            type: GetCompaniesCompaniesType$.optional(),
            username: z.string().optional(),
            displayName: z.string().optional(),
            url: z.string().optional(),
            avatarUrl: z.string().optional(),
            email: z.string().optional(),
            additionalInfo: z.lazy(() => GetCompaniesAdditionalInfo$.inboundSchema).optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.username === undefined ? null : { username: v.username }),
                ...(v.displayName === undefined ? null : { displayName: v.displayName }),
                ...(v.url === undefined ? null : { url: v.url }),
                ...(v.avatarUrl === undefined ? null : { avatarUrl: v.avatarUrl }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.additionalInfo === undefined ? null : { additionalInfo: v.additionalInfo }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });

    export type Outbound = {
        type?: GetCompaniesCompaniesType | undefined;
        username?: string | undefined;
        displayName?: string | undefined;
        url?: string | undefined;
        avatarUrl?: string | undefined;
        email?: string | undefined;
        additionalInfo?: GetCompaniesAdditionalInfo$.Outbound | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetCompaniesSocialProfiles> = z
        .object({
            type: GetCompaniesCompaniesType$.optional(),
            username: z.string().optional(),
            displayName: z.string().optional(),
            url: z.string().optional(),
            avatarUrl: z.string().optional(),
            email: z.string().optional(),
            additionalInfo: z.lazy(() => GetCompaniesAdditionalInfo$.outboundSchema).optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.username === undefined ? null : { username: v.username }),
                ...(v.displayName === undefined ? null : { displayName: v.displayName }),
                ...(v.url === undefined ? null : { url: v.url }),
                ...(v.avatarUrl === undefined ? null : { avatarUrl: v.avatarUrl }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.additionalInfo === undefined ? null : { additionalInfo: v.additionalInfo }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });
}

/** @internal */
export namespace GetCompaniesCompaniesAddress$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<GetCompaniesCompaniesAddress, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetCompaniesCompaniesAddress> =
        z.object({});
}

/** @internal */
export namespace GetCompaniesAddresses$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<GetCompaniesAddresses, z.ZodTypeDef, Inbound> = z.object(
        {}
    );

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetCompaniesAddresses> =
        z.object({});
}

/** @internal */
export namespace GetCompaniesNotes$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<GetCompaniesNotes, z.ZodTypeDef, Inbound> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetCompaniesNotes> = z.object(
        {}
    );
}

/** @internal */
export namespace GetCompaniesCompaniesSocialProfiles$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<
        GetCompaniesCompaniesSocialProfiles,
        z.ZodTypeDef,
        Inbound
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetCompaniesCompaniesSocialProfiles
    > = z.object({});
}

/** @internal */
export namespace GetCompaniesCompaniesCustomFields$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<
        GetCompaniesCompaniesCustomFields,
        z.ZodTypeDef,
        Inbound
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetCompaniesCompaniesCustomFields
    > = z.object({});
}

/** @internal */
export namespace GetCompaniesAdditionalContacts$ {
    export type Inbound = {
        id?: string | undefined;
        firstName?: string | undefined;
        lastName?: string | undefined;
        company?: string | undefined;
        email?: string | undefined;
        emails?: Array<string> | undefined;
        phone?: string | undefined;
        phones?: Array<string> | undefined;
        address?: GetCompaniesCompaniesAddress$.Inbound | undefined;
        addresses?: Array<GetCompaniesAddresses$.Inbound> | undefined;
        birthday?: number | undefined;
        relationship?: string | undefined;
        note?: string | undefined;
        notes?: GetCompaniesNotes$.Inbound | undefined;
        tags?: Array<string> | undefined;
        websites?: Array<string> | undefined;
        socialProfiles?: Array<GetCompaniesCompaniesSocialProfiles$.Inbound> | undefined;
        customFields?: Array<GetCompaniesCompaniesCustomFields$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<GetCompaniesAdditionalContacts, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            firstName: z.string().optional(),
            lastName: z.string().optional(),
            company: z.string().optional(),
            email: z.string().optional(),
            emails: z.array(z.string()).optional(),
            phone: z.string().optional(),
            phones: z.array(z.string()).optional(),
            address: z.lazy(() => GetCompaniesCompaniesAddress$.inboundSchema).optional(),
            addresses: z.array(z.lazy(() => GetCompaniesAddresses$.inboundSchema)).optional(),
            birthday: z.number().optional(),
            relationship: z.string().optional(),
            note: z.string().optional(),
            notes: z.lazy(() => GetCompaniesNotes$.inboundSchema).optional(),
            tags: z.array(z.string()).optional(),
            websites: z.array(z.string()).optional(),
            socialProfiles: z
                .array(z.lazy(() => GetCompaniesCompaniesSocialProfiles$.inboundSchema))
                .optional(),
            customFields: z
                .array(z.lazy(() => GetCompaniesCompaniesCustomFields$.inboundSchema))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.company === undefined ? null : { company: v.company }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.emails === undefined ? null : { emails: v.emails }),
                ...(v.phone === undefined ? null : { phone: v.phone }),
                ...(v.phones === undefined ? null : { phones: v.phones }),
                ...(v.address === undefined ? null : { address: v.address }),
                ...(v.addresses === undefined ? null : { addresses: v.addresses }),
                ...(v.birthday === undefined ? null : { birthday: v.birthday }),
                ...(v.relationship === undefined ? null : { relationship: v.relationship }),
                ...(v.note === undefined ? null : { note: v.note }),
                ...(v.notes === undefined ? null : { notes: v.notes }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
                ...(v.websites === undefined ? null : { websites: v.websites }),
                ...(v.socialProfiles === undefined ? null : { socialProfiles: v.socialProfiles }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        firstName?: string | undefined;
        lastName?: string | undefined;
        company?: string | undefined;
        email?: string | undefined;
        emails?: Array<string> | undefined;
        phone?: string | undefined;
        phones?: Array<string> | undefined;
        address?: GetCompaniesCompaniesAddress$.Outbound | undefined;
        addresses?: Array<GetCompaniesAddresses$.Outbound> | undefined;
        birthday?: number | undefined;
        relationship?: string | undefined;
        note?: string | undefined;
        notes?: GetCompaniesNotes$.Outbound | undefined;
        tags?: Array<string> | undefined;
        websites?: Array<string> | undefined;
        socialProfiles?: Array<GetCompaniesCompaniesSocialProfiles$.Outbound> | undefined;
        customFields?: Array<GetCompaniesCompaniesCustomFields$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetCompaniesAdditionalContacts> =
        z
            .object({
                id: z.string().optional(),
                firstName: z.string().optional(),
                lastName: z.string().optional(),
                company: z.string().optional(),
                email: z.string().optional(),
                emails: z.array(z.string()).optional(),
                phone: z.string().optional(),
                phones: z.array(z.string()).optional(),
                address: z.lazy(() => GetCompaniesCompaniesAddress$.outboundSchema).optional(),
                addresses: z.array(z.lazy(() => GetCompaniesAddresses$.outboundSchema)).optional(),
                birthday: z.number().optional(),
                relationship: z.string().optional(),
                note: z.string().optional(),
                notes: z.lazy(() => GetCompaniesNotes$.outboundSchema).optional(),
                tags: z.array(z.string()).optional(),
                websites: z.array(z.string()).optional(),
                socialProfiles: z
                    .array(z.lazy(() => GetCompaniesCompaniesSocialProfiles$.outboundSchema))
                    .optional(),
                customFields: z
                    .array(z.lazy(() => GetCompaniesCompaniesCustomFields$.outboundSchema))
                    .optional(),
            })
            .transform((v) => {
                return {
                    ...(v.id === undefined ? null : { id: v.id }),
                    ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                    ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                    ...(v.company === undefined ? null : { company: v.company }),
                    ...(v.email === undefined ? null : { email: v.email }),
                    ...(v.emails === undefined ? null : { emails: v.emails }),
                    ...(v.phone === undefined ? null : { phone: v.phone }),
                    ...(v.phones === undefined ? null : { phones: v.phones }),
                    ...(v.address === undefined ? null : { address: v.address }),
                    ...(v.addresses === undefined ? null : { addresses: v.addresses }),
                    ...(v.birthday === undefined ? null : { birthday: v.birthday }),
                    ...(v.relationship === undefined ? null : { relationship: v.relationship }),
                    ...(v.note === undefined ? null : { note: v.note }),
                    ...(v.notes === undefined ? null : { notes: v.notes }),
                    ...(v.tags === undefined ? null : { tags: v.tags }),
                    ...(v.websites === undefined ? null : { websites: v.websites }),
                    ...(v.socialProfiles === undefined
                        ? null
                        : { socialProfiles: v.socialProfiles }),
                    ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                };
            });
}

/** @internal */
export namespace GetCompaniesUnified$ {
    export type Inbound = {
        id?: number | undefined;
        name?: string | undefined;
        legalName?: string | undefined;
        type?: string | undefined;
        industry?: string | undefined;
        address?: GetCompaniesAddress$.Inbound | undefined;
        phone?: string | undefined;
        email?: string | undefined;
        website?: string | undefined;
        foundedDate?: number | undefined;
        numberOfEmployees?: number | undefined;
        revenue?: number | undefined;
        revenueCurrency?: string | undefined;
        tags?: Array<string> | undefined;
        socialProfiles?: Array<GetCompaniesSocialProfiles$.Inbound> | undefined;
        logo?: string | undefined;
        description?: string | undefined;
        stockSymbol?: string | undefined;
        parentCompanyId?: string | undefined;
        additionalContacts?: Array<GetCompaniesAdditionalContacts$.Inbound> | undefined;
        incorporationCountry?: string | undefined;
        incorporationDate?: number | undefined;
        taxId?: string | undefined;
        regulatoryStatus?: string | undefined;
        dunsNumber?: string | undefined;
    };

    export const inboundSchema: z.ZodType<GetCompaniesUnified, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.number().optional(),
            name: z.string().optional(),
            legalName: z.string().optional(),
            type: z.string().optional(),
            industry: z.string().optional(),
            address: z.lazy(() => GetCompaniesAddress$.inboundSchema).optional(),
            phone: z.string().optional(),
            email: z.string().optional(),
            website: z.string().optional(),
            foundedDate: z.number().optional(),
            numberOfEmployees: z.number().optional(),
            revenue: z.number().optional(),
            revenueCurrency: z.string().optional(),
            tags: z.array(z.string()).optional(),
            socialProfiles: z
                .array(z.lazy(() => GetCompaniesSocialProfiles$.inboundSchema))
                .optional(),
            logo: z.string().optional(),
            description: z.string().optional(),
            stockSymbol: z.string().optional(),
            parentCompanyId: z.string().optional(),
            additionalContacts: z
                .array(z.lazy(() => GetCompaniesAdditionalContacts$.inboundSchema))
                .optional(),
            incorporationCountry: z.string().optional(),
            incorporationDate: z.number().optional(),
            taxId: z.string().optional(),
            regulatoryStatus: z.string().optional(),
            dunsNumber: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.legalName === undefined ? null : { legalName: v.legalName }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.industry === undefined ? null : { industry: v.industry }),
                ...(v.address === undefined ? null : { address: v.address }),
                ...(v.phone === undefined ? null : { phone: v.phone }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.website === undefined ? null : { website: v.website }),
                ...(v.foundedDate === undefined ? null : { foundedDate: v.foundedDate }),
                ...(v.numberOfEmployees === undefined
                    ? null
                    : { numberOfEmployees: v.numberOfEmployees }),
                ...(v.revenue === undefined ? null : { revenue: v.revenue }),
                ...(v.revenueCurrency === undefined
                    ? null
                    : { revenueCurrency: v.revenueCurrency }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
                ...(v.socialProfiles === undefined ? null : { socialProfiles: v.socialProfiles }),
                ...(v.logo === undefined ? null : { logo: v.logo }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.stockSymbol === undefined ? null : { stockSymbol: v.stockSymbol }),
                ...(v.parentCompanyId === undefined
                    ? null
                    : { parentCompanyId: v.parentCompanyId }),
                ...(v.additionalContacts === undefined
                    ? null
                    : { additionalContacts: v.additionalContacts }),
                ...(v.incorporationCountry === undefined
                    ? null
                    : { incorporationCountry: v.incorporationCountry }),
                ...(v.incorporationDate === undefined
                    ? null
                    : { incorporationDate: v.incorporationDate }),
                ...(v.taxId === undefined ? null : { taxId: v.taxId }),
                ...(v.regulatoryStatus === undefined
                    ? null
                    : { regulatoryStatus: v.regulatoryStatus }),
                ...(v.dunsNumber === undefined ? null : { dunsNumber: v.dunsNumber }),
            };
        });

    export type Outbound = {
        id?: number | undefined;
        name?: string | undefined;
        legalName?: string | undefined;
        type?: string | undefined;
        industry?: string | undefined;
        address?: GetCompaniesAddress$.Outbound | undefined;
        phone?: string | undefined;
        email?: string | undefined;
        website?: string | undefined;
        foundedDate?: number | undefined;
        numberOfEmployees?: number | undefined;
        revenue?: number | undefined;
        revenueCurrency?: string | undefined;
        tags?: Array<string> | undefined;
        socialProfiles?: Array<GetCompaniesSocialProfiles$.Outbound> | undefined;
        logo?: string | undefined;
        description?: string | undefined;
        stockSymbol?: string | undefined;
        parentCompanyId?: string | undefined;
        additionalContacts?: Array<GetCompaniesAdditionalContacts$.Outbound> | undefined;
        incorporationCountry?: string | undefined;
        incorporationDate?: number | undefined;
        taxId?: string | undefined;
        regulatoryStatus?: string | undefined;
        dunsNumber?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetCompaniesUnified> = z
        .object({
            id: z.number().optional(),
            name: z.string().optional(),
            legalName: z.string().optional(),
            type: z.string().optional(),
            industry: z.string().optional(),
            address: z.lazy(() => GetCompaniesAddress$.outboundSchema).optional(),
            phone: z.string().optional(),
            email: z.string().optional(),
            website: z.string().optional(),
            foundedDate: z.number().optional(),
            numberOfEmployees: z.number().optional(),
            revenue: z.number().optional(),
            revenueCurrency: z.string().optional(),
            tags: z.array(z.string()).optional(),
            socialProfiles: z
                .array(z.lazy(() => GetCompaniesSocialProfiles$.outboundSchema))
                .optional(),
            logo: z.string().optional(),
            description: z.string().optional(),
            stockSymbol: z.string().optional(),
            parentCompanyId: z.string().optional(),
            additionalContacts: z
                .array(z.lazy(() => GetCompaniesAdditionalContacts$.outboundSchema))
                .optional(),
            incorporationCountry: z.string().optional(),
            incorporationDate: z.number().optional(),
            taxId: z.string().optional(),
            regulatoryStatus: z.string().optional(),
            dunsNumber: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.legalName === undefined ? null : { legalName: v.legalName }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.industry === undefined ? null : { industry: v.industry }),
                ...(v.address === undefined ? null : { address: v.address }),
                ...(v.phone === undefined ? null : { phone: v.phone }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.website === undefined ? null : { website: v.website }),
                ...(v.foundedDate === undefined ? null : { foundedDate: v.foundedDate }),
                ...(v.numberOfEmployees === undefined
                    ? null
                    : { numberOfEmployees: v.numberOfEmployees }),
                ...(v.revenue === undefined ? null : { revenue: v.revenue }),
                ...(v.revenueCurrency === undefined
                    ? null
                    : { revenueCurrency: v.revenueCurrency }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
                ...(v.socialProfiles === undefined ? null : { socialProfiles: v.socialProfiles }),
                ...(v.logo === undefined ? null : { logo: v.logo }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.stockSymbol === undefined ? null : { stockSymbol: v.stockSymbol }),
                ...(v.parentCompanyId === undefined
                    ? null
                    : { parentCompanyId: v.parentCompanyId }),
                ...(v.additionalContacts === undefined
                    ? null
                    : { additionalContacts: v.additionalContacts }),
                ...(v.incorporationCountry === undefined
                    ? null
                    : { incorporationCountry: v.incorporationCountry }),
                ...(v.incorporationDate === undefined
                    ? null
                    : { incorporationDate: v.incorporationDate }),
                ...(v.taxId === undefined ? null : { taxId: v.taxId }),
                ...(v.regulatoryStatus === undefined
                    ? null
                    : { regulatoryStatus: v.regulatoryStatus }),
                ...(v.dunsNumber === undefined ? null : { dunsNumber: v.dunsNumber }),
            };
        });
}

/** @internal */
export namespace GetCompaniesPassthrough$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<GetCompaniesPassthrough, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetCompaniesPassthrough> =
        z.object({});
}

/** @internal */
export namespace GetCompaniesCache$ {
    export type Inbound = {
        hit?: boolean | undefined;
        ttl?: number | undefined;
        key?: string | undefined;
    };

    export const inboundSchema: z.ZodType<GetCompaniesCache, z.ZodTypeDef, Inbound> = z
        .object({
            hit: z.boolean().optional(),
            ttl: z.number().int().optional(),
            key: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.hit === undefined ? null : { hit: v.hit }),
                ...(v.ttl === undefined ? null : { ttl: v.ttl }),
                ...(v.key === undefined ? null : { key: v.key }),
            };
        });

    export type Outbound = {
        hit?: boolean | undefined;
        ttl?: number | undefined;
        key?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetCompaniesCache> = z
        .object({
            hit: z.boolean().optional(),
            ttl: z.number().int().optional(),
            key: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.hit === undefined ? null : { hit: v.hit }),
                ...(v.ttl === undefined ? null : { ttl: v.ttl }),
                ...(v.key === undefined ? null : { key: v.key }),
            };
        });
}

/** @internal */
export namespace GetCompaniesMeta$ {
    export type Inbound = {
        timestamp?: number | undefined;
        latency?: number | undefined;
        platformRateLimitRemaining?: number | undefined;
        rateLimitRemaining?: number | undefined;
        cache?: GetCompaniesCache$.Inbound | undefined;
        transactionKey?: string | undefined;
        txn?: string | undefined;
        platform?: string | undefined;
        platformVersion?: string | undefined;
        connectionDefinitionKey?: string | undefined;
        action?: string | undefined;
        commonModel?: string | undefined;
        commonModelVersion?: string | undefined;
        connectionKey?: string | undefined;
        hash?: string | undefined;
        heartbeats?: Array<string> | undefined;
        totalTransactions?: number | undefined;
    };

    export const inboundSchema: z.ZodType<GetCompaniesMeta, z.ZodTypeDef, Inbound> = z
        .object({
            timestamp: z.number().int().optional(),
            latency: z.number().int().optional(),
            platformRateLimitRemaining: z.number().int().optional(),
            rateLimitRemaining: z.number().int().optional(),
            cache: z.lazy(() => GetCompaniesCache$.inboundSchema).optional(),
            transactionKey: z.string().optional(),
            txn: z.string().optional(),
            platform: z.string().optional(),
            platformVersion: z.string().optional(),
            connectionDefinitionKey: z.string().optional(),
            action: z.string().optional(),
            commonModel: z.string().optional(),
            commonModelVersion: z.string().optional(),
            connectionKey: z.string().optional(),
            hash: z.string().optional(),
            heartbeats: z.array(z.string()).optional(),
            totalTransactions: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.timestamp === undefined ? null : { timestamp: v.timestamp }),
                ...(v.latency === undefined ? null : { latency: v.latency }),
                ...(v.platformRateLimitRemaining === undefined
                    ? null
                    : { platformRateLimitRemaining: v.platformRateLimitRemaining }),
                ...(v.rateLimitRemaining === undefined
                    ? null
                    : { rateLimitRemaining: v.rateLimitRemaining }),
                ...(v.cache === undefined ? null : { cache: v.cache }),
                ...(v.transactionKey === undefined ? null : { transactionKey: v.transactionKey }),
                ...(v.txn === undefined ? null : { txn: v.txn }),
                ...(v.platform === undefined ? null : { platform: v.platform }),
                ...(v.platformVersion === undefined
                    ? null
                    : { platformVersion: v.platformVersion }),
                ...(v.connectionDefinitionKey === undefined
                    ? null
                    : { connectionDefinitionKey: v.connectionDefinitionKey }),
                ...(v.action === undefined ? null : { action: v.action }),
                ...(v.commonModel === undefined ? null : { commonModel: v.commonModel }),
                ...(v.commonModelVersion === undefined
                    ? null
                    : { commonModelVersion: v.commonModelVersion }),
                ...(v.connectionKey === undefined ? null : { connectionKey: v.connectionKey }),
                ...(v.hash === undefined ? null : { hash: v.hash }),
                ...(v.heartbeats === undefined ? null : { heartbeats: v.heartbeats }),
                ...(v.totalTransactions === undefined
                    ? null
                    : { totalTransactions: v.totalTransactions }),
            };
        });

    export type Outbound = {
        timestamp?: number | undefined;
        latency?: number | undefined;
        platformRateLimitRemaining?: number | undefined;
        rateLimitRemaining?: number | undefined;
        cache?: GetCompaniesCache$.Outbound | undefined;
        transactionKey?: string | undefined;
        txn?: string | undefined;
        platform?: string | undefined;
        platformVersion?: string | undefined;
        connectionDefinitionKey?: string | undefined;
        action?: string | undefined;
        commonModel?: string | undefined;
        commonModelVersion?: string | undefined;
        connectionKey?: string | undefined;
        hash?: string | undefined;
        heartbeats?: Array<string> | undefined;
        totalTransactions?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetCompaniesMeta> = z
        .object({
            timestamp: z.number().int().optional(),
            latency: z.number().int().optional(),
            platformRateLimitRemaining: z.number().int().optional(),
            rateLimitRemaining: z.number().int().optional(),
            cache: z.lazy(() => GetCompaniesCache$.outboundSchema).optional(),
            transactionKey: z.string().optional(),
            txn: z.string().optional(),
            platform: z.string().optional(),
            platformVersion: z.string().optional(),
            connectionDefinitionKey: z.string().optional(),
            action: z.string().optional(),
            commonModel: z.string().optional(),
            commonModelVersion: z.string().optional(),
            connectionKey: z.string().optional(),
            hash: z.string().optional(),
            heartbeats: z.array(z.string()).optional(),
            totalTransactions: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.timestamp === undefined ? null : { timestamp: v.timestamp }),
                ...(v.latency === undefined ? null : { latency: v.latency }),
                ...(v.platformRateLimitRemaining === undefined
                    ? null
                    : { platformRateLimitRemaining: v.platformRateLimitRemaining }),
                ...(v.rateLimitRemaining === undefined
                    ? null
                    : { rateLimitRemaining: v.rateLimitRemaining }),
                ...(v.cache === undefined ? null : { cache: v.cache }),
                ...(v.transactionKey === undefined ? null : { transactionKey: v.transactionKey }),
                ...(v.txn === undefined ? null : { txn: v.txn }),
                ...(v.platform === undefined ? null : { platform: v.platform }),
                ...(v.platformVersion === undefined
                    ? null
                    : { platformVersion: v.platformVersion }),
                ...(v.connectionDefinitionKey === undefined
                    ? null
                    : { connectionDefinitionKey: v.connectionDefinitionKey }),
                ...(v.action === undefined ? null : { action: v.action }),
                ...(v.commonModel === undefined ? null : { commonModel: v.commonModel }),
                ...(v.commonModelVersion === undefined
                    ? null
                    : { commonModelVersion: v.commonModelVersion }),
                ...(v.connectionKey === undefined ? null : { connectionKey: v.connectionKey }),
                ...(v.hash === undefined ? null : { hash: v.hash }),
                ...(v.heartbeats === undefined ? null : { heartbeats: v.heartbeats }),
                ...(v.totalTransactions === undefined
                    ? null
                    : { totalTransactions: v.totalTransactions }),
            };
        });
}

/** @internal */
export namespace GetCompaniesPagination$ {
    export type Inbound = {
        cursor?: string | undefined;
        limit?: number | undefined;
    };

    export const inboundSchema: z.ZodType<GetCompaniesPagination, z.ZodTypeDef, Inbound> = z
        .object({
            cursor: z.string().optional(),
            limit: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.cursor === undefined ? null : { cursor: v.cursor }),
                ...(v.limit === undefined ? null : { limit: v.limit }),
            };
        });

    export type Outbound = {
        cursor?: string | undefined;
        limit?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetCompaniesPagination> = z
        .object({
            cursor: z.string().optional(),
            limit: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.cursor === undefined ? null : { cursor: v.cursor }),
                ...(v.limit === undefined ? null : { limit: v.limit }),
            };
        });
}

/** @internal */
export namespace GetCompaniesResponseBody$ {
    export type Inbound = {
        status?: string | undefined;
        statusCode?: GetCompaniesStatusCode | undefined;
        unified?: Array<GetCompaniesUnified$.Inbound> | undefined;
        passthrough?: GetCompaniesPassthrough$.Inbound | undefined;
        meta?: GetCompaniesMeta$.Inbound | undefined;
        pagination?: GetCompaniesPagination$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<GetCompaniesResponseBody, z.ZodTypeDef, Inbound> = z
        .object({
            status: z.string().optional(),
            statusCode: GetCompaniesStatusCode$.optional(),
            unified: z.array(z.lazy(() => GetCompaniesUnified$.inboundSchema)).optional(),
            passthrough: z.lazy(() => GetCompaniesPassthrough$.inboundSchema).optional(),
            meta: z.lazy(() => GetCompaniesMeta$.inboundSchema).optional(),
            pagination: z.lazy(() => GetCompaniesPagination$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.statusCode === undefined ? null : { statusCode: v.statusCode }),
                ...(v.unified === undefined ? null : { unified: v.unified }),
                ...(v.passthrough === undefined ? null : { passthrough: v.passthrough }),
                ...(v.meta === undefined ? null : { meta: v.meta }),
                ...(v.pagination === undefined ? null : { pagination: v.pagination }),
            };
        });

    export type Outbound = {
        status?: string | undefined;
        statusCode?: GetCompaniesStatusCode | undefined;
        unified?: Array<GetCompaniesUnified$.Outbound> | undefined;
        passthrough?: GetCompaniesPassthrough$.Outbound | undefined;
        meta?: GetCompaniesMeta$.Outbound | undefined;
        pagination?: GetCompaniesPagination$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetCompaniesResponseBody> = z
        .object({
            status: z.string().optional(),
            statusCode: GetCompaniesStatusCode$.optional(),
            unified: z.array(z.lazy(() => GetCompaniesUnified$.outboundSchema)).optional(),
            passthrough: z.lazy(() => GetCompaniesPassthrough$.outboundSchema).optional(),
            meta: z.lazy(() => GetCompaniesMeta$.outboundSchema).optional(),
            pagination: z.lazy(() => GetCompaniesPagination$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.statusCode === undefined ? null : { statusCode: v.statusCode }),
                ...(v.unified === undefined ? null : { unified: v.unified }),
                ...(v.passthrough === undefined ? null : { passthrough: v.passthrough }),
                ...(v.meta === undefined ? null : { meta: v.meta }),
                ...(v.pagination === undefined ? null : { pagination: v.pagination }),
            };
        });
}

/** @internal */
export namespace GetCompaniesResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        object?: GetCompaniesResponseBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<GetCompaniesResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => GetCompaniesResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: GetCompaniesResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetCompaniesResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z.lazy(() => GetCompaniesResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
