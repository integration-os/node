/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export enum PatchTicketsIdStatus {
    Open = "open",
    Pending = "pending",
    Closed = "closed",
    OnHold = "onHold",
    Resolved = "resolved",
    Cancelled = "cancelled",
    InProgress = "inProgress",
}

export enum PatchTicketsIdPriority {
    Low = "low",
    Medium = "medium",
    High = "high",
    Urgent = "urgent",
}

export enum PatchTicketsIdType {
    Question = "question",
    Incident = "incident",
    Problem = "problem",
    Task = "task",
    Bug = "bug",
    FeatureRequest = "featureRequest",
}

export enum PatchTicketsIdMimeType {
    ImageJpeg = "image/jpeg",
    ImagePng = "image/png",
    ImageGif = "image/gif",
    ImageSvgPlusXml = "image/svg+xml",
    ImageWebp = "image/webp",
}

export type PatchTicketsIdProfilePicture = {
    id?: string | undefined;
    src?: string | undefined;
    altText?: string | undefined;
    width?: number | undefined;
    height?: number | undefined;
    thumbnailSrc?: string | undefined;
    caption?: string | undefined;
    title?: string | undefined;
    mimeType?: PatchTicketsIdMimeType | undefined;
    tags?: Array<string> | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    active?: boolean | undefined;
    deleted?: boolean | undefined;
};

export enum PatchTicketsIdTicketsMimeType {
    ImageJpeg = "image/jpeg",
    ImagePng = "image/png",
    ImageGif = "image/gif",
    ImageSvgPlusXml = "image/svg+xml",
    ImageWebp = "image/webp",
}

export type PatchTicketsIdCoverPhoto = {
    id?: string | undefined;
    src?: string | undefined;
    altText?: string | undefined;
    width?: number | undefined;
    height?: number | undefined;
    thumbnailSrc?: string | undefined;
    caption?: string | undefined;
    title?: string | undefined;
    mimeType?: PatchTicketsIdTicketsMimeType | undefined;
    tags?: Array<string> | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    active?: boolean | undefined;
    deleted?: boolean | undefined;
};

export enum PatchTicketsIdGender {
    Male = "Male",
    Female = "Female",
    Other = "Other",
    PreferNotToSay = "Prefer not to say",
}

export enum PatchTicketsIdTicketsType {
    Home = "home",
    Work = "work",
    Other = "other",
}

export type PatchTicketsIdGeoLocation = {};

export type PatchTicketsIdCustomFields = {};

export type PatchTicketsIdAddresses = {
    id?: string | undefined;
    contactId?: string | undefined;
    accountId?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    name?: string | undefined;
    companyName?: string | undefined;
    email?: string | undefined;
    phone?: string | undefined;
    street?: string | undefined;
    addressLine2?: string | undefined;
    city?: string | undefined;
    province?: string | undefined;
    region?: string | undefined;
    postalCode?: string | undefined;
    postalCodeExtension?: string | undefined;
    country?: string | undefined;
    countryCode?: string | undefined;
    type?: PatchTicketsIdTicketsType | undefined;
    geoLocation?: PatchTicketsIdGeoLocation | undefined;
    customFields?: Array<PatchTicketsIdCustomFields> | undefined;
    subdivisionCode?: string | undefined;
};

export enum PatchTicketsIdRoles {
    User = "User",
    Admin = "Admin",
    Moderator = "Moderator",
}

export enum PatchTicketsIdCommunications {
    Email = "Email",
    Sms = "SMS",
    PushNotification = "PushNotification",
}

export type PatchTicketsIdPreferences = {
    id?: string | undefined;
    language?: string | undefined;
    currency?: string | undefined;
    timeZone?: string | undefined;
    communications?: PatchTicketsIdCommunications | undefined;
};

export enum PatchTicketsIdTicketsRequestType {
    Facebook = "facebook",
    Twitter = "twitter",
    Linkedin = "linkedin",
    Instagram = "instagram",
    Tiktok = "tiktok",
    Pinterest = "pinterest",
    Youtube = "youtube",
    Other = "other",
}

export enum PatchTicketsIdTicketsRequestRequestBodyType {
    String = "String",
    Number = "Number",
    Boolean = "Boolean",
    Date = "Date",
    Json = "Json",
    Array = "Array",
}

export type PatchTicketsIdAdditionalInfo = {
    id?: string | undefined;
    key?: string | undefined;
    value?: string | undefined;
    type?: PatchTicketsIdTicketsRequestRequestBodyType | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    entityId?: string | undefined;
    entityType?: string | undefined;
};

export type PatchTicketsIdSocialLinks = {
    type?: PatchTicketsIdTicketsRequestType | undefined;
    username?: string | undefined;
    displayName?: string | undefined;
    url?: string | undefined;
    avatarUrl?: string | undefined;
    email?: string | undefined;
    additionalInfo?: PatchTicketsIdAdditionalInfo | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    active?: boolean | undefined;
    deleted?: boolean | undefined;
};

export enum PatchTicketsIdTicketsStatus {
    Pending = "Pending",
    Verified = "Verified",
    Suspended = "Suspended",
    Inactive = "Inactive",
}

export enum PatchTicketsIdProvider {
    Google = "Google",
    Facebook = "Facebook",
    Twitter = "Twitter",
    LinkedIn = "LinkedIn",
    Microsoft = "Microsoft",
    Apple = "Apple",
    Other = "Other",
}

export type PatchTicketsIdSso = {
    provider?: PatchTicketsIdProvider | undefined;
    providerUserId?: string | undefined;
    profileUrl?: string | undefined;
    accessToken?: string | undefined;
    refreshToken?: string | undefined;
    expiresIn?: number | undefined;
    expiryDate?: number | undefined;
    scopes?: Array<string> | undefined;
    tokenType?: string | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    active?: boolean | undefined;
    deleted?: boolean | undefined;
};

export enum PatchTicketsIdTicketsRequestRequestBodyAssigneeType {
    CreditCard = "CreditCard",
    PayPal = "PayPal",
    BankTransfer = "BankTransfer",
    CryptoCurrency = "CryptoCurrency",
}

export type PatchTicketsIdPaymentMethods = {
    id?: string | undefined;
    type?: PatchTicketsIdTicketsRequestRequestBodyAssigneeType | undefined;
    details?: string | undefined;
    isDefault?: boolean | undefined;
};

export type PatchTicketsIdAssignee = {
    id?: string | undefined;
    firstName?: string | undefined;
    middleName?: string | undefined;
    lastName?: string | undefined;
    email?: string | undefined;
    username?: string | undefined;
    password?: string | undefined;
    profilePicture?: PatchTicketsIdProfilePicture | undefined;
    coverPhoto?: PatchTicketsIdCoverPhoto | undefined;
    gender?: PatchTicketsIdGender | undefined;
    dateOfBirth?: number | undefined;
    phoneNumber?: string | undefined;
    isActive?: boolean | undefined;
    lastLogin?: number | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    addresses?: Array<PatchTicketsIdAddresses> | undefined;
    roles?: Array<PatchTicketsIdRoles> | undefined;
    preferences?: PatchTicketsIdPreferences | undefined;
    bio?: string | undefined;
    website?: string | undefined;
    socialLinks?: PatchTicketsIdSocialLinks | undefined;
    status?: PatchTicketsIdTicketsStatus | undefined;
    sso?: Array<PatchTicketsIdSso> | undefined;
    paymentMethods?: PatchTicketsIdPaymentMethods | undefined;
};

export enum PatchTicketsIdTicketsRequestRequestBodyReporterType {
    Personal = "personal",
    Business = "business",
    Other = "other",
}

export type PatchTicketsIdEmails = {
    email?: string | undefined;
    type?: PatchTicketsIdTicketsRequestRequestBodyReporterType | undefined;
};

export enum PatchTicketsIdTicketsRequestRequestBodyReporterPhonesType {
    Personal = "personal",
    Business = "business",
    Other = "other",
}

export type PatchTicketsIdPhones = {
    phone?: string | undefined;
    country?: string | undefined;
    countryCode?: string | undefined;
    type?: PatchTicketsIdTicketsRequestRequestBodyReporterPhonesType | undefined;
};

export enum PatchTicketsIdTicketsRequestRequestBodyReporterAddressType {
    Home = "home",
    Work = "work",
    Other = "other",
}

export type PatchTicketsIdTicketsGeoLocation = {
    latitude?: number | undefined;
    longitude?: number | undefined;
    altitude?: number | undefined;
    accuracy?: number | undefined;
    altitudeAccuracy?: number | undefined;
    heading?: number | undefined;
    speed?: number | undefined;
    timestamp?: number | undefined;
};

export enum PatchTicketsIdFieldType {
    Text = "text",
    Number = "number",
    Date = "date",
    Boolean = "boolean",
    Enum = "enum",
    Json = "json",
    Array = "array",
}

export type PatchTicketsIdTicketsCustomFields = {
    id?: string | undefined;
    fieldName?: string | undefined;
    fieldValue?: string | undefined;
    fieldType?: PatchTicketsIdFieldType | undefined;
};

export type PatchTicketsIdAddress = {
    id?: string | undefined;
    contactId?: string | undefined;
    accountId?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    name?: string | undefined;
    companyName?: string | undefined;
    email?: string | undefined;
    phone?: string | undefined;
    street?: string | undefined;
    addressLine2?: string | undefined;
    city?: string | undefined;
    province?: string | undefined;
    region?: string | undefined;
    postalCode?: string | undefined;
    postalCodeExtension?: string | undefined;
    country?: string | undefined;
    countryCode?: string | undefined;
    type?: PatchTicketsIdTicketsRequestRequestBodyReporterAddressType | undefined;
    geoLocation?: PatchTicketsIdTicketsGeoLocation | undefined;
    customFields?: Array<PatchTicketsIdTicketsCustomFields> | undefined;
    subdivisionCode?: string | undefined;
};

export enum PatchTicketsIdTicketsRequestRequestBodyReporterAddressesType {
    Home = "home",
    Work = "work",
    Other = "other",
}

export type PatchTicketsIdTicketsRequestGeoLocation = {};

export type PatchTicketsIdTicketsRequestCustomFields = {};

export type PatchTicketsIdTicketsAddresses = {
    id?: string | undefined;
    contactId?: string | undefined;
    accountId?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    name?: string | undefined;
    companyName?: string | undefined;
    email?: string | undefined;
    phone?: string | undefined;
    street?: string | undefined;
    addressLine2?: string | undefined;
    city?: string | undefined;
    province?: string | undefined;
    region?: string | undefined;
    postalCode?: string | undefined;
    postalCodeExtension?: string | undefined;
    country?: string | undefined;
    countryCode?: string | undefined;
    type?: PatchTicketsIdTicketsRequestRequestBodyReporterAddressesType | undefined;
    geoLocation?: PatchTicketsIdTicketsRequestGeoLocation | undefined;
    customFields?: Array<PatchTicketsIdTicketsRequestCustomFields> | undefined;
    subdivisionCode?: string | undefined;
};

export enum PatchTicketsIdTicketsPriority {
    Low = "low",
    Medium = "medium",
    High = "high",
}

export enum PatchTicketsIdTicketsRequestMimeType {
    ImageJpeg = "image/jpeg",
    ImagePng = "image/png",
    ImageGif = "image/gif",
    ImageSvgPlusXml = "image/svg+xml",
    ImageWebp = "image/webp",
}

export type PatchTicketsIdTicketsProfilePicture = {
    id?: string | undefined;
    src?: string | undefined;
    altText?: string | undefined;
    width?: number | undefined;
    height?: number | undefined;
    thumbnailSrc?: string | undefined;
    caption?: string | undefined;
    title?: string | undefined;
    mimeType?: PatchTicketsIdTicketsRequestMimeType | undefined;
    tags?: Array<string> | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    active?: boolean | undefined;
    deleted?: boolean | undefined;
};

export enum PatchTicketsIdTicketsRequestRequestBodyMimeType {
    ImageJpeg = "image/jpeg",
    ImagePng = "image/png",
    ImageGif = "image/gif",
    ImageSvgPlusXml = "image/svg+xml",
    ImageWebp = "image/webp",
}

export type PatchTicketsIdTicketsCoverPhoto = {
    id?: string | undefined;
    src?: string | undefined;
    altText?: string | undefined;
    width?: number | undefined;
    height?: number | undefined;
    thumbnailSrc?: string | undefined;
    caption?: string | undefined;
    title?: string | undefined;
    mimeType?: PatchTicketsIdTicketsRequestRequestBodyMimeType | undefined;
    tags?: Array<string> | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    active?: boolean | undefined;
    deleted?: boolean | undefined;
};

export enum PatchTicketsIdTicketsGender {
    Male = "Male",
    Female = "Female",
    Other = "Other",
    PreferNotToSay = "Prefer not to say",
}

export enum PatchTicketsIdTicketsRequestRequestBodyReporterNotesType {
    Home = "home",
    Work = "work",
    Other = "other",
}

export type PatchTicketsIdTicketsRequestRequestBodyGeoLocation = {};

export type PatchTicketsIdTicketsRequestRequestBodyCustomFields = {};

export type PatchTicketsIdTicketsRequestAddresses = {
    id?: string | undefined;
    contactId?: string | undefined;
    accountId?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    name?: string | undefined;
    companyName?: string | undefined;
    email?: string | undefined;
    phone?: string | undefined;
    street?: string | undefined;
    addressLine2?: string | undefined;
    city?: string | undefined;
    province?: string | undefined;
    region?: string | undefined;
    postalCode?: string | undefined;
    postalCodeExtension?: string | undefined;
    country?: string | undefined;
    countryCode?: string | undefined;
    type?: PatchTicketsIdTicketsRequestRequestBodyReporterNotesType | undefined;
    geoLocation?: PatchTicketsIdTicketsRequestRequestBodyGeoLocation | undefined;
    customFields?: Array<PatchTicketsIdTicketsRequestRequestBodyCustomFields> | undefined;
    subdivisionCode?: string | undefined;
};

export enum PatchTicketsIdTicketsRoles {
    User = "User",
    Admin = "Admin",
    Moderator = "Moderator",
}

export enum PatchTicketsIdTicketsCommunications {
    Email = "Email",
    Sms = "SMS",
    PushNotification = "PushNotification",
}

export type PatchTicketsIdTicketsPreferences = {
    id?: string | undefined;
    language?: string | undefined;
    currency?: string | undefined;
    timeZone?: string | undefined;
    communications?: PatchTicketsIdTicketsCommunications | undefined;
};

export enum PatchTicketsIdTicketsRequestRequestBodyReporterNotesAuthorType {
    Facebook = "facebook",
    Twitter = "twitter",
    Linkedin = "linkedin",
    Instagram = "instagram",
    Tiktok = "tiktok",
    Pinterest = "pinterest",
    Youtube = "youtube",
    Other = "other",
}

export enum PatchTicketsIdTicketsRequestRequestBodyReporterNotesAuthorSocialLinksType {
    String = "String",
    Number = "Number",
    Boolean = "Boolean",
    Date = "Date",
    Json = "Json",
    Array = "Array",
}

export type PatchTicketsIdTicketsAdditionalInfo = {
    id?: string | undefined;
    key?: string | undefined;
    value?: string | undefined;
    type?: PatchTicketsIdTicketsRequestRequestBodyReporterNotesAuthorSocialLinksType | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    entityId?: string | undefined;
    entityType?: string | undefined;
};

export type PatchTicketsIdTicketsSocialLinks = {
    type?: PatchTicketsIdTicketsRequestRequestBodyReporterNotesAuthorType | undefined;
    username?: string | undefined;
    displayName?: string | undefined;
    url?: string | undefined;
    avatarUrl?: string | undefined;
    email?: string | undefined;
    additionalInfo?: PatchTicketsIdTicketsAdditionalInfo | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    active?: boolean | undefined;
    deleted?: boolean | undefined;
};

export enum PatchTicketsIdTicketsRequestStatus {
    Pending = "Pending",
    Verified = "Verified",
    Suspended = "Suspended",
    Inactive = "Inactive",
}

export enum PatchTicketsIdTicketsProvider {
    Google = "Google",
    Facebook = "Facebook",
    Twitter = "Twitter",
    LinkedIn = "LinkedIn",
    Microsoft = "Microsoft",
    Apple = "Apple",
    Other = "Other",
}

export type PatchTicketsIdTicketsSso = {
    provider?: PatchTicketsIdTicketsProvider | undefined;
    providerUserId?: string | undefined;
    profileUrl?: string | undefined;
    accessToken?: string | undefined;
    refreshToken?: string | undefined;
    expiresIn?: number | undefined;
    expiryDate?: number | undefined;
    scopes?: Array<string> | undefined;
    tokenType?: string | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    active?: boolean | undefined;
    deleted?: boolean | undefined;
};

export enum PatchTicketsIdTicketsRequestRequestBodyReporterNotesAuthorPaymentMethodsType {
    CreditCard = "CreditCard",
    PayPal = "PayPal",
    BankTransfer = "BankTransfer",
    CryptoCurrency = "CryptoCurrency",
}

export type PatchTicketsIdTicketsPaymentMethods = {
    id?: string | undefined;
    type?: PatchTicketsIdTicketsRequestRequestBodyReporterNotesAuthorPaymentMethodsType | undefined;
    details?: string | undefined;
    isDefault?: boolean | undefined;
};

export type PatchTicketsIdAuthor = {
    id?: string | undefined;
    firstName?: string | undefined;
    middleName?: string | undefined;
    lastName?: string | undefined;
    email?: string | undefined;
    username?: string | undefined;
    password?: string | undefined;
    profilePicture?: PatchTicketsIdTicketsProfilePicture | undefined;
    coverPhoto?: PatchTicketsIdTicketsCoverPhoto | undefined;
    gender?: PatchTicketsIdTicketsGender | undefined;
    dateOfBirth?: number | undefined;
    phoneNumber?: string | undefined;
    isActive?: boolean | undefined;
    lastLogin?: number | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    addresses?: Array<PatchTicketsIdTicketsRequestAddresses> | undefined;
    roles?: Array<PatchTicketsIdTicketsRoles> | undefined;
    preferences?: PatchTicketsIdTicketsPreferences | undefined;
    bio?: string | undefined;
    website?: string | undefined;
    socialLinks?: PatchTicketsIdTicketsSocialLinks | undefined;
    status?: PatchTicketsIdTicketsRequestStatus | undefined;
    sso?: Array<PatchTicketsIdTicketsSso> | undefined;
    paymentMethods?: PatchTicketsIdTicketsPaymentMethods | undefined;
};

export type PatchTicketsIdMetadata = {};

export type PatchTicketsIdAssociatedWith = {};

export type PatchTicketsIdPermissions = {};

export type PatchTicketsIdAttachments = {
    id?: string | undefined;
    fileName?: string | undefined;
    fileSize?: number | undefined;
    fileType?: string | undefined;
    url?: string | undefined;
    thumbnailUrl?: string | undefined;
    previewUrl?: string | undefined;
    content?: string | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    metadata?: PatchTicketsIdMetadata | undefined;
    associatedWith?: PatchTicketsIdAssociatedWith | undefined;
    permissions?: PatchTicketsIdPermissions | undefined;
};

export type PatchTicketsIdTicketsRequestProfilePicture = {};

export type PatchTicketsIdTicketsRequestCoverPhoto = {};

export enum PatchTicketsIdTicketsRequestGender {
    Male = "Male",
    Female = "Female",
    Other = "Other",
    PreferNotToSay = "Prefer not to say",
}

export type PatchTicketsIdTicketsRequestRequestBodyAddresses = {};

export enum PatchTicketsIdTicketsRequestRoles {
    User = "User",
    Admin = "Admin",
    Moderator = "Moderator",
}

export type PatchTicketsIdTicketsRequestPreferences = {};

export type PatchTicketsIdTicketsRequestSocialLinks = {};

export enum PatchTicketsIdTicketsRequestRequestBodyStatus {
    Pending = "Pending",
    Verified = "Verified",
    Suspended = "Suspended",
    Inactive = "Inactive",
}

export type PatchTicketsIdTicketsRequestSso = {};

export type PatchTicketsIdTicketsRequestPaymentMethods = {};

export type PatchTicketsIdSharedWith = {
    id?: string | undefined;
    firstName?: string | undefined;
    middleName?: string | undefined;
    lastName?: string | undefined;
    email?: string | undefined;
    username?: string | undefined;
    password?: string | undefined;
    profilePicture?: PatchTicketsIdTicketsRequestProfilePicture | undefined;
    coverPhoto?: PatchTicketsIdTicketsRequestCoverPhoto | undefined;
    gender?: PatchTicketsIdTicketsRequestGender | undefined;
    dateOfBirth?: number | undefined;
    phoneNumber?: string | undefined;
    isActive?: boolean | undefined;
    lastLogin?: number | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    addresses?: Array<PatchTicketsIdTicketsRequestRequestBodyAddresses> | undefined;
    roles?: Array<PatchTicketsIdTicketsRequestRoles> | undefined;
    preferences?: PatchTicketsIdTicketsRequestPreferences | undefined;
    bio?: string | undefined;
    website?: string | undefined;
    socialLinks?: PatchTicketsIdTicketsRequestSocialLinks | undefined;
    status?: PatchTicketsIdTicketsRequestRequestBodyStatus | undefined;
    sso?: Array<PatchTicketsIdTicketsRequestSso> | undefined;
    paymentMethods?: PatchTicketsIdTicketsRequestPaymentMethods | undefined;
};

export enum PatchTicketsIdVisibility {
    Private = "private",
    Public = "public",
    Shared = "shared",
}

export enum PatchTicketsIdTicketsRequestRequestBodyReporterStatus {
    Active = "active",
    Archived = "archived",
}

export type PatchTicketsIdNotes = {
    id?: string | undefined;
    title?: string | undefined;
    content?: string | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    lastAccessed?: number | undefined;
    reminder?: number | undefined;
    color?: string | undefined;
    priority?: PatchTicketsIdTicketsPriority | undefined;
    author?: PatchTicketsIdAuthor | undefined;
    tags?: Array<string> | undefined;
    attachments?: Array<PatchTicketsIdAttachments> | undefined;
    sharedWith?: Array<PatchTicketsIdSharedWith> | undefined;
    visibility?: PatchTicketsIdVisibility | undefined;
    status?: PatchTicketsIdTicketsRequestRequestBodyReporterStatus | undefined;
    metadata?: Array<string> | undefined;
};

export enum PatchTicketsIdTicketsRequestRequestBodyReporterSocialProfilesType {
    Facebook = "facebook",
    Twitter = "twitter",
    Linkedin = "linkedin",
    Instagram = "instagram",
    Tiktok = "tiktok",
    Pinterest = "pinterest",
    Youtube = "youtube",
    Other = "other",
}

export type PatchTicketsIdTicketsRequestAdditionalInfo = {};

export type PatchTicketsIdSocialProfiles = {
    type?: PatchTicketsIdTicketsRequestRequestBodyReporterSocialProfilesType | undefined;
    username?: string | undefined;
    displayName?: string | undefined;
    url?: string | undefined;
    avatarUrl?: string | undefined;
    email?: string | undefined;
    additionalInfo?: PatchTicketsIdTicketsRequestAdditionalInfo | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    active?: boolean | undefined;
    deleted?: boolean | undefined;
};

export enum PatchTicketsIdTicketsFieldType {
    Text = "text",
    Number = "number",
    Date = "date",
    Boolean = "boolean",
    Enum = "enum",
    Json = "json",
    Array = "array",
}

export type PatchTicketsIdTicketsRequestRequestBodyReporterCustomFields = {
    id?: string | undefined;
    fieldName?: string | undefined;
    fieldValue?: string | undefined;
    fieldType?: PatchTicketsIdTicketsFieldType | undefined;
};

export type Reporter = {
    id?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    leadId?: string | undefined;
    company?: string | undefined;
    defaultEmail?: string | undefined;
    emails?: Array<PatchTicketsIdEmails> | undefined;
    defaultPhone?: string | undefined;
    phones?: Array<PatchTicketsIdPhones> | undefined;
    address?: PatchTicketsIdAddress | undefined;
    addresses?: Array<PatchTicketsIdTicketsAddresses> | undefined;
    birthday?: number | undefined;
    relationship?: string | undefined;
    note?: string | undefined;
    notes?: PatchTicketsIdNotes | undefined;
    tags?: Array<string> | undefined;
    websites?: Array<string> | undefined;
    socialProfiles?: Array<PatchTicketsIdSocialProfiles> | undefined;
    isActive?: boolean | undefined;
    customFields?: Array<PatchTicketsIdTicketsRequestRequestBodyReporterCustomFields> | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
};

export type PatchTicketsIdTicketsMetadata = {};

export type PatchTicketsIdTicketsAssociatedWith = {};

export type PatchTicketsIdTicketsPermissions = {};

export type PatchTicketsIdTicketsAttachments = {
    id?: string | undefined;
    fileName?: string | undefined;
    fileSize?: number | undefined;
    fileType?: string | undefined;
    url?: string | undefined;
    thumbnailUrl?: string | undefined;
    previewUrl?: string | undefined;
    content?: string | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    metadata?: PatchTicketsIdTicketsMetadata | undefined;
    associatedWith?: PatchTicketsIdTicketsAssociatedWith | undefined;
    permissions?: PatchTicketsIdTicketsPermissions | undefined;
};

export type PatchTicketsIdTicketsAuthor = {};

export type PatchTicketsIdTicketsRequestMetadata = {};

export type PatchTicketsIdComments = {
    commentId?: string | undefined;
    author?: PatchTicketsIdTicketsAuthor | undefined;
    text?: string | undefined;
    parentId?: string | undefined;
    likes?: number | undefined;
    flagged?: boolean | undefined;
    metadata?: Array<PatchTicketsIdTicketsRequestMetadata> | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    active?: boolean | undefined;
    deleted?: boolean | undefined;
};

export enum PatchTicketsIdTicketsRequestPriority {
    Low = "low",
    Medium = "medium",
    High = "high",
}

export type PatchTicketsIdTicketsRequestAuthor = {};

export type PatchTicketsIdTicketsRequestAttachments = {};

export type PatchTicketsIdTicketsSharedWith = {};

export enum PatchTicketsIdTicketsVisibility {
    Private = "private",
    Public = "public",
    Shared = "shared",
}

export enum PatchTicketsIdTicketsRequestRequestBodyNotesStatus {
    Active = "active",
    Archived = "archived",
}

export type PatchTicketsIdTicketsNotes = {
    id?: string | undefined;
    title?: string | undefined;
    content?: string | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    lastAccessed?: number | undefined;
    reminder?: number | undefined;
    color?: string | undefined;
    priority?: PatchTicketsIdTicketsRequestPriority | undefined;
    author?: PatchTicketsIdTicketsRequestAuthor | undefined;
    tags?: Array<string> | undefined;
    attachments?: Array<PatchTicketsIdTicketsRequestAttachments> | undefined;
    sharedWith?: Array<PatchTicketsIdTicketsSharedWith> | undefined;
    visibility?: PatchTicketsIdTicketsVisibility | undefined;
    status?: PatchTicketsIdTicketsRequestRequestBodyNotesStatus | undefined;
    metadata?: Array<string> | undefined;
};

export enum PatchTicketsIdTicketsRequestFieldType {
    Text = "text",
    Number = "number",
    Date = "date",
    Boolean = "boolean",
    Enum = "enum",
    Json = "json",
    Array = "array",
}

export type PatchTicketsIdTicketsRequestRequestBodyCustomFields1 = {
    id?: string | undefined;
    fieldName?: string | undefined;
    fieldValue?: string | undefined;
    fieldType?: PatchTicketsIdTicketsRequestFieldType | undefined;
};

export type PatchTicketsIdRequestBody = {
    id?: string | undefined;
    title?: string | undefined;
    description?: string | undefined;
    status?: PatchTicketsIdStatus | undefined;
    priority?: PatchTicketsIdPriority | undefined;
    type?: PatchTicketsIdType | undefined;
    assignee?: PatchTicketsIdAssignee | undefined;
    reporter?: Reporter | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    dueDate?: number | undefined;
    attachments?: Array<PatchTicketsIdTicketsAttachments> | undefined;
    comments?: Array<PatchTicketsIdComments> | undefined;
    notes?: Array<PatchTicketsIdTicketsNotes> | undefined;
    tags?: Array<string> | undefined;
    customFields?: Array<PatchTicketsIdTicketsRequestRequestBodyCustomFields1> | undefined;
};

export type PatchTicketsIdRequest = {
    /**
     * The id of the model
     */
    id: string;
    /**
     * The unique identifier of a Connected Account
     */
    xIntegrationosConnectionKey: string;
    requestBody?: PatchTicketsIdRequestBody | undefined;
};

export enum PatchTicketsIdStatusCode {
    TwoHundred = 200,
    FourHundred = 400,
    FiveHundred = 500,
}

export type PatchTicketsIdUnified = {
    count?: number | undefined;
};

export type PatchTicketsIdPassthrough = {};

export type PatchTicketsIdCache = {
    hit?: boolean | undefined;
    ttl?: number | undefined;
    key?: string | undefined;
};

export type PatchTicketsIdMeta = {
    timestamp?: number | undefined;
    latency?: number | undefined;
    platformRateLimitRemaining?: number | undefined;
    rateLimitRemaining?: number | undefined;
    cache?: PatchTicketsIdCache | undefined;
    transactionKey?: string | undefined;
    txn?: string | undefined;
    platform?: string | undefined;
    platformVersion?: string | undefined;
    connectionDefinitionKey?: string | undefined;
    action?: string | undefined;
    commonModel?: string | undefined;
    commonModelVersion?: string | undefined;
    connectionKey?: string | undefined;
    hash?: string | undefined;
    heartbeats?: Array<string> | undefined;
    totalTransactions?: number | undefined;
};

/**
 * Successful response
 */
export type PatchTicketsIdResponseBody = {
    status?: string | undefined;
    statusCode?: PatchTicketsIdStatusCode | undefined;
    unified?: PatchTicketsIdUnified | undefined;
    passthrough?: PatchTicketsIdPassthrough | undefined;
    meta?: PatchTicketsIdMeta | undefined;
};

export type PatchTicketsIdResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Successful response
     */
    object?: PatchTicketsIdResponseBody | undefined;
};

/** @internal */
export const PatchTicketsIdStatus$ = z.nativeEnum(PatchTicketsIdStatus);

/** @internal */
export const PatchTicketsIdPriority$ = z.nativeEnum(PatchTicketsIdPriority);

/** @internal */
export const PatchTicketsIdType$ = z.nativeEnum(PatchTicketsIdType);

/** @internal */
export const PatchTicketsIdMimeType$ = z.nativeEnum(PatchTicketsIdMimeType);

/** @internal */
export namespace PatchTicketsIdProfilePicture$ {
    export type Inbound = {
        id?: string | undefined;
        src?: string | undefined;
        altText?: string | undefined;
        width?: number | undefined;
        height?: number | undefined;
        thumbnailSrc?: string | undefined;
        caption?: string | undefined;
        title?: string | undefined;
        mimeType?: PatchTicketsIdMimeType | undefined;
        tags?: Array<string> | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<PatchTicketsIdProfilePicture, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            src: z.string().optional(),
            altText: z.string().optional(),
            width: z.number().optional(),
            height: z.number().optional(),
            thumbnailSrc: z.string().optional(),
            caption: z.string().optional(),
            title: z.string().optional(),
            mimeType: PatchTicketsIdMimeType$.optional(),
            tags: z.array(z.string()).optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.src === undefined ? null : { src: v.src }),
                ...(v.altText === undefined ? null : { altText: v.altText }),
                ...(v.width === undefined ? null : { width: v.width }),
                ...(v.height === undefined ? null : { height: v.height }),
                ...(v.thumbnailSrc === undefined ? null : { thumbnailSrc: v.thumbnailSrc }),
                ...(v.caption === undefined ? null : { caption: v.caption }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.mimeType === undefined ? null : { mimeType: v.mimeType }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        src?: string | undefined;
        altText?: string | undefined;
        width?: number | undefined;
        height?: number | undefined;
        thumbnailSrc?: string | undefined;
        caption?: string | undefined;
        title?: string | undefined;
        mimeType?: PatchTicketsIdMimeType | undefined;
        tags?: Array<string> | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchTicketsIdProfilePicture> = z
        .object({
            id: z.string().optional(),
            src: z.string().optional(),
            altText: z.string().optional(),
            width: z.number().optional(),
            height: z.number().optional(),
            thumbnailSrc: z.string().optional(),
            caption: z.string().optional(),
            title: z.string().optional(),
            mimeType: PatchTicketsIdMimeType$.optional(),
            tags: z.array(z.string()).optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.src === undefined ? null : { src: v.src }),
                ...(v.altText === undefined ? null : { altText: v.altText }),
                ...(v.width === undefined ? null : { width: v.width }),
                ...(v.height === undefined ? null : { height: v.height }),
                ...(v.thumbnailSrc === undefined ? null : { thumbnailSrc: v.thumbnailSrc }),
                ...(v.caption === undefined ? null : { caption: v.caption }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.mimeType === undefined ? null : { mimeType: v.mimeType }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });
}

/** @internal */
export const PatchTicketsIdTicketsMimeType$ = z.nativeEnum(PatchTicketsIdTicketsMimeType);

/** @internal */
export namespace PatchTicketsIdCoverPhoto$ {
    export type Inbound = {
        id?: string | undefined;
        src?: string | undefined;
        altText?: string | undefined;
        width?: number | undefined;
        height?: number | undefined;
        thumbnailSrc?: string | undefined;
        caption?: string | undefined;
        title?: string | undefined;
        mimeType?: PatchTicketsIdTicketsMimeType | undefined;
        tags?: Array<string> | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<PatchTicketsIdCoverPhoto, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            src: z.string().optional(),
            altText: z.string().optional(),
            width: z.number().optional(),
            height: z.number().optional(),
            thumbnailSrc: z.string().optional(),
            caption: z.string().optional(),
            title: z.string().optional(),
            mimeType: PatchTicketsIdTicketsMimeType$.optional(),
            tags: z.array(z.string()).optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.src === undefined ? null : { src: v.src }),
                ...(v.altText === undefined ? null : { altText: v.altText }),
                ...(v.width === undefined ? null : { width: v.width }),
                ...(v.height === undefined ? null : { height: v.height }),
                ...(v.thumbnailSrc === undefined ? null : { thumbnailSrc: v.thumbnailSrc }),
                ...(v.caption === undefined ? null : { caption: v.caption }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.mimeType === undefined ? null : { mimeType: v.mimeType }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        src?: string | undefined;
        altText?: string | undefined;
        width?: number | undefined;
        height?: number | undefined;
        thumbnailSrc?: string | undefined;
        caption?: string | undefined;
        title?: string | undefined;
        mimeType?: PatchTicketsIdTicketsMimeType | undefined;
        tags?: Array<string> | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchTicketsIdCoverPhoto> = z
        .object({
            id: z.string().optional(),
            src: z.string().optional(),
            altText: z.string().optional(),
            width: z.number().optional(),
            height: z.number().optional(),
            thumbnailSrc: z.string().optional(),
            caption: z.string().optional(),
            title: z.string().optional(),
            mimeType: PatchTicketsIdTicketsMimeType$.optional(),
            tags: z.array(z.string()).optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.src === undefined ? null : { src: v.src }),
                ...(v.altText === undefined ? null : { altText: v.altText }),
                ...(v.width === undefined ? null : { width: v.width }),
                ...(v.height === undefined ? null : { height: v.height }),
                ...(v.thumbnailSrc === undefined ? null : { thumbnailSrc: v.thumbnailSrc }),
                ...(v.caption === undefined ? null : { caption: v.caption }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.mimeType === undefined ? null : { mimeType: v.mimeType }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });
}

/** @internal */
export const PatchTicketsIdGender$ = z.nativeEnum(PatchTicketsIdGender);

/** @internal */
export const PatchTicketsIdTicketsType$ = z.nativeEnum(PatchTicketsIdTicketsType);

/** @internal */
export namespace PatchTicketsIdGeoLocation$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<PatchTicketsIdGeoLocation, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchTicketsIdGeoLocation> =
        z.object({});
}

/** @internal */
export namespace PatchTicketsIdCustomFields$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<PatchTicketsIdCustomFields, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchTicketsIdCustomFields> =
        z.object({});
}

/** @internal */
export namespace PatchTicketsIdAddresses$ {
    export type Inbound = {
        id?: string | undefined;
        contactId?: string | undefined;
        accountId?: string | undefined;
        firstName?: string | undefined;
        lastName?: string | undefined;
        name?: string | undefined;
        companyName?: string | undefined;
        email?: string | undefined;
        phone?: string | undefined;
        street?: string | undefined;
        addressLine2?: string | undefined;
        city?: string | undefined;
        province?: string | undefined;
        region?: string | undefined;
        postalCode?: string | undefined;
        postalCodeExtension?: string | undefined;
        country?: string | undefined;
        countryCode?: string | undefined;
        type?: PatchTicketsIdTicketsType | undefined;
        geoLocation?: PatchTicketsIdGeoLocation$.Inbound | undefined;
        customFields?: Array<PatchTicketsIdCustomFields$.Inbound> | undefined;
        subdivisionCode?: string | undefined;
    };

    export const inboundSchema: z.ZodType<PatchTicketsIdAddresses, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            contactId: z.string().optional(),
            accountId: z.string().optional(),
            firstName: z.string().optional(),
            lastName: z.string().optional(),
            name: z.string().optional(),
            companyName: z.string().optional(),
            email: z.string().optional(),
            phone: z.string().optional(),
            street: z.string().optional(),
            addressLine2: z.string().optional(),
            city: z.string().optional(),
            province: z.string().optional(),
            region: z.string().optional(),
            postalCode: z.string().optional(),
            postalCodeExtension: z.string().optional(),
            country: z.string().optional(),
            countryCode: z.string().optional(),
            type: PatchTicketsIdTicketsType$.optional(),
            geoLocation: z.lazy(() => PatchTicketsIdGeoLocation$.inboundSchema).optional(),
            customFields: z
                .array(z.lazy(() => PatchTicketsIdCustomFields$.inboundSchema))
                .optional(),
            subdivisionCode: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.contactId === undefined ? null : { contactId: v.contactId }),
                ...(v.accountId === undefined ? null : { accountId: v.accountId }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.companyName === undefined ? null : { companyName: v.companyName }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.phone === undefined ? null : { phone: v.phone }),
                ...(v.street === undefined ? null : { street: v.street }),
                ...(v.addressLine2 === undefined ? null : { addressLine2: v.addressLine2 }),
                ...(v.city === undefined ? null : { city: v.city }),
                ...(v.province === undefined ? null : { province: v.province }),
                ...(v.region === undefined ? null : { region: v.region }),
                ...(v.postalCode === undefined ? null : { postalCode: v.postalCode }),
                ...(v.postalCodeExtension === undefined
                    ? null
                    : { postalCodeExtension: v.postalCodeExtension }),
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.countryCode === undefined ? null : { countryCode: v.countryCode }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.geoLocation === undefined ? null : { geoLocation: v.geoLocation }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                ...(v.subdivisionCode === undefined
                    ? null
                    : { subdivisionCode: v.subdivisionCode }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        contactId?: string | undefined;
        accountId?: string | undefined;
        firstName?: string | undefined;
        lastName?: string | undefined;
        name?: string | undefined;
        companyName?: string | undefined;
        email?: string | undefined;
        phone?: string | undefined;
        street?: string | undefined;
        addressLine2?: string | undefined;
        city?: string | undefined;
        province?: string | undefined;
        region?: string | undefined;
        postalCode?: string | undefined;
        postalCodeExtension?: string | undefined;
        country?: string | undefined;
        countryCode?: string | undefined;
        type?: PatchTicketsIdTicketsType | undefined;
        geoLocation?: PatchTicketsIdGeoLocation$.Outbound | undefined;
        customFields?: Array<PatchTicketsIdCustomFields$.Outbound> | undefined;
        subdivisionCode?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchTicketsIdAddresses> = z
        .object({
            id: z.string().optional(),
            contactId: z.string().optional(),
            accountId: z.string().optional(),
            firstName: z.string().optional(),
            lastName: z.string().optional(),
            name: z.string().optional(),
            companyName: z.string().optional(),
            email: z.string().optional(),
            phone: z.string().optional(),
            street: z.string().optional(),
            addressLine2: z.string().optional(),
            city: z.string().optional(),
            province: z.string().optional(),
            region: z.string().optional(),
            postalCode: z.string().optional(),
            postalCodeExtension: z.string().optional(),
            country: z.string().optional(),
            countryCode: z.string().optional(),
            type: PatchTicketsIdTicketsType$.optional(),
            geoLocation: z.lazy(() => PatchTicketsIdGeoLocation$.outboundSchema).optional(),
            customFields: z
                .array(z.lazy(() => PatchTicketsIdCustomFields$.outboundSchema))
                .optional(),
            subdivisionCode: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.contactId === undefined ? null : { contactId: v.contactId }),
                ...(v.accountId === undefined ? null : { accountId: v.accountId }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.companyName === undefined ? null : { companyName: v.companyName }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.phone === undefined ? null : { phone: v.phone }),
                ...(v.street === undefined ? null : { street: v.street }),
                ...(v.addressLine2 === undefined ? null : { addressLine2: v.addressLine2 }),
                ...(v.city === undefined ? null : { city: v.city }),
                ...(v.province === undefined ? null : { province: v.province }),
                ...(v.region === undefined ? null : { region: v.region }),
                ...(v.postalCode === undefined ? null : { postalCode: v.postalCode }),
                ...(v.postalCodeExtension === undefined
                    ? null
                    : { postalCodeExtension: v.postalCodeExtension }),
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.countryCode === undefined ? null : { countryCode: v.countryCode }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.geoLocation === undefined ? null : { geoLocation: v.geoLocation }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                ...(v.subdivisionCode === undefined
                    ? null
                    : { subdivisionCode: v.subdivisionCode }),
            };
        });
}

/** @internal */
export const PatchTicketsIdRoles$ = z.nativeEnum(PatchTicketsIdRoles);

/** @internal */
export const PatchTicketsIdCommunications$ = z.nativeEnum(PatchTicketsIdCommunications);

/** @internal */
export namespace PatchTicketsIdPreferences$ {
    export type Inbound = {
        id?: string | undefined;
        language?: string | undefined;
        currency?: string | undefined;
        timeZone?: string | undefined;
        communications?: PatchTicketsIdCommunications | undefined;
    };

    export const inboundSchema: z.ZodType<PatchTicketsIdPreferences, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            language: z.string().optional(),
            currency: z.string().optional(),
            timeZone: z.string().optional(),
            communications: PatchTicketsIdCommunications$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.language === undefined ? null : { language: v.language }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.timeZone === undefined ? null : { timeZone: v.timeZone }),
                ...(v.communications === undefined ? null : { communications: v.communications }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        language?: string | undefined;
        currency?: string | undefined;
        timeZone?: string | undefined;
        communications?: PatchTicketsIdCommunications | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchTicketsIdPreferences> = z
        .object({
            id: z.string().optional(),
            language: z.string().optional(),
            currency: z.string().optional(),
            timeZone: z.string().optional(),
            communications: PatchTicketsIdCommunications$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.language === undefined ? null : { language: v.language }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.timeZone === undefined ? null : { timeZone: v.timeZone }),
                ...(v.communications === undefined ? null : { communications: v.communications }),
            };
        });
}

/** @internal */
export const PatchTicketsIdTicketsRequestType$ = z.nativeEnum(PatchTicketsIdTicketsRequestType);

/** @internal */
export const PatchTicketsIdTicketsRequestRequestBodyType$ = z.nativeEnum(
    PatchTicketsIdTicketsRequestRequestBodyType
);

/** @internal */
export namespace PatchTicketsIdAdditionalInfo$ {
    export type Inbound = {
        id?: string | undefined;
        key?: string | undefined;
        value?: string | undefined;
        type?: PatchTicketsIdTicketsRequestRequestBodyType | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        entityId?: string | undefined;
        entityType?: string | undefined;
    };

    export const inboundSchema: z.ZodType<PatchTicketsIdAdditionalInfo, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            key: z.string().optional(),
            value: z.string().optional(),
            type: PatchTicketsIdTicketsRequestRequestBodyType$.optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            entityId: z.string().optional(),
            entityType: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.key === undefined ? null : { key: v.key }),
                ...(v.value === undefined ? null : { value: v.value }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.entityId === undefined ? null : { entityId: v.entityId }),
                ...(v.entityType === undefined ? null : { entityType: v.entityType }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        key?: string | undefined;
        value?: string | undefined;
        type?: PatchTicketsIdTicketsRequestRequestBodyType | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        entityId?: string | undefined;
        entityType?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchTicketsIdAdditionalInfo> = z
        .object({
            id: z.string().optional(),
            key: z.string().optional(),
            value: z.string().optional(),
            type: PatchTicketsIdTicketsRequestRequestBodyType$.optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            entityId: z.string().optional(),
            entityType: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.key === undefined ? null : { key: v.key }),
                ...(v.value === undefined ? null : { value: v.value }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.entityId === undefined ? null : { entityId: v.entityId }),
                ...(v.entityType === undefined ? null : { entityType: v.entityType }),
            };
        });
}

/** @internal */
export namespace PatchTicketsIdSocialLinks$ {
    export type Inbound = {
        type?: PatchTicketsIdTicketsRequestType | undefined;
        username?: string | undefined;
        displayName?: string | undefined;
        url?: string | undefined;
        avatarUrl?: string | undefined;
        email?: string | undefined;
        additionalInfo?: PatchTicketsIdAdditionalInfo$.Inbound | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<PatchTicketsIdSocialLinks, z.ZodTypeDef, Inbound> = z
        .object({
            type: PatchTicketsIdTicketsRequestType$.optional(),
            username: z.string().optional(),
            displayName: z.string().optional(),
            url: z.string().optional(),
            avatarUrl: z.string().optional(),
            email: z.string().optional(),
            additionalInfo: z.lazy(() => PatchTicketsIdAdditionalInfo$.inboundSchema).optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.username === undefined ? null : { username: v.username }),
                ...(v.displayName === undefined ? null : { displayName: v.displayName }),
                ...(v.url === undefined ? null : { url: v.url }),
                ...(v.avatarUrl === undefined ? null : { avatarUrl: v.avatarUrl }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.additionalInfo === undefined ? null : { additionalInfo: v.additionalInfo }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });

    export type Outbound = {
        type?: PatchTicketsIdTicketsRequestType | undefined;
        username?: string | undefined;
        displayName?: string | undefined;
        url?: string | undefined;
        avatarUrl?: string | undefined;
        email?: string | undefined;
        additionalInfo?: PatchTicketsIdAdditionalInfo$.Outbound | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchTicketsIdSocialLinks> = z
        .object({
            type: PatchTicketsIdTicketsRequestType$.optional(),
            username: z.string().optional(),
            displayName: z.string().optional(),
            url: z.string().optional(),
            avatarUrl: z.string().optional(),
            email: z.string().optional(),
            additionalInfo: z.lazy(() => PatchTicketsIdAdditionalInfo$.outboundSchema).optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.username === undefined ? null : { username: v.username }),
                ...(v.displayName === undefined ? null : { displayName: v.displayName }),
                ...(v.url === undefined ? null : { url: v.url }),
                ...(v.avatarUrl === undefined ? null : { avatarUrl: v.avatarUrl }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.additionalInfo === undefined ? null : { additionalInfo: v.additionalInfo }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });
}

/** @internal */
export const PatchTicketsIdTicketsStatus$ = z.nativeEnum(PatchTicketsIdTicketsStatus);

/** @internal */
export const PatchTicketsIdProvider$ = z.nativeEnum(PatchTicketsIdProvider);

/** @internal */
export namespace PatchTicketsIdSso$ {
    export type Inbound = {
        provider?: PatchTicketsIdProvider | undefined;
        providerUserId?: string | undefined;
        profileUrl?: string | undefined;
        accessToken?: string | undefined;
        refreshToken?: string | undefined;
        expiresIn?: number | undefined;
        expiryDate?: number | undefined;
        scopes?: Array<string> | undefined;
        tokenType?: string | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<PatchTicketsIdSso, z.ZodTypeDef, Inbound> = z
        .object({
            provider: PatchTicketsIdProvider$.optional(),
            providerUserId: z.string().optional(),
            profileUrl: z.string().optional(),
            accessToken: z.string().optional(),
            refreshToken: z.string().optional(),
            expiresIn: z.number().optional(),
            expiryDate: z.number().optional(),
            scopes: z.array(z.string()).optional(),
            tokenType: z.string().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.provider === undefined ? null : { provider: v.provider }),
                ...(v.providerUserId === undefined ? null : { providerUserId: v.providerUserId }),
                ...(v.profileUrl === undefined ? null : { profileUrl: v.profileUrl }),
                ...(v.accessToken === undefined ? null : { accessToken: v.accessToken }),
                ...(v.refreshToken === undefined ? null : { refreshToken: v.refreshToken }),
                ...(v.expiresIn === undefined ? null : { expiresIn: v.expiresIn }),
                ...(v.expiryDate === undefined ? null : { expiryDate: v.expiryDate }),
                ...(v.scopes === undefined ? null : { scopes: v.scopes }),
                ...(v.tokenType === undefined ? null : { tokenType: v.tokenType }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });

    export type Outbound = {
        provider?: PatchTicketsIdProvider | undefined;
        providerUserId?: string | undefined;
        profileUrl?: string | undefined;
        accessToken?: string | undefined;
        refreshToken?: string | undefined;
        expiresIn?: number | undefined;
        expiryDate?: number | undefined;
        scopes?: Array<string> | undefined;
        tokenType?: string | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchTicketsIdSso> = z
        .object({
            provider: PatchTicketsIdProvider$.optional(),
            providerUserId: z.string().optional(),
            profileUrl: z.string().optional(),
            accessToken: z.string().optional(),
            refreshToken: z.string().optional(),
            expiresIn: z.number().optional(),
            expiryDate: z.number().optional(),
            scopes: z.array(z.string()).optional(),
            tokenType: z.string().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.provider === undefined ? null : { provider: v.provider }),
                ...(v.providerUserId === undefined ? null : { providerUserId: v.providerUserId }),
                ...(v.profileUrl === undefined ? null : { profileUrl: v.profileUrl }),
                ...(v.accessToken === undefined ? null : { accessToken: v.accessToken }),
                ...(v.refreshToken === undefined ? null : { refreshToken: v.refreshToken }),
                ...(v.expiresIn === undefined ? null : { expiresIn: v.expiresIn }),
                ...(v.expiryDate === undefined ? null : { expiryDate: v.expiryDate }),
                ...(v.scopes === undefined ? null : { scopes: v.scopes }),
                ...(v.tokenType === undefined ? null : { tokenType: v.tokenType }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });
}

/** @internal */
export const PatchTicketsIdTicketsRequestRequestBodyAssigneeType$ = z.nativeEnum(
    PatchTicketsIdTicketsRequestRequestBodyAssigneeType
);

/** @internal */
export namespace PatchTicketsIdPaymentMethods$ {
    export type Inbound = {
        id?: string | undefined;
        type?: PatchTicketsIdTicketsRequestRequestBodyAssigneeType | undefined;
        details?: string | undefined;
        isDefault?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<PatchTicketsIdPaymentMethods, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            type: PatchTicketsIdTicketsRequestRequestBodyAssigneeType$.optional(),
            details: z.string().optional(),
            isDefault: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.details === undefined ? null : { details: v.details }),
                ...(v.isDefault === undefined ? null : { isDefault: v.isDefault }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        type?: PatchTicketsIdTicketsRequestRequestBodyAssigneeType | undefined;
        details?: string | undefined;
        isDefault?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchTicketsIdPaymentMethods> = z
        .object({
            id: z.string().optional(),
            type: PatchTicketsIdTicketsRequestRequestBodyAssigneeType$.optional(),
            details: z.string().optional(),
            isDefault: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.details === undefined ? null : { details: v.details }),
                ...(v.isDefault === undefined ? null : { isDefault: v.isDefault }),
            };
        });
}

/** @internal */
export namespace PatchTicketsIdAssignee$ {
    export type Inbound = {
        id?: string | undefined;
        firstName?: string | undefined;
        middleName?: string | undefined;
        lastName?: string | undefined;
        email?: string | undefined;
        username?: string | undefined;
        password?: string | undefined;
        profilePicture?: PatchTicketsIdProfilePicture$.Inbound | undefined;
        coverPhoto?: PatchTicketsIdCoverPhoto$.Inbound | undefined;
        gender?: PatchTicketsIdGender | undefined;
        dateOfBirth?: number | undefined;
        phoneNumber?: string | undefined;
        isActive?: boolean | undefined;
        lastLogin?: number | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        addresses?: Array<PatchTicketsIdAddresses$.Inbound> | undefined;
        roles?: Array<PatchTicketsIdRoles> | undefined;
        preferences?: PatchTicketsIdPreferences$.Inbound | undefined;
        bio?: string | undefined;
        website?: string | undefined;
        socialLinks?: PatchTicketsIdSocialLinks$.Inbound | undefined;
        status?: PatchTicketsIdTicketsStatus | undefined;
        sso?: Array<PatchTicketsIdSso$.Inbound> | undefined;
        paymentMethods?: PatchTicketsIdPaymentMethods$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<PatchTicketsIdAssignee, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            firstName: z.string().optional(),
            middleName: z.string().optional(),
            lastName: z.string().optional(),
            email: z.string().optional(),
            username: z.string().optional(),
            password: z.string().optional(),
            profilePicture: z.lazy(() => PatchTicketsIdProfilePicture$.inboundSchema).optional(),
            coverPhoto: z.lazy(() => PatchTicketsIdCoverPhoto$.inboundSchema).optional(),
            gender: PatchTicketsIdGender$.optional(),
            dateOfBirth: z.number().optional(),
            phoneNumber: z.string().optional(),
            isActive: z.boolean().optional(),
            lastLogin: z.number().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            addresses: z.array(z.lazy(() => PatchTicketsIdAddresses$.inboundSchema)).optional(),
            roles: z.array(PatchTicketsIdRoles$).optional(),
            preferences: z.lazy(() => PatchTicketsIdPreferences$.inboundSchema).optional(),
            bio: z.string().optional(),
            website: z.string().optional(),
            socialLinks: z.lazy(() => PatchTicketsIdSocialLinks$.inboundSchema).optional(),
            status: PatchTicketsIdTicketsStatus$.optional(),
            sso: z.array(z.lazy(() => PatchTicketsIdSso$.inboundSchema)).optional(),
            paymentMethods: z.lazy(() => PatchTicketsIdPaymentMethods$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.middleName === undefined ? null : { middleName: v.middleName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.username === undefined ? null : { username: v.username }),
                ...(v.password === undefined ? null : { password: v.password }),
                ...(v.profilePicture === undefined ? null : { profilePicture: v.profilePicture }),
                ...(v.coverPhoto === undefined ? null : { coverPhoto: v.coverPhoto }),
                ...(v.gender === undefined ? null : { gender: v.gender }),
                ...(v.dateOfBirth === undefined ? null : { dateOfBirth: v.dateOfBirth }),
                ...(v.phoneNumber === undefined ? null : { phoneNumber: v.phoneNumber }),
                ...(v.isActive === undefined ? null : { isActive: v.isActive }),
                ...(v.lastLogin === undefined ? null : { lastLogin: v.lastLogin }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.addresses === undefined ? null : { addresses: v.addresses }),
                ...(v.roles === undefined ? null : { roles: v.roles }),
                ...(v.preferences === undefined ? null : { preferences: v.preferences }),
                ...(v.bio === undefined ? null : { bio: v.bio }),
                ...(v.website === undefined ? null : { website: v.website }),
                ...(v.socialLinks === undefined ? null : { socialLinks: v.socialLinks }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.sso === undefined ? null : { sso: v.sso }),
                ...(v.paymentMethods === undefined ? null : { paymentMethods: v.paymentMethods }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        firstName?: string | undefined;
        middleName?: string | undefined;
        lastName?: string | undefined;
        email?: string | undefined;
        username?: string | undefined;
        password?: string | undefined;
        profilePicture?: PatchTicketsIdProfilePicture$.Outbound | undefined;
        coverPhoto?: PatchTicketsIdCoverPhoto$.Outbound | undefined;
        gender?: PatchTicketsIdGender | undefined;
        dateOfBirth?: number | undefined;
        phoneNumber?: string | undefined;
        isActive?: boolean | undefined;
        lastLogin?: number | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        addresses?: Array<PatchTicketsIdAddresses$.Outbound> | undefined;
        roles?: Array<PatchTicketsIdRoles> | undefined;
        preferences?: PatchTicketsIdPreferences$.Outbound | undefined;
        bio?: string | undefined;
        website?: string | undefined;
        socialLinks?: PatchTicketsIdSocialLinks$.Outbound | undefined;
        status?: PatchTicketsIdTicketsStatus | undefined;
        sso?: Array<PatchTicketsIdSso$.Outbound> | undefined;
        paymentMethods?: PatchTicketsIdPaymentMethods$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchTicketsIdAssignee> = z
        .object({
            id: z.string().optional(),
            firstName: z.string().optional(),
            middleName: z.string().optional(),
            lastName: z.string().optional(),
            email: z.string().optional(),
            username: z.string().optional(),
            password: z.string().optional(),
            profilePicture: z.lazy(() => PatchTicketsIdProfilePicture$.outboundSchema).optional(),
            coverPhoto: z.lazy(() => PatchTicketsIdCoverPhoto$.outboundSchema).optional(),
            gender: PatchTicketsIdGender$.optional(),
            dateOfBirth: z.number().optional(),
            phoneNumber: z.string().optional(),
            isActive: z.boolean().optional(),
            lastLogin: z.number().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            addresses: z.array(z.lazy(() => PatchTicketsIdAddresses$.outboundSchema)).optional(),
            roles: z.array(PatchTicketsIdRoles$).optional(),
            preferences: z.lazy(() => PatchTicketsIdPreferences$.outboundSchema).optional(),
            bio: z.string().optional(),
            website: z.string().optional(),
            socialLinks: z.lazy(() => PatchTicketsIdSocialLinks$.outboundSchema).optional(),
            status: PatchTicketsIdTicketsStatus$.optional(),
            sso: z.array(z.lazy(() => PatchTicketsIdSso$.outboundSchema)).optional(),
            paymentMethods: z.lazy(() => PatchTicketsIdPaymentMethods$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.middleName === undefined ? null : { middleName: v.middleName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.username === undefined ? null : { username: v.username }),
                ...(v.password === undefined ? null : { password: v.password }),
                ...(v.profilePicture === undefined ? null : { profilePicture: v.profilePicture }),
                ...(v.coverPhoto === undefined ? null : { coverPhoto: v.coverPhoto }),
                ...(v.gender === undefined ? null : { gender: v.gender }),
                ...(v.dateOfBirth === undefined ? null : { dateOfBirth: v.dateOfBirth }),
                ...(v.phoneNumber === undefined ? null : { phoneNumber: v.phoneNumber }),
                ...(v.isActive === undefined ? null : { isActive: v.isActive }),
                ...(v.lastLogin === undefined ? null : { lastLogin: v.lastLogin }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.addresses === undefined ? null : { addresses: v.addresses }),
                ...(v.roles === undefined ? null : { roles: v.roles }),
                ...(v.preferences === undefined ? null : { preferences: v.preferences }),
                ...(v.bio === undefined ? null : { bio: v.bio }),
                ...(v.website === undefined ? null : { website: v.website }),
                ...(v.socialLinks === undefined ? null : { socialLinks: v.socialLinks }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.sso === undefined ? null : { sso: v.sso }),
                ...(v.paymentMethods === undefined ? null : { paymentMethods: v.paymentMethods }),
            };
        });
}

/** @internal */
export const PatchTicketsIdTicketsRequestRequestBodyReporterType$ = z.nativeEnum(
    PatchTicketsIdTicketsRequestRequestBodyReporterType
);

/** @internal */
export namespace PatchTicketsIdEmails$ {
    export type Inbound = {
        email?: string | undefined;
        type?: PatchTicketsIdTicketsRequestRequestBodyReporterType | undefined;
    };

    export const inboundSchema: z.ZodType<PatchTicketsIdEmails, z.ZodTypeDef, Inbound> = z
        .object({
            email: z.string().optional(),
            type: PatchTicketsIdTicketsRequestRequestBodyReporterType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });

    export type Outbound = {
        email?: string | undefined;
        type?: PatchTicketsIdTicketsRequestRequestBodyReporterType | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchTicketsIdEmails> = z
        .object({
            email: z.string().optional(),
            type: PatchTicketsIdTicketsRequestRequestBodyReporterType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });
}

/** @internal */
export const PatchTicketsIdTicketsRequestRequestBodyReporterPhonesType$ = z.nativeEnum(
    PatchTicketsIdTicketsRequestRequestBodyReporterPhonesType
);

/** @internal */
export namespace PatchTicketsIdPhones$ {
    export type Inbound = {
        phone?: string | undefined;
        country?: string | undefined;
        countryCode?: string | undefined;
        type?: PatchTicketsIdTicketsRequestRequestBodyReporterPhonesType | undefined;
    };

    export const inboundSchema: z.ZodType<PatchTicketsIdPhones, z.ZodTypeDef, Inbound> = z
        .object({
            phone: z.string().optional(),
            country: z.string().optional(),
            countryCode: z.string().optional(),
            type: PatchTicketsIdTicketsRequestRequestBodyReporterPhonesType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.phone === undefined ? null : { phone: v.phone }),
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.countryCode === undefined ? null : { countryCode: v.countryCode }),
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });

    export type Outbound = {
        phone?: string | undefined;
        country?: string | undefined;
        countryCode?: string | undefined;
        type?: PatchTicketsIdTicketsRequestRequestBodyReporterPhonesType | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchTicketsIdPhones> = z
        .object({
            phone: z.string().optional(),
            country: z.string().optional(),
            countryCode: z.string().optional(),
            type: PatchTicketsIdTicketsRequestRequestBodyReporterPhonesType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.phone === undefined ? null : { phone: v.phone }),
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.countryCode === undefined ? null : { countryCode: v.countryCode }),
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });
}

/** @internal */
export const PatchTicketsIdTicketsRequestRequestBodyReporterAddressType$ = z.nativeEnum(
    PatchTicketsIdTicketsRequestRequestBodyReporterAddressType
);

/** @internal */
export namespace PatchTicketsIdTicketsGeoLocation$ {
    export type Inbound = {
        latitude?: number | undefined;
        longitude?: number | undefined;
        altitude?: number | undefined;
        accuracy?: number | undefined;
        altitudeAccuracy?: number | undefined;
        heading?: number | undefined;
        speed?: number | undefined;
        timestamp?: number | undefined;
    };

    export const inboundSchema: z.ZodType<PatchTicketsIdTicketsGeoLocation, z.ZodTypeDef, Inbound> =
        z
            .object({
                latitude: z.number().optional(),
                longitude: z.number().optional(),
                altitude: z.number().optional(),
                accuracy: z.number().optional(),
                altitudeAccuracy: z.number().optional(),
                heading: z.number().optional(),
                speed: z.number().optional(),
                timestamp: z.number().optional(),
            })
            .transform((v) => {
                return {
                    ...(v.latitude === undefined ? null : { latitude: v.latitude }),
                    ...(v.longitude === undefined ? null : { longitude: v.longitude }),
                    ...(v.altitude === undefined ? null : { altitude: v.altitude }),
                    ...(v.accuracy === undefined ? null : { accuracy: v.accuracy }),
                    ...(v.altitudeAccuracy === undefined
                        ? null
                        : { altitudeAccuracy: v.altitudeAccuracy }),
                    ...(v.heading === undefined ? null : { heading: v.heading }),
                    ...(v.speed === undefined ? null : { speed: v.speed }),
                    ...(v.timestamp === undefined ? null : { timestamp: v.timestamp }),
                };
            });

    export type Outbound = {
        latitude?: number | undefined;
        longitude?: number | undefined;
        altitude?: number | undefined;
        accuracy?: number | undefined;
        altitudeAccuracy?: number | undefined;
        heading?: number | undefined;
        speed?: number | undefined;
        timestamp?: number | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PatchTicketsIdTicketsGeoLocation
    > = z
        .object({
            latitude: z.number().optional(),
            longitude: z.number().optional(),
            altitude: z.number().optional(),
            accuracy: z.number().optional(),
            altitudeAccuracy: z.number().optional(),
            heading: z.number().optional(),
            speed: z.number().optional(),
            timestamp: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.latitude === undefined ? null : { latitude: v.latitude }),
                ...(v.longitude === undefined ? null : { longitude: v.longitude }),
                ...(v.altitude === undefined ? null : { altitude: v.altitude }),
                ...(v.accuracy === undefined ? null : { accuracy: v.accuracy }),
                ...(v.altitudeAccuracy === undefined
                    ? null
                    : { altitudeAccuracy: v.altitudeAccuracy }),
                ...(v.heading === undefined ? null : { heading: v.heading }),
                ...(v.speed === undefined ? null : { speed: v.speed }),
                ...(v.timestamp === undefined ? null : { timestamp: v.timestamp }),
            };
        });
}

/** @internal */
export const PatchTicketsIdFieldType$ = z.nativeEnum(PatchTicketsIdFieldType);

/** @internal */
export namespace PatchTicketsIdTicketsCustomFields$ {
    export type Inbound = {
        id?: string | undefined;
        fieldName?: string | undefined;
        fieldValue?: string | undefined;
        fieldType?: PatchTicketsIdFieldType | undefined;
    };

    export const inboundSchema: z.ZodType<
        PatchTicketsIdTicketsCustomFields,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            id: z.string().optional(),
            fieldName: z.string().optional(),
            fieldValue: z.string().optional(),
            fieldType: PatchTicketsIdFieldType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fieldName === undefined ? null : { fieldName: v.fieldName }),
                ...(v.fieldValue === undefined ? null : { fieldValue: v.fieldValue }),
                ...(v.fieldType === undefined ? null : { fieldType: v.fieldType }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        fieldName?: string | undefined;
        fieldValue?: string | undefined;
        fieldType?: PatchTicketsIdFieldType | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PatchTicketsIdTicketsCustomFields
    > = z
        .object({
            id: z.string().optional(),
            fieldName: z.string().optional(),
            fieldValue: z.string().optional(),
            fieldType: PatchTicketsIdFieldType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fieldName === undefined ? null : { fieldName: v.fieldName }),
                ...(v.fieldValue === undefined ? null : { fieldValue: v.fieldValue }),
                ...(v.fieldType === undefined ? null : { fieldType: v.fieldType }),
            };
        });
}

/** @internal */
export namespace PatchTicketsIdAddress$ {
    export type Inbound = {
        id?: string | undefined;
        contactId?: string | undefined;
        accountId?: string | undefined;
        firstName?: string | undefined;
        lastName?: string | undefined;
        name?: string | undefined;
        companyName?: string | undefined;
        email?: string | undefined;
        phone?: string | undefined;
        street?: string | undefined;
        addressLine2?: string | undefined;
        city?: string | undefined;
        province?: string | undefined;
        region?: string | undefined;
        postalCode?: string | undefined;
        postalCodeExtension?: string | undefined;
        country?: string | undefined;
        countryCode?: string | undefined;
        type?: PatchTicketsIdTicketsRequestRequestBodyReporterAddressType | undefined;
        geoLocation?: PatchTicketsIdTicketsGeoLocation$.Inbound | undefined;
        customFields?: Array<PatchTicketsIdTicketsCustomFields$.Inbound> | undefined;
        subdivisionCode?: string | undefined;
    };

    export const inboundSchema: z.ZodType<PatchTicketsIdAddress, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            contactId: z.string().optional(),
            accountId: z.string().optional(),
            firstName: z.string().optional(),
            lastName: z.string().optional(),
            name: z.string().optional(),
            companyName: z.string().optional(),
            email: z.string().optional(),
            phone: z.string().optional(),
            street: z.string().optional(),
            addressLine2: z.string().optional(),
            city: z.string().optional(),
            province: z.string().optional(),
            region: z.string().optional(),
            postalCode: z.string().optional(),
            postalCodeExtension: z.string().optional(),
            country: z.string().optional(),
            countryCode: z.string().optional(),
            type: PatchTicketsIdTicketsRequestRequestBodyReporterAddressType$.optional(),
            geoLocation: z.lazy(() => PatchTicketsIdTicketsGeoLocation$.inboundSchema).optional(),
            customFields: z
                .array(z.lazy(() => PatchTicketsIdTicketsCustomFields$.inboundSchema))
                .optional(),
            subdivisionCode: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.contactId === undefined ? null : { contactId: v.contactId }),
                ...(v.accountId === undefined ? null : { accountId: v.accountId }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.companyName === undefined ? null : { companyName: v.companyName }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.phone === undefined ? null : { phone: v.phone }),
                ...(v.street === undefined ? null : { street: v.street }),
                ...(v.addressLine2 === undefined ? null : { addressLine2: v.addressLine2 }),
                ...(v.city === undefined ? null : { city: v.city }),
                ...(v.province === undefined ? null : { province: v.province }),
                ...(v.region === undefined ? null : { region: v.region }),
                ...(v.postalCode === undefined ? null : { postalCode: v.postalCode }),
                ...(v.postalCodeExtension === undefined
                    ? null
                    : { postalCodeExtension: v.postalCodeExtension }),
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.countryCode === undefined ? null : { countryCode: v.countryCode }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.geoLocation === undefined ? null : { geoLocation: v.geoLocation }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                ...(v.subdivisionCode === undefined
                    ? null
                    : { subdivisionCode: v.subdivisionCode }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        contactId?: string | undefined;
        accountId?: string | undefined;
        firstName?: string | undefined;
        lastName?: string | undefined;
        name?: string | undefined;
        companyName?: string | undefined;
        email?: string | undefined;
        phone?: string | undefined;
        street?: string | undefined;
        addressLine2?: string | undefined;
        city?: string | undefined;
        province?: string | undefined;
        region?: string | undefined;
        postalCode?: string | undefined;
        postalCodeExtension?: string | undefined;
        country?: string | undefined;
        countryCode?: string | undefined;
        type?: PatchTicketsIdTicketsRequestRequestBodyReporterAddressType | undefined;
        geoLocation?: PatchTicketsIdTicketsGeoLocation$.Outbound | undefined;
        customFields?: Array<PatchTicketsIdTicketsCustomFields$.Outbound> | undefined;
        subdivisionCode?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchTicketsIdAddress> = z
        .object({
            id: z.string().optional(),
            contactId: z.string().optional(),
            accountId: z.string().optional(),
            firstName: z.string().optional(),
            lastName: z.string().optional(),
            name: z.string().optional(),
            companyName: z.string().optional(),
            email: z.string().optional(),
            phone: z.string().optional(),
            street: z.string().optional(),
            addressLine2: z.string().optional(),
            city: z.string().optional(),
            province: z.string().optional(),
            region: z.string().optional(),
            postalCode: z.string().optional(),
            postalCodeExtension: z.string().optional(),
            country: z.string().optional(),
            countryCode: z.string().optional(),
            type: PatchTicketsIdTicketsRequestRequestBodyReporterAddressType$.optional(),
            geoLocation: z.lazy(() => PatchTicketsIdTicketsGeoLocation$.outboundSchema).optional(),
            customFields: z
                .array(z.lazy(() => PatchTicketsIdTicketsCustomFields$.outboundSchema))
                .optional(),
            subdivisionCode: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.contactId === undefined ? null : { contactId: v.contactId }),
                ...(v.accountId === undefined ? null : { accountId: v.accountId }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.companyName === undefined ? null : { companyName: v.companyName }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.phone === undefined ? null : { phone: v.phone }),
                ...(v.street === undefined ? null : { street: v.street }),
                ...(v.addressLine2 === undefined ? null : { addressLine2: v.addressLine2 }),
                ...(v.city === undefined ? null : { city: v.city }),
                ...(v.province === undefined ? null : { province: v.province }),
                ...(v.region === undefined ? null : { region: v.region }),
                ...(v.postalCode === undefined ? null : { postalCode: v.postalCode }),
                ...(v.postalCodeExtension === undefined
                    ? null
                    : { postalCodeExtension: v.postalCodeExtension }),
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.countryCode === undefined ? null : { countryCode: v.countryCode }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.geoLocation === undefined ? null : { geoLocation: v.geoLocation }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                ...(v.subdivisionCode === undefined
                    ? null
                    : { subdivisionCode: v.subdivisionCode }),
            };
        });
}

/** @internal */
export const PatchTicketsIdTicketsRequestRequestBodyReporterAddressesType$ = z.nativeEnum(
    PatchTicketsIdTicketsRequestRequestBodyReporterAddressesType
);

/** @internal */
export namespace PatchTicketsIdTicketsRequestGeoLocation$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<
        PatchTicketsIdTicketsRequestGeoLocation,
        z.ZodTypeDef,
        Inbound
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PatchTicketsIdTicketsRequestGeoLocation
    > = z.object({});
}

/** @internal */
export namespace PatchTicketsIdTicketsRequestCustomFields$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<
        PatchTicketsIdTicketsRequestCustomFields,
        z.ZodTypeDef,
        Inbound
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PatchTicketsIdTicketsRequestCustomFields
    > = z.object({});
}

/** @internal */
export namespace PatchTicketsIdTicketsAddresses$ {
    export type Inbound = {
        id?: string | undefined;
        contactId?: string | undefined;
        accountId?: string | undefined;
        firstName?: string | undefined;
        lastName?: string | undefined;
        name?: string | undefined;
        companyName?: string | undefined;
        email?: string | undefined;
        phone?: string | undefined;
        street?: string | undefined;
        addressLine2?: string | undefined;
        city?: string | undefined;
        province?: string | undefined;
        region?: string | undefined;
        postalCode?: string | undefined;
        postalCodeExtension?: string | undefined;
        country?: string | undefined;
        countryCode?: string | undefined;
        type?: PatchTicketsIdTicketsRequestRequestBodyReporterAddressesType | undefined;
        geoLocation?: PatchTicketsIdTicketsRequestGeoLocation$.Inbound | undefined;
        customFields?: Array<PatchTicketsIdTicketsRequestCustomFields$.Inbound> | undefined;
        subdivisionCode?: string | undefined;
    };

    export const inboundSchema: z.ZodType<PatchTicketsIdTicketsAddresses, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            contactId: z.string().optional(),
            accountId: z.string().optional(),
            firstName: z.string().optional(),
            lastName: z.string().optional(),
            name: z.string().optional(),
            companyName: z.string().optional(),
            email: z.string().optional(),
            phone: z.string().optional(),
            street: z.string().optional(),
            addressLine2: z.string().optional(),
            city: z.string().optional(),
            province: z.string().optional(),
            region: z.string().optional(),
            postalCode: z.string().optional(),
            postalCodeExtension: z.string().optional(),
            country: z.string().optional(),
            countryCode: z.string().optional(),
            type: PatchTicketsIdTicketsRequestRequestBodyReporterAddressesType$.optional(),
            geoLocation: z
                .lazy(() => PatchTicketsIdTicketsRequestGeoLocation$.inboundSchema)
                .optional(),
            customFields: z
                .array(z.lazy(() => PatchTicketsIdTicketsRequestCustomFields$.inboundSchema))
                .optional(),
            subdivisionCode: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.contactId === undefined ? null : { contactId: v.contactId }),
                ...(v.accountId === undefined ? null : { accountId: v.accountId }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.companyName === undefined ? null : { companyName: v.companyName }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.phone === undefined ? null : { phone: v.phone }),
                ...(v.street === undefined ? null : { street: v.street }),
                ...(v.addressLine2 === undefined ? null : { addressLine2: v.addressLine2 }),
                ...(v.city === undefined ? null : { city: v.city }),
                ...(v.province === undefined ? null : { province: v.province }),
                ...(v.region === undefined ? null : { region: v.region }),
                ...(v.postalCode === undefined ? null : { postalCode: v.postalCode }),
                ...(v.postalCodeExtension === undefined
                    ? null
                    : { postalCodeExtension: v.postalCodeExtension }),
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.countryCode === undefined ? null : { countryCode: v.countryCode }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.geoLocation === undefined ? null : { geoLocation: v.geoLocation }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                ...(v.subdivisionCode === undefined
                    ? null
                    : { subdivisionCode: v.subdivisionCode }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        contactId?: string | undefined;
        accountId?: string | undefined;
        firstName?: string | undefined;
        lastName?: string | undefined;
        name?: string | undefined;
        companyName?: string | undefined;
        email?: string | undefined;
        phone?: string | undefined;
        street?: string | undefined;
        addressLine2?: string | undefined;
        city?: string | undefined;
        province?: string | undefined;
        region?: string | undefined;
        postalCode?: string | undefined;
        postalCodeExtension?: string | undefined;
        country?: string | undefined;
        countryCode?: string | undefined;
        type?: PatchTicketsIdTicketsRequestRequestBodyReporterAddressesType | undefined;
        geoLocation?: PatchTicketsIdTicketsRequestGeoLocation$.Outbound | undefined;
        customFields?: Array<PatchTicketsIdTicketsRequestCustomFields$.Outbound> | undefined;
        subdivisionCode?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchTicketsIdTicketsAddresses> =
        z
            .object({
                id: z.string().optional(),
                contactId: z.string().optional(),
                accountId: z.string().optional(),
                firstName: z.string().optional(),
                lastName: z.string().optional(),
                name: z.string().optional(),
                companyName: z.string().optional(),
                email: z.string().optional(),
                phone: z.string().optional(),
                street: z.string().optional(),
                addressLine2: z.string().optional(),
                city: z.string().optional(),
                province: z.string().optional(),
                region: z.string().optional(),
                postalCode: z.string().optional(),
                postalCodeExtension: z.string().optional(),
                country: z.string().optional(),
                countryCode: z.string().optional(),
                type: PatchTicketsIdTicketsRequestRequestBodyReporterAddressesType$.optional(),
                geoLocation: z
                    .lazy(() => PatchTicketsIdTicketsRequestGeoLocation$.outboundSchema)
                    .optional(),
                customFields: z
                    .array(z.lazy(() => PatchTicketsIdTicketsRequestCustomFields$.outboundSchema))
                    .optional(),
                subdivisionCode: z.string().optional(),
            })
            .transform((v) => {
                return {
                    ...(v.id === undefined ? null : { id: v.id }),
                    ...(v.contactId === undefined ? null : { contactId: v.contactId }),
                    ...(v.accountId === undefined ? null : { accountId: v.accountId }),
                    ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                    ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                    ...(v.name === undefined ? null : { name: v.name }),
                    ...(v.companyName === undefined ? null : { companyName: v.companyName }),
                    ...(v.email === undefined ? null : { email: v.email }),
                    ...(v.phone === undefined ? null : { phone: v.phone }),
                    ...(v.street === undefined ? null : { street: v.street }),
                    ...(v.addressLine2 === undefined ? null : { addressLine2: v.addressLine2 }),
                    ...(v.city === undefined ? null : { city: v.city }),
                    ...(v.province === undefined ? null : { province: v.province }),
                    ...(v.region === undefined ? null : { region: v.region }),
                    ...(v.postalCode === undefined ? null : { postalCode: v.postalCode }),
                    ...(v.postalCodeExtension === undefined
                        ? null
                        : { postalCodeExtension: v.postalCodeExtension }),
                    ...(v.country === undefined ? null : { country: v.country }),
                    ...(v.countryCode === undefined ? null : { countryCode: v.countryCode }),
                    ...(v.type === undefined ? null : { type: v.type }),
                    ...(v.geoLocation === undefined ? null : { geoLocation: v.geoLocation }),
                    ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                    ...(v.subdivisionCode === undefined
                        ? null
                        : { subdivisionCode: v.subdivisionCode }),
                };
            });
}

/** @internal */
export const PatchTicketsIdTicketsPriority$ = z.nativeEnum(PatchTicketsIdTicketsPriority);

/** @internal */
export const PatchTicketsIdTicketsRequestMimeType$ = z.nativeEnum(
    PatchTicketsIdTicketsRequestMimeType
);

/** @internal */
export namespace PatchTicketsIdTicketsProfilePicture$ {
    export type Inbound = {
        id?: string | undefined;
        src?: string | undefined;
        altText?: string | undefined;
        width?: number | undefined;
        height?: number | undefined;
        thumbnailSrc?: string | undefined;
        caption?: string | undefined;
        title?: string | undefined;
        mimeType?: PatchTicketsIdTicketsRequestMimeType | undefined;
        tags?: Array<string> | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<
        PatchTicketsIdTicketsProfilePicture,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            id: z.string().optional(),
            src: z.string().optional(),
            altText: z.string().optional(),
            width: z.number().optional(),
            height: z.number().optional(),
            thumbnailSrc: z.string().optional(),
            caption: z.string().optional(),
            title: z.string().optional(),
            mimeType: PatchTicketsIdTicketsRequestMimeType$.optional(),
            tags: z.array(z.string()).optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.src === undefined ? null : { src: v.src }),
                ...(v.altText === undefined ? null : { altText: v.altText }),
                ...(v.width === undefined ? null : { width: v.width }),
                ...(v.height === undefined ? null : { height: v.height }),
                ...(v.thumbnailSrc === undefined ? null : { thumbnailSrc: v.thumbnailSrc }),
                ...(v.caption === undefined ? null : { caption: v.caption }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.mimeType === undefined ? null : { mimeType: v.mimeType }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        src?: string | undefined;
        altText?: string | undefined;
        width?: number | undefined;
        height?: number | undefined;
        thumbnailSrc?: string | undefined;
        caption?: string | undefined;
        title?: string | undefined;
        mimeType?: PatchTicketsIdTicketsRequestMimeType | undefined;
        tags?: Array<string> | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PatchTicketsIdTicketsProfilePicture
    > = z
        .object({
            id: z.string().optional(),
            src: z.string().optional(),
            altText: z.string().optional(),
            width: z.number().optional(),
            height: z.number().optional(),
            thumbnailSrc: z.string().optional(),
            caption: z.string().optional(),
            title: z.string().optional(),
            mimeType: PatchTicketsIdTicketsRequestMimeType$.optional(),
            tags: z.array(z.string()).optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.src === undefined ? null : { src: v.src }),
                ...(v.altText === undefined ? null : { altText: v.altText }),
                ...(v.width === undefined ? null : { width: v.width }),
                ...(v.height === undefined ? null : { height: v.height }),
                ...(v.thumbnailSrc === undefined ? null : { thumbnailSrc: v.thumbnailSrc }),
                ...(v.caption === undefined ? null : { caption: v.caption }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.mimeType === undefined ? null : { mimeType: v.mimeType }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });
}

/** @internal */
export const PatchTicketsIdTicketsRequestRequestBodyMimeType$ = z.nativeEnum(
    PatchTicketsIdTicketsRequestRequestBodyMimeType
);

/** @internal */
export namespace PatchTicketsIdTicketsCoverPhoto$ {
    export type Inbound = {
        id?: string | undefined;
        src?: string | undefined;
        altText?: string | undefined;
        width?: number | undefined;
        height?: number | undefined;
        thumbnailSrc?: string | undefined;
        caption?: string | undefined;
        title?: string | undefined;
        mimeType?: PatchTicketsIdTicketsRequestRequestBodyMimeType | undefined;
        tags?: Array<string> | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<PatchTicketsIdTicketsCoverPhoto, z.ZodTypeDef, Inbound> =
        z
            .object({
                id: z.string().optional(),
                src: z.string().optional(),
                altText: z.string().optional(),
                width: z.number().optional(),
                height: z.number().optional(),
                thumbnailSrc: z.string().optional(),
                caption: z.string().optional(),
                title: z.string().optional(),
                mimeType: PatchTicketsIdTicketsRequestRequestBodyMimeType$.optional(),
                tags: z.array(z.string()).optional(),
                createdAt: z.number().optional(),
                updatedAt: z.number().optional(),
                active: z.boolean().optional(),
                deleted: z.boolean().optional(),
            })
            .transform((v) => {
                return {
                    ...(v.id === undefined ? null : { id: v.id }),
                    ...(v.src === undefined ? null : { src: v.src }),
                    ...(v.altText === undefined ? null : { altText: v.altText }),
                    ...(v.width === undefined ? null : { width: v.width }),
                    ...(v.height === undefined ? null : { height: v.height }),
                    ...(v.thumbnailSrc === undefined ? null : { thumbnailSrc: v.thumbnailSrc }),
                    ...(v.caption === undefined ? null : { caption: v.caption }),
                    ...(v.title === undefined ? null : { title: v.title }),
                    ...(v.mimeType === undefined ? null : { mimeType: v.mimeType }),
                    ...(v.tags === undefined ? null : { tags: v.tags }),
                    ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                    ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                    ...(v.active === undefined ? null : { active: v.active }),
                    ...(v.deleted === undefined ? null : { deleted: v.deleted }),
                };
            });

    export type Outbound = {
        id?: string | undefined;
        src?: string | undefined;
        altText?: string | undefined;
        width?: number | undefined;
        height?: number | undefined;
        thumbnailSrc?: string | undefined;
        caption?: string | undefined;
        title?: string | undefined;
        mimeType?: PatchTicketsIdTicketsRequestRequestBodyMimeType | undefined;
        tags?: Array<string> | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PatchTicketsIdTicketsCoverPhoto
    > = z
        .object({
            id: z.string().optional(),
            src: z.string().optional(),
            altText: z.string().optional(),
            width: z.number().optional(),
            height: z.number().optional(),
            thumbnailSrc: z.string().optional(),
            caption: z.string().optional(),
            title: z.string().optional(),
            mimeType: PatchTicketsIdTicketsRequestRequestBodyMimeType$.optional(),
            tags: z.array(z.string()).optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.src === undefined ? null : { src: v.src }),
                ...(v.altText === undefined ? null : { altText: v.altText }),
                ...(v.width === undefined ? null : { width: v.width }),
                ...(v.height === undefined ? null : { height: v.height }),
                ...(v.thumbnailSrc === undefined ? null : { thumbnailSrc: v.thumbnailSrc }),
                ...(v.caption === undefined ? null : { caption: v.caption }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.mimeType === undefined ? null : { mimeType: v.mimeType }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });
}

/** @internal */
export const PatchTicketsIdTicketsGender$ = z.nativeEnum(PatchTicketsIdTicketsGender);

/** @internal */
export const PatchTicketsIdTicketsRequestRequestBodyReporterNotesType$ = z.nativeEnum(
    PatchTicketsIdTicketsRequestRequestBodyReporterNotesType
);

/** @internal */
export namespace PatchTicketsIdTicketsRequestRequestBodyGeoLocation$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<
        PatchTicketsIdTicketsRequestRequestBodyGeoLocation,
        z.ZodTypeDef,
        Inbound
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PatchTicketsIdTicketsRequestRequestBodyGeoLocation
    > = z.object({});
}

/** @internal */
export namespace PatchTicketsIdTicketsRequestRequestBodyCustomFields$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<
        PatchTicketsIdTicketsRequestRequestBodyCustomFields,
        z.ZodTypeDef,
        Inbound
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PatchTicketsIdTicketsRequestRequestBodyCustomFields
    > = z.object({});
}

/** @internal */
export namespace PatchTicketsIdTicketsRequestAddresses$ {
    export type Inbound = {
        id?: string | undefined;
        contactId?: string | undefined;
        accountId?: string | undefined;
        firstName?: string | undefined;
        lastName?: string | undefined;
        name?: string | undefined;
        companyName?: string | undefined;
        email?: string | undefined;
        phone?: string | undefined;
        street?: string | undefined;
        addressLine2?: string | undefined;
        city?: string | undefined;
        province?: string | undefined;
        region?: string | undefined;
        postalCode?: string | undefined;
        postalCodeExtension?: string | undefined;
        country?: string | undefined;
        countryCode?: string | undefined;
        type?: PatchTicketsIdTicketsRequestRequestBodyReporterNotesType | undefined;
        geoLocation?: PatchTicketsIdTicketsRequestRequestBodyGeoLocation$.Inbound | undefined;
        customFields?:
            | Array<PatchTicketsIdTicketsRequestRequestBodyCustomFields$.Inbound>
            | undefined;
        subdivisionCode?: string | undefined;
    };

    export const inboundSchema: z.ZodType<
        PatchTicketsIdTicketsRequestAddresses,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            id: z.string().optional(),
            contactId: z.string().optional(),
            accountId: z.string().optional(),
            firstName: z.string().optional(),
            lastName: z.string().optional(),
            name: z.string().optional(),
            companyName: z.string().optional(),
            email: z.string().optional(),
            phone: z.string().optional(),
            street: z.string().optional(),
            addressLine2: z.string().optional(),
            city: z.string().optional(),
            province: z.string().optional(),
            region: z.string().optional(),
            postalCode: z.string().optional(),
            postalCodeExtension: z.string().optional(),
            country: z.string().optional(),
            countryCode: z.string().optional(),
            type: PatchTicketsIdTicketsRequestRequestBodyReporterNotesType$.optional(),
            geoLocation: z
                .lazy(() => PatchTicketsIdTicketsRequestRequestBodyGeoLocation$.inboundSchema)
                .optional(),
            customFields: z
                .array(
                    z.lazy(() => PatchTicketsIdTicketsRequestRequestBodyCustomFields$.inboundSchema)
                )
                .optional(),
            subdivisionCode: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.contactId === undefined ? null : { contactId: v.contactId }),
                ...(v.accountId === undefined ? null : { accountId: v.accountId }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.companyName === undefined ? null : { companyName: v.companyName }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.phone === undefined ? null : { phone: v.phone }),
                ...(v.street === undefined ? null : { street: v.street }),
                ...(v.addressLine2 === undefined ? null : { addressLine2: v.addressLine2 }),
                ...(v.city === undefined ? null : { city: v.city }),
                ...(v.province === undefined ? null : { province: v.province }),
                ...(v.region === undefined ? null : { region: v.region }),
                ...(v.postalCode === undefined ? null : { postalCode: v.postalCode }),
                ...(v.postalCodeExtension === undefined
                    ? null
                    : { postalCodeExtension: v.postalCodeExtension }),
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.countryCode === undefined ? null : { countryCode: v.countryCode }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.geoLocation === undefined ? null : { geoLocation: v.geoLocation }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                ...(v.subdivisionCode === undefined
                    ? null
                    : { subdivisionCode: v.subdivisionCode }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        contactId?: string | undefined;
        accountId?: string | undefined;
        firstName?: string | undefined;
        lastName?: string | undefined;
        name?: string | undefined;
        companyName?: string | undefined;
        email?: string | undefined;
        phone?: string | undefined;
        street?: string | undefined;
        addressLine2?: string | undefined;
        city?: string | undefined;
        province?: string | undefined;
        region?: string | undefined;
        postalCode?: string | undefined;
        postalCodeExtension?: string | undefined;
        country?: string | undefined;
        countryCode?: string | undefined;
        type?: PatchTicketsIdTicketsRequestRequestBodyReporterNotesType | undefined;
        geoLocation?: PatchTicketsIdTicketsRequestRequestBodyGeoLocation$.Outbound | undefined;
        customFields?:
            | Array<PatchTicketsIdTicketsRequestRequestBodyCustomFields$.Outbound>
            | undefined;
        subdivisionCode?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PatchTicketsIdTicketsRequestAddresses
    > = z
        .object({
            id: z.string().optional(),
            contactId: z.string().optional(),
            accountId: z.string().optional(),
            firstName: z.string().optional(),
            lastName: z.string().optional(),
            name: z.string().optional(),
            companyName: z.string().optional(),
            email: z.string().optional(),
            phone: z.string().optional(),
            street: z.string().optional(),
            addressLine2: z.string().optional(),
            city: z.string().optional(),
            province: z.string().optional(),
            region: z.string().optional(),
            postalCode: z.string().optional(),
            postalCodeExtension: z.string().optional(),
            country: z.string().optional(),
            countryCode: z.string().optional(),
            type: PatchTicketsIdTicketsRequestRequestBodyReporterNotesType$.optional(),
            geoLocation: z
                .lazy(() => PatchTicketsIdTicketsRequestRequestBodyGeoLocation$.outboundSchema)
                .optional(),
            customFields: z
                .array(
                    z.lazy(
                        () => PatchTicketsIdTicketsRequestRequestBodyCustomFields$.outboundSchema
                    )
                )
                .optional(),
            subdivisionCode: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.contactId === undefined ? null : { contactId: v.contactId }),
                ...(v.accountId === undefined ? null : { accountId: v.accountId }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.companyName === undefined ? null : { companyName: v.companyName }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.phone === undefined ? null : { phone: v.phone }),
                ...(v.street === undefined ? null : { street: v.street }),
                ...(v.addressLine2 === undefined ? null : { addressLine2: v.addressLine2 }),
                ...(v.city === undefined ? null : { city: v.city }),
                ...(v.province === undefined ? null : { province: v.province }),
                ...(v.region === undefined ? null : { region: v.region }),
                ...(v.postalCode === undefined ? null : { postalCode: v.postalCode }),
                ...(v.postalCodeExtension === undefined
                    ? null
                    : { postalCodeExtension: v.postalCodeExtension }),
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.countryCode === undefined ? null : { countryCode: v.countryCode }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.geoLocation === undefined ? null : { geoLocation: v.geoLocation }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                ...(v.subdivisionCode === undefined
                    ? null
                    : { subdivisionCode: v.subdivisionCode }),
            };
        });
}

/** @internal */
export const PatchTicketsIdTicketsRoles$ = z.nativeEnum(PatchTicketsIdTicketsRoles);

/** @internal */
export const PatchTicketsIdTicketsCommunications$ = z.nativeEnum(
    PatchTicketsIdTicketsCommunications
);

/** @internal */
export namespace PatchTicketsIdTicketsPreferences$ {
    export type Inbound = {
        id?: string | undefined;
        language?: string | undefined;
        currency?: string | undefined;
        timeZone?: string | undefined;
        communications?: PatchTicketsIdTicketsCommunications | undefined;
    };

    export const inboundSchema: z.ZodType<PatchTicketsIdTicketsPreferences, z.ZodTypeDef, Inbound> =
        z
            .object({
                id: z.string().optional(),
                language: z.string().optional(),
                currency: z.string().optional(),
                timeZone: z.string().optional(),
                communications: PatchTicketsIdTicketsCommunications$.optional(),
            })
            .transform((v) => {
                return {
                    ...(v.id === undefined ? null : { id: v.id }),
                    ...(v.language === undefined ? null : { language: v.language }),
                    ...(v.currency === undefined ? null : { currency: v.currency }),
                    ...(v.timeZone === undefined ? null : { timeZone: v.timeZone }),
                    ...(v.communications === undefined
                        ? null
                        : { communications: v.communications }),
                };
            });

    export type Outbound = {
        id?: string | undefined;
        language?: string | undefined;
        currency?: string | undefined;
        timeZone?: string | undefined;
        communications?: PatchTicketsIdTicketsCommunications | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PatchTicketsIdTicketsPreferences
    > = z
        .object({
            id: z.string().optional(),
            language: z.string().optional(),
            currency: z.string().optional(),
            timeZone: z.string().optional(),
            communications: PatchTicketsIdTicketsCommunications$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.language === undefined ? null : { language: v.language }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.timeZone === undefined ? null : { timeZone: v.timeZone }),
                ...(v.communications === undefined ? null : { communications: v.communications }),
            };
        });
}

/** @internal */
export const PatchTicketsIdTicketsRequestRequestBodyReporterNotesAuthorType$ = z.nativeEnum(
    PatchTicketsIdTicketsRequestRequestBodyReporterNotesAuthorType
);

/** @internal */
export const PatchTicketsIdTicketsRequestRequestBodyReporterNotesAuthorSocialLinksType$ =
    z.nativeEnum(PatchTicketsIdTicketsRequestRequestBodyReporterNotesAuthorSocialLinksType);

/** @internal */
export namespace PatchTicketsIdTicketsAdditionalInfo$ {
    export type Inbound = {
        id?: string | undefined;
        key?: string | undefined;
        value?: string | undefined;
        type?:
            | PatchTicketsIdTicketsRequestRequestBodyReporterNotesAuthorSocialLinksType
            | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        entityId?: string | undefined;
        entityType?: string | undefined;
    };

    export const inboundSchema: z.ZodType<
        PatchTicketsIdTicketsAdditionalInfo,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            id: z.string().optional(),
            key: z.string().optional(),
            value: z.string().optional(),
            type: PatchTicketsIdTicketsRequestRequestBodyReporterNotesAuthorSocialLinksType$.optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            entityId: z.string().optional(),
            entityType: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.key === undefined ? null : { key: v.key }),
                ...(v.value === undefined ? null : { value: v.value }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.entityId === undefined ? null : { entityId: v.entityId }),
                ...(v.entityType === undefined ? null : { entityType: v.entityType }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        key?: string | undefined;
        value?: string | undefined;
        type?:
            | PatchTicketsIdTicketsRequestRequestBodyReporterNotesAuthorSocialLinksType
            | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        entityId?: string | undefined;
        entityType?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PatchTicketsIdTicketsAdditionalInfo
    > = z
        .object({
            id: z.string().optional(),
            key: z.string().optional(),
            value: z.string().optional(),
            type: PatchTicketsIdTicketsRequestRequestBodyReporterNotesAuthorSocialLinksType$.optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            entityId: z.string().optional(),
            entityType: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.key === undefined ? null : { key: v.key }),
                ...(v.value === undefined ? null : { value: v.value }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.entityId === undefined ? null : { entityId: v.entityId }),
                ...(v.entityType === undefined ? null : { entityType: v.entityType }),
            };
        });
}

/** @internal */
export namespace PatchTicketsIdTicketsSocialLinks$ {
    export type Inbound = {
        type?: PatchTicketsIdTicketsRequestRequestBodyReporterNotesAuthorType | undefined;
        username?: string | undefined;
        displayName?: string | undefined;
        url?: string | undefined;
        avatarUrl?: string | undefined;
        email?: string | undefined;
        additionalInfo?: PatchTicketsIdTicketsAdditionalInfo$.Inbound | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<PatchTicketsIdTicketsSocialLinks, z.ZodTypeDef, Inbound> =
        z
            .object({
                type: PatchTicketsIdTicketsRequestRequestBodyReporterNotesAuthorType$.optional(),
                username: z.string().optional(),
                displayName: z.string().optional(),
                url: z.string().optional(),
                avatarUrl: z.string().optional(),
                email: z.string().optional(),
                additionalInfo: z
                    .lazy(() => PatchTicketsIdTicketsAdditionalInfo$.inboundSchema)
                    .optional(),
                createdAt: z.number().optional(),
                updatedAt: z.number().optional(),
                active: z.boolean().optional(),
                deleted: z.boolean().optional(),
            })
            .transform((v) => {
                return {
                    ...(v.type === undefined ? null : { type: v.type }),
                    ...(v.username === undefined ? null : { username: v.username }),
                    ...(v.displayName === undefined ? null : { displayName: v.displayName }),
                    ...(v.url === undefined ? null : { url: v.url }),
                    ...(v.avatarUrl === undefined ? null : { avatarUrl: v.avatarUrl }),
                    ...(v.email === undefined ? null : { email: v.email }),
                    ...(v.additionalInfo === undefined
                        ? null
                        : { additionalInfo: v.additionalInfo }),
                    ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                    ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                    ...(v.active === undefined ? null : { active: v.active }),
                    ...(v.deleted === undefined ? null : { deleted: v.deleted }),
                };
            });

    export type Outbound = {
        type?: PatchTicketsIdTicketsRequestRequestBodyReporterNotesAuthorType | undefined;
        username?: string | undefined;
        displayName?: string | undefined;
        url?: string | undefined;
        avatarUrl?: string | undefined;
        email?: string | undefined;
        additionalInfo?: PatchTicketsIdTicketsAdditionalInfo$.Outbound | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PatchTicketsIdTicketsSocialLinks
    > = z
        .object({
            type: PatchTicketsIdTicketsRequestRequestBodyReporterNotesAuthorType$.optional(),
            username: z.string().optional(),
            displayName: z.string().optional(),
            url: z.string().optional(),
            avatarUrl: z.string().optional(),
            email: z.string().optional(),
            additionalInfo: z
                .lazy(() => PatchTicketsIdTicketsAdditionalInfo$.outboundSchema)
                .optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.username === undefined ? null : { username: v.username }),
                ...(v.displayName === undefined ? null : { displayName: v.displayName }),
                ...(v.url === undefined ? null : { url: v.url }),
                ...(v.avatarUrl === undefined ? null : { avatarUrl: v.avatarUrl }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.additionalInfo === undefined ? null : { additionalInfo: v.additionalInfo }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });
}

/** @internal */
export const PatchTicketsIdTicketsRequestStatus$ = z.nativeEnum(PatchTicketsIdTicketsRequestStatus);

/** @internal */
export const PatchTicketsIdTicketsProvider$ = z.nativeEnum(PatchTicketsIdTicketsProvider);

/** @internal */
export namespace PatchTicketsIdTicketsSso$ {
    export type Inbound = {
        provider?: PatchTicketsIdTicketsProvider | undefined;
        providerUserId?: string | undefined;
        profileUrl?: string | undefined;
        accessToken?: string | undefined;
        refreshToken?: string | undefined;
        expiresIn?: number | undefined;
        expiryDate?: number | undefined;
        scopes?: Array<string> | undefined;
        tokenType?: string | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<PatchTicketsIdTicketsSso, z.ZodTypeDef, Inbound> = z
        .object({
            provider: PatchTicketsIdTicketsProvider$.optional(),
            providerUserId: z.string().optional(),
            profileUrl: z.string().optional(),
            accessToken: z.string().optional(),
            refreshToken: z.string().optional(),
            expiresIn: z.number().optional(),
            expiryDate: z.number().optional(),
            scopes: z.array(z.string()).optional(),
            tokenType: z.string().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.provider === undefined ? null : { provider: v.provider }),
                ...(v.providerUserId === undefined ? null : { providerUserId: v.providerUserId }),
                ...(v.profileUrl === undefined ? null : { profileUrl: v.profileUrl }),
                ...(v.accessToken === undefined ? null : { accessToken: v.accessToken }),
                ...(v.refreshToken === undefined ? null : { refreshToken: v.refreshToken }),
                ...(v.expiresIn === undefined ? null : { expiresIn: v.expiresIn }),
                ...(v.expiryDate === undefined ? null : { expiryDate: v.expiryDate }),
                ...(v.scopes === undefined ? null : { scopes: v.scopes }),
                ...(v.tokenType === undefined ? null : { tokenType: v.tokenType }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });

    export type Outbound = {
        provider?: PatchTicketsIdTicketsProvider | undefined;
        providerUserId?: string | undefined;
        profileUrl?: string | undefined;
        accessToken?: string | undefined;
        refreshToken?: string | undefined;
        expiresIn?: number | undefined;
        expiryDate?: number | undefined;
        scopes?: Array<string> | undefined;
        tokenType?: string | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchTicketsIdTicketsSso> = z
        .object({
            provider: PatchTicketsIdTicketsProvider$.optional(),
            providerUserId: z.string().optional(),
            profileUrl: z.string().optional(),
            accessToken: z.string().optional(),
            refreshToken: z.string().optional(),
            expiresIn: z.number().optional(),
            expiryDate: z.number().optional(),
            scopes: z.array(z.string()).optional(),
            tokenType: z.string().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.provider === undefined ? null : { provider: v.provider }),
                ...(v.providerUserId === undefined ? null : { providerUserId: v.providerUserId }),
                ...(v.profileUrl === undefined ? null : { profileUrl: v.profileUrl }),
                ...(v.accessToken === undefined ? null : { accessToken: v.accessToken }),
                ...(v.refreshToken === undefined ? null : { refreshToken: v.refreshToken }),
                ...(v.expiresIn === undefined ? null : { expiresIn: v.expiresIn }),
                ...(v.expiryDate === undefined ? null : { expiryDate: v.expiryDate }),
                ...(v.scopes === undefined ? null : { scopes: v.scopes }),
                ...(v.tokenType === undefined ? null : { tokenType: v.tokenType }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });
}

/** @internal */
export const PatchTicketsIdTicketsRequestRequestBodyReporterNotesAuthorPaymentMethodsType$ =
    z.nativeEnum(PatchTicketsIdTicketsRequestRequestBodyReporterNotesAuthorPaymentMethodsType);

/** @internal */
export namespace PatchTicketsIdTicketsPaymentMethods$ {
    export type Inbound = {
        id?: string | undefined;
        type?:
            | PatchTicketsIdTicketsRequestRequestBodyReporterNotesAuthorPaymentMethodsType
            | undefined;
        details?: string | undefined;
        isDefault?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<
        PatchTicketsIdTicketsPaymentMethods,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            id: z.string().optional(),
            type: PatchTicketsIdTicketsRequestRequestBodyReporterNotesAuthorPaymentMethodsType$.optional(),
            details: z.string().optional(),
            isDefault: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.details === undefined ? null : { details: v.details }),
                ...(v.isDefault === undefined ? null : { isDefault: v.isDefault }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        type?:
            | PatchTicketsIdTicketsRequestRequestBodyReporterNotesAuthorPaymentMethodsType
            | undefined;
        details?: string | undefined;
        isDefault?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PatchTicketsIdTicketsPaymentMethods
    > = z
        .object({
            id: z.string().optional(),
            type: PatchTicketsIdTicketsRequestRequestBodyReporterNotesAuthorPaymentMethodsType$.optional(),
            details: z.string().optional(),
            isDefault: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.details === undefined ? null : { details: v.details }),
                ...(v.isDefault === undefined ? null : { isDefault: v.isDefault }),
            };
        });
}

/** @internal */
export namespace PatchTicketsIdAuthor$ {
    export type Inbound = {
        id?: string | undefined;
        firstName?: string | undefined;
        middleName?: string | undefined;
        lastName?: string | undefined;
        email?: string | undefined;
        username?: string | undefined;
        password?: string | undefined;
        profilePicture?: PatchTicketsIdTicketsProfilePicture$.Inbound | undefined;
        coverPhoto?: PatchTicketsIdTicketsCoverPhoto$.Inbound | undefined;
        gender?: PatchTicketsIdTicketsGender | undefined;
        dateOfBirth?: number | undefined;
        phoneNumber?: string | undefined;
        isActive?: boolean | undefined;
        lastLogin?: number | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        addresses?: Array<PatchTicketsIdTicketsRequestAddresses$.Inbound> | undefined;
        roles?: Array<PatchTicketsIdTicketsRoles> | undefined;
        preferences?: PatchTicketsIdTicketsPreferences$.Inbound | undefined;
        bio?: string | undefined;
        website?: string | undefined;
        socialLinks?: PatchTicketsIdTicketsSocialLinks$.Inbound | undefined;
        status?: PatchTicketsIdTicketsRequestStatus | undefined;
        sso?: Array<PatchTicketsIdTicketsSso$.Inbound> | undefined;
        paymentMethods?: PatchTicketsIdTicketsPaymentMethods$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<PatchTicketsIdAuthor, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            firstName: z.string().optional(),
            middleName: z.string().optional(),
            lastName: z.string().optional(),
            email: z.string().optional(),
            username: z.string().optional(),
            password: z.string().optional(),
            profilePicture: z
                .lazy(() => PatchTicketsIdTicketsProfilePicture$.inboundSchema)
                .optional(),
            coverPhoto: z.lazy(() => PatchTicketsIdTicketsCoverPhoto$.inboundSchema).optional(),
            gender: PatchTicketsIdTicketsGender$.optional(),
            dateOfBirth: z.number().optional(),
            phoneNumber: z.string().optional(),
            isActive: z.boolean().optional(),
            lastLogin: z.number().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            addresses: z
                .array(z.lazy(() => PatchTicketsIdTicketsRequestAddresses$.inboundSchema))
                .optional(),
            roles: z.array(PatchTicketsIdTicketsRoles$).optional(),
            preferences: z.lazy(() => PatchTicketsIdTicketsPreferences$.inboundSchema).optional(),
            bio: z.string().optional(),
            website: z.string().optional(),
            socialLinks: z.lazy(() => PatchTicketsIdTicketsSocialLinks$.inboundSchema).optional(),
            status: PatchTicketsIdTicketsRequestStatus$.optional(),
            sso: z.array(z.lazy(() => PatchTicketsIdTicketsSso$.inboundSchema)).optional(),
            paymentMethods: z
                .lazy(() => PatchTicketsIdTicketsPaymentMethods$.inboundSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.middleName === undefined ? null : { middleName: v.middleName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.username === undefined ? null : { username: v.username }),
                ...(v.password === undefined ? null : { password: v.password }),
                ...(v.profilePicture === undefined ? null : { profilePicture: v.profilePicture }),
                ...(v.coverPhoto === undefined ? null : { coverPhoto: v.coverPhoto }),
                ...(v.gender === undefined ? null : { gender: v.gender }),
                ...(v.dateOfBirth === undefined ? null : { dateOfBirth: v.dateOfBirth }),
                ...(v.phoneNumber === undefined ? null : { phoneNumber: v.phoneNumber }),
                ...(v.isActive === undefined ? null : { isActive: v.isActive }),
                ...(v.lastLogin === undefined ? null : { lastLogin: v.lastLogin }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.addresses === undefined ? null : { addresses: v.addresses }),
                ...(v.roles === undefined ? null : { roles: v.roles }),
                ...(v.preferences === undefined ? null : { preferences: v.preferences }),
                ...(v.bio === undefined ? null : { bio: v.bio }),
                ...(v.website === undefined ? null : { website: v.website }),
                ...(v.socialLinks === undefined ? null : { socialLinks: v.socialLinks }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.sso === undefined ? null : { sso: v.sso }),
                ...(v.paymentMethods === undefined ? null : { paymentMethods: v.paymentMethods }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        firstName?: string | undefined;
        middleName?: string | undefined;
        lastName?: string | undefined;
        email?: string | undefined;
        username?: string | undefined;
        password?: string | undefined;
        profilePicture?: PatchTicketsIdTicketsProfilePicture$.Outbound | undefined;
        coverPhoto?: PatchTicketsIdTicketsCoverPhoto$.Outbound | undefined;
        gender?: PatchTicketsIdTicketsGender | undefined;
        dateOfBirth?: number | undefined;
        phoneNumber?: string | undefined;
        isActive?: boolean | undefined;
        lastLogin?: number | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        addresses?: Array<PatchTicketsIdTicketsRequestAddresses$.Outbound> | undefined;
        roles?: Array<PatchTicketsIdTicketsRoles> | undefined;
        preferences?: PatchTicketsIdTicketsPreferences$.Outbound | undefined;
        bio?: string | undefined;
        website?: string | undefined;
        socialLinks?: PatchTicketsIdTicketsSocialLinks$.Outbound | undefined;
        status?: PatchTicketsIdTicketsRequestStatus | undefined;
        sso?: Array<PatchTicketsIdTicketsSso$.Outbound> | undefined;
        paymentMethods?: PatchTicketsIdTicketsPaymentMethods$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchTicketsIdAuthor> = z
        .object({
            id: z.string().optional(),
            firstName: z.string().optional(),
            middleName: z.string().optional(),
            lastName: z.string().optional(),
            email: z.string().optional(),
            username: z.string().optional(),
            password: z.string().optional(),
            profilePicture: z
                .lazy(() => PatchTicketsIdTicketsProfilePicture$.outboundSchema)
                .optional(),
            coverPhoto: z.lazy(() => PatchTicketsIdTicketsCoverPhoto$.outboundSchema).optional(),
            gender: PatchTicketsIdTicketsGender$.optional(),
            dateOfBirth: z.number().optional(),
            phoneNumber: z.string().optional(),
            isActive: z.boolean().optional(),
            lastLogin: z.number().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            addresses: z
                .array(z.lazy(() => PatchTicketsIdTicketsRequestAddresses$.outboundSchema))
                .optional(),
            roles: z.array(PatchTicketsIdTicketsRoles$).optional(),
            preferences: z.lazy(() => PatchTicketsIdTicketsPreferences$.outboundSchema).optional(),
            bio: z.string().optional(),
            website: z.string().optional(),
            socialLinks: z.lazy(() => PatchTicketsIdTicketsSocialLinks$.outboundSchema).optional(),
            status: PatchTicketsIdTicketsRequestStatus$.optional(),
            sso: z.array(z.lazy(() => PatchTicketsIdTicketsSso$.outboundSchema)).optional(),
            paymentMethods: z
                .lazy(() => PatchTicketsIdTicketsPaymentMethods$.outboundSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.middleName === undefined ? null : { middleName: v.middleName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.username === undefined ? null : { username: v.username }),
                ...(v.password === undefined ? null : { password: v.password }),
                ...(v.profilePicture === undefined ? null : { profilePicture: v.profilePicture }),
                ...(v.coverPhoto === undefined ? null : { coverPhoto: v.coverPhoto }),
                ...(v.gender === undefined ? null : { gender: v.gender }),
                ...(v.dateOfBirth === undefined ? null : { dateOfBirth: v.dateOfBirth }),
                ...(v.phoneNumber === undefined ? null : { phoneNumber: v.phoneNumber }),
                ...(v.isActive === undefined ? null : { isActive: v.isActive }),
                ...(v.lastLogin === undefined ? null : { lastLogin: v.lastLogin }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.addresses === undefined ? null : { addresses: v.addresses }),
                ...(v.roles === undefined ? null : { roles: v.roles }),
                ...(v.preferences === undefined ? null : { preferences: v.preferences }),
                ...(v.bio === undefined ? null : { bio: v.bio }),
                ...(v.website === undefined ? null : { website: v.website }),
                ...(v.socialLinks === undefined ? null : { socialLinks: v.socialLinks }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.sso === undefined ? null : { sso: v.sso }),
                ...(v.paymentMethods === undefined ? null : { paymentMethods: v.paymentMethods }),
            };
        });
}

/** @internal */
export namespace PatchTicketsIdMetadata$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<PatchTicketsIdMetadata, z.ZodTypeDef, Inbound> = z.object(
        {}
    );

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchTicketsIdMetadata> =
        z.object({});
}

/** @internal */
export namespace PatchTicketsIdAssociatedWith$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<PatchTicketsIdAssociatedWith, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchTicketsIdAssociatedWith> =
        z.object({});
}

/** @internal */
export namespace PatchTicketsIdPermissions$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<PatchTicketsIdPermissions, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchTicketsIdPermissions> =
        z.object({});
}

/** @internal */
export namespace PatchTicketsIdAttachments$ {
    export type Inbound = {
        id?: string | undefined;
        fileName?: string | undefined;
        fileSize?: number | undefined;
        fileType?: string | undefined;
        url?: string | undefined;
        thumbnailUrl?: string | undefined;
        previewUrl?: string | undefined;
        content?: string | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        metadata?: PatchTicketsIdMetadata$.Inbound | undefined;
        associatedWith?: PatchTicketsIdAssociatedWith$.Inbound | undefined;
        permissions?: PatchTicketsIdPermissions$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<PatchTicketsIdAttachments, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            fileName: z.string().optional(),
            fileSize: z.number().optional(),
            fileType: z.string().optional(),
            url: z.string().optional(),
            thumbnailUrl: z.string().optional(),
            previewUrl: z.string().optional(),
            content: z.string().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            metadata: z.lazy(() => PatchTicketsIdMetadata$.inboundSchema).optional(),
            associatedWith: z.lazy(() => PatchTicketsIdAssociatedWith$.inboundSchema).optional(),
            permissions: z.lazy(() => PatchTicketsIdPermissions$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fileName === undefined ? null : { fileName: v.fileName }),
                ...(v.fileSize === undefined ? null : { fileSize: v.fileSize }),
                ...(v.fileType === undefined ? null : { fileType: v.fileType }),
                ...(v.url === undefined ? null : { url: v.url }),
                ...(v.thumbnailUrl === undefined ? null : { thumbnailUrl: v.thumbnailUrl }),
                ...(v.previewUrl === undefined ? null : { previewUrl: v.previewUrl }),
                ...(v.content === undefined ? null : { content: v.content }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                ...(v.associatedWith === undefined ? null : { associatedWith: v.associatedWith }),
                ...(v.permissions === undefined ? null : { permissions: v.permissions }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        fileName?: string | undefined;
        fileSize?: number | undefined;
        fileType?: string | undefined;
        url?: string | undefined;
        thumbnailUrl?: string | undefined;
        previewUrl?: string | undefined;
        content?: string | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        metadata?: PatchTicketsIdMetadata$.Outbound | undefined;
        associatedWith?: PatchTicketsIdAssociatedWith$.Outbound | undefined;
        permissions?: PatchTicketsIdPermissions$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchTicketsIdAttachments> = z
        .object({
            id: z.string().optional(),
            fileName: z.string().optional(),
            fileSize: z.number().optional(),
            fileType: z.string().optional(),
            url: z.string().optional(),
            thumbnailUrl: z.string().optional(),
            previewUrl: z.string().optional(),
            content: z.string().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            metadata: z.lazy(() => PatchTicketsIdMetadata$.outboundSchema).optional(),
            associatedWith: z.lazy(() => PatchTicketsIdAssociatedWith$.outboundSchema).optional(),
            permissions: z.lazy(() => PatchTicketsIdPermissions$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fileName === undefined ? null : { fileName: v.fileName }),
                ...(v.fileSize === undefined ? null : { fileSize: v.fileSize }),
                ...(v.fileType === undefined ? null : { fileType: v.fileType }),
                ...(v.url === undefined ? null : { url: v.url }),
                ...(v.thumbnailUrl === undefined ? null : { thumbnailUrl: v.thumbnailUrl }),
                ...(v.previewUrl === undefined ? null : { previewUrl: v.previewUrl }),
                ...(v.content === undefined ? null : { content: v.content }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                ...(v.associatedWith === undefined ? null : { associatedWith: v.associatedWith }),
                ...(v.permissions === undefined ? null : { permissions: v.permissions }),
            };
        });
}

/** @internal */
export namespace PatchTicketsIdTicketsRequestProfilePicture$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<
        PatchTicketsIdTicketsRequestProfilePicture,
        z.ZodTypeDef,
        Inbound
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PatchTicketsIdTicketsRequestProfilePicture
    > = z.object({});
}

/** @internal */
export namespace PatchTicketsIdTicketsRequestCoverPhoto$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<
        PatchTicketsIdTicketsRequestCoverPhoto,
        z.ZodTypeDef,
        Inbound
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PatchTicketsIdTicketsRequestCoverPhoto
    > = z.object({});
}

/** @internal */
export const PatchTicketsIdTicketsRequestGender$ = z.nativeEnum(PatchTicketsIdTicketsRequestGender);

/** @internal */
export namespace PatchTicketsIdTicketsRequestRequestBodyAddresses$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<
        PatchTicketsIdTicketsRequestRequestBodyAddresses,
        z.ZodTypeDef,
        Inbound
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PatchTicketsIdTicketsRequestRequestBodyAddresses
    > = z.object({});
}

/** @internal */
export const PatchTicketsIdTicketsRequestRoles$ = z.nativeEnum(PatchTicketsIdTicketsRequestRoles);

/** @internal */
export namespace PatchTicketsIdTicketsRequestPreferences$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<
        PatchTicketsIdTicketsRequestPreferences,
        z.ZodTypeDef,
        Inbound
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PatchTicketsIdTicketsRequestPreferences
    > = z.object({});
}

/** @internal */
export namespace PatchTicketsIdTicketsRequestSocialLinks$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<
        PatchTicketsIdTicketsRequestSocialLinks,
        z.ZodTypeDef,
        Inbound
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PatchTicketsIdTicketsRequestSocialLinks
    > = z.object({});
}

/** @internal */
export const PatchTicketsIdTicketsRequestRequestBodyStatus$ = z.nativeEnum(
    PatchTicketsIdTicketsRequestRequestBodyStatus
);

/** @internal */
export namespace PatchTicketsIdTicketsRequestSso$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<PatchTicketsIdTicketsRequestSso, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PatchTicketsIdTicketsRequestSso
    > = z.object({});
}

/** @internal */
export namespace PatchTicketsIdTicketsRequestPaymentMethods$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<
        PatchTicketsIdTicketsRequestPaymentMethods,
        z.ZodTypeDef,
        Inbound
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PatchTicketsIdTicketsRequestPaymentMethods
    > = z.object({});
}

/** @internal */
export namespace PatchTicketsIdSharedWith$ {
    export type Inbound = {
        id?: string | undefined;
        firstName?: string | undefined;
        middleName?: string | undefined;
        lastName?: string | undefined;
        email?: string | undefined;
        username?: string | undefined;
        password?: string | undefined;
        profilePicture?: PatchTicketsIdTicketsRequestProfilePicture$.Inbound | undefined;
        coverPhoto?: PatchTicketsIdTicketsRequestCoverPhoto$.Inbound | undefined;
        gender?: PatchTicketsIdTicketsRequestGender | undefined;
        dateOfBirth?: number | undefined;
        phoneNumber?: string | undefined;
        isActive?: boolean | undefined;
        lastLogin?: number | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        addresses?: Array<PatchTicketsIdTicketsRequestRequestBodyAddresses$.Inbound> | undefined;
        roles?: Array<PatchTicketsIdTicketsRequestRoles> | undefined;
        preferences?: PatchTicketsIdTicketsRequestPreferences$.Inbound | undefined;
        bio?: string | undefined;
        website?: string | undefined;
        socialLinks?: PatchTicketsIdTicketsRequestSocialLinks$.Inbound | undefined;
        status?: PatchTicketsIdTicketsRequestRequestBodyStatus | undefined;
        sso?: Array<PatchTicketsIdTicketsRequestSso$.Inbound> | undefined;
        paymentMethods?: PatchTicketsIdTicketsRequestPaymentMethods$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<PatchTicketsIdSharedWith, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            firstName: z.string().optional(),
            middleName: z.string().optional(),
            lastName: z.string().optional(),
            email: z.string().optional(),
            username: z.string().optional(),
            password: z.string().optional(),
            profilePicture: z
                .lazy(() => PatchTicketsIdTicketsRequestProfilePicture$.inboundSchema)
                .optional(),
            coverPhoto: z
                .lazy(() => PatchTicketsIdTicketsRequestCoverPhoto$.inboundSchema)
                .optional(),
            gender: PatchTicketsIdTicketsRequestGender$.optional(),
            dateOfBirth: z.number().optional(),
            phoneNumber: z.string().optional(),
            isActive: z.boolean().optional(),
            lastLogin: z.number().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            addresses: z
                .array(
                    z.lazy(() => PatchTicketsIdTicketsRequestRequestBodyAddresses$.inboundSchema)
                )
                .optional(),
            roles: z.array(PatchTicketsIdTicketsRequestRoles$).optional(),
            preferences: z
                .lazy(() => PatchTicketsIdTicketsRequestPreferences$.inboundSchema)
                .optional(),
            bio: z.string().optional(),
            website: z.string().optional(),
            socialLinks: z
                .lazy(() => PatchTicketsIdTicketsRequestSocialLinks$.inboundSchema)
                .optional(),
            status: PatchTicketsIdTicketsRequestRequestBodyStatus$.optional(),
            sso: z.array(z.lazy(() => PatchTicketsIdTicketsRequestSso$.inboundSchema)).optional(),
            paymentMethods: z
                .lazy(() => PatchTicketsIdTicketsRequestPaymentMethods$.inboundSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.middleName === undefined ? null : { middleName: v.middleName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.username === undefined ? null : { username: v.username }),
                ...(v.password === undefined ? null : { password: v.password }),
                ...(v.profilePicture === undefined ? null : { profilePicture: v.profilePicture }),
                ...(v.coverPhoto === undefined ? null : { coverPhoto: v.coverPhoto }),
                ...(v.gender === undefined ? null : { gender: v.gender }),
                ...(v.dateOfBirth === undefined ? null : { dateOfBirth: v.dateOfBirth }),
                ...(v.phoneNumber === undefined ? null : { phoneNumber: v.phoneNumber }),
                ...(v.isActive === undefined ? null : { isActive: v.isActive }),
                ...(v.lastLogin === undefined ? null : { lastLogin: v.lastLogin }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.addresses === undefined ? null : { addresses: v.addresses }),
                ...(v.roles === undefined ? null : { roles: v.roles }),
                ...(v.preferences === undefined ? null : { preferences: v.preferences }),
                ...(v.bio === undefined ? null : { bio: v.bio }),
                ...(v.website === undefined ? null : { website: v.website }),
                ...(v.socialLinks === undefined ? null : { socialLinks: v.socialLinks }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.sso === undefined ? null : { sso: v.sso }),
                ...(v.paymentMethods === undefined ? null : { paymentMethods: v.paymentMethods }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        firstName?: string | undefined;
        middleName?: string | undefined;
        lastName?: string | undefined;
        email?: string | undefined;
        username?: string | undefined;
        password?: string | undefined;
        profilePicture?: PatchTicketsIdTicketsRequestProfilePicture$.Outbound | undefined;
        coverPhoto?: PatchTicketsIdTicketsRequestCoverPhoto$.Outbound | undefined;
        gender?: PatchTicketsIdTicketsRequestGender | undefined;
        dateOfBirth?: number | undefined;
        phoneNumber?: string | undefined;
        isActive?: boolean | undefined;
        lastLogin?: number | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        addresses?: Array<PatchTicketsIdTicketsRequestRequestBodyAddresses$.Outbound> | undefined;
        roles?: Array<PatchTicketsIdTicketsRequestRoles> | undefined;
        preferences?: PatchTicketsIdTicketsRequestPreferences$.Outbound | undefined;
        bio?: string | undefined;
        website?: string | undefined;
        socialLinks?: PatchTicketsIdTicketsRequestSocialLinks$.Outbound | undefined;
        status?: PatchTicketsIdTicketsRequestRequestBodyStatus | undefined;
        sso?: Array<PatchTicketsIdTicketsRequestSso$.Outbound> | undefined;
        paymentMethods?: PatchTicketsIdTicketsRequestPaymentMethods$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchTicketsIdSharedWith> = z
        .object({
            id: z.string().optional(),
            firstName: z.string().optional(),
            middleName: z.string().optional(),
            lastName: z.string().optional(),
            email: z.string().optional(),
            username: z.string().optional(),
            password: z.string().optional(),
            profilePicture: z
                .lazy(() => PatchTicketsIdTicketsRequestProfilePicture$.outboundSchema)
                .optional(),
            coverPhoto: z
                .lazy(() => PatchTicketsIdTicketsRequestCoverPhoto$.outboundSchema)
                .optional(),
            gender: PatchTicketsIdTicketsRequestGender$.optional(),
            dateOfBirth: z.number().optional(),
            phoneNumber: z.string().optional(),
            isActive: z.boolean().optional(),
            lastLogin: z.number().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            addresses: z
                .array(
                    z.lazy(() => PatchTicketsIdTicketsRequestRequestBodyAddresses$.outboundSchema)
                )
                .optional(),
            roles: z.array(PatchTicketsIdTicketsRequestRoles$).optional(),
            preferences: z
                .lazy(() => PatchTicketsIdTicketsRequestPreferences$.outboundSchema)
                .optional(),
            bio: z.string().optional(),
            website: z.string().optional(),
            socialLinks: z
                .lazy(() => PatchTicketsIdTicketsRequestSocialLinks$.outboundSchema)
                .optional(),
            status: PatchTicketsIdTicketsRequestRequestBodyStatus$.optional(),
            sso: z.array(z.lazy(() => PatchTicketsIdTicketsRequestSso$.outboundSchema)).optional(),
            paymentMethods: z
                .lazy(() => PatchTicketsIdTicketsRequestPaymentMethods$.outboundSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.middleName === undefined ? null : { middleName: v.middleName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.username === undefined ? null : { username: v.username }),
                ...(v.password === undefined ? null : { password: v.password }),
                ...(v.profilePicture === undefined ? null : { profilePicture: v.profilePicture }),
                ...(v.coverPhoto === undefined ? null : { coverPhoto: v.coverPhoto }),
                ...(v.gender === undefined ? null : { gender: v.gender }),
                ...(v.dateOfBirth === undefined ? null : { dateOfBirth: v.dateOfBirth }),
                ...(v.phoneNumber === undefined ? null : { phoneNumber: v.phoneNumber }),
                ...(v.isActive === undefined ? null : { isActive: v.isActive }),
                ...(v.lastLogin === undefined ? null : { lastLogin: v.lastLogin }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.addresses === undefined ? null : { addresses: v.addresses }),
                ...(v.roles === undefined ? null : { roles: v.roles }),
                ...(v.preferences === undefined ? null : { preferences: v.preferences }),
                ...(v.bio === undefined ? null : { bio: v.bio }),
                ...(v.website === undefined ? null : { website: v.website }),
                ...(v.socialLinks === undefined ? null : { socialLinks: v.socialLinks }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.sso === undefined ? null : { sso: v.sso }),
                ...(v.paymentMethods === undefined ? null : { paymentMethods: v.paymentMethods }),
            };
        });
}

/** @internal */
export const PatchTicketsIdVisibility$ = z.nativeEnum(PatchTicketsIdVisibility);

/** @internal */
export const PatchTicketsIdTicketsRequestRequestBodyReporterStatus$ = z.nativeEnum(
    PatchTicketsIdTicketsRequestRequestBodyReporterStatus
);

/** @internal */
export namespace PatchTicketsIdNotes$ {
    export type Inbound = {
        id?: string | undefined;
        title?: string | undefined;
        content?: string | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        lastAccessed?: number | undefined;
        reminder?: number | undefined;
        color?: string | undefined;
        priority?: PatchTicketsIdTicketsPriority | undefined;
        author?: PatchTicketsIdAuthor$.Inbound | undefined;
        tags?: Array<string> | undefined;
        attachments?: Array<PatchTicketsIdAttachments$.Inbound> | undefined;
        sharedWith?: Array<PatchTicketsIdSharedWith$.Inbound> | undefined;
        visibility?: PatchTicketsIdVisibility | undefined;
        status?: PatchTicketsIdTicketsRequestRequestBodyReporterStatus | undefined;
        metadata?: Array<string> | undefined;
    };

    export const inboundSchema: z.ZodType<PatchTicketsIdNotes, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            title: z.string().optional(),
            content: z.string().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            lastAccessed: z.number().optional(),
            reminder: z.number().optional(),
            color: z.string().optional(),
            priority: PatchTicketsIdTicketsPriority$.optional(),
            author: z.lazy(() => PatchTicketsIdAuthor$.inboundSchema).optional(),
            tags: z.array(z.string()).optional(),
            attachments: z.array(z.lazy(() => PatchTicketsIdAttachments$.inboundSchema)).optional(),
            sharedWith: z.array(z.lazy(() => PatchTicketsIdSharedWith$.inboundSchema)).optional(),
            visibility: PatchTicketsIdVisibility$.optional(),
            status: PatchTicketsIdTicketsRequestRequestBodyReporterStatus$.optional(),
            metadata: z.array(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.content === undefined ? null : { content: v.content }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.lastAccessed === undefined ? null : { lastAccessed: v.lastAccessed }),
                ...(v.reminder === undefined ? null : { reminder: v.reminder }),
                ...(v.color === undefined ? null : { color: v.color }),
                ...(v.priority === undefined ? null : { priority: v.priority }),
                ...(v.author === undefined ? null : { author: v.author }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
                ...(v.attachments === undefined ? null : { attachments: v.attachments }),
                ...(v.sharedWith === undefined ? null : { sharedWith: v.sharedWith }),
                ...(v.visibility === undefined ? null : { visibility: v.visibility }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        title?: string | undefined;
        content?: string | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        lastAccessed?: number | undefined;
        reminder?: number | undefined;
        color?: string | undefined;
        priority?: PatchTicketsIdTicketsPriority | undefined;
        author?: PatchTicketsIdAuthor$.Outbound | undefined;
        tags?: Array<string> | undefined;
        attachments?: Array<PatchTicketsIdAttachments$.Outbound> | undefined;
        sharedWith?: Array<PatchTicketsIdSharedWith$.Outbound> | undefined;
        visibility?: PatchTicketsIdVisibility | undefined;
        status?: PatchTicketsIdTicketsRequestRequestBodyReporterStatus | undefined;
        metadata?: Array<string> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchTicketsIdNotes> = z
        .object({
            id: z.string().optional(),
            title: z.string().optional(),
            content: z.string().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            lastAccessed: z.number().optional(),
            reminder: z.number().optional(),
            color: z.string().optional(),
            priority: PatchTicketsIdTicketsPriority$.optional(),
            author: z.lazy(() => PatchTicketsIdAuthor$.outboundSchema).optional(),
            tags: z.array(z.string()).optional(),
            attachments: z
                .array(z.lazy(() => PatchTicketsIdAttachments$.outboundSchema))
                .optional(),
            sharedWith: z.array(z.lazy(() => PatchTicketsIdSharedWith$.outboundSchema)).optional(),
            visibility: PatchTicketsIdVisibility$.optional(),
            status: PatchTicketsIdTicketsRequestRequestBodyReporterStatus$.optional(),
            metadata: z.array(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.content === undefined ? null : { content: v.content }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.lastAccessed === undefined ? null : { lastAccessed: v.lastAccessed }),
                ...(v.reminder === undefined ? null : { reminder: v.reminder }),
                ...(v.color === undefined ? null : { color: v.color }),
                ...(v.priority === undefined ? null : { priority: v.priority }),
                ...(v.author === undefined ? null : { author: v.author }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
                ...(v.attachments === undefined ? null : { attachments: v.attachments }),
                ...(v.sharedWith === undefined ? null : { sharedWith: v.sharedWith }),
                ...(v.visibility === undefined ? null : { visibility: v.visibility }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
            };
        });
}

/** @internal */
export const PatchTicketsIdTicketsRequestRequestBodyReporterSocialProfilesType$ = z.nativeEnum(
    PatchTicketsIdTicketsRequestRequestBodyReporterSocialProfilesType
);

/** @internal */
export namespace PatchTicketsIdTicketsRequestAdditionalInfo$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<
        PatchTicketsIdTicketsRequestAdditionalInfo,
        z.ZodTypeDef,
        Inbound
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PatchTicketsIdTicketsRequestAdditionalInfo
    > = z.object({});
}

/** @internal */
export namespace PatchTicketsIdSocialProfiles$ {
    export type Inbound = {
        type?: PatchTicketsIdTicketsRequestRequestBodyReporterSocialProfilesType | undefined;
        username?: string | undefined;
        displayName?: string | undefined;
        url?: string | undefined;
        avatarUrl?: string | undefined;
        email?: string | undefined;
        additionalInfo?: PatchTicketsIdTicketsRequestAdditionalInfo$.Inbound | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<PatchTicketsIdSocialProfiles, z.ZodTypeDef, Inbound> = z
        .object({
            type: PatchTicketsIdTicketsRequestRequestBodyReporterSocialProfilesType$.optional(),
            username: z.string().optional(),
            displayName: z.string().optional(),
            url: z.string().optional(),
            avatarUrl: z.string().optional(),
            email: z.string().optional(),
            additionalInfo: z
                .lazy(() => PatchTicketsIdTicketsRequestAdditionalInfo$.inboundSchema)
                .optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.username === undefined ? null : { username: v.username }),
                ...(v.displayName === undefined ? null : { displayName: v.displayName }),
                ...(v.url === undefined ? null : { url: v.url }),
                ...(v.avatarUrl === undefined ? null : { avatarUrl: v.avatarUrl }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.additionalInfo === undefined ? null : { additionalInfo: v.additionalInfo }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });

    export type Outbound = {
        type?: PatchTicketsIdTicketsRequestRequestBodyReporterSocialProfilesType | undefined;
        username?: string | undefined;
        displayName?: string | undefined;
        url?: string | undefined;
        avatarUrl?: string | undefined;
        email?: string | undefined;
        additionalInfo?: PatchTicketsIdTicketsRequestAdditionalInfo$.Outbound | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchTicketsIdSocialProfiles> = z
        .object({
            type: PatchTicketsIdTicketsRequestRequestBodyReporterSocialProfilesType$.optional(),
            username: z.string().optional(),
            displayName: z.string().optional(),
            url: z.string().optional(),
            avatarUrl: z.string().optional(),
            email: z.string().optional(),
            additionalInfo: z
                .lazy(() => PatchTicketsIdTicketsRequestAdditionalInfo$.outboundSchema)
                .optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.username === undefined ? null : { username: v.username }),
                ...(v.displayName === undefined ? null : { displayName: v.displayName }),
                ...(v.url === undefined ? null : { url: v.url }),
                ...(v.avatarUrl === undefined ? null : { avatarUrl: v.avatarUrl }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.additionalInfo === undefined ? null : { additionalInfo: v.additionalInfo }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });
}

/** @internal */
export const PatchTicketsIdTicketsFieldType$ = z.nativeEnum(PatchTicketsIdTicketsFieldType);

/** @internal */
export namespace PatchTicketsIdTicketsRequestRequestBodyReporterCustomFields$ {
    export type Inbound = {
        id?: string | undefined;
        fieldName?: string | undefined;
        fieldValue?: string | undefined;
        fieldType?: PatchTicketsIdTicketsFieldType | undefined;
    };

    export const inboundSchema: z.ZodType<
        PatchTicketsIdTicketsRequestRequestBodyReporterCustomFields,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            id: z.string().optional(),
            fieldName: z.string().optional(),
            fieldValue: z.string().optional(),
            fieldType: PatchTicketsIdTicketsFieldType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fieldName === undefined ? null : { fieldName: v.fieldName }),
                ...(v.fieldValue === undefined ? null : { fieldValue: v.fieldValue }),
                ...(v.fieldType === undefined ? null : { fieldType: v.fieldType }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        fieldName?: string | undefined;
        fieldValue?: string | undefined;
        fieldType?: PatchTicketsIdTicketsFieldType | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PatchTicketsIdTicketsRequestRequestBodyReporterCustomFields
    > = z
        .object({
            id: z.string().optional(),
            fieldName: z.string().optional(),
            fieldValue: z.string().optional(),
            fieldType: PatchTicketsIdTicketsFieldType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fieldName === undefined ? null : { fieldName: v.fieldName }),
                ...(v.fieldValue === undefined ? null : { fieldValue: v.fieldValue }),
                ...(v.fieldType === undefined ? null : { fieldType: v.fieldType }),
            };
        });
}

/** @internal */
export namespace Reporter$ {
    export type Inbound = {
        id?: string | undefined;
        firstName?: string | undefined;
        lastName?: string | undefined;
        leadId?: string | undefined;
        company?: string | undefined;
        defaultEmail?: string | undefined;
        emails?: Array<PatchTicketsIdEmails$.Inbound> | undefined;
        defaultPhone?: string | undefined;
        phones?: Array<PatchTicketsIdPhones$.Inbound> | undefined;
        address?: PatchTicketsIdAddress$.Inbound | undefined;
        addresses?: Array<PatchTicketsIdTicketsAddresses$.Inbound> | undefined;
        birthday?: number | undefined;
        relationship?: string | undefined;
        note?: string | undefined;
        notes?: PatchTicketsIdNotes$.Inbound | undefined;
        tags?: Array<string> | undefined;
        websites?: Array<string> | undefined;
        socialProfiles?: Array<PatchTicketsIdSocialProfiles$.Inbound> | undefined;
        isActive?: boolean | undefined;
        customFields?:
            | Array<PatchTicketsIdTicketsRequestRequestBodyReporterCustomFields$.Inbound>
            | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
    };

    export const inboundSchema: z.ZodType<Reporter, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            firstName: z.string().optional(),
            lastName: z.string().optional(),
            leadId: z.string().optional(),
            company: z.string().optional(),
            defaultEmail: z.string().optional(),
            emails: z.array(z.lazy(() => PatchTicketsIdEmails$.inboundSchema)).optional(),
            defaultPhone: z.string().optional(),
            phones: z.array(z.lazy(() => PatchTicketsIdPhones$.inboundSchema)).optional(),
            address: z.lazy(() => PatchTicketsIdAddress$.inboundSchema).optional(),
            addresses: z
                .array(z.lazy(() => PatchTicketsIdTicketsAddresses$.inboundSchema))
                .optional(),
            birthday: z.number().optional(),
            relationship: z.string().optional(),
            note: z.string().optional(),
            notes: z.lazy(() => PatchTicketsIdNotes$.inboundSchema).optional(),
            tags: z.array(z.string()).optional(),
            websites: z.array(z.string()).optional(),
            socialProfiles: z
                .array(z.lazy(() => PatchTicketsIdSocialProfiles$.inboundSchema))
                .optional(),
            isActive: z.boolean().optional(),
            customFields: z
                .array(
                    z.lazy(
                        () =>
                            PatchTicketsIdTicketsRequestRequestBodyReporterCustomFields$.inboundSchema
                    )
                )
                .optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.leadId === undefined ? null : { leadId: v.leadId }),
                ...(v.company === undefined ? null : { company: v.company }),
                ...(v.defaultEmail === undefined ? null : { defaultEmail: v.defaultEmail }),
                ...(v.emails === undefined ? null : { emails: v.emails }),
                ...(v.defaultPhone === undefined ? null : { defaultPhone: v.defaultPhone }),
                ...(v.phones === undefined ? null : { phones: v.phones }),
                ...(v.address === undefined ? null : { address: v.address }),
                ...(v.addresses === undefined ? null : { addresses: v.addresses }),
                ...(v.birthday === undefined ? null : { birthday: v.birthday }),
                ...(v.relationship === undefined ? null : { relationship: v.relationship }),
                ...(v.note === undefined ? null : { note: v.note }),
                ...(v.notes === undefined ? null : { notes: v.notes }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
                ...(v.websites === undefined ? null : { websites: v.websites }),
                ...(v.socialProfiles === undefined ? null : { socialProfiles: v.socialProfiles }),
                ...(v.isActive === undefined ? null : { isActive: v.isActive }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        firstName?: string | undefined;
        lastName?: string | undefined;
        leadId?: string | undefined;
        company?: string | undefined;
        defaultEmail?: string | undefined;
        emails?: Array<PatchTicketsIdEmails$.Outbound> | undefined;
        defaultPhone?: string | undefined;
        phones?: Array<PatchTicketsIdPhones$.Outbound> | undefined;
        address?: PatchTicketsIdAddress$.Outbound | undefined;
        addresses?: Array<PatchTicketsIdTicketsAddresses$.Outbound> | undefined;
        birthday?: number | undefined;
        relationship?: string | undefined;
        note?: string | undefined;
        notes?: PatchTicketsIdNotes$.Outbound | undefined;
        tags?: Array<string> | undefined;
        websites?: Array<string> | undefined;
        socialProfiles?: Array<PatchTicketsIdSocialProfiles$.Outbound> | undefined;
        isActive?: boolean | undefined;
        customFields?:
            | Array<PatchTicketsIdTicketsRequestRequestBodyReporterCustomFields$.Outbound>
            | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Reporter> = z
        .object({
            id: z.string().optional(),
            firstName: z.string().optional(),
            lastName: z.string().optional(),
            leadId: z.string().optional(),
            company: z.string().optional(),
            defaultEmail: z.string().optional(),
            emails: z.array(z.lazy(() => PatchTicketsIdEmails$.outboundSchema)).optional(),
            defaultPhone: z.string().optional(),
            phones: z.array(z.lazy(() => PatchTicketsIdPhones$.outboundSchema)).optional(),
            address: z.lazy(() => PatchTicketsIdAddress$.outboundSchema).optional(),
            addresses: z
                .array(z.lazy(() => PatchTicketsIdTicketsAddresses$.outboundSchema))
                .optional(),
            birthday: z.number().optional(),
            relationship: z.string().optional(),
            note: z.string().optional(),
            notes: z.lazy(() => PatchTicketsIdNotes$.outboundSchema).optional(),
            tags: z.array(z.string()).optional(),
            websites: z.array(z.string()).optional(),
            socialProfiles: z
                .array(z.lazy(() => PatchTicketsIdSocialProfiles$.outboundSchema))
                .optional(),
            isActive: z.boolean().optional(),
            customFields: z
                .array(
                    z.lazy(
                        () =>
                            PatchTicketsIdTicketsRequestRequestBodyReporterCustomFields$.outboundSchema
                    )
                )
                .optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.leadId === undefined ? null : { leadId: v.leadId }),
                ...(v.company === undefined ? null : { company: v.company }),
                ...(v.defaultEmail === undefined ? null : { defaultEmail: v.defaultEmail }),
                ...(v.emails === undefined ? null : { emails: v.emails }),
                ...(v.defaultPhone === undefined ? null : { defaultPhone: v.defaultPhone }),
                ...(v.phones === undefined ? null : { phones: v.phones }),
                ...(v.address === undefined ? null : { address: v.address }),
                ...(v.addresses === undefined ? null : { addresses: v.addresses }),
                ...(v.birthday === undefined ? null : { birthday: v.birthday }),
                ...(v.relationship === undefined ? null : { relationship: v.relationship }),
                ...(v.note === undefined ? null : { note: v.note }),
                ...(v.notes === undefined ? null : { notes: v.notes }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
                ...(v.websites === undefined ? null : { websites: v.websites }),
                ...(v.socialProfiles === undefined ? null : { socialProfiles: v.socialProfiles }),
                ...(v.isActive === undefined ? null : { isActive: v.isActive }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
            };
        });
}

/** @internal */
export namespace PatchTicketsIdTicketsMetadata$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<PatchTicketsIdTicketsMetadata, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchTicketsIdTicketsMetadata> =
        z.object({});
}

/** @internal */
export namespace PatchTicketsIdTicketsAssociatedWith$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<
        PatchTicketsIdTicketsAssociatedWith,
        z.ZodTypeDef,
        Inbound
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PatchTicketsIdTicketsAssociatedWith
    > = z.object({});
}

/** @internal */
export namespace PatchTicketsIdTicketsPermissions$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<PatchTicketsIdTicketsPermissions, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PatchTicketsIdTicketsPermissions
    > = z.object({});
}

/** @internal */
export namespace PatchTicketsIdTicketsAttachments$ {
    export type Inbound = {
        id?: string | undefined;
        fileName?: string | undefined;
        fileSize?: number | undefined;
        fileType?: string | undefined;
        url?: string | undefined;
        thumbnailUrl?: string | undefined;
        previewUrl?: string | undefined;
        content?: string | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        metadata?: PatchTicketsIdTicketsMetadata$.Inbound | undefined;
        associatedWith?: PatchTicketsIdTicketsAssociatedWith$.Inbound | undefined;
        permissions?: PatchTicketsIdTicketsPermissions$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<PatchTicketsIdTicketsAttachments, z.ZodTypeDef, Inbound> =
        z
            .object({
                id: z.string().optional(),
                fileName: z.string().optional(),
                fileSize: z.number().optional(),
                fileType: z.string().optional(),
                url: z.string().optional(),
                thumbnailUrl: z.string().optional(),
                previewUrl: z.string().optional(),
                content: z.string().optional(),
                createdAt: z.number().optional(),
                updatedAt: z.number().optional(),
                metadata: z.lazy(() => PatchTicketsIdTicketsMetadata$.inboundSchema).optional(),
                associatedWith: z
                    .lazy(() => PatchTicketsIdTicketsAssociatedWith$.inboundSchema)
                    .optional(),
                permissions: z
                    .lazy(() => PatchTicketsIdTicketsPermissions$.inboundSchema)
                    .optional(),
            })
            .transform((v) => {
                return {
                    ...(v.id === undefined ? null : { id: v.id }),
                    ...(v.fileName === undefined ? null : { fileName: v.fileName }),
                    ...(v.fileSize === undefined ? null : { fileSize: v.fileSize }),
                    ...(v.fileType === undefined ? null : { fileType: v.fileType }),
                    ...(v.url === undefined ? null : { url: v.url }),
                    ...(v.thumbnailUrl === undefined ? null : { thumbnailUrl: v.thumbnailUrl }),
                    ...(v.previewUrl === undefined ? null : { previewUrl: v.previewUrl }),
                    ...(v.content === undefined ? null : { content: v.content }),
                    ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                    ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                    ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                    ...(v.associatedWith === undefined
                        ? null
                        : { associatedWith: v.associatedWith }),
                    ...(v.permissions === undefined ? null : { permissions: v.permissions }),
                };
            });

    export type Outbound = {
        id?: string | undefined;
        fileName?: string | undefined;
        fileSize?: number | undefined;
        fileType?: string | undefined;
        url?: string | undefined;
        thumbnailUrl?: string | undefined;
        previewUrl?: string | undefined;
        content?: string | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        metadata?: PatchTicketsIdTicketsMetadata$.Outbound | undefined;
        associatedWith?: PatchTicketsIdTicketsAssociatedWith$.Outbound | undefined;
        permissions?: PatchTicketsIdTicketsPermissions$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PatchTicketsIdTicketsAttachments
    > = z
        .object({
            id: z.string().optional(),
            fileName: z.string().optional(),
            fileSize: z.number().optional(),
            fileType: z.string().optional(),
            url: z.string().optional(),
            thumbnailUrl: z.string().optional(),
            previewUrl: z.string().optional(),
            content: z.string().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            metadata: z.lazy(() => PatchTicketsIdTicketsMetadata$.outboundSchema).optional(),
            associatedWith: z
                .lazy(() => PatchTicketsIdTicketsAssociatedWith$.outboundSchema)
                .optional(),
            permissions: z.lazy(() => PatchTicketsIdTicketsPermissions$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fileName === undefined ? null : { fileName: v.fileName }),
                ...(v.fileSize === undefined ? null : { fileSize: v.fileSize }),
                ...(v.fileType === undefined ? null : { fileType: v.fileType }),
                ...(v.url === undefined ? null : { url: v.url }),
                ...(v.thumbnailUrl === undefined ? null : { thumbnailUrl: v.thumbnailUrl }),
                ...(v.previewUrl === undefined ? null : { previewUrl: v.previewUrl }),
                ...(v.content === undefined ? null : { content: v.content }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                ...(v.associatedWith === undefined ? null : { associatedWith: v.associatedWith }),
                ...(v.permissions === undefined ? null : { permissions: v.permissions }),
            };
        });
}

/** @internal */
export namespace PatchTicketsIdTicketsAuthor$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<PatchTicketsIdTicketsAuthor, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchTicketsIdTicketsAuthor> =
        z.object({});
}

/** @internal */
export namespace PatchTicketsIdTicketsRequestMetadata$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<
        PatchTicketsIdTicketsRequestMetadata,
        z.ZodTypeDef,
        Inbound
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PatchTicketsIdTicketsRequestMetadata
    > = z.object({});
}

/** @internal */
export namespace PatchTicketsIdComments$ {
    export type Inbound = {
        commentId?: string | undefined;
        author?: PatchTicketsIdTicketsAuthor$.Inbound | undefined;
        text?: string | undefined;
        parentId?: string | undefined;
        likes?: number | undefined;
        flagged?: boolean | undefined;
        metadata?: Array<PatchTicketsIdTicketsRequestMetadata$.Inbound> | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<PatchTicketsIdComments, z.ZodTypeDef, Inbound> = z
        .object({
            commentId: z.string().optional(),
            author: z.lazy(() => PatchTicketsIdTicketsAuthor$.inboundSchema).optional(),
            text: z.string().optional(),
            parentId: z.string().optional(),
            likes: z.number().optional(),
            flagged: z.boolean().optional(),
            metadata: z
                .array(z.lazy(() => PatchTicketsIdTicketsRequestMetadata$.inboundSchema))
                .optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.commentId === undefined ? null : { commentId: v.commentId }),
                ...(v.author === undefined ? null : { author: v.author }),
                ...(v.text === undefined ? null : { text: v.text }),
                ...(v.parentId === undefined ? null : { parentId: v.parentId }),
                ...(v.likes === undefined ? null : { likes: v.likes }),
                ...(v.flagged === undefined ? null : { flagged: v.flagged }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });

    export type Outbound = {
        commentId?: string | undefined;
        author?: PatchTicketsIdTicketsAuthor$.Outbound | undefined;
        text?: string | undefined;
        parentId?: string | undefined;
        likes?: number | undefined;
        flagged?: boolean | undefined;
        metadata?: Array<PatchTicketsIdTicketsRequestMetadata$.Outbound> | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchTicketsIdComments> = z
        .object({
            commentId: z.string().optional(),
            author: z.lazy(() => PatchTicketsIdTicketsAuthor$.outboundSchema).optional(),
            text: z.string().optional(),
            parentId: z.string().optional(),
            likes: z.number().optional(),
            flagged: z.boolean().optional(),
            metadata: z
                .array(z.lazy(() => PatchTicketsIdTicketsRequestMetadata$.outboundSchema))
                .optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.commentId === undefined ? null : { commentId: v.commentId }),
                ...(v.author === undefined ? null : { author: v.author }),
                ...(v.text === undefined ? null : { text: v.text }),
                ...(v.parentId === undefined ? null : { parentId: v.parentId }),
                ...(v.likes === undefined ? null : { likes: v.likes }),
                ...(v.flagged === undefined ? null : { flagged: v.flagged }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });
}

/** @internal */
export const PatchTicketsIdTicketsRequestPriority$ = z.nativeEnum(
    PatchTicketsIdTicketsRequestPriority
);

/** @internal */
export namespace PatchTicketsIdTicketsRequestAuthor$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<
        PatchTicketsIdTicketsRequestAuthor,
        z.ZodTypeDef,
        Inbound
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PatchTicketsIdTicketsRequestAuthor
    > = z.object({});
}

/** @internal */
export namespace PatchTicketsIdTicketsRequestAttachments$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<
        PatchTicketsIdTicketsRequestAttachments,
        z.ZodTypeDef,
        Inbound
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PatchTicketsIdTicketsRequestAttachments
    > = z.object({});
}

/** @internal */
export namespace PatchTicketsIdTicketsSharedWith$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<PatchTicketsIdTicketsSharedWith, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PatchTicketsIdTicketsSharedWith
    > = z.object({});
}

/** @internal */
export const PatchTicketsIdTicketsVisibility$ = z.nativeEnum(PatchTicketsIdTicketsVisibility);

/** @internal */
export const PatchTicketsIdTicketsRequestRequestBodyNotesStatus$ = z.nativeEnum(
    PatchTicketsIdTicketsRequestRequestBodyNotesStatus
);

/** @internal */
export namespace PatchTicketsIdTicketsNotes$ {
    export type Inbound = {
        id?: string | undefined;
        title?: string | undefined;
        content?: string | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        lastAccessed?: number | undefined;
        reminder?: number | undefined;
        color?: string | undefined;
        priority?: PatchTicketsIdTicketsRequestPriority | undefined;
        author?: PatchTicketsIdTicketsRequestAuthor$.Inbound | undefined;
        tags?: Array<string> | undefined;
        attachments?: Array<PatchTicketsIdTicketsRequestAttachments$.Inbound> | undefined;
        sharedWith?: Array<PatchTicketsIdTicketsSharedWith$.Inbound> | undefined;
        visibility?: PatchTicketsIdTicketsVisibility | undefined;
        status?: PatchTicketsIdTicketsRequestRequestBodyNotesStatus | undefined;
        metadata?: Array<string> | undefined;
    };

    export const inboundSchema: z.ZodType<PatchTicketsIdTicketsNotes, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            title: z.string().optional(),
            content: z.string().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            lastAccessed: z.number().optional(),
            reminder: z.number().optional(),
            color: z.string().optional(),
            priority: PatchTicketsIdTicketsRequestPriority$.optional(),
            author: z.lazy(() => PatchTicketsIdTicketsRequestAuthor$.inboundSchema).optional(),
            tags: z.array(z.string()).optional(),
            attachments: z
                .array(z.lazy(() => PatchTicketsIdTicketsRequestAttachments$.inboundSchema))
                .optional(),
            sharedWith: z
                .array(z.lazy(() => PatchTicketsIdTicketsSharedWith$.inboundSchema))
                .optional(),
            visibility: PatchTicketsIdTicketsVisibility$.optional(),
            status: PatchTicketsIdTicketsRequestRequestBodyNotesStatus$.optional(),
            metadata: z.array(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.content === undefined ? null : { content: v.content }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.lastAccessed === undefined ? null : { lastAccessed: v.lastAccessed }),
                ...(v.reminder === undefined ? null : { reminder: v.reminder }),
                ...(v.color === undefined ? null : { color: v.color }),
                ...(v.priority === undefined ? null : { priority: v.priority }),
                ...(v.author === undefined ? null : { author: v.author }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
                ...(v.attachments === undefined ? null : { attachments: v.attachments }),
                ...(v.sharedWith === undefined ? null : { sharedWith: v.sharedWith }),
                ...(v.visibility === undefined ? null : { visibility: v.visibility }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        title?: string | undefined;
        content?: string | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        lastAccessed?: number | undefined;
        reminder?: number | undefined;
        color?: string | undefined;
        priority?: PatchTicketsIdTicketsRequestPriority | undefined;
        author?: PatchTicketsIdTicketsRequestAuthor$.Outbound | undefined;
        tags?: Array<string> | undefined;
        attachments?: Array<PatchTicketsIdTicketsRequestAttachments$.Outbound> | undefined;
        sharedWith?: Array<PatchTicketsIdTicketsSharedWith$.Outbound> | undefined;
        visibility?: PatchTicketsIdTicketsVisibility | undefined;
        status?: PatchTicketsIdTicketsRequestRequestBodyNotesStatus | undefined;
        metadata?: Array<string> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchTicketsIdTicketsNotes> = z
        .object({
            id: z.string().optional(),
            title: z.string().optional(),
            content: z.string().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            lastAccessed: z.number().optional(),
            reminder: z.number().optional(),
            color: z.string().optional(),
            priority: PatchTicketsIdTicketsRequestPriority$.optional(),
            author: z.lazy(() => PatchTicketsIdTicketsRequestAuthor$.outboundSchema).optional(),
            tags: z.array(z.string()).optional(),
            attachments: z
                .array(z.lazy(() => PatchTicketsIdTicketsRequestAttachments$.outboundSchema))
                .optional(),
            sharedWith: z
                .array(z.lazy(() => PatchTicketsIdTicketsSharedWith$.outboundSchema))
                .optional(),
            visibility: PatchTicketsIdTicketsVisibility$.optional(),
            status: PatchTicketsIdTicketsRequestRequestBodyNotesStatus$.optional(),
            metadata: z.array(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.content === undefined ? null : { content: v.content }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.lastAccessed === undefined ? null : { lastAccessed: v.lastAccessed }),
                ...(v.reminder === undefined ? null : { reminder: v.reminder }),
                ...(v.color === undefined ? null : { color: v.color }),
                ...(v.priority === undefined ? null : { priority: v.priority }),
                ...(v.author === undefined ? null : { author: v.author }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
                ...(v.attachments === undefined ? null : { attachments: v.attachments }),
                ...(v.sharedWith === undefined ? null : { sharedWith: v.sharedWith }),
                ...(v.visibility === undefined ? null : { visibility: v.visibility }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
            };
        });
}

/** @internal */
export const PatchTicketsIdTicketsRequestFieldType$ = z.nativeEnum(
    PatchTicketsIdTicketsRequestFieldType
);

/** @internal */
export namespace PatchTicketsIdTicketsRequestRequestBodyCustomFields1$ {
    export type Inbound = {
        id?: string | undefined;
        fieldName?: string | undefined;
        fieldValue?: string | undefined;
        fieldType?: PatchTicketsIdTicketsRequestFieldType | undefined;
    };

    export const inboundSchema: z.ZodType<
        PatchTicketsIdTicketsRequestRequestBodyCustomFields1,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            id: z.string().optional(),
            fieldName: z.string().optional(),
            fieldValue: z.string().optional(),
            fieldType: PatchTicketsIdTicketsRequestFieldType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fieldName === undefined ? null : { fieldName: v.fieldName }),
                ...(v.fieldValue === undefined ? null : { fieldValue: v.fieldValue }),
                ...(v.fieldType === undefined ? null : { fieldType: v.fieldType }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        fieldName?: string | undefined;
        fieldValue?: string | undefined;
        fieldType?: PatchTicketsIdTicketsRequestFieldType | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        PatchTicketsIdTicketsRequestRequestBodyCustomFields1
    > = z
        .object({
            id: z.string().optional(),
            fieldName: z.string().optional(),
            fieldValue: z.string().optional(),
            fieldType: PatchTicketsIdTicketsRequestFieldType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fieldName === undefined ? null : { fieldName: v.fieldName }),
                ...(v.fieldValue === undefined ? null : { fieldValue: v.fieldValue }),
                ...(v.fieldType === undefined ? null : { fieldType: v.fieldType }),
            };
        });
}

/** @internal */
export namespace PatchTicketsIdRequestBody$ {
    export type Inbound = {
        id?: string | undefined;
        title?: string | undefined;
        description?: string | undefined;
        status?: PatchTicketsIdStatus | undefined;
        priority?: PatchTicketsIdPriority | undefined;
        type?: PatchTicketsIdType | undefined;
        assignee?: PatchTicketsIdAssignee$.Inbound | undefined;
        reporter?: Reporter$.Inbound | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        dueDate?: number | undefined;
        attachments?: Array<PatchTicketsIdTicketsAttachments$.Inbound> | undefined;
        comments?: Array<PatchTicketsIdComments$.Inbound> | undefined;
        notes?: Array<PatchTicketsIdTicketsNotes$.Inbound> | undefined;
        tags?: Array<string> | undefined;
        customFields?:
            | Array<PatchTicketsIdTicketsRequestRequestBodyCustomFields1$.Inbound>
            | undefined;
    };

    export const inboundSchema: z.ZodType<PatchTicketsIdRequestBody, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            title: z.string().optional(),
            description: z.string().optional(),
            status: PatchTicketsIdStatus$.optional(),
            priority: PatchTicketsIdPriority$.optional(),
            type: PatchTicketsIdType$.optional(),
            assignee: z.lazy(() => PatchTicketsIdAssignee$.inboundSchema).optional(),
            reporter: z.lazy(() => Reporter$.inboundSchema).optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            dueDate: z.number().optional(),
            attachments: z
                .array(z.lazy(() => PatchTicketsIdTicketsAttachments$.inboundSchema))
                .optional(),
            comments: z.array(z.lazy(() => PatchTicketsIdComments$.inboundSchema)).optional(),
            notes: z.array(z.lazy(() => PatchTicketsIdTicketsNotes$.inboundSchema)).optional(),
            tags: z.array(z.string()).optional(),
            customFields: z
                .array(
                    z.lazy(
                        () => PatchTicketsIdTicketsRequestRequestBodyCustomFields1$.inboundSchema
                    )
                )
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.priority === undefined ? null : { priority: v.priority }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.assignee === undefined ? null : { assignee: v.assignee }),
                ...(v.reporter === undefined ? null : { reporter: v.reporter }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.dueDate === undefined ? null : { dueDate: v.dueDate }),
                ...(v.attachments === undefined ? null : { attachments: v.attachments }),
                ...(v.comments === undefined ? null : { comments: v.comments }),
                ...(v.notes === undefined ? null : { notes: v.notes }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        title?: string | undefined;
        description?: string | undefined;
        status?: PatchTicketsIdStatus | undefined;
        priority?: PatchTicketsIdPriority | undefined;
        type?: PatchTicketsIdType | undefined;
        assignee?: PatchTicketsIdAssignee$.Outbound | undefined;
        reporter?: Reporter$.Outbound | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        dueDate?: number | undefined;
        attachments?: Array<PatchTicketsIdTicketsAttachments$.Outbound> | undefined;
        comments?: Array<PatchTicketsIdComments$.Outbound> | undefined;
        notes?: Array<PatchTicketsIdTicketsNotes$.Outbound> | undefined;
        tags?: Array<string> | undefined;
        customFields?:
            | Array<PatchTicketsIdTicketsRequestRequestBodyCustomFields1$.Outbound>
            | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchTicketsIdRequestBody> = z
        .object({
            id: z.string().optional(),
            title: z.string().optional(),
            description: z.string().optional(),
            status: PatchTicketsIdStatus$.optional(),
            priority: PatchTicketsIdPriority$.optional(),
            type: PatchTicketsIdType$.optional(),
            assignee: z.lazy(() => PatchTicketsIdAssignee$.outboundSchema).optional(),
            reporter: z.lazy(() => Reporter$.outboundSchema).optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            dueDate: z.number().optional(),
            attachments: z
                .array(z.lazy(() => PatchTicketsIdTicketsAttachments$.outboundSchema))
                .optional(),
            comments: z.array(z.lazy(() => PatchTicketsIdComments$.outboundSchema)).optional(),
            notes: z.array(z.lazy(() => PatchTicketsIdTicketsNotes$.outboundSchema)).optional(),
            tags: z.array(z.string()).optional(),
            customFields: z
                .array(
                    z.lazy(
                        () => PatchTicketsIdTicketsRequestRequestBodyCustomFields1$.outboundSchema
                    )
                )
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.priority === undefined ? null : { priority: v.priority }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.assignee === undefined ? null : { assignee: v.assignee }),
                ...(v.reporter === undefined ? null : { reporter: v.reporter }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.dueDate === undefined ? null : { dueDate: v.dueDate }),
                ...(v.attachments === undefined ? null : { attachments: v.attachments }),
                ...(v.comments === undefined ? null : { comments: v.comments }),
                ...(v.notes === undefined ? null : { notes: v.notes }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
            };
        });
}

/** @internal */
export namespace PatchTicketsIdRequest$ {
    export type Inbound = {
        id: string;
        "X-INTEGRATIONOS-CONNECTION-KEY": string;
        RequestBody?: PatchTicketsIdRequestBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<PatchTicketsIdRequest, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string(),
            "X-INTEGRATIONOS-CONNECTION-KEY": z.string(),
            RequestBody: z.lazy(() => PatchTicketsIdRequestBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                id: v.id,
                xIntegrationosConnectionKey: v["X-INTEGRATIONOS-CONNECTION-KEY"],
                ...(v.RequestBody === undefined ? null : { requestBody: v.RequestBody }),
            };
        });

    export type Outbound = {
        id: string;
        "X-INTEGRATIONOS-CONNECTION-KEY": string;
        RequestBody?: PatchTicketsIdRequestBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchTicketsIdRequest> = z
        .object({
            id: z.string(),
            xIntegrationosConnectionKey: z.string(),
            requestBody: z.lazy(() => PatchTicketsIdRequestBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                id: v.id,
                "X-INTEGRATIONOS-CONNECTION-KEY": v.xIntegrationosConnectionKey,
                ...(v.requestBody === undefined ? null : { RequestBody: v.requestBody }),
            };
        });
}

/** @internal */
export const PatchTicketsIdStatusCode$ = z.nativeEnum(PatchTicketsIdStatusCode);

/** @internal */
export namespace PatchTicketsIdUnified$ {
    export type Inbound = {
        count?: number | undefined;
    };

    export const inboundSchema: z.ZodType<PatchTicketsIdUnified, z.ZodTypeDef, Inbound> = z
        .object({
            count: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.count === undefined ? null : { count: v.count }),
            };
        });

    export type Outbound = {
        count?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchTicketsIdUnified> = z
        .object({
            count: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.count === undefined ? null : { count: v.count }),
            };
        });
}

/** @internal */
export namespace PatchTicketsIdPassthrough$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<PatchTicketsIdPassthrough, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchTicketsIdPassthrough> =
        z.object({});
}

/** @internal */
export namespace PatchTicketsIdCache$ {
    export type Inbound = {
        hit?: boolean | undefined;
        ttl?: number | undefined;
        key?: string | undefined;
    };

    export const inboundSchema: z.ZodType<PatchTicketsIdCache, z.ZodTypeDef, Inbound> = z
        .object({
            hit: z.boolean().optional(),
            ttl: z.number().int().optional(),
            key: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.hit === undefined ? null : { hit: v.hit }),
                ...(v.ttl === undefined ? null : { ttl: v.ttl }),
                ...(v.key === undefined ? null : { key: v.key }),
            };
        });

    export type Outbound = {
        hit?: boolean | undefined;
        ttl?: number | undefined;
        key?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchTicketsIdCache> = z
        .object({
            hit: z.boolean().optional(),
            ttl: z.number().int().optional(),
            key: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.hit === undefined ? null : { hit: v.hit }),
                ...(v.ttl === undefined ? null : { ttl: v.ttl }),
                ...(v.key === undefined ? null : { key: v.key }),
            };
        });
}

/** @internal */
export namespace PatchTicketsIdMeta$ {
    export type Inbound = {
        timestamp?: number | undefined;
        latency?: number | undefined;
        platformRateLimitRemaining?: number | undefined;
        rateLimitRemaining?: number | undefined;
        cache?: PatchTicketsIdCache$.Inbound | undefined;
        transactionKey?: string | undefined;
        txn?: string | undefined;
        platform?: string | undefined;
        platformVersion?: string | undefined;
        connectionDefinitionKey?: string | undefined;
        action?: string | undefined;
        commonModel?: string | undefined;
        commonModelVersion?: string | undefined;
        connectionKey?: string | undefined;
        hash?: string | undefined;
        heartbeats?: Array<string> | undefined;
        totalTransactions?: number | undefined;
    };

    export const inboundSchema: z.ZodType<PatchTicketsIdMeta, z.ZodTypeDef, Inbound> = z
        .object({
            timestamp: z.number().int().optional(),
            latency: z.number().int().optional(),
            platformRateLimitRemaining: z.number().int().optional(),
            rateLimitRemaining: z.number().int().optional(),
            cache: z.lazy(() => PatchTicketsIdCache$.inboundSchema).optional(),
            transactionKey: z.string().optional(),
            txn: z.string().optional(),
            platform: z.string().optional(),
            platformVersion: z.string().optional(),
            connectionDefinitionKey: z.string().optional(),
            action: z.string().optional(),
            commonModel: z.string().optional(),
            commonModelVersion: z.string().optional(),
            connectionKey: z.string().optional(),
            hash: z.string().optional(),
            heartbeats: z.array(z.string()).optional(),
            totalTransactions: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.timestamp === undefined ? null : { timestamp: v.timestamp }),
                ...(v.latency === undefined ? null : { latency: v.latency }),
                ...(v.platformRateLimitRemaining === undefined
                    ? null
                    : { platformRateLimitRemaining: v.platformRateLimitRemaining }),
                ...(v.rateLimitRemaining === undefined
                    ? null
                    : { rateLimitRemaining: v.rateLimitRemaining }),
                ...(v.cache === undefined ? null : { cache: v.cache }),
                ...(v.transactionKey === undefined ? null : { transactionKey: v.transactionKey }),
                ...(v.txn === undefined ? null : { txn: v.txn }),
                ...(v.platform === undefined ? null : { platform: v.platform }),
                ...(v.platformVersion === undefined
                    ? null
                    : { platformVersion: v.platformVersion }),
                ...(v.connectionDefinitionKey === undefined
                    ? null
                    : { connectionDefinitionKey: v.connectionDefinitionKey }),
                ...(v.action === undefined ? null : { action: v.action }),
                ...(v.commonModel === undefined ? null : { commonModel: v.commonModel }),
                ...(v.commonModelVersion === undefined
                    ? null
                    : { commonModelVersion: v.commonModelVersion }),
                ...(v.connectionKey === undefined ? null : { connectionKey: v.connectionKey }),
                ...(v.hash === undefined ? null : { hash: v.hash }),
                ...(v.heartbeats === undefined ? null : { heartbeats: v.heartbeats }),
                ...(v.totalTransactions === undefined
                    ? null
                    : { totalTransactions: v.totalTransactions }),
            };
        });

    export type Outbound = {
        timestamp?: number | undefined;
        latency?: number | undefined;
        platformRateLimitRemaining?: number | undefined;
        rateLimitRemaining?: number | undefined;
        cache?: PatchTicketsIdCache$.Outbound | undefined;
        transactionKey?: string | undefined;
        txn?: string | undefined;
        platform?: string | undefined;
        platformVersion?: string | undefined;
        connectionDefinitionKey?: string | undefined;
        action?: string | undefined;
        commonModel?: string | undefined;
        commonModelVersion?: string | undefined;
        connectionKey?: string | undefined;
        hash?: string | undefined;
        heartbeats?: Array<string> | undefined;
        totalTransactions?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchTicketsIdMeta> = z
        .object({
            timestamp: z.number().int().optional(),
            latency: z.number().int().optional(),
            platformRateLimitRemaining: z.number().int().optional(),
            rateLimitRemaining: z.number().int().optional(),
            cache: z.lazy(() => PatchTicketsIdCache$.outboundSchema).optional(),
            transactionKey: z.string().optional(),
            txn: z.string().optional(),
            platform: z.string().optional(),
            platformVersion: z.string().optional(),
            connectionDefinitionKey: z.string().optional(),
            action: z.string().optional(),
            commonModel: z.string().optional(),
            commonModelVersion: z.string().optional(),
            connectionKey: z.string().optional(),
            hash: z.string().optional(),
            heartbeats: z.array(z.string()).optional(),
            totalTransactions: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.timestamp === undefined ? null : { timestamp: v.timestamp }),
                ...(v.latency === undefined ? null : { latency: v.latency }),
                ...(v.platformRateLimitRemaining === undefined
                    ? null
                    : { platformRateLimitRemaining: v.platformRateLimitRemaining }),
                ...(v.rateLimitRemaining === undefined
                    ? null
                    : { rateLimitRemaining: v.rateLimitRemaining }),
                ...(v.cache === undefined ? null : { cache: v.cache }),
                ...(v.transactionKey === undefined ? null : { transactionKey: v.transactionKey }),
                ...(v.txn === undefined ? null : { txn: v.txn }),
                ...(v.platform === undefined ? null : { platform: v.platform }),
                ...(v.platformVersion === undefined
                    ? null
                    : { platformVersion: v.platformVersion }),
                ...(v.connectionDefinitionKey === undefined
                    ? null
                    : { connectionDefinitionKey: v.connectionDefinitionKey }),
                ...(v.action === undefined ? null : { action: v.action }),
                ...(v.commonModel === undefined ? null : { commonModel: v.commonModel }),
                ...(v.commonModelVersion === undefined
                    ? null
                    : { commonModelVersion: v.commonModelVersion }),
                ...(v.connectionKey === undefined ? null : { connectionKey: v.connectionKey }),
                ...(v.hash === undefined ? null : { hash: v.hash }),
                ...(v.heartbeats === undefined ? null : { heartbeats: v.heartbeats }),
                ...(v.totalTransactions === undefined
                    ? null
                    : { totalTransactions: v.totalTransactions }),
            };
        });
}

/** @internal */
export namespace PatchTicketsIdResponseBody$ {
    export type Inbound = {
        status?: string | undefined;
        statusCode?: PatchTicketsIdStatusCode | undefined;
        unified?: PatchTicketsIdUnified$.Inbound | undefined;
        passthrough?: PatchTicketsIdPassthrough$.Inbound | undefined;
        meta?: PatchTicketsIdMeta$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<PatchTicketsIdResponseBody, z.ZodTypeDef, Inbound> = z
        .object({
            status: z.string().optional(),
            statusCode: PatchTicketsIdStatusCode$.optional(),
            unified: z.lazy(() => PatchTicketsIdUnified$.inboundSchema).optional(),
            passthrough: z.lazy(() => PatchTicketsIdPassthrough$.inboundSchema).optional(),
            meta: z.lazy(() => PatchTicketsIdMeta$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.statusCode === undefined ? null : { statusCode: v.statusCode }),
                ...(v.unified === undefined ? null : { unified: v.unified }),
                ...(v.passthrough === undefined ? null : { passthrough: v.passthrough }),
                ...(v.meta === undefined ? null : { meta: v.meta }),
            };
        });

    export type Outbound = {
        status?: string | undefined;
        statusCode?: PatchTicketsIdStatusCode | undefined;
        unified?: PatchTicketsIdUnified$.Outbound | undefined;
        passthrough?: PatchTicketsIdPassthrough$.Outbound | undefined;
        meta?: PatchTicketsIdMeta$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchTicketsIdResponseBody> = z
        .object({
            status: z.string().optional(),
            statusCode: PatchTicketsIdStatusCode$.optional(),
            unified: z.lazy(() => PatchTicketsIdUnified$.outboundSchema).optional(),
            passthrough: z.lazy(() => PatchTicketsIdPassthrough$.outboundSchema).optional(),
            meta: z.lazy(() => PatchTicketsIdMeta$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.statusCode === undefined ? null : { statusCode: v.statusCode }),
                ...(v.unified === undefined ? null : { unified: v.unified }),
                ...(v.passthrough === undefined ? null : { passthrough: v.passthrough }),
                ...(v.meta === undefined ? null : { meta: v.meta }),
            };
        });
}

/** @internal */
export namespace PatchTicketsIdResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        object?: PatchTicketsIdResponseBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<PatchTicketsIdResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => PatchTicketsIdResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: PatchTicketsIdResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, PatchTicketsIdResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z.lazy(() => PatchTicketsIdResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
