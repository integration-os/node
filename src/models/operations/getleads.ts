/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type GetLeadsRequest = {
    /**
     * The unique identifier of a Connected Account
     */
    xIntegrationosConnectionKey: string;
};

export enum GetLeadsStatusCode {
    TwoHundred = 200,
    FourHundred = 400,
    FiveHundred = 500,
}

export type GetLeadsCampaign = {};

export type GetLeadsAccount = {};

export type GetLeadsContacts = {};

export type GetLeadsOwner = {};

export type GetLeadsAttachments = {};

export type GetLeadsLeadsResponseCustomFields = {};

export type GetLeadsOpportunities = {
    id?: string | undefined;
    title?: string | undefined;
    description?: string | undefined;
    amount?: number | undefined;
    currency?: string | undefined;
    stage?: string | undefined;
    probability?: number | undefined;
    closeDate?: number | undefined;
    type?: string | undefined;
    nextStep?: string | undefined;
    leadId?: string | undefined;
    leadSource?: string | undefined;
    isClosed?: boolean | undefined;
    isWon?: boolean | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    lostReason?: string | undefined;
    campaign?: GetLeadsCampaign | undefined;
    account?: GetLeadsAccount | undefined;
    contacts?: Array<GetLeadsContacts> | undefined;
    owner?: GetLeadsOwner | undefined;
    attachments?: Array<GetLeadsAttachments> | undefined;
    notes?: Array<string> | undefined;
    customFields?: Array<GetLeadsLeadsResponseCustomFields> | undefined;
};

export enum GetLeadsType {
    Personal = "personal",
    Business = "business",
    Other = "other",
}

export type GetLeadsEmails = {
    email?: string | undefined;
    type?: GetLeadsType | undefined;
};

export enum GetLeadsLeadsType {
    Personal = "personal",
    Business = "business",
    Other = "other",
}

export type GetLeadsPhones = {
    phone?: string | undefined;
    country?: string | undefined;
    countryCode?: string | undefined;
    type?: GetLeadsLeadsType | undefined;
};

export type GetLeadsLeadSource = {
    sourceId?: string | undefined;
    sourceName?: string | undefined;
    details?: string | undefined;
};

export enum GetLeadsLeadStatus {
    New = "New",
    Open = "Open",
    InProcess = "InProcess",
    Converted = "Converted",
    Unqualified = "Unqualified",
    AttemptedToContact = "AttemptedToContact",
    Connected = "Connected",
    BadTiming = "BadTiming",
}

export enum GetLeadsLeadsResponseType {
    Home = "home",
    Work = "work",
    Other = "other",
}

export type GetLeadsGeoLocation = {};

export type GetLeadsLeadsCustomFields = {};

export type GetLeadsAddresses = {
    id?: string | undefined;
    contactId?: string | undefined;
    accountId?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    name?: string | undefined;
    companyName?: string | undefined;
    email?: string | undefined;
    phone?: string | undefined;
    street?: string | undefined;
    addressLine2?: string | undefined;
    city?: string | undefined;
    province?: string | undefined;
    region?: string | undefined;
    postalCode?: string | undefined;
    postalCodeExtension?: string | undefined;
    country?: string | undefined;
    countryCode?: string | undefined;
    type?: GetLeadsLeadsResponseType | undefined;
    geoLocation?: GetLeadsGeoLocation | undefined;
    customFields?: Array<GetLeadsLeadsCustomFields> | undefined;
    subdivisionCode?: string | undefined;
};

export enum GetLeadsPreferredContactMethod {
    Email = "Email",
    Phone = "Phone",
    Text = "Text",
    Mail = "Mail",
    InPerson = "InPerson",
}

export enum GetLeadsLeadsResponse200Type {
    Facebook = "facebook",
    Twitter = "twitter",
    Linkedin = "linkedin",
    Instagram = "instagram",
    Tiktok = "tiktok",
    Pinterest = "pinterest",
    Youtube = "youtube",
    Other = "other",
}

export type GetLeadsAdditionalInfo = {};

export type GetLeadsSocialProfiles = {
    type?: GetLeadsLeadsResponse200Type | undefined;
    username?: string | undefined;
    displayName?: string | undefined;
    url?: string | undefined;
    avatarUrl?: string | undefined;
    email?: string | undefined;
    additionalInfo?: GetLeadsAdditionalInfo | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    active?: boolean | undefined;
    deleted?: boolean | undefined;
};

export enum GetLeadsFieldType {
    Text = "text",
    Number = "number",
    Date = "date",
    Boolean = "boolean",
    Enum = "enum",
    Json = "json",
    Array = "array",
}

export type GetLeadsCustomFields = {
    id?: string | undefined;
    fieldName?: string | undefined;
    fieldValue?: string | undefined;
    fieldType?: GetLeadsFieldType | undefined;
};

export enum GetLeadsPriority {
    Low = "low",
    Medium = "medium",
    High = "high",
}

export type GetLeadsAuthor = {};

export type GetLeadsLeadsAttachments = {};

export type GetLeadsSharedWith = {};

export enum GetLeadsVisibility {
    Private = "private",
    Public = "public",
    Shared = "shared",
}

export enum GetLeadsStatus {
    Active = "active",
    Archived = "archived",
}

export type GetLeadsNotes = {
    id?: string | undefined;
    title?: string | undefined;
    content?: string | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    lastAccessed?: number | undefined;
    reminder?: number | undefined;
    color?: string | undefined;
    priority?: GetLeadsPriority | undefined;
    author?: GetLeadsAuthor | undefined;
    tags?: Array<string> | undefined;
    attachments?: Array<GetLeadsLeadsAttachments> | undefined;
    sharedWith?: Array<GetLeadsSharedWith> | undefined;
    visibility?: GetLeadsVisibility | undefined;
    status?: GetLeadsStatus | undefined;
    metadata?: Array<string> | undefined;
};

export type GetLeadsUnified = {
    id?: string | undefined;
    name?: string | undefined;
    firstName?: string | undefined;
    middleName?: string | undefined;
    lastName?: string | undefined;
    opportunities?: Array<GetLeadsOpportunities> | undefined;
    defaultEmail?: string | undefined;
    emails?: Array<GetLeadsEmails> | undefined;
    defaultPhone?: string | undefined;
    phones?: Array<GetLeadsPhones> | undefined;
    companyName?: string | undefined;
    jobTitle?: string | undefined;
    website?: string | undefined;
    leadSource?: GetLeadsLeadSource | undefined;
    leadStatus?: GetLeadsLeadStatus | undefined;
    industry?: string | undefined;
    numberOfEmployees?: number | undefined;
    annualRevenue?: number | undefined;
    addresses?: Array<GetLeadsAddresses> | undefined;
    createdAt?: Date | undefined;
    updatedAt?: Date | undefined;
    preferredContactMethod?: GetLeadsPreferredContactMethod | undefined;
    socialProfiles?: Array<GetLeadsSocialProfiles> | undefined;
    customFields?: Array<GetLeadsCustomFields> | undefined;
    notes?: Array<GetLeadsNotes> | undefined;
};

export type GetLeadsPassthrough = {};

export type GetLeadsCache = {
    hit?: boolean | undefined;
    ttl?: number | undefined;
    key?: string | undefined;
};

export type GetLeadsMeta = {
    timestamp?: number | undefined;
    latency?: number | undefined;
    platformRateLimitRemaining?: number | undefined;
    rateLimitRemaining?: number | undefined;
    cache?: GetLeadsCache | undefined;
    transactionKey?: string | undefined;
    txn?: string | undefined;
    platform?: string | undefined;
    platformVersion?: string | undefined;
    connectionDefinitionKey?: string | undefined;
    action?: string | undefined;
    commonModel?: string | undefined;
    commonModelVersion?: string | undefined;
    connectionKey?: string | undefined;
    hash?: string | undefined;
    heartbeats?: Array<string> | undefined;
    totalTransactions?: number | undefined;
};

export type GetLeadsPagination = {
    cursor?: string | undefined;
    limit?: number | undefined;
};

/**
 * Successful response
 */
export type GetLeadsResponseBody = {
    status?: string | undefined;
    statusCode?: GetLeadsStatusCode | undefined;
    unified?: Array<GetLeadsUnified> | undefined;
    passthrough?: GetLeadsPassthrough | undefined;
    meta?: GetLeadsMeta | undefined;
    pagination?: GetLeadsPagination | undefined;
};

export type GetLeadsResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Successful response
     */
    object?: GetLeadsResponseBody | undefined;
};

/** @internal */
export namespace GetLeadsRequest$ {
    export type Inbound = {
        "X-INTEGRATIONOS-CONNECTION-KEY": string;
    };

    export const inboundSchema: z.ZodType<GetLeadsRequest, z.ZodTypeDef, Inbound> = z
        .object({
            "X-INTEGRATIONOS-CONNECTION-KEY": z.string(),
        })
        .transform((v) => {
            return {
                xIntegrationosConnectionKey: v["X-INTEGRATIONOS-CONNECTION-KEY"],
            };
        });

    export type Outbound = {
        "X-INTEGRATIONOS-CONNECTION-KEY": string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetLeadsRequest> = z
        .object({
            xIntegrationosConnectionKey: z.string(),
        })
        .transform((v) => {
            return {
                "X-INTEGRATIONOS-CONNECTION-KEY": v.xIntegrationosConnectionKey,
            };
        });
}

/** @internal */
export const GetLeadsStatusCode$ = z.nativeEnum(GetLeadsStatusCode);

/** @internal */
export namespace GetLeadsCampaign$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<GetLeadsCampaign, z.ZodTypeDef, Inbound> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetLeadsCampaign> = z.object({});
}

/** @internal */
export namespace GetLeadsAccount$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<GetLeadsAccount, z.ZodTypeDef, Inbound> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetLeadsAccount> = z.object({});
}

/** @internal */
export namespace GetLeadsContacts$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<GetLeadsContacts, z.ZodTypeDef, Inbound> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetLeadsContacts> = z.object({});
}

/** @internal */
export namespace GetLeadsOwner$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<GetLeadsOwner, z.ZodTypeDef, Inbound> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetLeadsOwner> = z.object({});
}

/** @internal */
export namespace GetLeadsAttachments$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<GetLeadsAttachments, z.ZodTypeDef, Inbound> = z.object(
        {}
    );

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetLeadsAttachments> = z.object(
        {}
    );
}

/** @internal */
export namespace GetLeadsLeadsResponseCustomFields$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<
        GetLeadsLeadsResponseCustomFields,
        z.ZodTypeDef,
        Inbound
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetLeadsLeadsResponseCustomFields
    > = z.object({});
}

/** @internal */
export namespace GetLeadsOpportunities$ {
    export type Inbound = {
        id?: string | undefined;
        title?: string | undefined;
        description?: string | undefined;
        amount?: number | undefined;
        currency?: string | undefined;
        stage?: string | undefined;
        probability?: number | undefined;
        closeDate?: number | undefined;
        type?: string | undefined;
        nextStep?: string | undefined;
        leadId?: string | undefined;
        leadSource?: string | undefined;
        isClosed?: boolean | undefined;
        isWon?: boolean | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        lostReason?: string | undefined;
        campaign?: GetLeadsCampaign$.Inbound | undefined;
        account?: GetLeadsAccount$.Inbound | undefined;
        contacts?: Array<GetLeadsContacts$.Inbound> | undefined;
        owner?: GetLeadsOwner$.Inbound | undefined;
        attachments?: Array<GetLeadsAttachments$.Inbound> | undefined;
        notes?: Array<string> | undefined;
        customFields?: Array<GetLeadsLeadsResponseCustomFields$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<GetLeadsOpportunities, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            title: z.string().optional(),
            description: z.string().optional(),
            amount: z.number().optional(),
            currency: z.string().optional(),
            stage: z.string().optional(),
            probability: z.number().optional(),
            closeDate: z.number().optional(),
            type: z.string().optional(),
            nextStep: z.string().optional(),
            leadId: z.string().optional(),
            leadSource: z.string().optional(),
            isClosed: z.boolean().optional(),
            isWon: z.boolean().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            lostReason: z.string().optional(),
            campaign: z.lazy(() => GetLeadsCampaign$.inboundSchema).optional(),
            account: z.lazy(() => GetLeadsAccount$.inboundSchema).optional(),
            contacts: z.array(z.lazy(() => GetLeadsContacts$.inboundSchema)).optional(),
            owner: z.lazy(() => GetLeadsOwner$.inboundSchema).optional(),
            attachments: z.array(z.lazy(() => GetLeadsAttachments$.inboundSchema)).optional(),
            notes: z.array(z.string()).optional(),
            customFields: z
                .array(z.lazy(() => GetLeadsLeadsResponseCustomFields$.inboundSchema))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.amount === undefined ? null : { amount: v.amount }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.stage === undefined ? null : { stage: v.stage }),
                ...(v.probability === undefined ? null : { probability: v.probability }),
                ...(v.closeDate === undefined ? null : { closeDate: v.closeDate }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.nextStep === undefined ? null : { nextStep: v.nextStep }),
                ...(v.leadId === undefined ? null : { leadId: v.leadId }),
                ...(v.leadSource === undefined ? null : { leadSource: v.leadSource }),
                ...(v.isClosed === undefined ? null : { isClosed: v.isClosed }),
                ...(v.isWon === undefined ? null : { isWon: v.isWon }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.lostReason === undefined ? null : { lostReason: v.lostReason }),
                ...(v.campaign === undefined ? null : { campaign: v.campaign }),
                ...(v.account === undefined ? null : { account: v.account }),
                ...(v.contacts === undefined ? null : { contacts: v.contacts }),
                ...(v.owner === undefined ? null : { owner: v.owner }),
                ...(v.attachments === undefined ? null : { attachments: v.attachments }),
                ...(v.notes === undefined ? null : { notes: v.notes }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        title?: string | undefined;
        description?: string | undefined;
        amount?: number | undefined;
        currency?: string | undefined;
        stage?: string | undefined;
        probability?: number | undefined;
        closeDate?: number | undefined;
        type?: string | undefined;
        nextStep?: string | undefined;
        leadId?: string | undefined;
        leadSource?: string | undefined;
        isClosed?: boolean | undefined;
        isWon?: boolean | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        lostReason?: string | undefined;
        campaign?: GetLeadsCampaign$.Outbound | undefined;
        account?: GetLeadsAccount$.Outbound | undefined;
        contacts?: Array<GetLeadsContacts$.Outbound> | undefined;
        owner?: GetLeadsOwner$.Outbound | undefined;
        attachments?: Array<GetLeadsAttachments$.Outbound> | undefined;
        notes?: Array<string> | undefined;
        customFields?: Array<GetLeadsLeadsResponseCustomFields$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetLeadsOpportunities> = z
        .object({
            id: z.string().optional(),
            title: z.string().optional(),
            description: z.string().optional(),
            amount: z.number().optional(),
            currency: z.string().optional(),
            stage: z.string().optional(),
            probability: z.number().optional(),
            closeDate: z.number().optional(),
            type: z.string().optional(),
            nextStep: z.string().optional(),
            leadId: z.string().optional(),
            leadSource: z.string().optional(),
            isClosed: z.boolean().optional(),
            isWon: z.boolean().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            lostReason: z.string().optional(),
            campaign: z.lazy(() => GetLeadsCampaign$.outboundSchema).optional(),
            account: z.lazy(() => GetLeadsAccount$.outboundSchema).optional(),
            contacts: z.array(z.lazy(() => GetLeadsContacts$.outboundSchema)).optional(),
            owner: z.lazy(() => GetLeadsOwner$.outboundSchema).optional(),
            attachments: z.array(z.lazy(() => GetLeadsAttachments$.outboundSchema)).optional(),
            notes: z.array(z.string()).optional(),
            customFields: z
                .array(z.lazy(() => GetLeadsLeadsResponseCustomFields$.outboundSchema))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.amount === undefined ? null : { amount: v.amount }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.stage === undefined ? null : { stage: v.stage }),
                ...(v.probability === undefined ? null : { probability: v.probability }),
                ...(v.closeDate === undefined ? null : { closeDate: v.closeDate }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.nextStep === undefined ? null : { nextStep: v.nextStep }),
                ...(v.leadId === undefined ? null : { leadId: v.leadId }),
                ...(v.leadSource === undefined ? null : { leadSource: v.leadSource }),
                ...(v.isClosed === undefined ? null : { isClosed: v.isClosed }),
                ...(v.isWon === undefined ? null : { isWon: v.isWon }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.lostReason === undefined ? null : { lostReason: v.lostReason }),
                ...(v.campaign === undefined ? null : { campaign: v.campaign }),
                ...(v.account === undefined ? null : { account: v.account }),
                ...(v.contacts === undefined ? null : { contacts: v.contacts }),
                ...(v.owner === undefined ? null : { owner: v.owner }),
                ...(v.attachments === undefined ? null : { attachments: v.attachments }),
                ...(v.notes === undefined ? null : { notes: v.notes }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
            };
        });
}

/** @internal */
export const GetLeadsType$ = z.nativeEnum(GetLeadsType);

/** @internal */
export namespace GetLeadsEmails$ {
    export type Inbound = {
        email?: string | undefined;
        type?: GetLeadsType | undefined;
    };

    export const inboundSchema: z.ZodType<GetLeadsEmails, z.ZodTypeDef, Inbound> = z
        .object({
            email: z.string().optional(),
            type: GetLeadsType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });

    export type Outbound = {
        email?: string | undefined;
        type?: GetLeadsType | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetLeadsEmails> = z
        .object({
            email: z.string().optional(),
            type: GetLeadsType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });
}

/** @internal */
export const GetLeadsLeadsType$ = z.nativeEnum(GetLeadsLeadsType);

/** @internal */
export namespace GetLeadsPhones$ {
    export type Inbound = {
        phone?: string | undefined;
        country?: string | undefined;
        countryCode?: string | undefined;
        type?: GetLeadsLeadsType | undefined;
    };

    export const inboundSchema: z.ZodType<GetLeadsPhones, z.ZodTypeDef, Inbound> = z
        .object({
            phone: z.string().optional(),
            country: z.string().optional(),
            countryCode: z.string().optional(),
            type: GetLeadsLeadsType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.phone === undefined ? null : { phone: v.phone }),
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.countryCode === undefined ? null : { countryCode: v.countryCode }),
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });

    export type Outbound = {
        phone?: string | undefined;
        country?: string | undefined;
        countryCode?: string | undefined;
        type?: GetLeadsLeadsType | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetLeadsPhones> = z
        .object({
            phone: z.string().optional(),
            country: z.string().optional(),
            countryCode: z.string().optional(),
            type: GetLeadsLeadsType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.phone === undefined ? null : { phone: v.phone }),
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.countryCode === undefined ? null : { countryCode: v.countryCode }),
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });
}

/** @internal */
export namespace GetLeadsLeadSource$ {
    export type Inbound = {
        sourceId?: string | undefined;
        sourceName?: string | undefined;
        details?: string | undefined;
    };

    export const inboundSchema: z.ZodType<GetLeadsLeadSource, z.ZodTypeDef, Inbound> = z
        .object({
            sourceId: z.string().optional(),
            sourceName: z.string().optional(),
            details: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.sourceId === undefined ? null : { sourceId: v.sourceId }),
                ...(v.sourceName === undefined ? null : { sourceName: v.sourceName }),
                ...(v.details === undefined ? null : { details: v.details }),
            };
        });

    export type Outbound = {
        sourceId?: string | undefined;
        sourceName?: string | undefined;
        details?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetLeadsLeadSource> = z
        .object({
            sourceId: z.string().optional(),
            sourceName: z.string().optional(),
            details: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.sourceId === undefined ? null : { sourceId: v.sourceId }),
                ...(v.sourceName === undefined ? null : { sourceName: v.sourceName }),
                ...(v.details === undefined ? null : { details: v.details }),
            };
        });
}

/** @internal */
export const GetLeadsLeadStatus$ = z.nativeEnum(GetLeadsLeadStatus);

/** @internal */
export const GetLeadsLeadsResponseType$ = z.nativeEnum(GetLeadsLeadsResponseType);

/** @internal */
export namespace GetLeadsGeoLocation$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<GetLeadsGeoLocation, z.ZodTypeDef, Inbound> = z.object(
        {}
    );

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetLeadsGeoLocation> = z.object(
        {}
    );
}

/** @internal */
export namespace GetLeadsLeadsCustomFields$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<GetLeadsLeadsCustomFields, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetLeadsLeadsCustomFields> =
        z.object({});
}

/** @internal */
export namespace GetLeadsAddresses$ {
    export type Inbound = {
        id?: string | undefined;
        contactId?: string | undefined;
        accountId?: string | undefined;
        firstName?: string | undefined;
        lastName?: string | undefined;
        name?: string | undefined;
        companyName?: string | undefined;
        email?: string | undefined;
        phone?: string | undefined;
        street?: string | undefined;
        addressLine2?: string | undefined;
        city?: string | undefined;
        province?: string | undefined;
        region?: string | undefined;
        postalCode?: string | undefined;
        postalCodeExtension?: string | undefined;
        country?: string | undefined;
        countryCode?: string | undefined;
        type?: GetLeadsLeadsResponseType | undefined;
        geoLocation?: GetLeadsGeoLocation$.Inbound | undefined;
        customFields?: Array<GetLeadsLeadsCustomFields$.Inbound> | undefined;
        subdivisionCode?: string | undefined;
    };

    export const inboundSchema: z.ZodType<GetLeadsAddresses, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            contactId: z.string().optional(),
            accountId: z.string().optional(),
            firstName: z.string().optional(),
            lastName: z.string().optional(),
            name: z.string().optional(),
            companyName: z.string().optional(),
            email: z.string().optional(),
            phone: z.string().optional(),
            street: z.string().optional(),
            addressLine2: z.string().optional(),
            city: z.string().optional(),
            province: z.string().optional(),
            region: z.string().optional(),
            postalCode: z.string().optional(),
            postalCodeExtension: z.string().optional(),
            country: z.string().optional(),
            countryCode: z.string().optional(),
            type: GetLeadsLeadsResponseType$.optional(),
            geoLocation: z.lazy(() => GetLeadsGeoLocation$.inboundSchema).optional(),
            customFields: z
                .array(z.lazy(() => GetLeadsLeadsCustomFields$.inboundSchema))
                .optional(),
            subdivisionCode: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.contactId === undefined ? null : { contactId: v.contactId }),
                ...(v.accountId === undefined ? null : { accountId: v.accountId }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.companyName === undefined ? null : { companyName: v.companyName }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.phone === undefined ? null : { phone: v.phone }),
                ...(v.street === undefined ? null : { street: v.street }),
                ...(v.addressLine2 === undefined ? null : { addressLine2: v.addressLine2 }),
                ...(v.city === undefined ? null : { city: v.city }),
                ...(v.province === undefined ? null : { province: v.province }),
                ...(v.region === undefined ? null : { region: v.region }),
                ...(v.postalCode === undefined ? null : { postalCode: v.postalCode }),
                ...(v.postalCodeExtension === undefined
                    ? null
                    : { postalCodeExtension: v.postalCodeExtension }),
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.countryCode === undefined ? null : { countryCode: v.countryCode }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.geoLocation === undefined ? null : { geoLocation: v.geoLocation }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                ...(v.subdivisionCode === undefined
                    ? null
                    : { subdivisionCode: v.subdivisionCode }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        contactId?: string | undefined;
        accountId?: string | undefined;
        firstName?: string | undefined;
        lastName?: string | undefined;
        name?: string | undefined;
        companyName?: string | undefined;
        email?: string | undefined;
        phone?: string | undefined;
        street?: string | undefined;
        addressLine2?: string | undefined;
        city?: string | undefined;
        province?: string | undefined;
        region?: string | undefined;
        postalCode?: string | undefined;
        postalCodeExtension?: string | undefined;
        country?: string | undefined;
        countryCode?: string | undefined;
        type?: GetLeadsLeadsResponseType | undefined;
        geoLocation?: GetLeadsGeoLocation$.Outbound | undefined;
        customFields?: Array<GetLeadsLeadsCustomFields$.Outbound> | undefined;
        subdivisionCode?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetLeadsAddresses> = z
        .object({
            id: z.string().optional(),
            contactId: z.string().optional(),
            accountId: z.string().optional(),
            firstName: z.string().optional(),
            lastName: z.string().optional(),
            name: z.string().optional(),
            companyName: z.string().optional(),
            email: z.string().optional(),
            phone: z.string().optional(),
            street: z.string().optional(),
            addressLine2: z.string().optional(),
            city: z.string().optional(),
            province: z.string().optional(),
            region: z.string().optional(),
            postalCode: z.string().optional(),
            postalCodeExtension: z.string().optional(),
            country: z.string().optional(),
            countryCode: z.string().optional(),
            type: GetLeadsLeadsResponseType$.optional(),
            geoLocation: z.lazy(() => GetLeadsGeoLocation$.outboundSchema).optional(),
            customFields: z
                .array(z.lazy(() => GetLeadsLeadsCustomFields$.outboundSchema))
                .optional(),
            subdivisionCode: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.contactId === undefined ? null : { contactId: v.contactId }),
                ...(v.accountId === undefined ? null : { accountId: v.accountId }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.companyName === undefined ? null : { companyName: v.companyName }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.phone === undefined ? null : { phone: v.phone }),
                ...(v.street === undefined ? null : { street: v.street }),
                ...(v.addressLine2 === undefined ? null : { addressLine2: v.addressLine2 }),
                ...(v.city === undefined ? null : { city: v.city }),
                ...(v.province === undefined ? null : { province: v.province }),
                ...(v.region === undefined ? null : { region: v.region }),
                ...(v.postalCode === undefined ? null : { postalCode: v.postalCode }),
                ...(v.postalCodeExtension === undefined
                    ? null
                    : { postalCodeExtension: v.postalCodeExtension }),
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.countryCode === undefined ? null : { countryCode: v.countryCode }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.geoLocation === undefined ? null : { geoLocation: v.geoLocation }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                ...(v.subdivisionCode === undefined
                    ? null
                    : { subdivisionCode: v.subdivisionCode }),
            };
        });
}

/** @internal */
export const GetLeadsPreferredContactMethod$ = z.nativeEnum(GetLeadsPreferredContactMethod);

/** @internal */
export const GetLeadsLeadsResponse200Type$ = z.nativeEnum(GetLeadsLeadsResponse200Type);

/** @internal */
export namespace GetLeadsAdditionalInfo$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<GetLeadsAdditionalInfo, z.ZodTypeDef, Inbound> = z.object(
        {}
    );

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetLeadsAdditionalInfo> =
        z.object({});
}

/** @internal */
export namespace GetLeadsSocialProfiles$ {
    export type Inbound = {
        type?: GetLeadsLeadsResponse200Type | undefined;
        username?: string | undefined;
        displayName?: string | undefined;
        url?: string | undefined;
        avatarUrl?: string | undefined;
        email?: string | undefined;
        additionalInfo?: GetLeadsAdditionalInfo$.Inbound | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<GetLeadsSocialProfiles, z.ZodTypeDef, Inbound> = z
        .object({
            type: GetLeadsLeadsResponse200Type$.optional(),
            username: z.string().optional(),
            displayName: z.string().optional(),
            url: z.string().optional(),
            avatarUrl: z.string().optional(),
            email: z.string().optional(),
            additionalInfo: z.lazy(() => GetLeadsAdditionalInfo$.inboundSchema).optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.username === undefined ? null : { username: v.username }),
                ...(v.displayName === undefined ? null : { displayName: v.displayName }),
                ...(v.url === undefined ? null : { url: v.url }),
                ...(v.avatarUrl === undefined ? null : { avatarUrl: v.avatarUrl }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.additionalInfo === undefined ? null : { additionalInfo: v.additionalInfo }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });

    export type Outbound = {
        type?: GetLeadsLeadsResponse200Type | undefined;
        username?: string | undefined;
        displayName?: string | undefined;
        url?: string | undefined;
        avatarUrl?: string | undefined;
        email?: string | undefined;
        additionalInfo?: GetLeadsAdditionalInfo$.Outbound | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetLeadsSocialProfiles> = z
        .object({
            type: GetLeadsLeadsResponse200Type$.optional(),
            username: z.string().optional(),
            displayName: z.string().optional(),
            url: z.string().optional(),
            avatarUrl: z.string().optional(),
            email: z.string().optional(),
            additionalInfo: z.lazy(() => GetLeadsAdditionalInfo$.outboundSchema).optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.username === undefined ? null : { username: v.username }),
                ...(v.displayName === undefined ? null : { displayName: v.displayName }),
                ...(v.url === undefined ? null : { url: v.url }),
                ...(v.avatarUrl === undefined ? null : { avatarUrl: v.avatarUrl }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.additionalInfo === undefined ? null : { additionalInfo: v.additionalInfo }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });
}

/** @internal */
export const GetLeadsFieldType$ = z.nativeEnum(GetLeadsFieldType);

/** @internal */
export namespace GetLeadsCustomFields$ {
    export type Inbound = {
        id?: string | undefined;
        fieldName?: string | undefined;
        fieldValue?: string | undefined;
        fieldType?: GetLeadsFieldType | undefined;
    };

    export const inboundSchema: z.ZodType<GetLeadsCustomFields, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            fieldName: z.string().optional(),
            fieldValue: z.string().optional(),
            fieldType: GetLeadsFieldType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fieldName === undefined ? null : { fieldName: v.fieldName }),
                ...(v.fieldValue === undefined ? null : { fieldValue: v.fieldValue }),
                ...(v.fieldType === undefined ? null : { fieldType: v.fieldType }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        fieldName?: string | undefined;
        fieldValue?: string | undefined;
        fieldType?: GetLeadsFieldType | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetLeadsCustomFields> = z
        .object({
            id: z.string().optional(),
            fieldName: z.string().optional(),
            fieldValue: z.string().optional(),
            fieldType: GetLeadsFieldType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fieldName === undefined ? null : { fieldName: v.fieldName }),
                ...(v.fieldValue === undefined ? null : { fieldValue: v.fieldValue }),
                ...(v.fieldType === undefined ? null : { fieldType: v.fieldType }),
            };
        });
}

/** @internal */
export const GetLeadsPriority$ = z.nativeEnum(GetLeadsPriority);

/** @internal */
export namespace GetLeadsAuthor$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<GetLeadsAuthor, z.ZodTypeDef, Inbound> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetLeadsAuthor> = z.object({});
}

/** @internal */
export namespace GetLeadsLeadsAttachments$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<GetLeadsLeadsAttachments, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetLeadsLeadsAttachments> =
        z.object({});
}

/** @internal */
export namespace GetLeadsSharedWith$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<GetLeadsSharedWith, z.ZodTypeDef, Inbound> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetLeadsSharedWith> = z.object(
        {}
    );
}

/** @internal */
export const GetLeadsVisibility$ = z.nativeEnum(GetLeadsVisibility);

/** @internal */
export const GetLeadsStatus$ = z.nativeEnum(GetLeadsStatus);

/** @internal */
export namespace GetLeadsNotes$ {
    export type Inbound = {
        id?: string | undefined;
        title?: string | undefined;
        content?: string | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        lastAccessed?: number | undefined;
        reminder?: number | undefined;
        color?: string | undefined;
        priority?: GetLeadsPriority | undefined;
        author?: GetLeadsAuthor$.Inbound | undefined;
        tags?: Array<string> | undefined;
        attachments?: Array<GetLeadsLeadsAttachments$.Inbound> | undefined;
        sharedWith?: Array<GetLeadsSharedWith$.Inbound> | undefined;
        visibility?: GetLeadsVisibility | undefined;
        status?: GetLeadsStatus | undefined;
        metadata?: Array<string> | undefined;
    };

    export const inboundSchema: z.ZodType<GetLeadsNotes, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            title: z.string().optional(),
            content: z.string().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            lastAccessed: z.number().optional(),
            reminder: z.number().optional(),
            color: z.string().optional(),
            priority: GetLeadsPriority$.optional(),
            author: z.lazy(() => GetLeadsAuthor$.inboundSchema).optional(),
            tags: z.array(z.string()).optional(),
            attachments: z.array(z.lazy(() => GetLeadsLeadsAttachments$.inboundSchema)).optional(),
            sharedWith: z.array(z.lazy(() => GetLeadsSharedWith$.inboundSchema)).optional(),
            visibility: GetLeadsVisibility$.optional(),
            status: GetLeadsStatus$.optional(),
            metadata: z.array(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.content === undefined ? null : { content: v.content }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.lastAccessed === undefined ? null : { lastAccessed: v.lastAccessed }),
                ...(v.reminder === undefined ? null : { reminder: v.reminder }),
                ...(v.color === undefined ? null : { color: v.color }),
                ...(v.priority === undefined ? null : { priority: v.priority }),
                ...(v.author === undefined ? null : { author: v.author }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
                ...(v.attachments === undefined ? null : { attachments: v.attachments }),
                ...(v.sharedWith === undefined ? null : { sharedWith: v.sharedWith }),
                ...(v.visibility === undefined ? null : { visibility: v.visibility }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        title?: string | undefined;
        content?: string | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        lastAccessed?: number | undefined;
        reminder?: number | undefined;
        color?: string | undefined;
        priority?: GetLeadsPriority | undefined;
        author?: GetLeadsAuthor$.Outbound | undefined;
        tags?: Array<string> | undefined;
        attachments?: Array<GetLeadsLeadsAttachments$.Outbound> | undefined;
        sharedWith?: Array<GetLeadsSharedWith$.Outbound> | undefined;
        visibility?: GetLeadsVisibility | undefined;
        status?: GetLeadsStatus | undefined;
        metadata?: Array<string> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetLeadsNotes> = z
        .object({
            id: z.string().optional(),
            title: z.string().optional(),
            content: z.string().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            lastAccessed: z.number().optional(),
            reminder: z.number().optional(),
            color: z.string().optional(),
            priority: GetLeadsPriority$.optional(),
            author: z.lazy(() => GetLeadsAuthor$.outboundSchema).optional(),
            tags: z.array(z.string()).optional(),
            attachments: z.array(z.lazy(() => GetLeadsLeadsAttachments$.outboundSchema)).optional(),
            sharedWith: z.array(z.lazy(() => GetLeadsSharedWith$.outboundSchema)).optional(),
            visibility: GetLeadsVisibility$.optional(),
            status: GetLeadsStatus$.optional(),
            metadata: z.array(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.content === undefined ? null : { content: v.content }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.lastAccessed === undefined ? null : { lastAccessed: v.lastAccessed }),
                ...(v.reminder === undefined ? null : { reminder: v.reminder }),
                ...(v.color === undefined ? null : { color: v.color }),
                ...(v.priority === undefined ? null : { priority: v.priority }),
                ...(v.author === undefined ? null : { author: v.author }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
                ...(v.attachments === undefined ? null : { attachments: v.attachments }),
                ...(v.sharedWith === undefined ? null : { sharedWith: v.sharedWith }),
                ...(v.visibility === undefined ? null : { visibility: v.visibility }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
            };
        });
}

/** @internal */
export namespace GetLeadsUnified$ {
    export type Inbound = {
        id?: string | undefined;
        name?: string | undefined;
        firstName?: string | undefined;
        middleName?: string | undefined;
        lastName?: string | undefined;
        opportunities?: Array<GetLeadsOpportunities$.Inbound> | undefined;
        defaultEmail?: string | undefined;
        emails?: Array<GetLeadsEmails$.Inbound> | undefined;
        defaultPhone?: string | undefined;
        phones?: Array<GetLeadsPhones$.Inbound> | undefined;
        companyName?: string | undefined;
        jobTitle?: string | undefined;
        website?: string | undefined;
        leadSource?: GetLeadsLeadSource$.Inbound | undefined;
        leadStatus?: GetLeadsLeadStatus | undefined;
        industry?: string | undefined;
        numberOfEmployees?: number | undefined;
        annualRevenue?: number | undefined;
        addresses?: Array<GetLeadsAddresses$.Inbound> | undefined;
        createdAt?: string | undefined;
        updatedAt?: string | undefined;
        preferredContactMethod?: GetLeadsPreferredContactMethod | undefined;
        socialProfiles?: Array<GetLeadsSocialProfiles$.Inbound> | undefined;
        customFields?: Array<GetLeadsCustomFields$.Inbound> | undefined;
        notes?: Array<GetLeadsNotes$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<GetLeadsUnified, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            name: z.string().optional(),
            firstName: z.string().optional(),
            middleName: z.string().optional(),
            lastName: z.string().optional(),
            opportunities: z.array(z.lazy(() => GetLeadsOpportunities$.inboundSchema)).optional(),
            defaultEmail: z.string().optional(),
            emails: z.array(z.lazy(() => GetLeadsEmails$.inboundSchema)).optional(),
            defaultPhone: z.string().optional(),
            phones: z.array(z.lazy(() => GetLeadsPhones$.inboundSchema)).optional(),
            companyName: z.string().optional(),
            jobTitle: z.string().optional(),
            website: z.string().optional(),
            leadSource: z.lazy(() => GetLeadsLeadSource$.inboundSchema).optional(),
            leadStatus: GetLeadsLeadStatus$.optional(),
            industry: z.string().optional(),
            numberOfEmployees: z.number().optional(),
            annualRevenue: z.number().optional(),
            addresses: z.array(z.lazy(() => GetLeadsAddresses$.inboundSchema)).optional(),
            createdAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            updatedAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            preferredContactMethod: GetLeadsPreferredContactMethod$.optional(),
            socialProfiles: z.array(z.lazy(() => GetLeadsSocialProfiles$.inboundSchema)).optional(),
            customFields: z.array(z.lazy(() => GetLeadsCustomFields$.inboundSchema)).optional(),
            notes: z.array(z.lazy(() => GetLeadsNotes$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.middleName === undefined ? null : { middleName: v.middleName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.opportunities === undefined ? null : { opportunities: v.opportunities }),
                ...(v.defaultEmail === undefined ? null : { defaultEmail: v.defaultEmail }),
                ...(v.emails === undefined ? null : { emails: v.emails }),
                ...(v.defaultPhone === undefined ? null : { defaultPhone: v.defaultPhone }),
                ...(v.phones === undefined ? null : { phones: v.phones }),
                ...(v.companyName === undefined ? null : { companyName: v.companyName }),
                ...(v.jobTitle === undefined ? null : { jobTitle: v.jobTitle }),
                ...(v.website === undefined ? null : { website: v.website }),
                ...(v.leadSource === undefined ? null : { leadSource: v.leadSource }),
                ...(v.leadStatus === undefined ? null : { leadStatus: v.leadStatus }),
                ...(v.industry === undefined ? null : { industry: v.industry }),
                ...(v.numberOfEmployees === undefined
                    ? null
                    : { numberOfEmployees: v.numberOfEmployees }),
                ...(v.annualRevenue === undefined ? null : { annualRevenue: v.annualRevenue }),
                ...(v.addresses === undefined ? null : { addresses: v.addresses }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.preferredContactMethod === undefined
                    ? null
                    : { preferredContactMethod: v.preferredContactMethod }),
                ...(v.socialProfiles === undefined ? null : { socialProfiles: v.socialProfiles }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                ...(v.notes === undefined ? null : { notes: v.notes }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        name?: string | undefined;
        firstName?: string | undefined;
        middleName?: string | undefined;
        lastName?: string | undefined;
        opportunities?: Array<GetLeadsOpportunities$.Outbound> | undefined;
        defaultEmail?: string | undefined;
        emails?: Array<GetLeadsEmails$.Outbound> | undefined;
        defaultPhone?: string | undefined;
        phones?: Array<GetLeadsPhones$.Outbound> | undefined;
        companyName?: string | undefined;
        jobTitle?: string | undefined;
        website?: string | undefined;
        leadSource?: GetLeadsLeadSource$.Outbound | undefined;
        leadStatus?: GetLeadsLeadStatus | undefined;
        industry?: string | undefined;
        numberOfEmployees?: number | undefined;
        annualRevenue?: number | undefined;
        addresses?: Array<GetLeadsAddresses$.Outbound> | undefined;
        createdAt?: string | undefined;
        updatedAt?: string | undefined;
        preferredContactMethod?: GetLeadsPreferredContactMethod | undefined;
        socialProfiles?: Array<GetLeadsSocialProfiles$.Outbound> | undefined;
        customFields?: Array<GetLeadsCustomFields$.Outbound> | undefined;
        notes?: Array<GetLeadsNotes$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetLeadsUnified> = z
        .object({
            id: z.string().optional(),
            name: z.string().optional(),
            firstName: z.string().optional(),
            middleName: z.string().optional(),
            lastName: z.string().optional(),
            opportunities: z.array(z.lazy(() => GetLeadsOpportunities$.outboundSchema)).optional(),
            defaultEmail: z.string().optional(),
            emails: z.array(z.lazy(() => GetLeadsEmails$.outboundSchema)).optional(),
            defaultPhone: z.string().optional(),
            phones: z.array(z.lazy(() => GetLeadsPhones$.outboundSchema)).optional(),
            companyName: z.string().optional(),
            jobTitle: z.string().optional(),
            website: z.string().optional(),
            leadSource: z.lazy(() => GetLeadsLeadSource$.outboundSchema).optional(),
            leadStatus: GetLeadsLeadStatus$.optional(),
            industry: z.string().optional(),
            numberOfEmployees: z.number().optional(),
            annualRevenue: z.number().optional(),
            addresses: z.array(z.lazy(() => GetLeadsAddresses$.outboundSchema)).optional(),
            createdAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            updatedAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            preferredContactMethod: GetLeadsPreferredContactMethod$.optional(),
            socialProfiles: z
                .array(z.lazy(() => GetLeadsSocialProfiles$.outboundSchema))
                .optional(),
            customFields: z.array(z.lazy(() => GetLeadsCustomFields$.outboundSchema)).optional(),
            notes: z.array(z.lazy(() => GetLeadsNotes$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.middleName === undefined ? null : { middleName: v.middleName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.opportunities === undefined ? null : { opportunities: v.opportunities }),
                ...(v.defaultEmail === undefined ? null : { defaultEmail: v.defaultEmail }),
                ...(v.emails === undefined ? null : { emails: v.emails }),
                ...(v.defaultPhone === undefined ? null : { defaultPhone: v.defaultPhone }),
                ...(v.phones === undefined ? null : { phones: v.phones }),
                ...(v.companyName === undefined ? null : { companyName: v.companyName }),
                ...(v.jobTitle === undefined ? null : { jobTitle: v.jobTitle }),
                ...(v.website === undefined ? null : { website: v.website }),
                ...(v.leadSource === undefined ? null : { leadSource: v.leadSource }),
                ...(v.leadStatus === undefined ? null : { leadStatus: v.leadStatus }),
                ...(v.industry === undefined ? null : { industry: v.industry }),
                ...(v.numberOfEmployees === undefined
                    ? null
                    : { numberOfEmployees: v.numberOfEmployees }),
                ...(v.annualRevenue === undefined ? null : { annualRevenue: v.annualRevenue }),
                ...(v.addresses === undefined ? null : { addresses: v.addresses }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.preferredContactMethod === undefined
                    ? null
                    : { preferredContactMethod: v.preferredContactMethod }),
                ...(v.socialProfiles === undefined ? null : { socialProfiles: v.socialProfiles }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                ...(v.notes === undefined ? null : { notes: v.notes }),
            };
        });
}

/** @internal */
export namespace GetLeadsPassthrough$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<GetLeadsPassthrough, z.ZodTypeDef, Inbound> = z.object(
        {}
    );

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetLeadsPassthrough> = z.object(
        {}
    );
}

/** @internal */
export namespace GetLeadsCache$ {
    export type Inbound = {
        hit?: boolean | undefined;
        ttl?: number | undefined;
        key?: string | undefined;
    };

    export const inboundSchema: z.ZodType<GetLeadsCache, z.ZodTypeDef, Inbound> = z
        .object({
            hit: z.boolean().optional(),
            ttl: z.number().int().optional(),
            key: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.hit === undefined ? null : { hit: v.hit }),
                ...(v.ttl === undefined ? null : { ttl: v.ttl }),
                ...(v.key === undefined ? null : { key: v.key }),
            };
        });

    export type Outbound = {
        hit?: boolean | undefined;
        ttl?: number | undefined;
        key?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetLeadsCache> = z
        .object({
            hit: z.boolean().optional(),
            ttl: z.number().int().optional(),
            key: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.hit === undefined ? null : { hit: v.hit }),
                ...(v.ttl === undefined ? null : { ttl: v.ttl }),
                ...(v.key === undefined ? null : { key: v.key }),
            };
        });
}

/** @internal */
export namespace GetLeadsMeta$ {
    export type Inbound = {
        timestamp?: number | undefined;
        latency?: number | undefined;
        platformRateLimitRemaining?: number | undefined;
        rateLimitRemaining?: number | undefined;
        cache?: GetLeadsCache$.Inbound | undefined;
        transactionKey?: string | undefined;
        txn?: string | undefined;
        platform?: string | undefined;
        platformVersion?: string | undefined;
        connectionDefinitionKey?: string | undefined;
        action?: string | undefined;
        commonModel?: string | undefined;
        commonModelVersion?: string | undefined;
        connectionKey?: string | undefined;
        hash?: string | undefined;
        heartbeats?: Array<string> | undefined;
        totalTransactions?: number | undefined;
    };

    export const inboundSchema: z.ZodType<GetLeadsMeta, z.ZodTypeDef, Inbound> = z
        .object({
            timestamp: z.number().int().optional(),
            latency: z.number().int().optional(),
            platformRateLimitRemaining: z.number().int().optional(),
            rateLimitRemaining: z.number().int().optional(),
            cache: z.lazy(() => GetLeadsCache$.inboundSchema).optional(),
            transactionKey: z.string().optional(),
            txn: z.string().optional(),
            platform: z.string().optional(),
            platformVersion: z.string().optional(),
            connectionDefinitionKey: z.string().optional(),
            action: z.string().optional(),
            commonModel: z.string().optional(),
            commonModelVersion: z.string().optional(),
            connectionKey: z.string().optional(),
            hash: z.string().optional(),
            heartbeats: z.array(z.string()).optional(),
            totalTransactions: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.timestamp === undefined ? null : { timestamp: v.timestamp }),
                ...(v.latency === undefined ? null : { latency: v.latency }),
                ...(v.platformRateLimitRemaining === undefined
                    ? null
                    : { platformRateLimitRemaining: v.platformRateLimitRemaining }),
                ...(v.rateLimitRemaining === undefined
                    ? null
                    : { rateLimitRemaining: v.rateLimitRemaining }),
                ...(v.cache === undefined ? null : { cache: v.cache }),
                ...(v.transactionKey === undefined ? null : { transactionKey: v.transactionKey }),
                ...(v.txn === undefined ? null : { txn: v.txn }),
                ...(v.platform === undefined ? null : { platform: v.platform }),
                ...(v.platformVersion === undefined
                    ? null
                    : { platformVersion: v.platformVersion }),
                ...(v.connectionDefinitionKey === undefined
                    ? null
                    : { connectionDefinitionKey: v.connectionDefinitionKey }),
                ...(v.action === undefined ? null : { action: v.action }),
                ...(v.commonModel === undefined ? null : { commonModel: v.commonModel }),
                ...(v.commonModelVersion === undefined
                    ? null
                    : { commonModelVersion: v.commonModelVersion }),
                ...(v.connectionKey === undefined ? null : { connectionKey: v.connectionKey }),
                ...(v.hash === undefined ? null : { hash: v.hash }),
                ...(v.heartbeats === undefined ? null : { heartbeats: v.heartbeats }),
                ...(v.totalTransactions === undefined
                    ? null
                    : { totalTransactions: v.totalTransactions }),
            };
        });

    export type Outbound = {
        timestamp?: number | undefined;
        latency?: number | undefined;
        platformRateLimitRemaining?: number | undefined;
        rateLimitRemaining?: number | undefined;
        cache?: GetLeadsCache$.Outbound | undefined;
        transactionKey?: string | undefined;
        txn?: string | undefined;
        platform?: string | undefined;
        platformVersion?: string | undefined;
        connectionDefinitionKey?: string | undefined;
        action?: string | undefined;
        commonModel?: string | undefined;
        commonModelVersion?: string | undefined;
        connectionKey?: string | undefined;
        hash?: string | undefined;
        heartbeats?: Array<string> | undefined;
        totalTransactions?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetLeadsMeta> = z
        .object({
            timestamp: z.number().int().optional(),
            latency: z.number().int().optional(),
            platformRateLimitRemaining: z.number().int().optional(),
            rateLimitRemaining: z.number().int().optional(),
            cache: z.lazy(() => GetLeadsCache$.outboundSchema).optional(),
            transactionKey: z.string().optional(),
            txn: z.string().optional(),
            platform: z.string().optional(),
            platformVersion: z.string().optional(),
            connectionDefinitionKey: z.string().optional(),
            action: z.string().optional(),
            commonModel: z.string().optional(),
            commonModelVersion: z.string().optional(),
            connectionKey: z.string().optional(),
            hash: z.string().optional(),
            heartbeats: z.array(z.string()).optional(),
            totalTransactions: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.timestamp === undefined ? null : { timestamp: v.timestamp }),
                ...(v.latency === undefined ? null : { latency: v.latency }),
                ...(v.platformRateLimitRemaining === undefined
                    ? null
                    : { platformRateLimitRemaining: v.platformRateLimitRemaining }),
                ...(v.rateLimitRemaining === undefined
                    ? null
                    : { rateLimitRemaining: v.rateLimitRemaining }),
                ...(v.cache === undefined ? null : { cache: v.cache }),
                ...(v.transactionKey === undefined ? null : { transactionKey: v.transactionKey }),
                ...(v.txn === undefined ? null : { txn: v.txn }),
                ...(v.platform === undefined ? null : { platform: v.platform }),
                ...(v.platformVersion === undefined
                    ? null
                    : { platformVersion: v.platformVersion }),
                ...(v.connectionDefinitionKey === undefined
                    ? null
                    : { connectionDefinitionKey: v.connectionDefinitionKey }),
                ...(v.action === undefined ? null : { action: v.action }),
                ...(v.commonModel === undefined ? null : { commonModel: v.commonModel }),
                ...(v.commonModelVersion === undefined
                    ? null
                    : { commonModelVersion: v.commonModelVersion }),
                ...(v.connectionKey === undefined ? null : { connectionKey: v.connectionKey }),
                ...(v.hash === undefined ? null : { hash: v.hash }),
                ...(v.heartbeats === undefined ? null : { heartbeats: v.heartbeats }),
                ...(v.totalTransactions === undefined
                    ? null
                    : { totalTransactions: v.totalTransactions }),
            };
        });
}

/** @internal */
export namespace GetLeadsPagination$ {
    export type Inbound = {
        cursor?: string | undefined;
        limit?: number | undefined;
    };

    export const inboundSchema: z.ZodType<GetLeadsPagination, z.ZodTypeDef, Inbound> = z
        .object({
            cursor: z.string().optional(),
            limit: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.cursor === undefined ? null : { cursor: v.cursor }),
                ...(v.limit === undefined ? null : { limit: v.limit }),
            };
        });

    export type Outbound = {
        cursor?: string | undefined;
        limit?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetLeadsPagination> = z
        .object({
            cursor: z.string().optional(),
            limit: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.cursor === undefined ? null : { cursor: v.cursor }),
                ...(v.limit === undefined ? null : { limit: v.limit }),
            };
        });
}

/** @internal */
export namespace GetLeadsResponseBody$ {
    export type Inbound = {
        status?: string | undefined;
        statusCode?: GetLeadsStatusCode | undefined;
        unified?: Array<GetLeadsUnified$.Inbound> | undefined;
        passthrough?: GetLeadsPassthrough$.Inbound | undefined;
        meta?: GetLeadsMeta$.Inbound | undefined;
        pagination?: GetLeadsPagination$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<GetLeadsResponseBody, z.ZodTypeDef, Inbound> = z
        .object({
            status: z.string().optional(),
            statusCode: GetLeadsStatusCode$.optional(),
            unified: z.array(z.lazy(() => GetLeadsUnified$.inboundSchema)).optional(),
            passthrough: z.lazy(() => GetLeadsPassthrough$.inboundSchema).optional(),
            meta: z.lazy(() => GetLeadsMeta$.inboundSchema).optional(),
            pagination: z.lazy(() => GetLeadsPagination$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.statusCode === undefined ? null : { statusCode: v.statusCode }),
                ...(v.unified === undefined ? null : { unified: v.unified }),
                ...(v.passthrough === undefined ? null : { passthrough: v.passthrough }),
                ...(v.meta === undefined ? null : { meta: v.meta }),
                ...(v.pagination === undefined ? null : { pagination: v.pagination }),
            };
        });

    export type Outbound = {
        status?: string | undefined;
        statusCode?: GetLeadsStatusCode | undefined;
        unified?: Array<GetLeadsUnified$.Outbound> | undefined;
        passthrough?: GetLeadsPassthrough$.Outbound | undefined;
        meta?: GetLeadsMeta$.Outbound | undefined;
        pagination?: GetLeadsPagination$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetLeadsResponseBody> = z
        .object({
            status: z.string().optional(),
            statusCode: GetLeadsStatusCode$.optional(),
            unified: z.array(z.lazy(() => GetLeadsUnified$.outboundSchema)).optional(),
            passthrough: z.lazy(() => GetLeadsPassthrough$.outboundSchema).optional(),
            meta: z.lazy(() => GetLeadsMeta$.outboundSchema).optional(),
            pagination: z.lazy(() => GetLeadsPagination$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.statusCode === undefined ? null : { statusCode: v.statusCode }),
                ...(v.unified === undefined ? null : { unified: v.unified }),
                ...(v.passthrough === undefined ? null : { passthrough: v.passthrough }),
                ...(v.meta === undefined ? null : { meta: v.meta }),
                ...(v.pagination === undefined ? null : { pagination: v.pagination }),
            };
        });
}

/** @internal */
export namespace GetLeadsResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        object?: GetLeadsResponseBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<GetLeadsResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => GetLeadsResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: GetLeadsResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetLeadsResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z.lazy(() => GetLeadsResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
