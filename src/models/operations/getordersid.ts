/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type GetOrdersIdRequest = {
    /**
     * The id of the model
     */
    id: string;
    /**
     * The unique identifier of a Connected Account
     */
    xIntegrationosConnectionKey: string;
};

export enum GetOrdersIdStatusCode {
    TwoHundred = 200,
    FourHundred = 400,
    FiveHundred = 500,
}

export enum GetOrdersIdStatus {
    Pending = "pending",
    Processing = "processing",
    Confirmed = "confirmed",
    OnHold = "on-hold",
    AwaitingPayment = "awaiting-payment",
    AwaitingPickup = "awaiting-pickup",
    AwaitingShipment = "awaiting-shipment",
    Shipped = "shipped",
    Delivered = "delivered",
    Cancelled = "cancelled",
    PartiallyRefunded = "partially-refunded",
    Refunded = "refunded",
    Returned = "returned",
    Disputed = "disputed",
    Failed = "failed",
    Complete = "complete",
}

export enum GetOrdersIdPaymentStatus {
    Paid = "paid",
    Pending = "pending",
    Refunded = "refunded",
    PartiallyRefunded = "partially-refunded",
    Failed = "failed",
}

export enum GetOrdersIdType {
    Home = "home",
    Work = "work",
    Other = "other",
}

export type GetOrdersIdGeoLocation = {
    latitude?: number | undefined;
    longitude?: number | undefined;
    altitude?: number | undefined;
    accuracy?: number | undefined;
    altitudeAccuracy?: number | undefined;
    heading?: number | undefined;
    speed?: number | undefined;
    timestamp?: number | undefined;
};

export enum GetOrdersIdFieldType {
    Text = "text",
    Number = "number",
    Date = "date",
    Boolean = "boolean",
    Enum = "enum",
    Json = "json",
    Array = "array",
}

export type GetOrdersIdCustomFields = {
    id?: string | undefined;
    fieldName?: string | undefined;
    fieldValue?: string | undefined;
    fieldType?: GetOrdersIdFieldType | undefined;
};

export type GetOrdersIdShippingAddress = {
    id?: string | undefined;
    contactId?: string | undefined;
    accountId?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    name?: string | undefined;
    companyName?: string | undefined;
    email?: string | undefined;
    phone?: string | undefined;
    street?: string | undefined;
    addressLine2?: string | undefined;
    city?: string | undefined;
    province?: string | undefined;
    region?: string | undefined;
    postalCode?: string | undefined;
    postalCodeExtension?: string | undefined;
    country?: string | undefined;
    countryCode?: string | undefined;
    type?: GetOrdersIdType | undefined;
    geoLocation?: GetOrdersIdGeoLocation | undefined;
    customFields?: Array<GetOrdersIdCustomFields> | undefined;
    subdivisionCode?: string | undefined;
};

export enum GetOrdersIdOrdersType {
    Home = "home",
    Work = "work",
    Other = "other",
}

export type GetOrdersIdOrdersGeoLocation = {
    latitude?: number | undefined;
    longitude?: number | undefined;
    altitude?: number | undefined;
    accuracy?: number | undefined;
    altitudeAccuracy?: number | undefined;
    heading?: number | undefined;
    speed?: number | undefined;
    timestamp?: number | undefined;
};

export enum GetOrdersIdOrdersFieldType {
    Text = "text",
    Number = "number",
    Date = "date",
    Boolean = "boolean",
    Enum = "enum",
    Json = "json",
    Array = "array",
}

export type GetOrdersIdOrdersCustomFields = {
    id?: string | undefined;
    fieldName?: string | undefined;
    fieldValue?: string | undefined;
    fieldType?: GetOrdersIdOrdersFieldType | undefined;
};

export type GetOrdersIdBillingAddress = {
    id?: string | undefined;
    contactId?: string | undefined;
    accountId?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    name?: string | undefined;
    companyName?: string | undefined;
    email?: string | undefined;
    phone?: string | undefined;
    street?: string | undefined;
    addressLine2?: string | undefined;
    city?: string | undefined;
    province?: string | undefined;
    region?: string | undefined;
    postalCode?: string | undefined;
    postalCodeExtension?: string | undefined;
    country?: string | undefined;
    countryCode?: string | undefined;
    type?: GetOrdersIdOrdersType | undefined;
    geoLocation?: GetOrdersIdOrdersGeoLocation | undefined;
    customFields?: Array<GetOrdersIdOrdersCustomFields> | undefined;
    subdivisionCode?: string | undefined;
};

export type GetOrdersIdImage = {};

export type GetOrdersIdTaxLines = {};

export type GetOrdersIdOptions = {};

export type GetOrdersIdItems = {
    id?: string | undefined;
    parentId?: string | undefined;
    productId?: string | undefined;
    variantId?: string | undefined;
    quantity?: number | undefined;
    sku?: string | undefined;
    price?: number | undefined;
    currency?: string | undefined;
    linePrice?: number | undefined;
    originalPrice?: number | undefined;
    discountedPrice?: number | undefined;
    title?: string | undefined;
    variantTitle?: string | undefined;
    image?: GetOrdersIdImage | undefined;
    weight?: number | undefined;
    weightUnit?: string | undefined;
    requiresShipping?: boolean | undefined;
    taxable?: boolean | undefined;
    taxLines?: Array<GetOrdersIdTaxLines> | undefined;
    options?: Array<GetOrdersIdOptions> | undefined;
    fulfillableQuantity?: number | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    active?: boolean | undefined;
    deleted?: boolean | undefined;
};

export type GetOrdersIdUnified = {
    id?: string | undefined;
    customerID?: string | undefined;
    orderNumber?: string | undefined;
    status?: GetOrdersIdStatus | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    total?: number | undefined;
    subTotal?: number | undefined;
    tax?: number | undefined;
    shippingCost?: number | undefined;
    currency?: string | undefined;
    paymentStatus?: GetOrdersIdPaymentStatus | undefined;
    paymentMethods?: Array<string> | undefined;
    shippingMethod?: string | undefined;
    shippingAddress?: GetOrdersIdShippingAddress | undefined;
    billingAddress?: GetOrdersIdBillingAddress | undefined;
    note?: string | undefined;
    discounts?: Array<number> | undefined;
    trackingInfo?: string | undefined;
    items?: Array<GetOrdersIdItems> | undefined;
    tags?: Array<string> | undefined;
};

export type GetOrdersIdPassthrough = {};

export type GetOrdersIdCache = {
    hit?: boolean | undefined;
    ttl?: number | undefined;
    key?: string | undefined;
};

export type GetOrdersIdMeta = {
    timestamp?: number | undefined;
    latency?: number | undefined;
    platformRateLimitRemaining?: number | undefined;
    rateLimitRemaining?: number | undefined;
    cache?: GetOrdersIdCache | undefined;
    transactionKey?: string | undefined;
    txn?: string | undefined;
    platform?: string | undefined;
    platformVersion?: string | undefined;
    connectionDefinitionKey?: string | undefined;
    action?: string | undefined;
    commonModel?: string | undefined;
    commonModelVersion?: string | undefined;
    connectionKey?: string | undefined;
    hash?: string | undefined;
    heartbeats?: Array<string> | undefined;
    totalTransactions?: number | undefined;
};

/**
 * Successful response
 */
export type GetOrdersIdResponseBody = {
    status?: string | undefined;
    statusCode?: GetOrdersIdStatusCode | undefined;
    unified?: GetOrdersIdUnified | undefined;
    passthrough?: GetOrdersIdPassthrough | undefined;
    meta?: GetOrdersIdMeta | undefined;
};

export type GetOrdersIdResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Successful response
     */
    object?: GetOrdersIdResponseBody | undefined;
};

/** @internal */
export namespace GetOrdersIdRequest$ {
    export type Inbound = {
        id: string;
        "X-INTEGRATIONOS-CONNECTION-KEY": string;
    };

    export const inboundSchema: z.ZodType<GetOrdersIdRequest, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string(),
            "X-INTEGRATIONOS-CONNECTION-KEY": z.string(),
        })
        .transform((v) => {
            return {
                id: v.id,
                xIntegrationosConnectionKey: v["X-INTEGRATIONOS-CONNECTION-KEY"],
            };
        });

    export type Outbound = {
        id: string;
        "X-INTEGRATIONOS-CONNECTION-KEY": string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetOrdersIdRequest> = z
        .object({
            id: z.string(),
            xIntegrationosConnectionKey: z.string(),
        })
        .transform((v) => {
            return {
                id: v.id,
                "X-INTEGRATIONOS-CONNECTION-KEY": v.xIntegrationosConnectionKey,
            };
        });
}

/** @internal */
export const GetOrdersIdStatusCode$ = z.nativeEnum(GetOrdersIdStatusCode);

/** @internal */
export const GetOrdersIdStatus$ = z.nativeEnum(GetOrdersIdStatus);

/** @internal */
export const GetOrdersIdPaymentStatus$ = z.nativeEnum(GetOrdersIdPaymentStatus);

/** @internal */
export const GetOrdersIdType$ = z.nativeEnum(GetOrdersIdType);

/** @internal */
export namespace GetOrdersIdGeoLocation$ {
    export type Inbound = {
        latitude?: number | undefined;
        longitude?: number | undefined;
        altitude?: number | undefined;
        accuracy?: number | undefined;
        altitudeAccuracy?: number | undefined;
        heading?: number | undefined;
        speed?: number | undefined;
        timestamp?: number | undefined;
    };

    export const inboundSchema: z.ZodType<GetOrdersIdGeoLocation, z.ZodTypeDef, Inbound> = z
        .object({
            latitude: z.number().optional(),
            longitude: z.number().optional(),
            altitude: z.number().optional(),
            accuracy: z.number().optional(),
            altitudeAccuracy: z.number().optional(),
            heading: z.number().optional(),
            speed: z.number().optional(),
            timestamp: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.latitude === undefined ? null : { latitude: v.latitude }),
                ...(v.longitude === undefined ? null : { longitude: v.longitude }),
                ...(v.altitude === undefined ? null : { altitude: v.altitude }),
                ...(v.accuracy === undefined ? null : { accuracy: v.accuracy }),
                ...(v.altitudeAccuracy === undefined
                    ? null
                    : { altitudeAccuracy: v.altitudeAccuracy }),
                ...(v.heading === undefined ? null : { heading: v.heading }),
                ...(v.speed === undefined ? null : { speed: v.speed }),
                ...(v.timestamp === undefined ? null : { timestamp: v.timestamp }),
            };
        });

    export type Outbound = {
        latitude?: number | undefined;
        longitude?: number | undefined;
        altitude?: number | undefined;
        accuracy?: number | undefined;
        altitudeAccuracy?: number | undefined;
        heading?: number | undefined;
        speed?: number | undefined;
        timestamp?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetOrdersIdGeoLocation> = z
        .object({
            latitude: z.number().optional(),
            longitude: z.number().optional(),
            altitude: z.number().optional(),
            accuracy: z.number().optional(),
            altitudeAccuracy: z.number().optional(),
            heading: z.number().optional(),
            speed: z.number().optional(),
            timestamp: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.latitude === undefined ? null : { latitude: v.latitude }),
                ...(v.longitude === undefined ? null : { longitude: v.longitude }),
                ...(v.altitude === undefined ? null : { altitude: v.altitude }),
                ...(v.accuracy === undefined ? null : { accuracy: v.accuracy }),
                ...(v.altitudeAccuracy === undefined
                    ? null
                    : { altitudeAccuracy: v.altitudeAccuracy }),
                ...(v.heading === undefined ? null : { heading: v.heading }),
                ...(v.speed === undefined ? null : { speed: v.speed }),
                ...(v.timestamp === undefined ? null : { timestamp: v.timestamp }),
            };
        });
}

/** @internal */
export const GetOrdersIdFieldType$ = z.nativeEnum(GetOrdersIdFieldType);

/** @internal */
export namespace GetOrdersIdCustomFields$ {
    export type Inbound = {
        id?: string | undefined;
        fieldName?: string | undefined;
        fieldValue?: string | undefined;
        fieldType?: GetOrdersIdFieldType | undefined;
    };

    export const inboundSchema: z.ZodType<GetOrdersIdCustomFields, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            fieldName: z.string().optional(),
            fieldValue: z.string().optional(),
            fieldType: GetOrdersIdFieldType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fieldName === undefined ? null : { fieldName: v.fieldName }),
                ...(v.fieldValue === undefined ? null : { fieldValue: v.fieldValue }),
                ...(v.fieldType === undefined ? null : { fieldType: v.fieldType }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        fieldName?: string | undefined;
        fieldValue?: string | undefined;
        fieldType?: GetOrdersIdFieldType | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetOrdersIdCustomFields> = z
        .object({
            id: z.string().optional(),
            fieldName: z.string().optional(),
            fieldValue: z.string().optional(),
            fieldType: GetOrdersIdFieldType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fieldName === undefined ? null : { fieldName: v.fieldName }),
                ...(v.fieldValue === undefined ? null : { fieldValue: v.fieldValue }),
                ...(v.fieldType === undefined ? null : { fieldType: v.fieldType }),
            };
        });
}

/** @internal */
export namespace GetOrdersIdShippingAddress$ {
    export type Inbound = {
        id?: string | undefined;
        contactId?: string | undefined;
        accountId?: string | undefined;
        firstName?: string | undefined;
        lastName?: string | undefined;
        name?: string | undefined;
        companyName?: string | undefined;
        email?: string | undefined;
        phone?: string | undefined;
        street?: string | undefined;
        addressLine2?: string | undefined;
        city?: string | undefined;
        province?: string | undefined;
        region?: string | undefined;
        postalCode?: string | undefined;
        postalCodeExtension?: string | undefined;
        country?: string | undefined;
        countryCode?: string | undefined;
        type?: GetOrdersIdType | undefined;
        geoLocation?: GetOrdersIdGeoLocation$.Inbound | undefined;
        customFields?: Array<GetOrdersIdCustomFields$.Inbound> | undefined;
        subdivisionCode?: string | undefined;
    };

    export const inboundSchema: z.ZodType<GetOrdersIdShippingAddress, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            contactId: z.string().optional(),
            accountId: z.string().optional(),
            firstName: z.string().optional(),
            lastName: z.string().optional(),
            name: z.string().optional(),
            companyName: z.string().optional(),
            email: z.string().optional(),
            phone: z.string().optional(),
            street: z.string().optional(),
            addressLine2: z.string().optional(),
            city: z.string().optional(),
            province: z.string().optional(),
            region: z.string().optional(),
            postalCode: z.string().optional(),
            postalCodeExtension: z.string().optional(),
            country: z.string().optional(),
            countryCode: z.string().optional(),
            type: GetOrdersIdType$.optional(),
            geoLocation: z.lazy(() => GetOrdersIdGeoLocation$.inboundSchema).optional(),
            customFields: z.array(z.lazy(() => GetOrdersIdCustomFields$.inboundSchema)).optional(),
            subdivisionCode: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.contactId === undefined ? null : { contactId: v.contactId }),
                ...(v.accountId === undefined ? null : { accountId: v.accountId }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.companyName === undefined ? null : { companyName: v.companyName }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.phone === undefined ? null : { phone: v.phone }),
                ...(v.street === undefined ? null : { street: v.street }),
                ...(v.addressLine2 === undefined ? null : { addressLine2: v.addressLine2 }),
                ...(v.city === undefined ? null : { city: v.city }),
                ...(v.province === undefined ? null : { province: v.province }),
                ...(v.region === undefined ? null : { region: v.region }),
                ...(v.postalCode === undefined ? null : { postalCode: v.postalCode }),
                ...(v.postalCodeExtension === undefined
                    ? null
                    : { postalCodeExtension: v.postalCodeExtension }),
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.countryCode === undefined ? null : { countryCode: v.countryCode }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.geoLocation === undefined ? null : { geoLocation: v.geoLocation }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                ...(v.subdivisionCode === undefined
                    ? null
                    : { subdivisionCode: v.subdivisionCode }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        contactId?: string | undefined;
        accountId?: string | undefined;
        firstName?: string | undefined;
        lastName?: string | undefined;
        name?: string | undefined;
        companyName?: string | undefined;
        email?: string | undefined;
        phone?: string | undefined;
        street?: string | undefined;
        addressLine2?: string | undefined;
        city?: string | undefined;
        province?: string | undefined;
        region?: string | undefined;
        postalCode?: string | undefined;
        postalCodeExtension?: string | undefined;
        country?: string | undefined;
        countryCode?: string | undefined;
        type?: GetOrdersIdType | undefined;
        geoLocation?: GetOrdersIdGeoLocation$.Outbound | undefined;
        customFields?: Array<GetOrdersIdCustomFields$.Outbound> | undefined;
        subdivisionCode?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetOrdersIdShippingAddress> = z
        .object({
            id: z.string().optional(),
            contactId: z.string().optional(),
            accountId: z.string().optional(),
            firstName: z.string().optional(),
            lastName: z.string().optional(),
            name: z.string().optional(),
            companyName: z.string().optional(),
            email: z.string().optional(),
            phone: z.string().optional(),
            street: z.string().optional(),
            addressLine2: z.string().optional(),
            city: z.string().optional(),
            province: z.string().optional(),
            region: z.string().optional(),
            postalCode: z.string().optional(),
            postalCodeExtension: z.string().optional(),
            country: z.string().optional(),
            countryCode: z.string().optional(),
            type: GetOrdersIdType$.optional(),
            geoLocation: z.lazy(() => GetOrdersIdGeoLocation$.outboundSchema).optional(),
            customFields: z.array(z.lazy(() => GetOrdersIdCustomFields$.outboundSchema)).optional(),
            subdivisionCode: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.contactId === undefined ? null : { contactId: v.contactId }),
                ...(v.accountId === undefined ? null : { accountId: v.accountId }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.companyName === undefined ? null : { companyName: v.companyName }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.phone === undefined ? null : { phone: v.phone }),
                ...(v.street === undefined ? null : { street: v.street }),
                ...(v.addressLine2 === undefined ? null : { addressLine2: v.addressLine2 }),
                ...(v.city === undefined ? null : { city: v.city }),
                ...(v.province === undefined ? null : { province: v.province }),
                ...(v.region === undefined ? null : { region: v.region }),
                ...(v.postalCode === undefined ? null : { postalCode: v.postalCode }),
                ...(v.postalCodeExtension === undefined
                    ? null
                    : { postalCodeExtension: v.postalCodeExtension }),
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.countryCode === undefined ? null : { countryCode: v.countryCode }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.geoLocation === undefined ? null : { geoLocation: v.geoLocation }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                ...(v.subdivisionCode === undefined
                    ? null
                    : { subdivisionCode: v.subdivisionCode }),
            };
        });
}

/** @internal */
export const GetOrdersIdOrdersType$ = z.nativeEnum(GetOrdersIdOrdersType);

/** @internal */
export namespace GetOrdersIdOrdersGeoLocation$ {
    export type Inbound = {
        latitude?: number | undefined;
        longitude?: number | undefined;
        altitude?: number | undefined;
        accuracy?: number | undefined;
        altitudeAccuracy?: number | undefined;
        heading?: number | undefined;
        speed?: number | undefined;
        timestamp?: number | undefined;
    };

    export const inboundSchema: z.ZodType<GetOrdersIdOrdersGeoLocation, z.ZodTypeDef, Inbound> = z
        .object({
            latitude: z.number().optional(),
            longitude: z.number().optional(),
            altitude: z.number().optional(),
            accuracy: z.number().optional(),
            altitudeAccuracy: z.number().optional(),
            heading: z.number().optional(),
            speed: z.number().optional(),
            timestamp: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.latitude === undefined ? null : { latitude: v.latitude }),
                ...(v.longitude === undefined ? null : { longitude: v.longitude }),
                ...(v.altitude === undefined ? null : { altitude: v.altitude }),
                ...(v.accuracy === undefined ? null : { accuracy: v.accuracy }),
                ...(v.altitudeAccuracy === undefined
                    ? null
                    : { altitudeAccuracy: v.altitudeAccuracy }),
                ...(v.heading === undefined ? null : { heading: v.heading }),
                ...(v.speed === undefined ? null : { speed: v.speed }),
                ...(v.timestamp === undefined ? null : { timestamp: v.timestamp }),
            };
        });

    export type Outbound = {
        latitude?: number | undefined;
        longitude?: number | undefined;
        altitude?: number | undefined;
        accuracy?: number | undefined;
        altitudeAccuracy?: number | undefined;
        heading?: number | undefined;
        speed?: number | undefined;
        timestamp?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetOrdersIdOrdersGeoLocation> = z
        .object({
            latitude: z.number().optional(),
            longitude: z.number().optional(),
            altitude: z.number().optional(),
            accuracy: z.number().optional(),
            altitudeAccuracy: z.number().optional(),
            heading: z.number().optional(),
            speed: z.number().optional(),
            timestamp: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.latitude === undefined ? null : { latitude: v.latitude }),
                ...(v.longitude === undefined ? null : { longitude: v.longitude }),
                ...(v.altitude === undefined ? null : { altitude: v.altitude }),
                ...(v.accuracy === undefined ? null : { accuracy: v.accuracy }),
                ...(v.altitudeAccuracy === undefined
                    ? null
                    : { altitudeAccuracy: v.altitudeAccuracy }),
                ...(v.heading === undefined ? null : { heading: v.heading }),
                ...(v.speed === undefined ? null : { speed: v.speed }),
                ...(v.timestamp === undefined ? null : { timestamp: v.timestamp }),
            };
        });
}

/** @internal */
export const GetOrdersIdOrdersFieldType$ = z.nativeEnum(GetOrdersIdOrdersFieldType);

/** @internal */
export namespace GetOrdersIdOrdersCustomFields$ {
    export type Inbound = {
        id?: string | undefined;
        fieldName?: string | undefined;
        fieldValue?: string | undefined;
        fieldType?: GetOrdersIdOrdersFieldType | undefined;
    };

    export const inboundSchema: z.ZodType<GetOrdersIdOrdersCustomFields, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            fieldName: z.string().optional(),
            fieldValue: z.string().optional(),
            fieldType: GetOrdersIdOrdersFieldType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fieldName === undefined ? null : { fieldName: v.fieldName }),
                ...(v.fieldValue === undefined ? null : { fieldValue: v.fieldValue }),
                ...(v.fieldType === undefined ? null : { fieldType: v.fieldType }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        fieldName?: string | undefined;
        fieldValue?: string | undefined;
        fieldType?: GetOrdersIdOrdersFieldType | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetOrdersIdOrdersCustomFields> =
        z
            .object({
                id: z.string().optional(),
                fieldName: z.string().optional(),
                fieldValue: z.string().optional(),
                fieldType: GetOrdersIdOrdersFieldType$.optional(),
            })
            .transform((v) => {
                return {
                    ...(v.id === undefined ? null : { id: v.id }),
                    ...(v.fieldName === undefined ? null : { fieldName: v.fieldName }),
                    ...(v.fieldValue === undefined ? null : { fieldValue: v.fieldValue }),
                    ...(v.fieldType === undefined ? null : { fieldType: v.fieldType }),
                };
            });
}

/** @internal */
export namespace GetOrdersIdBillingAddress$ {
    export type Inbound = {
        id?: string | undefined;
        contactId?: string | undefined;
        accountId?: string | undefined;
        firstName?: string | undefined;
        lastName?: string | undefined;
        name?: string | undefined;
        companyName?: string | undefined;
        email?: string | undefined;
        phone?: string | undefined;
        street?: string | undefined;
        addressLine2?: string | undefined;
        city?: string | undefined;
        province?: string | undefined;
        region?: string | undefined;
        postalCode?: string | undefined;
        postalCodeExtension?: string | undefined;
        country?: string | undefined;
        countryCode?: string | undefined;
        type?: GetOrdersIdOrdersType | undefined;
        geoLocation?: GetOrdersIdOrdersGeoLocation$.Inbound | undefined;
        customFields?: Array<GetOrdersIdOrdersCustomFields$.Inbound> | undefined;
        subdivisionCode?: string | undefined;
    };

    export const inboundSchema: z.ZodType<GetOrdersIdBillingAddress, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            contactId: z.string().optional(),
            accountId: z.string().optional(),
            firstName: z.string().optional(),
            lastName: z.string().optional(),
            name: z.string().optional(),
            companyName: z.string().optional(),
            email: z.string().optional(),
            phone: z.string().optional(),
            street: z.string().optional(),
            addressLine2: z.string().optional(),
            city: z.string().optional(),
            province: z.string().optional(),
            region: z.string().optional(),
            postalCode: z.string().optional(),
            postalCodeExtension: z.string().optional(),
            country: z.string().optional(),
            countryCode: z.string().optional(),
            type: GetOrdersIdOrdersType$.optional(),
            geoLocation: z.lazy(() => GetOrdersIdOrdersGeoLocation$.inboundSchema).optional(),
            customFields: z
                .array(z.lazy(() => GetOrdersIdOrdersCustomFields$.inboundSchema))
                .optional(),
            subdivisionCode: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.contactId === undefined ? null : { contactId: v.contactId }),
                ...(v.accountId === undefined ? null : { accountId: v.accountId }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.companyName === undefined ? null : { companyName: v.companyName }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.phone === undefined ? null : { phone: v.phone }),
                ...(v.street === undefined ? null : { street: v.street }),
                ...(v.addressLine2 === undefined ? null : { addressLine2: v.addressLine2 }),
                ...(v.city === undefined ? null : { city: v.city }),
                ...(v.province === undefined ? null : { province: v.province }),
                ...(v.region === undefined ? null : { region: v.region }),
                ...(v.postalCode === undefined ? null : { postalCode: v.postalCode }),
                ...(v.postalCodeExtension === undefined
                    ? null
                    : { postalCodeExtension: v.postalCodeExtension }),
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.countryCode === undefined ? null : { countryCode: v.countryCode }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.geoLocation === undefined ? null : { geoLocation: v.geoLocation }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                ...(v.subdivisionCode === undefined
                    ? null
                    : { subdivisionCode: v.subdivisionCode }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        contactId?: string | undefined;
        accountId?: string | undefined;
        firstName?: string | undefined;
        lastName?: string | undefined;
        name?: string | undefined;
        companyName?: string | undefined;
        email?: string | undefined;
        phone?: string | undefined;
        street?: string | undefined;
        addressLine2?: string | undefined;
        city?: string | undefined;
        province?: string | undefined;
        region?: string | undefined;
        postalCode?: string | undefined;
        postalCodeExtension?: string | undefined;
        country?: string | undefined;
        countryCode?: string | undefined;
        type?: GetOrdersIdOrdersType | undefined;
        geoLocation?: GetOrdersIdOrdersGeoLocation$.Outbound | undefined;
        customFields?: Array<GetOrdersIdOrdersCustomFields$.Outbound> | undefined;
        subdivisionCode?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetOrdersIdBillingAddress> = z
        .object({
            id: z.string().optional(),
            contactId: z.string().optional(),
            accountId: z.string().optional(),
            firstName: z.string().optional(),
            lastName: z.string().optional(),
            name: z.string().optional(),
            companyName: z.string().optional(),
            email: z.string().optional(),
            phone: z.string().optional(),
            street: z.string().optional(),
            addressLine2: z.string().optional(),
            city: z.string().optional(),
            province: z.string().optional(),
            region: z.string().optional(),
            postalCode: z.string().optional(),
            postalCodeExtension: z.string().optional(),
            country: z.string().optional(),
            countryCode: z.string().optional(),
            type: GetOrdersIdOrdersType$.optional(),
            geoLocation: z.lazy(() => GetOrdersIdOrdersGeoLocation$.outboundSchema).optional(),
            customFields: z
                .array(z.lazy(() => GetOrdersIdOrdersCustomFields$.outboundSchema))
                .optional(),
            subdivisionCode: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.contactId === undefined ? null : { contactId: v.contactId }),
                ...(v.accountId === undefined ? null : { accountId: v.accountId }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.companyName === undefined ? null : { companyName: v.companyName }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.phone === undefined ? null : { phone: v.phone }),
                ...(v.street === undefined ? null : { street: v.street }),
                ...(v.addressLine2 === undefined ? null : { addressLine2: v.addressLine2 }),
                ...(v.city === undefined ? null : { city: v.city }),
                ...(v.province === undefined ? null : { province: v.province }),
                ...(v.region === undefined ? null : { region: v.region }),
                ...(v.postalCode === undefined ? null : { postalCode: v.postalCode }),
                ...(v.postalCodeExtension === undefined
                    ? null
                    : { postalCodeExtension: v.postalCodeExtension }),
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.countryCode === undefined ? null : { countryCode: v.countryCode }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.geoLocation === undefined ? null : { geoLocation: v.geoLocation }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                ...(v.subdivisionCode === undefined
                    ? null
                    : { subdivisionCode: v.subdivisionCode }),
            };
        });
}

/** @internal */
export namespace GetOrdersIdImage$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<GetOrdersIdImage, z.ZodTypeDef, Inbound> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetOrdersIdImage> = z.object({});
}

/** @internal */
export namespace GetOrdersIdTaxLines$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<GetOrdersIdTaxLines, z.ZodTypeDef, Inbound> = z.object(
        {}
    );

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetOrdersIdTaxLines> = z.object(
        {}
    );
}

/** @internal */
export namespace GetOrdersIdOptions$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<GetOrdersIdOptions, z.ZodTypeDef, Inbound> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetOrdersIdOptions> = z.object(
        {}
    );
}

/** @internal */
export namespace GetOrdersIdItems$ {
    export type Inbound = {
        id?: string | undefined;
        parentId?: string | undefined;
        productId?: string | undefined;
        variantId?: string | undefined;
        quantity?: number | undefined;
        sku?: string | undefined;
        price?: number | undefined;
        currency?: string | undefined;
        linePrice?: number | undefined;
        originalPrice?: number | undefined;
        discountedPrice?: number | undefined;
        title?: string | undefined;
        variantTitle?: string | undefined;
        image?: GetOrdersIdImage$.Inbound | undefined;
        weight?: number | undefined;
        weightUnit?: string | undefined;
        requiresShipping?: boolean | undefined;
        taxable?: boolean | undefined;
        taxLines?: Array<GetOrdersIdTaxLines$.Inbound> | undefined;
        options?: Array<GetOrdersIdOptions$.Inbound> | undefined;
        fulfillableQuantity?: number | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<GetOrdersIdItems, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            parentId: z.string().optional(),
            productId: z.string().optional(),
            variantId: z.string().optional(),
            quantity: z.number().optional(),
            sku: z.string().optional(),
            price: z.number().optional(),
            currency: z.string().optional(),
            linePrice: z.number().optional(),
            originalPrice: z.number().optional(),
            discountedPrice: z.number().optional(),
            title: z.string().optional(),
            variantTitle: z.string().optional(),
            image: z.lazy(() => GetOrdersIdImage$.inboundSchema).optional(),
            weight: z.number().optional(),
            weightUnit: z.string().optional(),
            requiresShipping: z.boolean().optional(),
            taxable: z.boolean().optional(),
            taxLines: z.array(z.lazy(() => GetOrdersIdTaxLines$.inboundSchema)).optional(),
            options: z.array(z.lazy(() => GetOrdersIdOptions$.inboundSchema)).optional(),
            fulfillableQuantity: z.number().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.parentId === undefined ? null : { parentId: v.parentId }),
                ...(v.productId === undefined ? null : { productId: v.productId }),
                ...(v.variantId === undefined ? null : { variantId: v.variantId }),
                ...(v.quantity === undefined ? null : { quantity: v.quantity }),
                ...(v.sku === undefined ? null : { sku: v.sku }),
                ...(v.price === undefined ? null : { price: v.price }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.linePrice === undefined ? null : { linePrice: v.linePrice }),
                ...(v.originalPrice === undefined ? null : { originalPrice: v.originalPrice }),
                ...(v.discountedPrice === undefined
                    ? null
                    : { discountedPrice: v.discountedPrice }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.variantTitle === undefined ? null : { variantTitle: v.variantTitle }),
                ...(v.image === undefined ? null : { image: v.image }),
                ...(v.weight === undefined ? null : { weight: v.weight }),
                ...(v.weightUnit === undefined ? null : { weightUnit: v.weightUnit }),
                ...(v.requiresShipping === undefined
                    ? null
                    : { requiresShipping: v.requiresShipping }),
                ...(v.taxable === undefined ? null : { taxable: v.taxable }),
                ...(v.taxLines === undefined ? null : { taxLines: v.taxLines }),
                ...(v.options === undefined ? null : { options: v.options }),
                ...(v.fulfillableQuantity === undefined
                    ? null
                    : { fulfillableQuantity: v.fulfillableQuantity }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        parentId?: string | undefined;
        productId?: string | undefined;
        variantId?: string | undefined;
        quantity?: number | undefined;
        sku?: string | undefined;
        price?: number | undefined;
        currency?: string | undefined;
        linePrice?: number | undefined;
        originalPrice?: number | undefined;
        discountedPrice?: number | undefined;
        title?: string | undefined;
        variantTitle?: string | undefined;
        image?: GetOrdersIdImage$.Outbound | undefined;
        weight?: number | undefined;
        weightUnit?: string | undefined;
        requiresShipping?: boolean | undefined;
        taxable?: boolean | undefined;
        taxLines?: Array<GetOrdersIdTaxLines$.Outbound> | undefined;
        options?: Array<GetOrdersIdOptions$.Outbound> | undefined;
        fulfillableQuantity?: number | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetOrdersIdItems> = z
        .object({
            id: z.string().optional(),
            parentId: z.string().optional(),
            productId: z.string().optional(),
            variantId: z.string().optional(),
            quantity: z.number().optional(),
            sku: z.string().optional(),
            price: z.number().optional(),
            currency: z.string().optional(),
            linePrice: z.number().optional(),
            originalPrice: z.number().optional(),
            discountedPrice: z.number().optional(),
            title: z.string().optional(),
            variantTitle: z.string().optional(),
            image: z.lazy(() => GetOrdersIdImage$.outboundSchema).optional(),
            weight: z.number().optional(),
            weightUnit: z.string().optional(),
            requiresShipping: z.boolean().optional(),
            taxable: z.boolean().optional(),
            taxLines: z.array(z.lazy(() => GetOrdersIdTaxLines$.outboundSchema)).optional(),
            options: z.array(z.lazy(() => GetOrdersIdOptions$.outboundSchema)).optional(),
            fulfillableQuantity: z.number().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.parentId === undefined ? null : { parentId: v.parentId }),
                ...(v.productId === undefined ? null : { productId: v.productId }),
                ...(v.variantId === undefined ? null : { variantId: v.variantId }),
                ...(v.quantity === undefined ? null : { quantity: v.quantity }),
                ...(v.sku === undefined ? null : { sku: v.sku }),
                ...(v.price === undefined ? null : { price: v.price }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.linePrice === undefined ? null : { linePrice: v.linePrice }),
                ...(v.originalPrice === undefined ? null : { originalPrice: v.originalPrice }),
                ...(v.discountedPrice === undefined
                    ? null
                    : { discountedPrice: v.discountedPrice }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.variantTitle === undefined ? null : { variantTitle: v.variantTitle }),
                ...(v.image === undefined ? null : { image: v.image }),
                ...(v.weight === undefined ? null : { weight: v.weight }),
                ...(v.weightUnit === undefined ? null : { weightUnit: v.weightUnit }),
                ...(v.requiresShipping === undefined
                    ? null
                    : { requiresShipping: v.requiresShipping }),
                ...(v.taxable === undefined ? null : { taxable: v.taxable }),
                ...(v.taxLines === undefined ? null : { taxLines: v.taxLines }),
                ...(v.options === undefined ? null : { options: v.options }),
                ...(v.fulfillableQuantity === undefined
                    ? null
                    : { fulfillableQuantity: v.fulfillableQuantity }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });
}

/** @internal */
export namespace GetOrdersIdUnified$ {
    export type Inbound = {
        id?: string | undefined;
        customerID?: string | undefined;
        orderNumber?: string | undefined;
        status?: GetOrdersIdStatus | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        total?: number | undefined;
        subTotal?: number | undefined;
        tax?: number | undefined;
        shippingCost?: number | undefined;
        currency?: string | undefined;
        paymentStatus?: GetOrdersIdPaymentStatus | undefined;
        paymentMethods?: Array<string> | undefined;
        shippingMethod?: string | undefined;
        shippingAddress?: GetOrdersIdShippingAddress$.Inbound | undefined;
        billingAddress?: GetOrdersIdBillingAddress$.Inbound | undefined;
        note?: string | undefined;
        discounts?: Array<number> | undefined;
        trackingInfo?: string | undefined;
        items?: Array<GetOrdersIdItems$.Inbound> | undefined;
        tags?: Array<string> | undefined;
    };

    export const inboundSchema: z.ZodType<GetOrdersIdUnified, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            customerID: z.string().optional(),
            orderNumber: z.string().optional(),
            status: GetOrdersIdStatus$.optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            total: z.number().optional(),
            subTotal: z.number().optional(),
            tax: z.number().optional(),
            shippingCost: z.number().optional(),
            currency: z.string().optional(),
            paymentStatus: GetOrdersIdPaymentStatus$.optional(),
            paymentMethods: z.array(z.string()).optional(),
            shippingMethod: z.string().optional(),
            shippingAddress: z.lazy(() => GetOrdersIdShippingAddress$.inboundSchema).optional(),
            billingAddress: z.lazy(() => GetOrdersIdBillingAddress$.inboundSchema).optional(),
            note: z.string().optional(),
            discounts: z.array(z.number()).optional(),
            trackingInfo: z.string().optional(),
            items: z.array(z.lazy(() => GetOrdersIdItems$.inboundSchema)).optional(),
            tags: z.array(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.customerID === undefined ? null : { customerID: v.customerID }),
                ...(v.orderNumber === undefined ? null : { orderNumber: v.orderNumber }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.total === undefined ? null : { total: v.total }),
                ...(v.subTotal === undefined ? null : { subTotal: v.subTotal }),
                ...(v.tax === undefined ? null : { tax: v.tax }),
                ...(v.shippingCost === undefined ? null : { shippingCost: v.shippingCost }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.paymentStatus === undefined ? null : { paymentStatus: v.paymentStatus }),
                ...(v.paymentMethods === undefined ? null : { paymentMethods: v.paymentMethods }),
                ...(v.shippingMethod === undefined ? null : { shippingMethod: v.shippingMethod }),
                ...(v.shippingAddress === undefined
                    ? null
                    : { shippingAddress: v.shippingAddress }),
                ...(v.billingAddress === undefined ? null : { billingAddress: v.billingAddress }),
                ...(v.note === undefined ? null : { note: v.note }),
                ...(v.discounts === undefined ? null : { discounts: v.discounts }),
                ...(v.trackingInfo === undefined ? null : { trackingInfo: v.trackingInfo }),
                ...(v.items === undefined ? null : { items: v.items }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        customerID?: string | undefined;
        orderNumber?: string | undefined;
        status?: GetOrdersIdStatus | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        total?: number | undefined;
        subTotal?: number | undefined;
        tax?: number | undefined;
        shippingCost?: number | undefined;
        currency?: string | undefined;
        paymentStatus?: GetOrdersIdPaymentStatus | undefined;
        paymentMethods?: Array<string> | undefined;
        shippingMethod?: string | undefined;
        shippingAddress?: GetOrdersIdShippingAddress$.Outbound | undefined;
        billingAddress?: GetOrdersIdBillingAddress$.Outbound | undefined;
        note?: string | undefined;
        discounts?: Array<number> | undefined;
        trackingInfo?: string | undefined;
        items?: Array<GetOrdersIdItems$.Outbound> | undefined;
        tags?: Array<string> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetOrdersIdUnified> = z
        .object({
            id: z.string().optional(),
            customerID: z.string().optional(),
            orderNumber: z.string().optional(),
            status: GetOrdersIdStatus$.optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            total: z.number().optional(),
            subTotal: z.number().optional(),
            tax: z.number().optional(),
            shippingCost: z.number().optional(),
            currency: z.string().optional(),
            paymentStatus: GetOrdersIdPaymentStatus$.optional(),
            paymentMethods: z.array(z.string()).optional(),
            shippingMethod: z.string().optional(),
            shippingAddress: z.lazy(() => GetOrdersIdShippingAddress$.outboundSchema).optional(),
            billingAddress: z.lazy(() => GetOrdersIdBillingAddress$.outboundSchema).optional(),
            note: z.string().optional(),
            discounts: z.array(z.number()).optional(),
            trackingInfo: z.string().optional(),
            items: z.array(z.lazy(() => GetOrdersIdItems$.outboundSchema)).optional(),
            tags: z.array(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.customerID === undefined ? null : { customerID: v.customerID }),
                ...(v.orderNumber === undefined ? null : { orderNumber: v.orderNumber }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.total === undefined ? null : { total: v.total }),
                ...(v.subTotal === undefined ? null : { subTotal: v.subTotal }),
                ...(v.tax === undefined ? null : { tax: v.tax }),
                ...(v.shippingCost === undefined ? null : { shippingCost: v.shippingCost }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.paymentStatus === undefined ? null : { paymentStatus: v.paymentStatus }),
                ...(v.paymentMethods === undefined ? null : { paymentMethods: v.paymentMethods }),
                ...(v.shippingMethod === undefined ? null : { shippingMethod: v.shippingMethod }),
                ...(v.shippingAddress === undefined
                    ? null
                    : { shippingAddress: v.shippingAddress }),
                ...(v.billingAddress === undefined ? null : { billingAddress: v.billingAddress }),
                ...(v.note === undefined ? null : { note: v.note }),
                ...(v.discounts === undefined ? null : { discounts: v.discounts }),
                ...(v.trackingInfo === undefined ? null : { trackingInfo: v.trackingInfo }),
                ...(v.items === undefined ? null : { items: v.items }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
            };
        });
}

/** @internal */
export namespace GetOrdersIdPassthrough$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<GetOrdersIdPassthrough, z.ZodTypeDef, Inbound> = z.object(
        {}
    );

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetOrdersIdPassthrough> =
        z.object({});
}

/** @internal */
export namespace GetOrdersIdCache$ {
    export type Inbound = {
        hit?: boolean | undefined;
        ttl?: number | undefined;
        key?: string | undefined;
    };

    export const inboundSchema: z.ZodType<GetOrdersIdCache, z.ZodTypeDef, Inbound> = z
        .object({
            hit: z.boolean().optional(),
            ttl: z.number().int().optional(),
            key: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.hit === undefined ? null : { hit: v.hit }),
                ...(v.ttl === undefined ? null : { ttl: v.ttl }),
                ...(v.key === undefined ? null : { key: v.key }),
            };
        });

    export type Outbound = {
        hit?: boolean | undefined;
        ttl?: number | undefined;
        key?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetOrdersIdCache> = z
        .object({
            hit: z.boolean().optional(),
            ttl: z.number().int().optional(),
            key: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.hit === undefined ? null : { hit: v.hit }),
                ...(v.ttl === undefined ? null : { ttl: v.ttl }),
                ...(v.key === undefined ? null : { key: v.key }),
            };
        });
}

/** @internal */
export namespace GetOrdersIdMeta$ {
    export type Inbound = {
        timestamp?: number | undefined;
        latency?: number | undefined;
        platformRateLimitRemaining?: number | undefined;
        rateLimitRemaining?: number | undefined;
        cache?: GetOrdersIdCache$.Inbound | undefined;
        transactionKey?: string | undefined;
        txn?: string | undefined;
        platform?: string | undefined;
        platformVersion?: string | undefined;
        connectionDefinitionKey?: string | undefined;
        action?: string | undefined;
        commonModel?: string | undefined;
        commonModelVersion?: string | undefined;
        connectionKey?: string | undefined;
        hash?: string | undefined;
        heartbeats?: Array<string> | undefined;
        totalTransactions?: number | undefined;
    };

    export const inboundSchema: z.ZodType<GetOrdersIdMeta, z.ZodTypeDef, Inbound> = z
        .object({
            timestamp: z.number().int().optional(),
            latency: z.number().int().optional(),
            platformRateLimitRemaining: z.number().int().optional(),
            rateLimitRemaining: z.number().int().optional(),
            cache: z.lazy(() => GetOrdersIdCache$.inboundSchema).optional(),
            transactionKey: z.string().optional(),
            txn: z.string().optional(),
            platform: z.string().optional(),
            platformVersion: z.string().optional(),
            connectionDefinitionKey: z.string().optional(),
            action: z.string().optional(),
            commonModel: z.string().optional(),
            commonModelVersion: z.string().optional(),
            connectionKey: z.string().optional(),
            hash: z.string().optional(),
            heartbeats: z.array(z.string()).optional(),
            totalTransactions: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.timestamp === undefined ? null : { timestamp: v.timestamp }),
                ...(v.latency === undefined ? null : { latency: v.latency }),
                ...(v.platformRateLimitRemaining === undefined
                    ? null
                    : { platformRateLimitRemaining: v.platformRateLimitRemaining }),
                ...(v.rateLimitRemaining === undefined
                    ? null
                    : { rateLimitRemaining: v.rateLimitRemaining }),
                ...(v.cache === undefined ? null : { cache: v.cache }),
                ...(v.transactionKey === undefined ? null : { transactionKey: v.transactionKey }),
                ...(v.txn === undefined ? null : { txn: v.txn }),
                ...(v.platform === undefined ? null : { platform: v.platform }),
                ...(v.platformVersion === undefined
                    ? null
                    : { platformVersion: v.platformVersion }),
                ...(v.connectionDefinitionKey === undefined
                    ? null
                    : { connectionDefinitionKey: v.connectionDefinitionKey }),
                ...(v.action === undefined ? null : { action: v.action }),
                ...(v.commonModel === undefined ? null : { commonModel: v.commonModel }),
                ...(v.commonModelVersion === undefined
                    ? null
                    : { commonModelVersion: v.commonModelVersion }),
                ...(v.connectionKey === undefined ? null : { connectionKey: v.connectionKey }),
                ...(v.hash === undefined ? null : { hash: v.hash }),
                ...(v.heartbeats === undefined ? null : { heartbeats: v.heartbeats }),
                ...(v.totalTransactions === undefined
                    ? null
                    : { totalTransactions: v.totalTransactions }),
            };
        });

    export type Outbound = {
        timestamp?: number | undefined;
        latency?: number | undefined;
        platformRateLimitRemaining?: number | undefined;
        rateLimitRemaining?: number | undefined;
        cache?: GetOrdersIdCache$.Outbound | undefined;
        transactionKey?: string | undefined;
        txn?: string | undefined;
        platform?: string | undefined;
        platformVersion?: string | undefined;
        connectionDefinitionKey?: string | undefined;
        action?: string | undefined;
        commonModel?: string | undefined;
        commonModelVersion?: string | undefined;
        connectionKey?: string | undefined;
        hash?: string | undefined;
        heartbeats?: Array<string> | undefined;
        totalTransactions?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetOrdersIdMeta> = z
        .object({
            timestamp: z.number().int().optional(),
            latency: z.number().int().optional(),
            platformRateLimitRemaining: z.number().int().optional(),
            rateLimitRemaining: z.number().int().optional(),
            cache: z.lazy(() => GetOrdersIdCache$.outboundSchema).optional(),
            transactionKey: z.string().optional(),
            txn: z.string().optional(),
            platform: z.string().optional(),
            platformVersion: z.string().optional(),
            connectionDefinitionKey: z.string().optional(),
            action: z.string().optional(),
            commonModel: z.string().optional(),
            commonModelVersion: z.string().optional(),
            connectionKey: z.string().optional(),
            hash: z.string().optional(),
            heartbeats: z.array(z.string()).optional(),
            totalTransactions: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.timestamp === undefined ? null : { timestamp: v.timestamp }),
                ...(v.latency === undefined ? null : { latency: v.latency }),
                ...(v.platformRateLimitRemaining === undefined
                    ? null
                    : { platformRateLimitRemaining: v.platformRateLimitRemaining }),
                ...(v.rateLimitRemaining === undefined
                    ? null
                    : { rateLimitRemaining: v.rateLimitRemaining }),
                ...(v.cache === undefined ? null : { cache: v.cache }),
                ...(v.transactionKey === undefined ? null : { transactionKey: v.transactionKey }),
                ...(v.txn === undefined ? null : { txn: v.txn }),
                ...(v.platform === undefined ? null : { platform: v.platform }),
                ...(v.platformVersion === undefined
                    ? null
                    : { platformVersion: v.platformVersion }),
                ...(v.connectionDefinitionKey === undefined
                    ? null
                    : { connectionDefinitionKey: v.connectionDefinitionKey }),
                ...(v.action === undefined ? null : { action: v.action }),
                ...(v.commonModel === undefined ? null : { commonModel: v.commonModel }),
                ...(v.commonModelVersion === undefined
                    ? null
                    : { commonModelVersion: v.commonModelVersion }),
                ...(v.connectionKey === undefined ? null : { connectionKey: v.connectionKey }),
                ...(v.hash === undefined ? null : { hash: v.hash }),
                ...(v.heartbeats === undefined ? null : { heartbeats: v.heartbeats }),
                ...(v.totalTransactions === undefined
                    ? null
                    : { totalTransactions: v.totalTransactions }),
            };
        });
}

/** @internal */
export namespace GetOrdersIdResponseBody$ {
    export type Inbound = {
        status?: string | undefined;
        statusCode?: GetOrdersIdStatusCode | undefined;
        unified?: GetOrdersIdUnified$.Inbound | undefined;
        passthrough?: GetOrdersIdPassthrough$.Inbound | undefined;
        meta?: GetOrdersIdMeta$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<GetOrdersIdResponseBody, z.ZodTypeDef, Inbound> = z
        .object({
            status: z.string().optional(),
            statusCode: GetOrdersIdStatusCode$.optional(),
            unified: z.lazy(() => GetOrdersIdUnified$.inboundSchema).optional(),
            passthrough: z.lazy(() => GetOrdersIdPassthrough$.inboundSchema).optional(),
            meta: z.lazy(() => GetOrdersIdMeta$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.statusCode === undefined ? null : { statusCode: v.statusCode }),
                ...(v.unified === undefined ? null : { unified: v.unified }),
                ...(v.passthrough === undefined ? null : { passthrough: v.passthrough }),
                ...(v.meta === undefined ? null : { meta: v.meta }),
            };
        });

    export type Outbound = {
        status?: string | undefined;
        statusCode?: GetOrdersIdStatusCode | undefined;
        unified?: GetOrdersIdUnified$.Outbound | undefined;
        passthrough?: GetOrdersIdPassthrough$.Outbound | undefined;
        meta?: GetOrdersIdMeta$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetOrdersIdResponseBody> = z
        .object({
            status: z.string().optional(),
            statusCode: GetOrdersIdStatusCode$.optional(),
            unified: z.lazy(() => GetOrdersIdUnified$.outboundSchema).optional(),
            passthrough: z.lazy(() => GetOrdersIdPassthrough$.outboundSchema).optional(),
            meta: z.lazy(() => GetOrdersIdMeta$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.statusCode === undefined ? null : { statusCode: v.statusCode }),
                ...(v.unified === undefined ? null : { unified: v.unified }),
                ...(v.passthrough === undefined ? null : { passthrough: v.passthrough }),
                ...(v.meta === undefined ? null : { meta: v.meta }),
            };
        });
}

/** @internal */
export namespace GetOrdersIdResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        object?: GetOrdersIdResponseBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<GetOrdersIdResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => GetOrdersIdResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: GetOrdersIdResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetOrdersIdResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z.lazy(() => GetOrdersIdResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
