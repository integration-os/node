/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type GetTasksRequest = {
    /**
     * The unique identifier of a Connected Account
     */
    xIntegrationosConnectionKey: string;
};

export enum GetTasksStatusCode {
    TwoHundred = 200,
    FourHundred = 400,
    FiveHundred = 500,
}

export enum GetTasksStatus {
    Todo = "Todo",
    InProgress = "In Progress",
    Done = "Done",
    Blocked = "Blocked",
    OnHold = "On Hold",
}

export enum GetTasksPriority {
    Low = "Low",
    Medium = "Medium",
    High = "High",
    Urgent = "Urgent",
}

export enum GetTasksMimeType {
    ImageJpeg = "image/jpeg",
    ImagePng = "image/png",
    ImageGif = "image/gif",
    ImageSvgPlusXml = "image/svg+xml",
    ImageWebp = "image/webp",
}

export type GetTasksProfilePicture = {
    id?: string | undefined;
    src?: string | undefined;
    altText?: string | undefined;
    width?: number | undefined;
    height?: number | undefined;
    thumbnailSrc?: string | undefined;
    caption?: string | undefined;
    title?: string | undefined;
    mimeType?: GetTasksMimeType | undefined;
    tags?: Array<string> | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    active?: boolean | undefined;
    deleted?: boolean | undefined;
};

export enum GetTasksTasksMimeType {
    ImageJpeg = "image/jpeg",
    ImagePng = "image/png",
    ImageGif = "image/gif",
    ImageSvgPlusXml = "image/svg+xml",
    ImageWebp = "image/webp",
}

export type GetTasksCoverPhoto = {
    id?: string | undefined;
    src?: string | undefined;
    altText?: string | undefined;
    width?: number | undefined;
    height?: number | undefined;
    thumbnailSrc?: string | undefined;
    caption?: string | undefined;
    title?: string | undefined;
    mimeType?: GetTasksTasksMimeType | undefined;
    tags?: Array<string> | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    active?: boolean | undefined;
    deleted?: boolean | undefined;
};

export enum GetTasksGender {
    Male = "Male",
    Female = "Female",
    Other = "Other",
    PreferNotToSay = "Prefer not to say",
}

export enum GetTasksType {
    Home = "home",
    Work = "work",
    Other = "other",
}

export type GetTasksGeoLocation = {};

export type GetTasksTasksResponseCustomFields = {};

export type GetTasksAddresses = {
    id?: string | undefined;
    contactId?: string | undefined;
    accountId?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    name?: string | undefined;
    companyName?: string | undefined;
    email?: string | undefined;
    phone?: string | undefined;
    street?: string | undefined;
    addressLine2?: string | undefined;
    city?: string | undefined;
    province?: string | undefined;
    region?: string | undefined;
    postalCode?: string | undefined;
    postalCodeExtension?: string | undefined;
    country?: string | undefined;
    countryCode?: string | undefined;
    type?: GetTasksType | undefined;
    geoLocation?: GetTasksGeoLocation | undefined;
    customFields?: Array<GetTasksTasksResponseCustomFields> | undefined;
    subdivisionCode?: string | undefined;
};

export enum GetTasksRoles {
    User = "User",
    Admin = "Admin",
    Moderator = "Moderator",
}

export enum GetTasksCommunications {
    Email = "Email",
    Sms = "SMS",
    PushNotification = "PushNotification",
}

export type GetTasksPreferences = {
    id?: string | undefined;
    language?: string | undefined;
    currency?: string | undefined;
    timeZone?: string | undefined;
    communications?: GetTasksCommunications | undefined;
};

export enum GetTasksTasksType {
    Facebook = "facebook",
    Twitter = "twitter",
    Linkedin = "linkedin",
    Instagram = "instagram",
    Tiktok = "tiktok",
    Pinterest = "pinterest",
    Youtube = "youtube",
    Other = "other",
}

export enum GetTasksTasksResponse200ApplicationJSONResponseBodyUnifiedAssigneeType {
    String = "String",
    Number = "Number",
    Boolean = "Boolean",
    Date = "Date",
    Json = "Json",
    Array = "Array",
}

export type GetTasksAdditionalInfo = {
    id?: string | undefined;
    key?: string | undefined;
    value?: string | undefined;
    type?: GetTasksTasksResponse200ApplicationJSONResponseBodyUnifiedAssigneeType | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    entityId?: string | undefined;
    entityType?: string | undefined;
};

export type GetTasksSocialLinks = {
    type?: GetTasksTasksType | undefined;
    username?: string | undefined;
    displayName?: string | undefined;
    url?: string | undefined;
    avatarUrl?: string | undefined;
    email?: string | undefined;
    additionalInfo?: GetTasksAdditionalInfo | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    active?: boolean | undefined;
    deleted?: boolean | undefined;
};

export enum GetTasksTasksStatus {
    Pending = "Pending",
    Verified = "Verified",
    Suspended = "Suspended",
    Inactive = "Inactive",
}

export enum GetTasksProvider {
    Google = "Google",
    Facebook = "Facebook",
    Twitter = "Twitter",
    LinkedIn = "LinkedIn",
    Microsoft = "Microsoft",
    Apple = "Apple",
    Other = "Other",
}

export type GetTasksSso = {
    provider?: GetTasksProvider | undefined;
    providerUserId?: string | undefined;
    profileUrl?: string | undefined;
    accessToken?: string | undefined;
    refreshToken?: string | undefined;
    expiresIn?: number | undefined;
    expiryDate?: number | undefined;
    scopes?: Array<string> | undefined;
    tokenType?: string | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    active?: boolean | undefined;
    deleted?: boolean | undefined;
};

export enum GetTasksTasksResponseType {
    CreditCard = "CreditCard",
    PayPal = "PayPal",
    BankTransfer = "BankTransfer",
    CryptoCurrency = "CryptoCurrency",
}

export type GetTasksPaymentMethods = {
    id?: string | undefined;
    type?: GetTasksTasksResponseType | undefined;
    details?: string | undefined;
    isDefault?: boolean | undefined;
};

export type GetTasksAssignee = {
    id?: string | undefined;
    firstName?: string | undefined;
    middleName?: string | undefined;
    lastName?: string | undefined;
    email?: string | undefined;
    username?: string | undefined;
    password?: string | undefined;
    profilePicture?: GetTasksProfilePicture | undefined;
    coverPhoto?: GetTasksCoverPhoto | undefined;
    gender?: GetTasksGender | undefined;
    dateOfBirth?: number | undefined;
    phoneNumber?: string | undefined;
    isActive?: boolean | undefined;
    lastLogin?: number | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    addresses?: Array<GetTasksAddresses> | undefined;
    roles?: Array<GetTasksRoles> | undefined;
    preferences?: GetTasksPreferences | undefined;
    bio?: string | undefined;
    website?: string | undefined;
    socialLinks?: GetTasksSocialLinks | undefined;
    status?: GetTasksTasksStatus | undefined;
    sso?: Array<GetTasksSso> | undefined;
    paymentMethods?: GetTasksPaymentMethods | undefined;
};

export enum GetTasksTasksResponseMimeType {
    ImageJpeg = "image/jpeg",
    ImagePng = "image/png",
    ImageGif = "image/gif",
    ImageSvgPlusXml = "image/svg+xml",
    ImageWebp = "image/webp",
}

export type GetTasksTasksProfilePicture = {
    id?: string | undefined;
    src?: string | undefined;
    altText?: string | undefined;
    width?: number | undefined;
    height?: number | undefined;
    thumbnailSrc?: string | undefined;
    caption?: string | undefined;
    title?: string | undefined;
    mimeType?: GetTasksTasksResponseMimeType | undefined;
    tags?: Array<string> | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    active?: boolean | undefined;
    deleted?: boolean | undefined;
};

export enum GetTasksTasksResponse200MimeType {
    ImageJpeg = "image/jpeg",
    ImagePng = "image/png",
    ImageGif = "image/gif",
    ImageSvgPlusXml = "image/svg+xml",
    ImageWebp = "image/webp",
}

export type GetTasksTasksCoverPhoto = {
    id?: string | undefined;
    src?: string | undefined;
    altText?: string | undefined;
    width?: number | undefined;
    height?: number | undefined;
    thumbnailSrc?: string | undefined;
    caption?: string | undefined;
    title?: string | undefined;
    mimeType?: GetTasksTasksResponse200MimeType | undefined;
    tags?: Array<string> | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    active?: boolean | undefined;
    deleted?: boolean | undefined;
};

export enum GetTasksTasksGender {
    Male = "Male",
    Female = "Female",
    Other = "Other",
    PreferNotToSay = "Prefer not to say",
}

export enum GetTasksTasksResponse200Type {
    Home = "home",
    Work = "work",
    Other = "other",
}

export type GetTasksTasksGeoLocation = {};

export type GetTasksTasksResponse200CustomFields = {};

export type GetTasksTasksAddresses = {
    id?: string | undefined;
    contactId?: string | undefined;
    accountId?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    name?: string | undefined;
    companyName?: string | undefined;
    email?: string | undefined;
    phone?: string | undefined;
    street?: string | undefined;
    addressLine2?: string | undefined;
    city?: string | undefined;
    province?: string | undefined;
    region?: string | undefined;
    postalCode?: string | undefined;
    postalCodeExtension?: string | undefined;
    country?: string | undefined;
    countryCode?: string | undefined;
    type?: GetTasksTasksResponse200Type | undefined;
    geoLocation?: GetTasksTasksGeoLocation | undefined;
    customFields?: Array<GetTasksTasksResponse200CustomFields> | undefined;
    subdivisionCode?: string | undefined;
};

export enum GetTasksTasksRoles {
    User = "User",
    Admin = "Admin",
    Moderator = "Moderator",
}

export enum GetTasksTasksCommunications {
    Email = "Email",
    Sms = "SMS",
    PushNotification = "PushNotification",
}

export type GetTasksTasksPreferences = {
    id?: string | undefined;
    language?: string | undefined;
    currency?: string | undefined;
    timeZone?: string | undefined;
    communications?: GetTasksTasksCommunications | undefined;
};

export enum GetTasksTasksResponse200ApplicationJSONType {
    Facebook = "facebook",
    Twitter = "twitter",
    Linkedin = "linkedin",
    Instagram = "instagram",
    Tiktok = "tiktok",
    Pinterest = "pinterest",
    Youtube = "youtube",
    Other = "other",
}

export enum GetTasksTasksResponse200ApplicationJSONResponseBodyUnifiedType {
    String = "String",
    Number = "Number",
    Boolean = "Boolean",
    Date = "Date",
    Json = "Json",
    Array = "Array",
}

export type GetTasksTasksAdditionalInfo = {
    id?: string | undefined;
    key?: string | undefined;
    value?: string | undefined;
    type?: GetTasksTasksResponse200ApplicationJSONResponseBodyUnifiedType | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    entityId?: string | undefined;
    entityType?: string | undefined;
};

export type GetTasksTasksSocialLinks = {
    type?: GetTasksTasksResponse200ApplicationJSONType | undefined;
    username?: string | undefined;
    displayName?: string | undefined;
    url?: string | undefined;
    avatarUrl?: string | undefined;
    email?: string | undefined;
    additionalInfo?: GetTasksTasksAdditionalInfo | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    active?: boolean | undefined;
    deleted?: boolean | undefined;
};

export enum GetTasksTasksResponseStatus {
    Pending = "Pending",
    Verified = "Verified",
    Suspended = "Suspended",
    Inactive = "Inactive",
}

export enum GetTasksTasksProvider {
    Google = "Google",
    Facebook = "Facebook",
    Twitter = "Twitter",
    LinkedIn = "LinkedIn",
    Microsoft = "Microsoft",
    Apple = "Apple",
    Other = "Other",
}

export type GetTasksTasksSso = {
    provider?: GetTasksTasksProvider | undefined;
    providerUserId?: string | undefined;
    profileUrl?: string | undefined;
    accessToken?: string | undefined;
    refreshToken?: string | undefined;
    expiresIn?: number | undefined;
    expiryDate?: number | undefined;
    scopes?: Array<string> | undefined;
    tokenType?: string | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    active?: boolean | undefined;
    deleted?: boolean | undefined;
};

export enum GetTasksTasksResponse200ApplicationJSONResponseBodyType {
    CreditCard = "CreditCard",
    PayPal = "PayPal",
    BankTransfer = "BankTransfer",
    CryptoCurrency = "CryptoCurrency",
}

export type GetTasksTasksPaymentMethods = {
    id?: string | undefined;
    type?: GetTasksTasksResponse200ApplicationJSONResponseBodyType | undefined;
    details?: string | undefined;
    isDefault?: boolean | undefined;
};

export type GetTasksCreatedBy = {
    id?: string | undefined;
    firstName?: string | undefined;
    middleName?: string | undefined;
    lastName?: string | undefined;
    email?: string | undefined;
    username?: string | undefined;
    password?: string | undefined;
    profilePicture?: GetTasksTasksProfilePicture | undefined;
    coverPhoto?: GetTasksTasksCoverPhoto | undefined;
    gender?: GetTasksTasksGender | undefined;
    dateOfBirth?: number | undefined;
    phoneNumber?: string | undefined;
    isActive?: boolean | undefined;
    lastLogin?: number | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    addresses?: Array<GetTasksTasksAddresses> | undefined;
    roles?: Array<GetTasksTasksRoles> | undefined;
    preferences?: GetTasksTasksPreferences | undefined;
    bio?: string | undefined;
    website?: string | undefined;
    socialLinks?: GetTasksTasksSocialLinks | undefined;
    status?: GetTasksTasksResponseStatus | undefined;
    sso?: Array<GetTasksTasksSso> | undefined;
    paymentMethods?: GetTasksTasksPaymentMethods | undefined;
};

export type GetTasksAuthor = {};

export type GetTasksMetadata = {};

export type GetTasksComments = {
    commentId?: string | undefined;
    author?: GetTasksAuthor | undefined;
    text?: string | undefined;
    parentId?: string | undefined;
    likes?: number | undefined;
    flagged?: boolean | undefined;
    metadata?: Array<GetTasksMetadata> | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    active?: boolean | undefined;
    deleted?: boolean | undefined;
};

export type GetTasksTasksMetadata = {};

export type GetTasksAssociatedWith = {};

export type GetTasksPermissions = {};

export type GetTasksAttachments = {
    id?: string | undefined;
    fileName?: string | undefined;
    fileSize?: number | undefined;
    fileType?: string | undefined;
    url?: string | undefined;
    thumbnailUrl?: string | undefined;
    previewUrl?: string | undefined;
    content?: string | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    metadata?: GetTasksTasksMetadata | undefined;
    associatedWith?: GetTasksAssociatedWith | undefined;
    permissions?: GetTasksPermissions | undefined;
};

export enum GetTasksFieldType {
    Text = "text",
    Number = "number",
    Date = "date",
    Boolean = "boolean",
    Enum = "enum",
    Json = "json",
    Array = "array",
}

export type GetTasksCustomFields = {
    id?: string | undefined;
    fieldName?: string | undefined;
    fieldValue?: string | undefined;
    fieldType?: GetTasksFieldType | undefined;
};

export type GetTasksTasksResponseProfilePicture = {};

export type GetTasksTasksResponseCoverPhoto = {};

export enum GetTasksTasksResponseGender {
    Male = "Male",
    Female = "Female",
    Other = "Other",
    PreferNotToSay = "Prefer not to say",
}

export type GetTasksTasksResponseAddresses = {};

export enum GetTasksTasksResponseRoles {
    User = "User",
    Admin = "Admin",
    Moderator = "Moderator",
}

export type GetTasksTasksResponsePreferences = {};

export type GetTasksTasksResponseSocialLinks = {};

export enum GetTasksTasksResponse200Status {
    Pending = "Pending",
    Verified = "Verified",
    Suspended = "Suspended",
    Inactive = "Inactive",
}

export type GetTasksTasksResponseSso = {};

export type GetTasksTasksResponsePaymentMethods = {};

export type GetTasksWatchers = {
    id?: string | undefined;
    firstName?: string | undefined;
    middleName?: string | undefined;
    lastName?: string | undefined;
    email?: string | undefined;
    username?: string | undefined;
    password?: string | undefined;
    profilePicture?: GetTasksTasksResponseProfilePicture | undefined;
    coverPhoto?: GetTasksTasksResponseCoverPhoto | undefined;
    gender?: GetTasksTasksResponseGender | undefined;
    dateOfBirth?: number | undefined;
    phoneNumber?: string | undefined;
    isActive?: boolean | undefined;
    lastLogin?: number | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    addresses?: Array<GetTasksTasksResponseAddresses> | undefined;
    roles?: Array<GetTasksTasksResponseRoles> | undefined;
    preferences?: GetTasksTasksResponsePreferences | undefined;
    bio?: string | undefined;
    website?: string | undefined;
    socialLinks?: GetTasksTasksResponseSocialLinks | undefined;
    status?: GetTasksTasksResponse200Status | undefined;
    sso?: Array<GetTasksTasksResponseSso> | undefined;
    paymentMethods?: GetTasksTasksResponsePaymentMethods | undefined;
};

export type GetTasksRecipient = {};

export enum GetTasksTasksPriority {
    High = "HIGH",
    Medium = "MEDIUM",
    Low = "LOW",
}

export type GetTasksTasksCustomFields = {};

export type GetTasksTasksAttachments = {};

export type GetTasksNotifications = {
    notificationId?: string | undefined;
    type?: string | undefined;
    title?: string | undefined;
    message?: string | undefined;
    recipient?: GetTasksRecipient | undefined;
    status?: string | undefined;
    priority?: GetTasksTasksPriority | undefined;
    channel?: string | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    active?: boolean | undefined;
    deleted?: boolean | undefined;
    customFields?: Array<GetTasksTasksCustomFields> | undefined;
    attachments?: Array<GetTasksTasksAttachments> | undefined;
};

export type GetTasksUnified = {
    id?: string | undefined;
    title?: string | undefined;
    description?: string | undefined;
    status?: GetTasksStatus | undefined;
    priority?: GetTasksPriority | undefined;
    dueDate?: number | undefined;
    dueTimezone?: string | undefined;
    assignee?: GetTasksAssignee | undefined;
    createdBy?: GetTasksCreatedBy | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    labels?: Array<string> | undefined;
    comments?: Array<GetTasksComments> | undefined;
    attachments?: Array<GetTasksAttachments> | undefined;
    timeEstimate?: string | undefined;
    timeLogged?: string | undefined;
    subTaskIds?: Array<string> | undefined;
    parentTaskId?: string | undefined;
    dependOnTaskIds?: Array<string> | undefined;
    relatedToTaskId?: Array<string> | undefined;
    repeat?: string | undefined;
    customFields?: Array<GetTasksCustomFields> | undefined;
    watchers?: Array<GetTasksWatchers> | undefined;
    completionPercentage?: number | undefined;
    notifications?: Array<GetTasksNotifications> | undefined;
};

export type GetTasksPassthrough = {};

export type GetTasksCache = {
    hit?: boolean | undefined;
    ttl?: number | undefined;
    key?: string | undefined;
};

export type GetTasksMeta = {
    timestamp?: number | undefined;
    latency?: number | undefined;
    platformRateLimitRemaining?: number | undefined;
    rateLimitRemaining?: number | undefined;
    cache?: GetTasksCache | undefined;
    transactionKey?: string | undefined;
    txn?: string | undefined;
    platform?: string | undefined;
    platformVersion?: string | undefined;
    connectionDefinitionKey?: string | undefined;
    action?: string | undefined;
    commonModel?: string | undefined;
    commonModelVersion?: string | undefined;
    connectionKey?: string | undefined;
    hash?: string | undefined;
    heartbeats?: Array<string> | undefined;
    totalTransactions?: number | undefined;
};

export type GetTasksPagination = {
    cursor?: string | undefined;
    limit?: number | undefined;
};

/**
 * Successful response
 */
export type GetTasksResponseBody = {
    status?: string | undefined;
    statusCode?: GetTasksStatusCode | undefined;
    unified?: Array<GetTasksUnified> | undefined;
    passthrough?: GetTasksPassthrough | undefined;
    meta?: GetTasksMeta | undefined;
    pagination?: GetTasksPagination | undefined;
};

export type GetTasksResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Successful response
     */
    object?: GetTasksResponseBody | undefined;
};

/** @internal */
export namespace GetTasksRequest$ {
    export type Inbound = {
        "X-INTEGRATIONOS-CONNECTION-KEY": string;
    };

    export const inboundSchema: z.ZodType<GetTasksRequest, z.ZodTypeDef, Inbound> = z
        .object({
            "X-INTEGRATIONOS-CONNECTION-KEY": z.string(),
        })
        .transform((v) => {
            return {
                xIntegrationosConnectionKey: v["X-INTEGRATIONOS-CONNECTION-KEY"],
            };
        });

    export type Outbound = {
        "X-INTEGRATIONOS-CONNECTION-KEY": string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetTasksRequest> = z
        .object({
            xIntegrationosConnectionKey: z.string(),
        })
        .transform((v) => {
            return {
                "X-INTEGRATIONOS-CONNECTION-KEY": v.xIntegrationosConnectionKey,
            };
        });
}

/** @internal */
export const GetTasksStatusCode$ = z.nativeEnum(GetTasksStatusCode);

/** @internal */
export const GetTasksStatus$ = z.nativeEnum(GetTasksStatus);

/** @internal */
export const GetTasksPriority$ = z.nativeEnum(GetTasksPriority);

/** @internal */
export const GetTasksMimeType$ = z.nativeEnum(GetTasksMimeType);

/** @internal */
export namespace GetTasksProfilePicture$ {
    export type Inbound = {
        id?: string | undefined;
        src?: string | undefined;
        altText?: string | undefined;
        width?: number | undefined;
        height?: number | undefined;
        thumbnailSrc?: string | undefined;
        caption?: string | undefined;
        title?: string | undefined;
        mimeType?: GetTasksMimeType | undefined;
        tags?: Array<string> | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<GetTasksProfilePicture, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            src: z.string().optional(),
            altText: z.string().optional(),
            width: z.number().optional(),
            height: z.number().optional(),
            thumbnailSrc: z.string().optional(),
            caption: z.string().optional(),
            title: z.string().optional(),
            mimeType: GetTasksMimeType$.optional(),
            tags: z.array(z.string()).optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.src === undefined ? null : { src: v.src }),
                ...(v.altText === undefined ? null : { altText: v.altText }),
                ...(v.width === undefined ? null : { width: v.width }),
                ...(v.height === undefined ? null : { height: v.height }),
                ...(v.thumbnailSrc === undefined ? null : { thumbnailSrc: v.thumbnailSrc }),
                ...(v.caption === undefined ? null : { caption: v.caption }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.mimeType === undefined ? null : { mimeType: v.mimeType }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        src?: string | undefined;
        altText?: string | undefined;
        width?: number | undefined;
        height?: number | undefined;
        thumbnailSrc?: string | undefined;
        caption?: string | undefined;
        title?: string | undefined;
        mimeType?: GetTasksMimeType | undefined;
        tags?: Array<string> | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetTasksProfilePicture> = z
        .object({
            id: z.string().optional(),
            src: z.string().optional(),
            altText: z.string().optional(),
            width: z.number().optional(),
            height: z.number().optional(),
            thumbnailSrc: z.string().optional(),
            caption: z.string().optional(),
            title: z.string().optional(),
            mimeType: GetTasksMimeType$.optional(),
            tags: z.array(z.string()).optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.src === undefined ? null : { src: v.src }),
                ...(v.altText === undefined ? null : { altText: v.altText }),
                ...(v.width === undefined ? null : { width: v.width }),
                ...(v.height === undefined ? null : { height: v.height }),
                ...(v.thumbnailSrc === undefined ? null : { thumbnailSrc: v.thumbnailSrc }),
                ...(v.caption === undefined ? null : { caption: v.caption }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.mimeType === undefined ? null : { mimeType: v.mimeType }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });
}

/** @internal */
export const GetTasksTasksMimeType$ = z.nativeEnum(GetTasksTasksMimeType);

/** @internal */
export namespace GetTasksCoverPhoto$ {
    export type Inbound = {
        id?: string | undefined;
        src?: string | undefined;
        altText?: string | undefined;
        width?: number | undefined;
        height?: number | undefined;
        thumbnailSrc?: string | undefined;
        caption?: string | undefined;
        title?: string | undefined;
        mimeType?: GetTasksTasksMimeType | undefined;
        tags?: Array<string> | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<GetTasksCoverPhoto, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            src: z.string().optional(),
            altText: z.string().optional(),
            width: z.number().optional(),
            height: z.number().optional(),
            thumbnailSrc: z.string().optional(),
            caption: z.string().optional(),
            title: z.string().optional(),
            mimeType: GetTasksTasksMimeType$.optional(),
            tags: z.array(z.string()).optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.src === undefined ? null : { src: v.src }),
                ...(v.altText === undefined ? null : { altText: v.altText }),
                ...(v.width === undefined ? null : { width: v.width }),
                ...(v.height === undefined ? null : { height: v.height }),
                ...(v.thumbnailSrc === undefined ? null : { thumbnailSrc: v.thumbnailSrc }),
                ...(v.caption === undefined ? null : { caption: v.caption }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.mimeType === undefined ? null : { mimeType: v.mimeType }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        src?: string | undefined;
        altText?: string | undefined;
        width?: number | undefined;
        height?: number | undefined;
        thumbnailSrc?: string | undefined;
        caption?: string | undefined;
        title?: string | undefined;
        mimeType?: GetTasksTasksMimeType | undefined;
        tags?: Array<string> | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetTasksCoverPhoto> = z
        .object({
            id: z.string().optional(),
            src: z.string().optional(),
            altText: z.string().optional(),
            width: z.number().optional(),
            height: z.number().optional(),
            thumbnailSrc: z.string().optional(),
            caption: z.string().optional(),
            title: z.string().optional(),
            mimeType: GetTasksTasksMimeType$.optional(),
            tags: z.array(z.string()).optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.src === undefined ? null : { src: v.src }),
                ...(v.altText === undefined ? null : { altText: v.altText }),
                ...(v.width === undefined ? null : { width: v.width }),
                ...(v.height === undefined ? null : { height: v.height }),
                ...(v.thumbnailSrc === undefined ? null : { thumbnailSrc: v.thumbnailSrc }),
                ...(v.caption === undefined ? null : { caption: v.caption }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.mimeType === undefined ? null : { mimeType: v.mimeType }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });
}

/** @internal */
export const GetTasksGender$ = z.nativeEnum(GetTasksGender);

/** @internal */
export const GetTasksType$ = z.nativeEnum(GetTasksType);

/** @internal */
export namespace GetTasksGeoLocation$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<GetTasksGeoLocation, z.ZodTypeDef, Inbound> = z.object(
        {}
    );

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetTasksGeoLocation> = z.object(
        {}
    );
}

/** @internal */
export namespace GetTasksTasksResponseCustomFields$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<
        GetTasksTasksResponseCustomFields,
        z.ZodTypeDef,
        Inbound
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetTasksTasksResponseCustomFields
    > = z.object({});
}

/** @internal */
export namespace GetTasksAddresses$ {
    export type Inbound = {
        id?: string | undefined;
        contactId?: string | undefined;
        accountId?: string | undefined;
        firstName?: string | undefined;
        lastName?: string | undefined;
        name?: string | undefined;
        companyName?: string | undefined;
        email?: string | undefined;
        phone?: string | undefined;
        street?: string | undefined;
        addressLine2?: string | undefined;
        city?: string | undefined;
        province?: string | undefined;
        region?: string | undefined;
        postalCode?: string | undefined;
        postalCodeExtension?: string | undefined;
        country?: string | undefined;
        countryCode?: string | undefined;
        type?: GetTasksType | undefined;
        geoLocation?: GetTasksGeoLocation$.Inbound | undefined;
        customFields?: Array<GetTasksTasksResponseCustomFields$.Inbound> | undefined;
        subdivisionCode?: string | undefined;
    };

    export const inboundSchema: z.ZodType<GetTasksAddresses, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            contactId: z.string().optional(),
            accountId: z.string().optional(),
            firstName: z.string().optional(),
            lastName: z.string().optional(),
            name: z.string().optional(),
            companyName: z.string().optional(),
            email: z.string().optional(),
            phone: z.string().optional(),
            street: z.string().optional(),
            addressLine2: z.string().optional(),
            city: z.string().optional(),
            province: z.string().optional(),
            region: z.string().optional(),
            postalCode: z.string().optional(),
            postalCodeExtension: z.string().optional(),
            country: z.string().optional(),
            countryCode: z.string().optional(),
            type: GetTasksType$.optional(),
            geoLocation: z.lazy(() => GetTasksGeoLocation$.inboundSchema).optional(),
            customFields: z
                .array(z.lazy(() => GetTasksTasksResponseCustomFields$.inboundSchema))
                .optional(),
            subdivisionCode: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.contactId === undefined ? null : { contactId: v.contactId }),
                ...(v.accountId === undefined ? null : { accountId: v.accountId }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.companyName === undefined ? null : { companyName: v.companyName }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.phone === undefined ? null : { phone: v.phone }),
                ...(v.street === undefined ? null : { street: v.street }),
                ...(v.addressLine2 === undefined ? null : { addressLine2: v.addressLine2 }),
                ...(v.city === undefined ? null : { city: v.city }),
                ...(v.province === undefined ? null : { province: v.province }),
                ...(v.region === undefined ? null : { region: v.region }),
                ...(v.postalCode === undefined ? null : { postalCode: v.postalCode }),
                ...(v.postalCodeExtension === undefined
                    ? null
                    : { postalCodeExtension: v.postalCodeExtension }),
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.countryCode === undefined ? null : { countryCode: v.countryCode }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.geoLocation === undefined ? null : { geoLocation: v.geoLocation }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                ...(v.subdivisionCode === undefined
                    ? null
                    : { subdivisionCode: v.subdivisionCode }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        contactId?: string | undefined;
        accountId?: string | undefined;
        firstName?: string | undefined;
        lastName?: string | undefined;
        name?: string | undefined;
        companyName?: string | undefined;
        email?: string | undefined;
        phone?: string | undefined;
        street?: string | undefined;
        addressLine2?: string | undefined;
        city?: string | undefined;
        province?: string | undefined;
        region?: string | undefined;
        postalCode?: string | undefined;
        postalCodeExtension?: string | undefined;
        country?: string | undefined;
        countryCode?: string | undefined;
        type?: GetTasksType | undefined;
        geoLocation?: GetTasksGeoLocation$.Outbound | undefined;
        customFields?: Array<GetTasksTasksResponseCustomFields$.Outbound> | undefined;
        subdivisionCode?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetTasksAddresses> = z
        .object({
            id: z.string().optional(),
            contactId: z.string().optional(),
            accountId: z.string().optional(),
            firstName: z.string().optional(),
            lastName: z.string().optional(),
            name: z.string().optional(),
            companyName: z.string().optional(),
            email: z.string().optional(),
            phone: z.string().optional(),
            street: z.string().optional(),
            addressLine2: z.string().optional(),
            city: z.string().optional(),
            province: z.string().optional(),
            region: z.string().optional(),
            postalCode: z.string().optional(),
            postalCodeExtension: z.string().optional(),
            country: z.string().optional(),
            countryCode: z.string().optional(),
            type: GetTasksType$.optional(),
            geoLocation: z.lazy(() => GetTasksGeoLocation$.outboundSchema).optional(),
            customFields: z
                .array(z.lazy(() => GetTasksTasksResponseCustomFields$.outboundSchema))
                .optional(),
            subdivisionCode: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.contactId === undefined ? null : { contactId: v.contactId }),
                ...(v.accountId === undefined ? null : { accountId: v.accountId }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.companyName === undefined ? null : { companyName: v.companyName }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.phone === undefined ? null : { phone: v.phone }),
                ...(v.street === undefined ? null : { street: v.street }),
                ...(v.addressLine2 === undefined ? null : { addressLine2: v.addressLine2 }),
                ...(v.city === undefined ? null : { city: v.city }),
                ...(v.province === undefined ? null : { province: v.province }),
                ...(v.region === undefined ? null : { region: v.region }),
                ...(v.postalCode === undefined ? null : { postalCode: v.postalCode }),
                ...(v.postalCodeExtension === undefined
                    ? null
                    : { postalCodeExtension: v.postalCodeExtension }),
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.countryCode === undefined ? null : { countryCode: v.countryCode }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.geoLocation === undefined ? null : { geoLocation: v.geoLocation }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                ...(v.subdivisionCode === undefined
                    ? null
                    : { subdivisionCode: v.subdivisionCode }),
            };
        });
}

/** @internal */
export const GetTasksRoles$ = z.nativeEnum(GetTasksRoles);

/** @internal */
export const GetTasksCommunications$ = z.nativeEnum(GetTasksCommunications);

/** @internal */
export namespace GetTasksPreferences$ {
    export type Inbound = {
        id?: string | undefined;
        language?: string | undefined;
        currency?: string | undefined;
        timeZone?: string | undefined;
        communications?: GetTasksCommunications | undefined;
    };

    export const inboundSchema: z.ZodType<GetTasksPreferences, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            language: z.string().optional(),
            currency: z.string().optional(),
            timeZone: z.string().optional(),
            communications: GetTasksCommunications$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.language === undefined ? null : { language: v.language }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.timeZone === undefined ? null : { timeZone: v.timeZone }),
                ...(v.communications === undefined ? null : { communications: v.communications }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        language?: string | undefined;
        currency?: string | undefined;
        timeZone?: string | undefined;
        communications?: GetTasksCommunications | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetTasksPreferences> = z
        .object({
            id: z.string().optional(),
            language: z.string().optional(),
            currency: z.string().optional(),
            timeZone: z.string().optional(),
            communications: GetTasksCommunications$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.language === undefined ? null : { language: v.language }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.timeZone === undefined ? null : { timeZone: v.timeZone }),
                ...(v.communications === undefined ? null : { communications: v.communications }),
            };
        });
}

/** @internal */
export const GetTasksTasksType$ = z.nativeEnum(GetTasksTasksType);

/** @internal */
export const GetTasksTasksResponse200ApplicationJSONResponseBodyUnifiedAssigneeType$ = z.nativeEnum(
    GetTasksTasksResponse200ApplicationJSONResponseBodyUnifiedAssigneeType
);

/** @internal */
export namespace GetTasksAdditionalInfo$ {
    export type Inbound = {
        id?: string | undefined;
        key?: string | undefined;
        value?: string | undefined;
        type?: GetTasksTasksResponse200ApplicationJSONResponseBodyUnifiedAssigneeType | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        entityId?: string | undefined;
        entityType?: string | undefined;
    };

    export const inboundSchema: z.ZodType<GetTasksAdditionalInfo, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            key: z.string().optional(),
            value: z.string().optional(),
            type: GetTasksTasksResponse200ApplicationJSONResponseBodyUnifiedAssigneeType$.optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            entityId: z.string().optional(),
            entityType: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.key === undefined ? null : { key: v.key }),
                ...(v.value === undefined ? null : { value: v.value }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.entityId === undefined ? null : { entityId: v.entityId }),
                ...(v.entityType === undefined ? null : { entityType: v.entityType }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        key?: string | undefined;
        value?: string | undefined;
        type?: GetTasksTasksResponse200ApplicationJSONResponseBodyUnifiedAssigneeType | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        entityId?: string | undefined;
        entityType?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetTasksAdditionalInfo> = z
        .object({
            id: z.string().optional(),
            key: z.string().optional(),
            value: z.string().optional(),
            type: GetTasksTasksResponse200ApplicationJSONResponseBodyUnifiedAssigneeType$.optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            entityId: z.string().optional(),
            entityType: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.key === undefined ? null : { key: v.key }),
                ...(v.value === undefined ? null : { value: v.value }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.entityId === undefined ? null : { entityId: v.entityId }),
                ...(v.entityType === undefined ? null : { entityType: v.entityType }),
            };
        });
}

/** @internal */
export namespace GetTasksSocialLinks$ {
    export type Inbound = {
        type?: GetTasksTasksType | undefined;
        username?: string | undefined;
        displayName?: string | undefined;
        url?: string | undefined;
        avatarUrl?: string | undefined;
        email?: string | undefined;
        additionalInfo?: GetTasksAdditionalInfo$.Inbound | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<GetTasksSocialLinks, z.ZodTypeDef, Inbound> = z
        .object({
            type: GetTasksTasksType$.optional(),
            username: z.string().optional(),
            displayName: z.string().optional(),
            url: z.string().optional(),
            avatarUrl: z.string().optional(),
            email: z.string().optional(),
            additionalInfo: z.lazy(() => GetTasksAdditionalInfo$.inboundSchema).optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.username === undefined ? null : { username: v.username }),
                ...(v.displayName === undefined ? null : { displayName: v.displayName }),
                ...(v.url === undefined ? null : { url: v.url }),
                ...(v.avatarUrl === undefined ? null : { avatarUrl: v.avatarUrl }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.additionalInfo === undefined ? null : { additionalInfo: v.additionalInfo }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });

    export type Outbound = {
        type?: GetTasksTasksType | undefined;
        username?: string | undefined;
        displayName?: string | undefined;
        url?: string | undefined;
        avatarUrl?: string | undefined;
        email?: string | undefined;
        additionalInfo?: GetTasksAdditionalInfo$.Outbound | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetTasksSocialLinks> = z
        .object({
            type: GetTasksTasksType$.optional(),
            username: z.string().optional(),
            displayName: z.string().optional(),
            url: z.string().optional(),
            avatarUrl: z.string().optional(),
            email: z.string().optional(),
            additionalInfo: z.lazy(() => GetTasksAdditionalInfo$.outboundSchema).optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.username === undefined ? null : { username: v.username }),
                ...(v.displayName === undefined ? null : { displayName: v.displayName }),
                ...(v.url === undefined ? null : { url: v.url }),
                ...(v.avatarUrl === undefined ? null : { avatarUrl: v.avatarUrl }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.additionalInfo === undefined ? null : { additionalInfo: v.additionalInfo }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });
}

/** @internal */
export const GetTasksTasksStatus$ = z.nativeEnum(GetTasksTasksStatus);

/** @internal */
export const GetTasksProvider$ = z.nativeEnum(GetTasksProvider);

/** @internal */
export namespace GetTasksSso$ {
    export type Inbound = {
        provider?: GetTasksProvider | undefined;
        providerUserId?: string | undefined;
        profileUrl?: string | undefined;
        accessToken?: string | undefined;
        refreshToken?: string | undefined;
        expiresIn?: number | undefined;
        expiryDate?: number | undefined;
        scopes?: Array<string> | undefined;
        tokenType?: string | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<GetTasksSso, z.ZodTypeDef, Inbound> = z
        .object({
            provider: GetTasksProvider$.optional(),
            providerUserId: z.string().optional(),
            profileUrl: z.string().optional(),
            accessToken: z.string().optional(),
            refreshToken: z.string().optional(),
            expiresIn: z.number().optional(),
            expiryDate: z.number().optional(),
            scopes: z.array(z.string()).optional(),
            tokenType: z.string().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.provider === undefined ? null : { provider: v.provider }),
                ...(v.providerUserId === undefined ? null : { providerUserId: v.providerUserId }),
                ...(v.profileUrl === undefined ? null : { profileUrl: v.profileUrl }),
                ...(v.accessToken === undefined ? null : { accessToken: v.accessToken }),
                ...(v.refreshToken === undefined ? null : { refreshToken: v.refreshToken }),
                ...(v.expiresIn === undefined ? null : { expiresIn: v.expiresIn }),
                ...(v.expiryDate === undefined ? null : { expiryDate: v.expiryDate }),
                ...(v.scopes === undefined ? null : { scopes: v.scopes }),
                ...(v.tokenType === undefined ? null : { tokenType: v.tokenType }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });

    export type Outbound = {
        provider?: GetTasksProvider | undefined;
        providerUserId?: string | undefined;
        profileUrl?: string | undefined;
        accessToken?: string | undefined;
        refreshToken?: string | undefined;
        expiresIn?: number | undefined;
        expiryDate?: number | undefined;
        scopes?: Array<string> | undefined;
        tokenType?: string | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetTasksSso> = z
        .object({
            provider: GetTasksProvider$.optional(),
            providerUserId: z.string().optional(),
            profileUrl: z.string().optional(),
            accessToken: z.string().optional(),
            refreshToken: z.string().optional(),
            expiresIn: z.number().optional(),
            expiryDate: z.number().optional(),
            scopes: z.array(z.string()).optional(),
            tokenType: z.string().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.provider === undefined ? null : { provider: v.provider }),
                ...(v.providerUserId === undefined ? null : { providerUserId: v.providerUserId }),
                ...(v.profileUrl === undefined ? null : { profileUrl: v.profileUrl }),
                ...(v.accessToken === undefined ? null : { accessToken: v.accessToken }),
                ...(v.refreshToken === undefined ? null : { refreshToken: v.refreshToken }),
                ...(v.expiresIn === undefined ? null : { expiresIn: v.expiresIn }),
                ...(v.expiryDate === undefined ? null : { expiryDate: v.expiryDate }),
                ...(v.scopes === undefined ? null : { scopes: v.scopes }),
                ...(v.tokenType === undefined ? null : { tokenType: v.tokenType }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });
}

/** @internal */
export const GetTasksTasksResponseType$ = z.nativeEnum(GetTasksTasksResponseType);

/** @internal */
export namespace GetTasksPaymentMethods$ {
    export type Inbound = {
        id?: string | undefined;
        type?: GetTasksTasksResponseType | undefined;
        details?: string | undefined;
        isDefault?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<GetTasksPaymentMethods, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            type: GetTasksTasksResponseType$.optional(),
            details: z.string().optional(),
            isDefault: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.details === undefined ? null : { details: v.details }),
                ...(v.isDefault === undefined ? null : { isDefault: v.isDefault }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        type?: GetTasksTasksResponseType | undefined;
        details?: string | undefined;
        isDefault?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetTasksPaymentMethods> = z
        .object({
            id: z.string().optional(),
            type: GetTasksTasksResponseType$.optional(),
            details: z.string().optional(),
            isDefault: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.details === undefined ? null : { details: v.details }),
                ...(v.isDefault === undefined ? null : { isDefault: v.isDefault }),
            };
        });
}

/** @internal */
export namespace GetTasksAssignee$ {
    export type Inbound = {
        id?: string | undefined;
        firstName?: string | undefined;
        middleName?: string | undefined;
        lastName?: string | undefined;
        email?: string | undefined;
        username?: string | undefined;
        password?: string | undefined;
        profilePicture?: GetTasksProfilePicture$.Inbound | undefined;
        coverPhoto?: GetTasksCoverPhoto$.Inbound | undefined;
        gender?: GetTasksGender | undefined;
        dateOfBirth?: number | undefined;
        phoneNumber?: string | undefined;
        isActive?: boolean | undefined;
        lastLogin?: number | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        addresses?: Array<GetTasksAddresses$.Inbound> | undefined;
        roles?: Array<GetTasksRoles> | undefined;
        preferences?: GetTasksPreferences$.Inbound | undefined;
        bio?: string | undefined;
        website?: string | undefined;
        socialLinks?: GetTasksSocialLinks$.Inbound | undefined;
        status?: GetTasksTasksStatus | undefined;
        sso?: Array<GetTasksSso$.Inbound> | undefined;
        paymentMethods?: GetTasksPaymentMethods$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<GetTasksAssignee, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            firstName: z.string().optional(),
            middleName: z.string().optional(),
            lastName: z.string().optional(),
            email: z.string().optional(),
            username: z.string().optional(),
            password: z.string().optional(),
            profilePicture: z.lazy(() => GetTasksProfilePicture$.inboundSchema).optional(),
            coverPhoto: z.lazy(() => GetTasksCoverPhoto$.inboundSchema).optional(),
            gender: GetTasksGender$.optional(),
            dateOfBirth: z.number().optional(),
            phoneNumber: z.string().optional(),
            isActive: z.boolean().optional(),
            lastLogin: z.number().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            addresses: z.array(z.lazy(() => GetTasksAddresses$.inboundSchema)).optional(),
            roles: z.array(GetTasksRoles$).optional(),
            preferences: z.lazy(() => GetTasksPreferences$.inboundSchema).optional(),
            bio: z.string().optional(),
            website: z.string().optional(),
            socialLinks: z.lazy(() => GetTasksSocialLinks$.inboundSchema).optional(),
            status: GetTasksTasksStatus$.optional(),
            sso: z.array(z.lazy(() => GetTasksSso$.inboundSchema)).optional(),
            paymentMethods: z.lazy(() => GetTasksPaymentMethods$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.middleName === undefined ? null : { middleName: v.middleName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.username === undefined ? null : { username: v.username }),
                ...(v.password === undefined ? null : { password: v.password }),
                ...(v.profilePicture === undefined ? null : { profilePicture: v.profilePicture }),
                ...(v.coverPhoto === undefined ? null : { coverPhoto: v.coverPhoto }),
                ...(v.gender === undefined ? null : { gender: v.gender }),
                ...(v.dateOfBirth === undefined ? null : { dateOfBirth: v.dateOfBirth }),
                ...(v.phoneNumber === undefined ? null : { phoneNumber: v.phoneNumber }),
                ...(v.isActive === undefined ? null : { isActive: v.isActive }),
                ...(v.lastLogin === undefined ? null : { lastLogin: v.lastLogin }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.addresses === undefined ? null : { addresses: v.addresses }),
                ...(v.roles === undefined ? null : { roles: v.roles }),
                ...(v.preferences === undefined ? null : { preferences: v.preferences }),
                ...(v.bio === undefined ? null : { bio: v.bio }),
                ...(v.website === undefined ? null : { website: v.website }),
                ...(v.socialLinks === undefined ? null : { socialLinks: v.socialLinks }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.sso === undefined ? null : { sso: v.sso }),
                ...(v.paymentMethods === undefined ? null : { paymentMethods: v.paymentMethods }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        firstName?: string | undefined;
        middleName?: string | undefined;
        lastName?: string | undefined;
        email?: string | undefined;
        username?: string | undefined;
        password?: string | undefined;
        profilePicture?: GetTasksProfilePicture$.Outbound | undefined;
        coverPhoto?: GetTasksCoverPhoto$.Outbound | undefined;
        gender?: GetTasksGender | undefined;
        dateOfBirth?: number | undefined;
        phoneNumber?: string | undefined;
        isActive?: boolean | undefined;
        lastLogin?: number | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        addresses?: Array<GetTasksAddresses$.Outbound> | undefined;
        roles?: Array<GetTasksRoles> | undefined;
        preferences?: GetTasksPreferences$.Outbound | undefined;
        bio?: string | undefined;
        website?: string | undefined;
        socialLinks?: GetTasksSocialLinks$.Outbound | undefined;
        status?: GetTasksTasksStatus | undefined;
        sso?: Array<GetTasksSso$.Outbound> | undefined;
        paymentMethods?: GetTasksPaymentMethods$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetTasksAssignee> = z
        .object({
            id: z.string().optional(),
            firstName: z.string().optional(),
            middleName: z.string().optional(),
            lastName: z.string().optional(),
            email: z.string().optional(),
            username: z.string().optional(),
            password: z.string().optional(),
            profilePicture: z.lazy(() => GetTasksProfilePicture$.outboundSchema).optional(),
            coverPhoto: z.lazy(() => GetTasksCoverPhoto$.outboundSchema).optional(),
            gender: GetTasksGender$.optional(),
            dateOfBirth: z.number().optional(),
            phoneNumber: z.string().optional(),
            isActive: z.boolean().optional(),
            lastLogin: z.number().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            addresses: z.array(z.lazy(() => GetTasksAddresses$.outboundSchema)).optional(),
            roles: z.array(GetTasksRoles$).optional(),
            preferences: z.lazy(() => GetTasksPreferences$.outboundSchema).optional(),
            bio: z.string().optional(),
            website: z.string().optional(),
            socialLinks: z.lazy(() => GetTasksSocialLinks$.outboundSchema).optional(),
            status: GetTasksTasksStatus$.optional(),
            sso: z.array(z.lazy(() => GetTasksSso$.outboundSchema)).optional(),
            paymentMethods: z.lazy(() => GetTasksPaymentMethods$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.middleName === undefined ? null : { middleName: v.middleName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.username === undefined ? null : { username: v.username }),
                ...(v.password === undefined ? null : { password: v.password }),
                ...(v.profilePicture === undefined ? null : { profilePicture: v.profilePicture }),
                ...(v.coverPhoto === undefined ? null : { coverPhoto: v.coverPhoto }),
                ...(v.gender === undefined ? null : { gender: v.gender }),
                ...(v.dateOfBirth === undefined ? null : { dateOfBirth: v.dateOfBirth }),
                ...(v.phoneNumber === undefined ? null : { phoneNumber: v.phoneNumber }),
                ...(v.isActive === undefined ? null : { isActive: v.isActive }),
                ...(v.lastLogin === undefined ? null : { lastLogin: v.lastLogin }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.addresses === undefined ? null : { addresses: v.addresses }),
                ...(v.roles === undefined ? null : { roles: v.roles }),
                ...(v.preferences === undefined ? null : { preferences: v.preferences }),
                ...(v.bio === undefined ? null : { bio: v.bio }),
                ...(v.website === undefined ? null : { website: v.website }),
                ...(v.socialLinks === undefined ? null : { socialLinks: v.socialLinks }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.sso === undefined ? null : { sso: v.sso }),
                ...(v.paymentMethods === undefined ? null : { paymentMethods: v.paymentMethods }),
            };
        });
}

/** @internal */
export const GetTasksTasksResponseMimeType$ = z.nativeEnum(GetTasksTasksResponseMimeType);

/** @internal */
export namespace GetTasksTasksProfilePicture$ {
    export type Inbound = {
        id?: string | undefined;
        src?: string | undefined;
        altText?: string | undefined;
        width?: number | undefined;
        height?: number | undefined;
        thumbnailSrc?: string | undefined;
        caption?: string | undefined;
        title?: string | undefined;
        mimeType?: GetTasksTasksResponseMimeType | undefined;
        tags?: Array<string> | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<GetTasksTasksProfilePicture, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            src: z.string().optional(),
            altText: z.string().optional(),
            width: z.number().optional(),
            height: z.number().optional(),
            thumbnailSrc: z.string().optional(),
            caption: z.string().optional(),
            title: z.string().optional(),
            mimeType: GetTasksTasksResponseMimeType$.optional(),
            tags: z.array(z.string()).optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.src === undefined ? null : { src: v.src }),
                ...(v.altText === undefined ? null : { altText: v.altText }),
                ...(v.width === undefined ? null : { width: v.width }),
                ...(v.height === undefined ? null : { height: v.height }),
                ...(v.thumbnailSrc === undefined ? null : { thumbnailSrc: v.thumbnailSrc }),
                ...(v.caption === undefined ? null : { caption: v.caption }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.mimeType === undefined ? null : { mimeType: v.mimeType }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        src?: string | undefined;
        altText?: string | undefined;
        width?: number | undefined;
        height?: number | undefined;
        thumbnailSrc?: string | undefined;
        caption?: string | undefined;
        title?: string | undefined;
        mimeType?: GetTasksTasksResponseMimeType | undefined;
        tags?: Array<string> | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetTasksTasksProfilePicture> = z
        .object({
            id: z.string().optional(),
            src: z.string().optional(),
            altText: z.string().optional(),
            width: z.number().optional(),
            height: z.number().optional(),
            thumbnailSrc: z.string().optional(),
            caption: z.string().optional(),
            title: z.string().optional(),
            mimeType: GetTasksTasksResponseMimeType$.optional(),
            tags: z.array(z.string()).optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.src === undefined ? null : { src: v.src }),
                ...(v.altText === undefined ? null : { altText: v.altText }),
                ...(v.width === undefined ? null : { width: v.width }),
                ...(v.height === undefined ? null : { height: v.height }),
                ...(v.thumbnailSrc === undefined ? null : { thumbnailSrc: v.thumbnailSrc }),
                ...(v.caption === undefined ? null : { caption: v.caption }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.mimeType === undefined ? null : { mimeType: v.mimeType }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });
}

/** @internal */
export const GetTasksTasksResponse200MimeType$ = z.nativeEnum(GetTasksTasksResponse200MimeType);

/** @internal */
export namespace GetTasksTasksCoverPhoto$ {
    export type Inbound = {
        id?: string | undefined;
        src?: string | undefined;
        altText?: string | undefined;
        width?: number | undefined;
        height?: number | undefined;
        thumbnailSrc?: string | undefined;
        caption?: string | undefined;
        title?: string | undefined;
        mimeType?: GetTasksTasksResponse200MimeType | undefined;
        tags?: Array<string> | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<GetTasksTasksCoverPhoto, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            src: z.string().optional(),
            altText: z.string().optional(),
            width: z.number().optional(),
            height: z.number().optional(),
            thumbnailSrc: z.string().optional(),
            caption: z.string().optional(),
            title: z.string().optional(),
            mimeType: GetTasksTasksResponse200MimeType$.optional(),
            tags: z.array(z.string()).optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.src === undefined ? null : { src: v.src }),
                ...(v.altText === undefined ? null : { altText: v.altText }),
                ...(v.width === undefined ? null : { width: v.width }),
                ...(v.height === undefined ? null : { height: v.height }),
                ...(v.thumbnailSrc === undefined ? null : { thumbnailSrc: v.thumbnailSrc }),
                ...(v.caption === undefined ? null : { caption: v.caption }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.mimeType === undefined ? null : { mimeType: v.mimeType }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        src?: string | undefined;
        altText?: string | undefined;
        width?: number | undefined;
        height?: number | undefined;
        thumbnailSrc?: string | undefined;
        caption?: string | undefined;
        title?: string | undefined;
        mimeType?: GetTasksTasksResponse200MimeType | undefined;
        tags?: Array<string> | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetTasksTasksCoverPhoto> = z
        .object({
            id: z.string().optional(),
            src: z.string().optional(),
            altText: z.string().optional(),
            width: z.number().optional(),
            height: z.number().optional(),
            thumbnailSrc: z.string().optional(),
            caption: z.string().optional(),
            title: z.string().optional(),
            mimeType: GetTasksTasksResponse200MimeType$.optional(),
            tags: z.array(z.string()).optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.src === undefined ? null : { src: v.src }),
                ...(v.altText === undefined ? null : { altText: v.altText }),
                ...(v.width === undefined ? null : { width: v.width }),
                ...(v.height === undefined ? null : { height: v.height }),
                ...(v.thumbnailSrc === undefined ? null : { thumbnailSrc: v.thumbnailSrc }),
                ...(v.caption === undefined ? null : { caption: v.caption }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.mimeType === undefined ? null : { mimeType: v.mimeType }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });
}

/** @internal */
export const GetTasksTasksGender$ = z.nativeEnum(GetTasksTasksGender);

/** @internal */
export const GetTasksTasksResponse200Type$ = z.nativeEnum(GetTasksTasksResponse200Type);

/** @internal */
export namespace GetTasksTasksGeoLocation$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<GetTasksTasksGeoLocation, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetTasksTasksGeoLocation> =
        z.object({});
}

/** @internal */
export namespace GetTasksTasksResponse200CustomFields$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<
        GetTasksTasksResponse200CustomFields,
        z.ZodTypeDef,
        Inbound
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetTasksTasksResponse200CustomFields
    > = z.object({});
}

/** @internal */
export namespace GetTasksTasksAddresses$ {
    export type Inbound = {
        id?: string | undefined;
        contactId?: string | undefined;
        accountId?: string | undefined;
        firstName?: string | undefined;
        lastName?: string | undefined;
        name?: string | undefined;
        companyName?: string | undefined;
        email?: string | undefined;
        phone?: string | undefined;
        street?: string | undefined;
        addressLine2?: string | undefined;
        city?: string | undefined;
        province?: string | undefined;
        region?: string | undefined;
        postalCode?: string | undefined;
        postalCodeExtension?: string | undefined;
        country?: string | undefined;
        countryCode?: string | undefined;
        type?: GetTasksTasksResponse200Type | undefined;
        geoLocation?: GetTasksTasksGeoLocation$.Inbound | undefined;
        customFields?: Array<GetTasksTasksResponse200CustomFields$.Inbound> | undefined;
        subdivisionCode?: string | undefined;
    };

    export const inboundSchema: z.ZodType<GetTasksTasksAddresses, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            contactId: z.string().optional(),
            accountId: z.string().optional(),
            firstName: z.string().optional(),
            lastName: z.string().optional(),
            name: z.string().optional(),
            companyName: z.string().optional(),
            email: z.string().optional(),
            phone: z.string().optional(),
            street: z.string().optional(),
            addressLine2: z.string().optional(),
            city: z.string().optional(),
            province: z.string().optional(),
            region: z.string().optional(),
            postalCode: z.string().optional(),
            postalCodeExtension: z.string().optional(),
            country: z.string().optional(),
            countryCode: z.string().optional(),
            type: GetTasksTasksResponse200Type$.optional(),
            geoLocation: z.lazy(() => GetTasksTasksGeoLocation$.inboundSchema).optional(),
            customFields: z
                .array(z.lazy(() => GetTasksTasksResponse200CustomFields$.inboundSchema))
                .optional(),
            subdivisionCode: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.contactId === undefined ? null : { contactId: v.contactId }),
                ...(v.accountId === undefined ? null : { accountId: v.accountId }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.companyName === undefined ? null : { companyName: v.companyName }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.phone === undefined ? null : { phone: v.phone }),
                ...(v.street === undefined ? null : { street: v.street }),
                ...(v.addressLine2 === undefined ? null : { addressLine2: v.addressLine2 }),
                ...(v.city === undefined ? null : { city: v.city }),
                ...(v.province === undefined ? null : { province: v.province }),
                ...(v.region === undefined ? null : { region: v.region }),
                ...(v.postalCode === undefined ? null : { postalCode: v.postalCode }),
                ...(v.postalCodeExtension === undefined
                    ? null
                    : { postalCodeExtension: v.postalCodeExtension }),
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.countryCode === undefined ? null : { countryCode: v.countryCode }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.geoLocation === undefined ? null : { geoLocation: v.geoLocation }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                ...(v.subdivisionCode === undefined
                    ? null
                    : { subdivisionCode: v.subdivisionCode }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        contactId?: string | undefined;
        accountId?: string | undefined;
        firstName?: string | undefined;
        lastName?: string | undefined;
        name?: string | undefined;
        companyName?: string | undefined;
        email?: string | undefined;
        phone?: string | undefined;
        street?: string | undefined;
        addressLine2?: string | undefined;
        city?: string | undefined;
        province?: string | undefined;
        region?: string | undefined;
        postalCode?: string | undefined;
        postalCodeExtension?: string | undefined;
        country?: string | undefined;
        countryCode?: string | undefined;
        type?: GetTasksTasksResponse200Type | undefined;
        geoLocation?: GetTasksTasksGeoLocation$.Outbound | undefined;
        customFields?: Array<GetTasksTasksResponse200CustomFields$.Outbound> | undefined;
        subdivisionCode?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetTasksTasksAddresses> = z
        .object({
            id: z.string().optional(),
            contactId: z.string().optional(),
            accountId: z.string().optional(),
            firstName: z.string().optional(),
            lastName: z.string().optional(),
            name: z.string().optional(),
            companyName: z.string().optional(),
            email: z.string().optional(),
            phone: z.string().optional(),
            street: z.string().optional(),
            addressLine2: z.string().optional(),
            city: z.string().optional(),
            province: z.string().optional(),
            region: z.string().optional(),
            postalCode: z.string().optional(),
            postalCodeExtension: z.string().optional(),
            country: z.string().optional(),
            countryCode: z.string().optional(),
            type: GetTasksTasksResponse200Type$.optional(),
            geoLocation: z.lazy(() => GetTasksTasksGeoLocation$.outboundSchema).optional(),
            customFields: z
                .array(z.lazy(() => GetTasksTasksResponse200CustomFields$.outboundSchema))
                .optional(),
            subdivisionCode: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.contactId === undefined ? null : { contactId: v.contactId }),
                ...(v.accountId === undefined ? null : { accountId: v.accountId }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.companyName === undefined ? null : { companyName: v.companyName }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.phone === undefined ? null : { phone: v.phone }),
                ...(v.street === undefined ? null : { street: v.street }),
                ...(v.addressLine2 === undefined ? null : { addressLine2: v.addressLine2 }),
                ...(v.city === undefined ? null : { city: v.city }),
                ...(v.province === undefined ? null : { province: v.province }),
                ...(v.region === undefined ? null : { region: v.region }),
                ...(v.postalCode === undefined ? null : { postalCode: v.postalCode }),
                ...(v.postalCodeExtension === undefined
                    ? null
                    : { postalCodeExtension: v.postalCodeExtension }),
                ...(v.country === undefined ? null : { country: v.country }),
                ...(v.countryCode === undefined ? null : { countryCode: v.countryCode }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.geoLocation === undefined ? null : { geoLocation: v.geoLocation }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                ...(v.subdivisionCode === undefined
                    ? null
                    : { subdivisionCode: v.subdivisionCode }),
            };
        });
}

/** @internal */
export const GetTasksTasksRoles$ = z.nativeEnum(GetTasksTasksRoles);

/** @internal */
export const GetTasksTasksCommunications$ = z.nativeEnum(GetTasksTasksCommunications);

/** @internal */
export namespace GetTasksTasksPreferences$ {
    export type Inbound = {
        id?: string | undefined;
        language?: string | undefined;
        currency?: string | undefined;
        timeZone?: string | undefined;
        communications?: GetTasksTasksCommunications | undefined;
    };

    export const inboundSchema: z.ZodType<GetTasksTasksPreferences, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            language: z.string().optional(),
            currency: z.string().optional(),
            timeZone: z.string().optional(),
            communications: GetTasksTasksCommunications$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.language === undefined ? null : { language: v.language }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.timeZone === undefined ? null : { timeZone: v.timeZone }),
                ...(v.communications === undefined ? null : { communications: v.communications }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        language?: string | undefined;
        currency?: string | undefined;
        timeZone?: string | undefined;
        communications?: GetTasksTasksCommunications | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetTasksTasksPreferences> = z
        .object({
            id: z.string().optional(),
            language: z.string().optional(),
            currency: z.string().optional(),
            timeZone: z.string().optional(),
            communications: GetTasksTasksCommunications$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.language === undefined ? null : { language: v.language }),
                ...(v.currency === undefined ? null : { currency: v.currency }),
                ...(v.timeZone === undefined ? null : { timeZone: v.timeZone }),
                ...(v.communications === undefined ? null : { communications: v.communications }),
            };
        });
}

/** @internal */
export const GetTasksTasksResponse200ApplicationJSONType$ = z.nativeEnum(
    GetTasksTasksResponse200ApplicationJSONType
);

/** @internal */
export const GetTasksTasksResponse200ApplicationJSONResponseBodyUnifiedType$ = z.nativeEnum(
    GetTasksTasksResponse200ApplicationJSONResponseBodyUnifiedType
);

/** @internal */
export namespace GetTasksTasksAdditionalInfo$ {
    export type Inbound = {
        id?: string | undefined;
        key?: string | undefined;
        value?: string | undefined;
        type?: GetTasksTasksResponse200ApplicationJSONResponseBodyUnifiedType | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        entityId?: string | undefined;
        entityType?: string | undefined;
    };

    export const inboundSchema: z.ZodType<GetTasksTasksAdditionalInfo, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            key: z.string().optional(),
            value: z.string().optional(),
            type: GetTasksTasksResponse200ApplicationJSONResponseBodyUnifiedType$.optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            entityId: z.string().optional(),
            entityType: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.key === undefined ? null : { key: v.key }),
                ...(v.value === undefined ? null : { value: v.value }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.entityId === undefined ? null : { entityId: v.entityId }),
                ...(v.entityType === undefined ? null : { entityType: v.entityType }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        key?: string | undefined;
        value?: string | undefined;
        type?: GetTasksTasksResponse200ApplicationJSONResponseBodyUnifiedType | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        entityId?: string | undefined;
        entityType?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetTasksTasksAdditionalInfo> = z
        .object({
            id: z.string().optional(),
            key: z.string().optional(),
            value: z.string().optional(),
            type: GetTasksTasksResponse200ApplicationJSONResponseBodyUnifiedType$.optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            entityId: z.string().optional(),
            entityType: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.key === undefined ? null : { key: v.key }),
                ...(v.value === undefined ? null : { value: v.value }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.entityId === undefined ? null : { entityId: v.entityId }),
                ...(v.entityType === undefined ? null : { entityType: v.entityType }),
            };
        });
}

/** @internal */
export namespace GetTasksTasksSocialLinks$ {
    export type Inbound = {
        type?: GetTasksTasksResponse200ApplicationJSONType | undefined;
        username?: string | undefined;
        displayName?: string | undefined;
        url?: string | undefined;
        avatarUrl?: string | undefined;
        email?: string | undefined;
        additionalInfo?: GetTasksTasksAdditionalInfo$.Inbound | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<GetTasksTasksSocialLinks, z.ZodTypeDef, Inbound> = z
        .object({
            type: GetTasksTasksResponse200ApplicationJSONType$.optional(),
            username: z.string().optional(),
            displayName: z.string().optional(),
            url: z.string().optional(),
            avatarUrl: z.string().optional(),
            email: z.string().optional(),
            additionalInfo: z.lazy(() => GetTasksTasksAdditionalInfo$.inboundSchema).optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.username === undefined ? null : { username: v.username }),
                ...(v.displayName === undefined ? null : { displayName: v.displayName }),
                ...(v.url === undefined ? null : { url: v.url }),
                ...(v.avatarUrl === undefined ? null : { avatarUrl: v.avatarUrl }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.additionalInfo === undefined ? null : { additionalInfo: v.additionalInfo }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });

    export type Outbound = {
        type?: GetTasksTasksResponse200ApplicationJSONType | undefined;
        username?: string | undefined;
        displayName?: string | undefined;
        url?: string | undefined;
        avatarUrl?: string | undefined;
        email?: string | undefined;
        additionalInfo?: GetTasksTasksAdditionalInfo$.Outbound | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetTasksTasksSocialLinks> = z
        .object({
            type: GetTasksTasksResponse200ApplicationJSONType$.optional(),
            username: z.string().optional(),
            displayName: z.string().optional(),
            url: z.string().optional(),
            avatarUrl: z.string().optional(),
            email: z.string().optional(),
            additionalInfo: z.lazy(() => GetTasksTasksAdditionalInfo$.outboundSchema).optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.username === undefined ? null : { username: v.username }),
                ...(v.displayName === undefined ? null : { displayName: v.displayName }),
                ...(v.url === undefined ? null : { url: v.url }),
                ...(v.avatarUrl === undefined ? null : { avatarUrl: v.avatarUrl }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.additionalInfo === undefined ? null : { additionalInfo: v.additionalInfo }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });
}

/** @internal */
export const GetTasksTasksResponseStatus$ = z.nativeEnum(GetTasksTasksResponseStatus);

/** @internal */
export const GetTasksTasksProvider$ = z.nativeEnum(GetTasksTasksProvider);

/** @internal */
export namespace GetTasksTasksSso$ {
    export type Inbound = {
        provider?: GetTasksTasksProvider | undefined;
        providerUserId?: string | undefined;
        profileUrl?: string | undefined;
        accessToken?: string | undefined;
        refreshToken?: string | undefined;
        expiresIn?: number | undefined;
        expiryDate?: number | undefined;
        scopes?: Array<string> | undefined;
        tokenType?: string | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<GetTasksTasksSso, z.ZodTypeDef, Inbound> = z
        .object({
            provider: GetTasksTasksProvider$.optional(),
            providerUserId: z.string().optional(),
            profileUrl: z.string().optional(),
            accessToken: z.string().optional(),
            refreshToken: z.string().optional(),
            expiresIn: z.number().optional(),
            expiryDate: z.number().optional(),
            scopes: z.array(z.string()).optional(),
            tokenType: z.string().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.provider === undefined ? null : { provider: v.provider }),
                ...(v.providerUserId === undefined ? null : { providerUserId: v.providerUserId }),
                ...(v.profileUrl === undefined ? null : { profileUrl: v.profileUrl }),
                ...(v.accessToken === undefined ? null : { accessToken: v.accessToken }),
                ...(v.refreshToken === undefined ? null : { refreshToken: v.refreshToken }),
                ...(v.expiresIn === undefined ? null : { expiresIn: v.expiresIn }),
                ...(v.expiryDate === undefined ? null : { expiryDate: v.expiryDate }),
                ...(v.scopes === undefined ? null : { scopes: v.scopes }),
                ...(v.tokenType === undefined ? null : { tokenType: v.tokenType }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });

    export type Outbound = {
        provider?: GetTasksTasksProvider | undefined;
        providerUserId?: string | undefined;
        profileUrl?: string | undefined;
        accessToken?: string | undefined;
        refreshToken?: string | undefined;
        expiresIn?: number | undefined;
        expiryDate?: number | undefined;
        scopes?: Array<string> | undefined;
        tokenType?: string | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetTasksTasksSso> = z
        .object({
            provider: GetTasksTasksProvider$.optional(),
            providerUserId: z.string().optional(),
            profileUrl: z.string().optional(),
            accessToken: z.string().optional(),
            refreshToken: z.string().optional(),
            expiresIn: z.number().optional(),
            expiryDate: z.number().optional(),
            scopes: z.array(z.string()).optional(),
            tokenType: z.string().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.provider === undefined ? null : { provider: v.provider }),
                ...(v.providerUserId === undefined ? null : { providerUserId: v.providerUserId }),
                ...(v.profileUrl === undefined ? null : { profileUrl: v.profileUrl }),
                ...(v.accessToken === undefined ? null : { accessToken: v.accessToken }),
                ...(v.refreshToken === undefined ? null : { refreshToken: v.refreshToken }),
                ...(v.expiresIn === undefined ? null : { expiresIn: v.expiresIn }),
                ...(v.expiryDate === undefined ? null : { expiryDate: v.expiryDate }),
                ...(v.scopes === undefined ? null : { scopes: v.scopes }),
                ...(v.tokenType === undefined ? null : { tokenType: v.tokenType }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });
}

/** @internal */
export const GetTasksTasksResponse200ApplicationJSONResponseBodyType$ = z.nativeEnum(
    GetTasksTasksResponse200ApplicationJSONResponseBodyType
);

/** @internal */
export namespace GetTasksTasksPaymentMethods$ {
    export type Inbound = {
        id?: string | undefined;
        type?: GetTasksTasksResponse200ApplicationJSONResponseBodyType | undefined;
        details?: string | undefined;
        isDefault?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<GetTasksTasksPaymentMethods, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            type: GetTasksTasksResponse200ApplicationJSONResponseBodyType$.optional(),
            details: z.string().optional(),
            isDefault: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.details === undefined ? null : { details: v.details }),
                ...(v.isDefault === undefined ? null : { isDefault: v.isDefault }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        type?: GetTasksTasksResponse200ApplicationJSONResponseBodyType | undefined;
        details?: string | undefined;
        isDefault?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetTasksTasksPaymentMethods> = z
        .object({
            id: z.string().optional(),
            type: GetTasksTasksResponse200ApplicationJSONResponseBodyType$.optional(),
            details: z.string().optional(),
            isDefault: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.details === undefined ? null : { details: v.details }),
                ...(v.isDefault === undefined ? null : { isDefault: v.isDefault }),
            };
        });
}

/** @internal */
export namespace GetTasksCreatedBy$ {
    export type Inbound = {
        id?: string | undefined;
        firstName?: string | undefined;
        middleName?: string | undefined;
        lastName?: string | undefined;
        email?: string | undefined;
        username?: string | undefined;
        password?: string | undefined;
        profilePicture?: GetTasksTasksProfilePicture$.Inbound | undefined;
        coverPhoto?: GetTasksTasksCoverPhoto$.Inbound | undefined;
        gender?: GetTasksTasksGender | undefined;
        dateOfBirth?: number | undefined;
        phoneNumber?: string | undefined;
        isActive?: boolean | undefined;
        lastLogin?: number | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        addresses?: Array<GetTasksTasksAddresses$.Inbound> | undefined;
        roles?: Array<GetTasksTasksRoles> | undefined;
        preferences?: GetTasksTasksPreferences$.Inbound | undefined;
        bio?: string | undefined;
        website?: string | undefined;
        socialLinks?: GetTasksTasksSocialLinks$.Inbound | undefined;
        status?: GetTasksTasksResponseStatus | undefined;
        sso?: Array<GetTasksTasksSso$.Inbound> | undefined;
        paymentMethods?: GetTasksTasksPaymentMethods$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<GetTasksCreatedBy, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            firstName: z.string().optional(),
            middleName: z.string().optional(),
            lastName: z.string().optional(),
            email: z.string().optional(),
            username: z.string().optional(),
            password: z.string().optional(),
            profilePicture: z.lazy(() => GetTasksTasksProfilePicture$.inboundSchema).optional(),
            coverPhoto: z.lazy(() => GetTasksTasksCoverPhoto$.inboundSchema).optional(),
            gender: GetTasksTasksGender$.optional(),
            dateOfBirth: z.number().optional(),
            phoneNumber: z.string().optional(),
            isActive: z.boolean().optional(),
            lastLogin: z.number().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            addresses: z.array(z.lazy(() => GetTasksTasksAddresses$.inboundSchema)).optional(),
            roles: z.array(GetTasksTasksRoles$).optional(),
            preferences: z.lazy(() => GetTasksTasksPreferences$.inboundSchema).optional(),
            bio: z.string().optional(),
            website: z.string().optional(),
            socialLinks: z.lazy(() => GetTasksTasksSocialLinks$.inboundSchema).optional(),
            status: GetTasksTasksResponseStatus$.optional(),
            sso: z.array(z.lazy(() => GetTasksTasksSso$.inboundSchema)).optional(),
            paymentMethods: z.lazy(() => GetTasksTasksPaymentMethods$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.middleName === undefined ? null : { middleName: v.middleName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.username === undefined ? null : { username: v.username }),
                ...(v.password === undefined ? null : { password: v.password }),
                ...(v.profilePicture === undefined ? null : { profilePicture: v.profilePicture }),
                ...(v.coverPhoto === undefined ? null : { coverPhoto: v.coverPhoto }),
                ...(v.gender === undefined ? null : { gender: v.gender }),
                ...(v.dateOfBirth === undefined ? null : { dateOfBirth: v.dateOfBirth }),
                ...(v.phoneNumber === undefined ? null : { phoneNumber: v.phoneNumber }),
                ...(v.isActive === undefined ? null : { isActive: v.isActive }),
                ...(v.lastLogin === undefined ? null : { lastLogin: v.lastLogin }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.addresses === undefined ? null : { addresses: v.addresses }),
                ...(v.roles === undefined ? null : { roles: v.roles }),
                ...(v.preferences === undefined ? null : { preferences: v.preferences }),
                ...(v.bio === undefined ? null : { bio: v.bio }),
                ...(v.website === undefined ? null : { website: v.website }),
                ...(v.socialLinks === undefined ? null : { socialLinks: v.socialLinks }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.sso === undefined ? null : { sso: v.sso }),
                ...(v.paymentMethods === undefined ? null : { paymentMethods: v.paymentMethods }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        firstName?: string | undefined;
        middleName?: string | undefined;
        lastName?: string | undefined;
        email?: string | undefined;
        username?: string | undefined;
        password?: string | undefined;
        profilePicture?: GetTasksTasksProfilePicture$.Outbound | undefined;
        coverPhoto?: GetTasksTasksCoverPhoto$.Outbound | undefined;
        gender?: GetTasksTasksGender | undefined;
        dateOfBirth?: number | undefined;
        phoneNumber?: string | undefined;
        isActive?: boolean | undefined;
        lastLogin?: number | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        addresses?: Array<GetTasksTasksAddresses$.Outbound> | undefined;
        roles?: Array<GetTasksTasksRoles> | undefined;
        preferences?: GetTasksTasksPreferences$.Outbound | undefined;
        bio?: string | undefined;
        website?: string | undefined;
        socialLinks?: GetTasksTasksSocialLinks$.Outbound | undefined;
        status?: GetTasksTasksResponseStatus | undefined;
        sso?: Array<GetTasksTasksSso$.Outbound> | undefined;
        paymentMethods?: GetTasksTasksPaymentMethods$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetTasksCreatedBy> = z
        .object({
            id: z.string().optional(),
            firstName: z.string().optional(),
            middleName: z.string().optional(),
            lastName: z.string().optional(),
            email: z.string().optional(),
            username: z.string().optional(),
            password: z.string().optional(),
            profilePicture: z.lazy(() => GetTasksTasksProfilePicture$.outboundSchema).optional(),
            coverPhoto: z.lazy(() => GetTasksTasksCoverPhoto$.outboundSchema).optional(),
            gender: GetTasksTasksGender$.optional(),
            dateOfBirth: z.number().optional(),
            phoneNumber: z.string().optional(),
            isActive: z.boolean().optional(),
            lastLogin: z.number().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            addresses: z.array(z.lazy(() => GetTasksTasksAddresses$.outboundSchema)).optional(),
            roles: z.array(GetTasksTasksRoles$).optional(),
            preferences: z.lazy(() => GetTasksTasksPreferences$.outboundSchema).optional(),
            bio: z.string().optional(),
            website: z.string().optional(),
            socialLinks: z.lazy(() => GetTasksTasksSocialLinks$.outboundSchema).optional(),
            status: GetTasksTasksResponseStatus$.optional(),
            sso: z.array(z.lazy(() => GetTasksTasksSso$.outboundSchema)).optional(),
            paymentMethods: z.lazy(() => GetTasksTasksPaymentMethods$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.middleName === undefined ? null : { middleName: v.middleName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.username === undefined ? null : { username: v.username }),
                ...(v.password === undefined ? null : { password: v.password }),
                ...(v.profilePicture === undefined ? null : { profilePicture: v.profilePicture }),
                ...(v.coverPhoto === undefined ? null : { coverPhoto: v.coverPhoto }),
                ...(v.gender === undefined ? null : { gender: v.gender }),
                ...(v.dateOfBirth === undefined ? null : { dateOfBirth: v.dateOfBirth }),
                ...(v.phoneNumber === undefined ? null : { phoneNumber: v.phoneNumber }),
                ...(v.isActive === undefined ? null : { isActive: v.isActive }),
                ...(v.lastLogin === undefined ? null : { lastLogin: v.lastLogin }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.addresses === undefined ? null : { addresses: v.addresses }),
                ...(v.roles === undefined ? null : { roles: v.roles }),
                ...(v.preferences === undefined ? null : { preferences: v.preferences }),
                ...(v.bio === undefined ? null : { bio: v.bio }),
                ...(v.website === undefined ? null : { website: v.website }),
                ...(v.socialLinks === undefined ? null : { socialLinks: v.socialLinks }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.sso === undefined ? null : { sso: v.sso }),
                ...(v.paymentMethods === undefined ? null : { paymentMethods: v.paymentMethods }),
            };
        });
}

/** @internal */
export namespace GetTasksAuthor$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<GetTasksAuthor, z.ZodTypeDef, Inbound> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetTasksAuthor> = z.object({});
}

/** @internal */
export namespace GetTasksMetadata$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<GetTasksMetadata, z.ZodTypeDef, Inbound> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetTasksMetadata> = z.object({});
}

/** @internal */
export namespace GetTasksComments$ {
    export type Inbound = {
        commentId?: string | undefined;
        author?: GetTasksAuthor$.Inbound | undefined;
        text?: string | undefined;
        parentId?: string | undefined;
        likes?: number | undefined;
        flagged?: boolean | undefined;
        metadata?: Array<GetTasksMetadata$.Inbound> | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<GetTasksComments, z.ZodTypeDef, Inbound> = z
        .object({
            commentId: z.string().optional(),
            author: z.lazy(() => GetTasksAuthor$.inboundSchema).optional(),
            text: z.string().optional(),
            parentId: z.string().optional(),
            likes: z.number().optional(),
            flagged: z.boolean().optional(),
            metadata: z.array(z.lazy(() => GetTasksMetadata$.inboundSchema)).optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.commentId === undefined ? null : { commentId: v.commentId }),
                ...(v.author === undefined ? null : { author: v.author }),
                ...(v.text === undefined ? null : { text: v.text }),
                ...(v.parentId === undefined ? null : { parentId: v.parentId }),
                ...(v.likes === undefined ? null : { likes: v.likes }),
                ...(v.flagged === undefined ? null : { flagged: v.flagged }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });

    export type Outbound = {
        commentId?: string | undefined;
        author?: GetTasksAuthor$.Outbound | undefined;
        text?: string | undefined;
        parentId?: string | undefined;
        likes?: number | undefined;
        flagged?: boolean | undefined;
        metadata?: Array<GetTasksMetadata$.Outbound> | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetTasksComments> = z
        .object({
            commentId: z.string().optional(),
            author: z.lazy(() => GetTasksAuthor$.outboundSchema).optional(),
            text: z.string().optional(),
            parentId: z.string().optional(),
            likes: z.number().optional(),
            flagged: z.boolean().optional(),
            metadata: z.array(z.lazy(() => GetTasksMetadata$.outboundSchema)).optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.commentId === undefined ? null : { commentId: v.commentId }),
                ...(v.author === undefined ? null : { author: v.author }),
                ...(v.text === undefined ? null : { text: v.text }),
                ...(v.parentId === undefined ? null : { parentId: v.parentId }),
                ...(v.likes === undefined ? null : { likes: v.likes }),
                ...(v.flagged === undefined ? null : { flagged: v.flagged }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });
}

/** @internal */
export namespace GetTasksTasksMetadata$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<GetTasksTasksMetadata, z.ZodTypeDef, Inbound> = z.object(
        {}
    );

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetTasksTasksMetadata> =
        z.object({});
}

/** @internal */
export namespace GetTasksAssociatedWith$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<GetTasksAssociatedWith, z.ZodTypeDef, Inbound> = z.object(
        {}
    );

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetTasksAssociatedWith> =
        z.object({});
}

/** @internal */
export namespace GetTasksPermissions$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<GetTasksPermissions, z.ZodTypeDef, Inbound> = z.object(
        {}
    );

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetTasksPermissions> = z.object(
        {}
    );
}

/** @internal */
export namespace GetTasksAttachments$ {
    export type Inbound = {
        id?: string | undefined;
        fileName?: string | undefined;
        fileSize?: number | undefined;
        fileType?: string | undefined;
        url?: string | undefined;
        thumbnailUrl?: string | undefined;
        previewUrl?: string | undefined;
        content?: string | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        metadata?: GetTasksTasksMetadata$.Inbound | undefined;
        associatedWith?: GetTasksAssociatedWith$.Inbound | undefined;
        permissions?: GetTasksPermissions$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<GetTasksAttachments, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            fileName: z.string().optional(),
            fileSize: z.number().optional(),
            fileType: z.string().optional(),
            url: z.string().optional(),
            thumbnailUrl: z.string().optional(),
            previewUrl: z.string().optional(),
            content: z.string().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            metadata: z.lazy(() => GetTasksTasksMetadata$.inboundSchema).optional(),
            associatedWith: z.lazy(() => GetTasksAssociatedWith$.inboundSchema).optional(),
            permissions: z.lazy(() => GetTasksPermissions$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fileName === undefined ? null : { fileName: v.fileName }),
                ...(v.fileSize === undefined ? null : { fileSize: v.fileSize }),
                ...(v.fileType === undefined ? null : { fileType: v.fileType }),
                ...(v.url === undefined ? null : { url: v.url }),
                ...(v.thumbnailUrl === undefined ? null : { thumbnailUrl: v.thumbnailUrl }),
                ...(v.previewUrl === undefined ? null : { previewUrl: v.previewUrl }),
                ...(v.content === undefined ? null : { content: v.content }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                ...(v.associatedWith === undefined ? null : { associatedWith: v.associatedWith }),
                ...(v.permissions === undefined ? null : { permissions: v.permissions }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        fileName?: string | undefined;
        fileSize?: number | undefined;
        fileType?: string | undefined;
        url?: string | undefined;
        thumbnailUrl?: string | undefined;
        previewUrl?: string | undefined;
        content?: string | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        metadata?: GetTasksTasksMetadata$.Outbound | undefined;
        associatedWith?: GetTasksAssociatedWith$.Outbound | undefined;
        permissions?: GetTasksPermissions$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetTasksAttachments> = z
        .object({
            id: z.string().optional(),
            fileName: z.string().optional(),
            fileSize: z.number().optional(),
            fileType: z.string().optional(),
            url: z.string().optional(),
            thumbnailUrl: z.string().optional(),
            previewUrl: z.string().optional(),
            content: z.string().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            metadata: z.lazy(() => GetTasksTasksMetadata$.outboundSchema).optional(),
            associatedWith: z.lazy(() => GetTasksAssociatedWith$.outboundSchema).optional(),
            permissions: z.lazy(() => GetTasksPermissions$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fileName === undefined ? null : { fileName: v.fileName }),
                ...(v.fileSize === undefined ? null : { fileSize: v.fileSize }),
                ...(v.fileType === undefined ? null : { fileType: v.fileType }),
                ...(v.url === undefined ? null : { url: v.url }),
                ...(v.thumbnailUrl === undefined ? null : { thumbnailUrl: v.thumbnailUrl }),
                ...(v.previewUrl === undefined ? null : { previewUrl: v.previewUrl }),
                ...(v.content === undefined ? null : { content: v.content }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                ...(v.associatedWith === undefined ? null : { associatedWith: v.associatedWith }),
                ...(v.permissions === undefined ? null : { permissions: v.permissions }),
            };
        });
}

/** @internal */
export const GetTasksFieldType$ = z.nativeEnum(GetTasksFieldType);

/** @internal */
export namespace GetTasksCustomFields$ {
    export type Inbound = {
        id?: string | undefined;
        fieldName?: string | undefined;
        fieldValue?: string | undefined;
        fieldType?: GetTasksFieldType | undefined;
    };

    export const inboundSchema: z.ZodType<GetTasksCustomFields, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            fieldName: z.string().optional(),
            fieldValue: z.string().optional(),
            fieldType: GetTasksFieldType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fieldName === undefined ? null : { fieldName: v.fieldName }),
                ...(v.fieldValue === undefined ? null : { fieldValue: v.fieldValue }),
                ...(v.fieldType === undefined ? null : { fieldType: v.fieldType }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        fieldName?: string | undefined;
        fieldValue?: string | undefined;
        fieldType?: GetTasksFieldType | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetTasksCustomFields> = z
        .object({
            id: z.string().optional(),
            fieldName: z.string().optional(),
            fieldValue: z.string().optional(),
            fieldType: GetTasksFieldType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fieldName === undefined ? null : { fieldName: v.fieldName }),
                ...(v.fieldValue === undefined ? null : { fieldValue: v.fieldValue }),
                ...(v.fieldType === undefined ? null : { fieldType: v.fieldType }),
            };
        });
}

/** @internal */
export namespace GetTasksTasksResponseProfilePicture$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<
        GetTasksTasksResponseProfilePicture,
        z.ZodTypeDef,
        Inbound
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetTasksTasksResponseProfilePicture
    > = z.object({});
}

/** @internal */
export namespace GetTasksTasksResponseCoverPhoto$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<GetTasksTasksResponseCoverPhoto, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetTasksTasksResponseCoverPhoto
    > = z.object({});
}

/** @internal */
export const GetTasksTasksResponseGender$ = z.nativeEnum(GetTasksTasksResponseGender);

/** @internal */
export namespace GetTasksTasksResponseAddresses$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<GetTasksTasksResponseAddresses, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetTasksTasksResponseAddresses> =
        z.object({});
}

/** @internal */
export const GetTasksTasksResponseRoles$ = z.nativeEnum(GetTasksTasksResponseRoles);

/** @internal */
export namespace GetTasksTasksResponsePreferences$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<GetTasksTasksResponsePreferences, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetTasksTasksResponsePreferences
    > = z.object({});
}

/** @internal */
export namespace GetTasksTasksResponseSocialLinks$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<GetTasksTasksResponseSocialLinks, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetTasksTasksResponseSocialLinks
    > = z.object({});
}

/** @internal */
export const GetTasksTasksResponse200Status$ = z.nativeEnum(GetTasksTasksResponse200Status);

/** @internal */
export namespace GetTasksTasksResponseSso$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<GetTasksTasksResponseSso, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetTasksTasksResponseSso> =
        z.object({});
}

/** @internal */
export namespace GetTasksTasksResponsePaymentMethods$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<
        GetTasksTasksResponsePaymentMethods,
        z.ZodTypeDef,
        Inbound
    > = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetTasksTasksResponsePaymentMethods
    > = z.object({});
}

/** @internal */
export namespace GetTasksWatchers$ {
    export type Inbound = {
        id?: string | undefined;
        firstName?: string | undefined;
        middleName?: string | undefined;
        lastName?: string | undefined;
        email?: string | undefined;
        username?: string | undefined;
        password?: string | undefined;
        profilePicture?: GetTasksTasksResponseProfilePicture$.Inbound | undefined;
        coverPhoto?: GetTasksTasksResponseCoverPhoto$.Inbound | undefined;
        gender?: GetTasksTasksResponseGender | undefined;
        dateOfBirth?: number | undefined;
        phoneNumber?: string | undefined;
        isActive?: boolean | undefined;
        lastLogin?: number | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        addresses?: Array<GetTasksTasksResponseAddresses$.Inbound> | undefined;
        roles?: Array<GetTasksTasksResponseRoles> | undefined;
        preferences?: GetTasksTasksResponsePreferences$.Inbound | undefined;
        bio?: string | undefined;
        website?: string | undefined;
        socialLinks?: GetTasksTasksResponseSocialLinks$.Inbound | undefined;
        status?: GetTasksTasksResponse200Status | undefined;
        sso?: Array<GetTasksTasksResponseSso$.Inbound> | undefined;
        paymentMethods?: GetTasksTasksResponsePaymentMethods$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<GetTasksWatchers, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            firstName: z.string().optional(),
            middleName: z.string().optional(),
            lastName: z.string().optional(),
            email: z.string().optional(),
            username: z.string().optional(),
            password: z.string().optional(),
            profilePicture: z
                .lazy(() => GetTasksTasksResponseProfilePicture$.inboundSchema)
                .optional(),
            coverPhoto: z.lazy(() => GetTasksTasksResponseCoverPhoto$.inboundSchema).optional(),
            gender: GetTasksTasksResponseGender$.optional(),
            dateOfBirth: z.number().optional(),
            phoneNumber: z.string().optional(),
            isActive: z.boolean().optional(),
            lastLogin: z.number().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            addresses: z
                .array(z.lazy(() => GetTasksTasksResponseAddresses$.inboundSchema))
                .optional(),
            roles: z.array(GetTasksTasksResponseRoles$).optional(),
            preferences: z.lazy(() => GetTasksTasksResponsePreferences$.inboundSchema).optional(),
            bio: z.string().optional(),
            website: z.string().optional(),
            socialLinks: z.lazy(() => GetTasksTasksResponseSocialLinks$.inboundSchema).optional(),
            status: GetTasksTasksResponse200Status$.optional(),
            sso: z.array(z.lazy(() => GetTasksTasksResponseSso$.inboundSchema)).optional(),
            paymentMethods: z
                .lazy(() => GetTasksTasksResponsePaymentMethods$.inboundSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.middleName === undefined ? null : { middleName: v.middleName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.username === undefined ? null : { username: v.username }),
                ...(v.password === undefined ? null : { password: v.password }),
                ...(v.profilePicture === undefined ? null : { profilePicture: v.profilePicture }),
                ...(v.coverPhoto === undefined ? null : { coverPhoto: v.coverPhoto }),
                ...(v.gender === undefined ? null : { gender: v.gender }),
                ...(v.dateOfBirth === undefined ? null : { dateOfBirth: v.dateOfBirth }),
                ...(v.phoneNumber === undefined ? null : { phoneNumber: v.phoneNumber }),
                ...(v.isActive === undefined ? null : { isActive: v.isActive }),
                ...(v.lastLogin === undefined ? null : { lastLogin: v.lastLogin }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.addresses === undefined ? null : { addresses: v.addresses }),
                ...(v.roles === undefined ? null : { roles: v.roles }),
                ...(v.preferences === undefined ? null : { preferences: v.preferences }),
                ...(v.bio === undefined ? null : { bio: v.bio }),
                ...(v.website === undefined ? null : { website: v.website }),
                ...(v.socialLinks === undefined ? null : { socialLinks: v.socialLinks }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.sso === undefined ? null : { sso: v.sso }),
                ...(v.paymentMethods === undefined ? null : { paymentMethods: v.paymentMethods }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        firstName?: string | undefined;
        middleName?: string | undefined;
        lastName?: string | undefined;
        email?: string | undefined;
        username?: string | undefined;
        password?: string | undefined;
        profilePicture?: GetTasksTasksResponseProfilePicture$.Outbound | undefined;
        coverPhoto?: GetTasksTasksResponseCoverPhoto$.Outbound | undefined;
        gender?: GetTasksTasksResponseGender | undefined;
        dateOfBirth?: number | undefined;
        phoneNumber?: string | undefined;
        isActive?: boolean | undefined;
        lastLogin?: number | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        addresses?: Array<GetTasksTasksResponseAddresses$.Outbound> | undefined;
        roles?: Array<GetTasksTasksResponseRoles> | undefined;
        preferences?: GetTasksTasksResponsePreferences$.Outbound | undefined;
        bio?: string | undefined;
        website?: string | undefined;
        socialLinks?: GetTasksTasksResponseSocialLinks$.Outbound | undefined;
        status?: GetTasksTasksResponse200Status | undefined;
        sso?: Array<GetTasksTasksResponseSso$.Outbound> | undefined;
        paymentMethods?: GetTasksTasksResponsePaymentMethods$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetTasksWatchers> = z
        .object({
            id: z.string().optional(),
            firstName: z.string().optional(),
            middleName: z.string().optional(),
            lastName: z.string().optional(),
            email: z.string().optional(),
            username: z.string().optional(),
            password: z.string().optional(),
            profilePicture: z
                .lazy(() => GetTasksTasksResponseProfilePicture$.outboundSchema)
                .optional(),
            coverPhoto: z.lazy(() => GetTasksTasksResponseCoverPhoto$.outboundSchema).optional(),
            gender: GetTasksTasksResponseGender$.optional(),
            dateOfBirth: z.number().optional(),
            phoneNumber: z.string().optional(),
            isActive: z.boolean().optional(),
            lastLogin: z.number().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            addresses: z
                .array(z.lazy(() => GetTasksTasksResponseAddresses$.outboundSchema))
                .optional(),
            roles: z.array(GetTasksTasksResponseRoles$).optional(),
            preferences: z.lazy(() => GetTasksTasksResponsePreferences$.outboundSchema).optional(),
            bio: z.string().optional(),
            website: z.string().optional(),
            socialLinks: z.lazy(() => GetTasksTasksResponseSocialLinks$.outboundSchema).optional(),
            status: GetTasksTasksResponse200Status$.optional(),
            sso: z.array(z.lazy(() => GetTasksTasksResponseSso$.outboundSchema)).optional(),
            paymentMethods: z
                .lazy(() => GetTasksTasksResponsePaymentMethods$.outboundSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.middleName === undefined ? null : { middleName: v.middleName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.username === undefined ? null : { username: v.username }),
                ...(v.password === undefined ? null : { password: v.password }),
                ...(v.profilePicture === undefined ? null : { profilePicture: v.profilePicture }),
                ...(v.coverPhoto === undefined ? null : { coverPhoto: v.coverPhoto }),
                ...(v.gender === undefined ? null : { gender: v.gender }),
                ...(v.dateOfBirth === undefined ? null : { dateOfBirth: v.dateOfBirth }),
                ...(v.phoneNumber === undefined ? null : { phoneNumber: v.phoneNumber }),
                ...(v.isActive === undefined ? null : { isActive: v.isActive }),
                ...(v.lastLogin === undefined ? null : { lastLogin: v.lastLogin }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.addresses === undefined ? null : { addresses: v.addresses }),
                ...(v.roles === undefined ? null : { roles: v.roles }),
                ...(v.preferences === undefined ? null : { preferences: v.preferences }),
                ...(v.bio === undefined ? null : { bio: v.bio }),
                ...(v.website === undefined ? null : { website: v.website }),
                ...(v.socialLinks === undefined ? null : { socialLinks: v.socialLinks }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.sso === undefined ? null : { sso: v.sso }),
                ...(v.paymentMethods === undefined ? null : { paymentMethods: v.paymentMethods }),
            };
        });
}

/** @internal */
export namespace GetTasksRecipient$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<GetTasksRecipient, z.ZodTypeDef, Inbound> = z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetTasksRecipient> = z.object(
        {}
    );
}

/** @internal */
export const GetTasksTasksPriority$ = z.nativeEnum(GetTasksTasksPriority);

/** @internal */
export namespace GetTasksTasksCustomFields$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<GetTasksTasksCustomFields, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetTasksTasksCustomFields> =
        z.object({});
}

/** @internal */
export namespace GetTasksTasksAttachments$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<GetTasksTasksAttachments, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetTasksTasksAttachments> =
        z.object({});
}

/** @internal */
export namespace GetTasksNotifications$ {
    export type Inbound = {
        notificationId?: string | undefined;
        type?: string | undefined;
        title?: string | undefined;
        message?: string | undefined;
        recipient?: GetTasksRecipient$.Inbound | undefined;
        status?: string | undefined;
        priority?: GetTasksTasksPriority | undefined;
        channel?: string | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
        customFields?: Array<GetTasksTasksCustomFields$.Inbound> | undefined;
        attachments?: Array<GetTasksTasksAttachments$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<GetTasksNotifications, z.ZodTypeDef, Inbound> = z
        .object({
            notificationId: z.string().optional(),
            type: z.string().optional(),
            title: z.string().optional(),
            message: z.string().optional(),
            recipient: z.lazy(() => GetTasksRecipient$.inboundSchema).optional(),
            status: z.string().optional(),
            priority: GetTasksTasksPriority$.optional(),
            channel: z.string().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
            customFields: z
                .array(z.lazy(() => GetTasksTasksCustomFields$.inboundSchema))
                .optional(),
            attachments: z.array(z.lazy(() => GetTasksTasksAttachments$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.notificationId === undefined ? null : { notificationId: v.notificationId }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.message === undefined ? null : { message: v.message }),
                ...(v.recipient === undefined ? null : { recipient: v.recipient }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.priority === undefined ? null : { priority: v.priority }),
                ...(v.channel === undefined ? null : { channel: v.channel }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                ...(v.attachments === undefined ? null : { attachments: v.attachments }),
            };
        });

    export type Outbound = {
        notificationId?: string | undefined;
        type?: string | undefined;
        title?: string | undefined;
        message?: string | undefined;
        recipient?: GetTasksRecipient$.Outbound | undefined;
        status?: string | undefined;
        priority?: GetTasksTasksPriority | undefined;
        channel?: string | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
        customFields?: Array<GetTasksTasksCustomFields$.Outbound> | undefined;
        attachments?: Array<GetTasksTasksAttachments$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetTasksNotifications> = z
        .object({
            notificationId: z.string().optional(),
            type: z.string().optional(),
            title: z.string().optional(),
            message: z.string().optional(),
            recipient: z.lazy(() => GetTasksRecipient$.outboundSchema).optional(),
            status: z.string().optional(),
            priority: GetTasksTasksPriority$.optional(),
            channel: z.string().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
            customFields: z
                .array(z.lazy(() => GetTasksTasksCustomFields$.outboundSchema))
                .optional(),
            attachments: z.array(z.lazy(() => GetTasksTasksAttachments$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.notificationId === undefined ? null : { notificationId: v.notificationId }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.message === undefined ? null : { message: v.message }),
                ...(v.recipient === undefined ? null : { recipient: v.recipient }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.priority === undefined ? null : { priority: v.priority }),
                ...(v.channel === undefined ? null : { channel: v.channel }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                ...(v.attachments === undefined ? null : { attachments: v.attachments }),
            };
        });
}

/** @internal */
export namespace GetTasksUnified$ {
    export type Inbound = {
        id?: string | undefined;
        title?: string | undefined;
        description?: string | undefined;
        status?: GetTasksStatus | undefined;
        priority?: GetTasksPriority | undefined;
        dueDate?: number | undefined;
        dueTimezone?: string | undefined;
        assignee?: GetTasksAssignee$.Inbound | undefined;
        createdBy?: GetTasksCreatedBy$.Inbound | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        labels?: Array<string> | undefined;
        comments?: Array<GetTasksComments$.Inbound> | undefined;
        attachments?: Array<GetTasksAttachments$.Inbound> | undefined;
        timeEstimate?: string | undefined;
        timeLogged?: string | undefined;
        subTaskIds?: Array<string> | undefined;
        parentTaskId?: string | undefined;
        dependOnTaskIds?: Array<string> | undefined;
        relatedToTaskId?: Array<string> | undefined;
        repeat?: string | undefined;
        customFields?: Array<GetTasksCustomFields$.Inbound> | undefined;
        watchers?: Array<GetTasksWatchers$.Inbound> | undefined;
        completionPercentage?: number | undefined;
        notifications?: Array<GetTasksNotifications$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<GetTasksUnified, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            title: z.string().optional(),
            description: z.string().optional(),
            status: GetTasksStatus$.optional(),
            priority: GetTasksPriority$.optional(),
            dueDate: z.number().optional(),
            dueTimezone: z.string().optional(),
            assignee: z.lazy(() => GetTasksAssignee$.inboundSchema).optional(),
            createdBy: z.lazy(() => GetTasksCreatedBy$.inboundSchema).optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            labels: z.array(z.string()).optional(),
            comments: z.array(z.lazy(() => GetTasksComments$.inboundSchema)).optional(),
            attachments: z.array(z.lazy(() => GetTasksAttachments$.inboundSchema)).optional(),
            timeEstimate: z.string().optional(),
            timeLogged: z.string().optional(),
            subTaskIds: z.array(z.string()).optional(),
            parentTaskId: z.string().optional(),
            dependOnTaskIds: z.array(z.string()).optional(),
            relatedToTaskId: z.array(z.string()).optional(),
            repeat: z.string().optional(),
            customFields: z.array(z.lazy(() => GetTasksCustomFields$.inboundSchema)).optional(),
            watchers: z.array(z.lazy(() => GetTasksWatchers$.inboundSchema)).optional(),
            completionPercentage: z.number().optional(),
            notifications: z.array(z.lazy(() => GetTasksNotifications$.inboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.priority === undefined ? null : { priority: v.priority }),
                ...(v.dueDate === undefined ? null : { dueDate: v.dueDate }),
                ...(v.dueTimezone === undefined ? null : { dueTimezone: v.dueTimezone }),
                ...(v.assignee === undefined ? null : { assignee: v.assignee }),
                ...(v.createdBy === undefined ? null : { createdBy: v.createdBy }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.labels === undefined ? null : { labels: v.labels }),
                ...(v.comments === undefined ? null : { comments: v.comments }),
                ...(v.attachments === undefined ? null : { attachments: v.attachments }),
                ...(v.timeEstimate === undefined ? null : { timeEstimate: v.timeEstimate }),
                ...(v.timeLogged === undefined ? null : { timeLogged: v.timeLogged }),
                ...(v.subTaskIds === undefined ? null : { subTaskIds: v.subTaskIds }),
                ...(v.parentTaskId === undefined ? null : { parentTaskId: v.parentTaskId }),
                ...(v.dependOnTaskIds === undefined
                    ? null
                    : { dependOnTaskIds: v.dependOnTaskIds }),
                ...(v.relatedToTaskId === undefined
                    ? null
                    : { relatedToTaskId: v.relatedToTaskId }),
                ...(v.repeat === undefined ? null : { repeat: v.repeat }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                ...(v.watchers === undefined ? null : { watchers: v.watchers }),
                ...(v.completionPercentage === undefined
                    ? null
                    : { completionPercentage: v.completionPercentage }),
                ...(v.notifications === undefined ? null : { notifications: v.notifications }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        title?: string | undefined;
        description?: string | undefined;
        status?: GetTasksStatus | undefined;
        priority?: GetTasksPriority | undefined;
        dueDate?: number | undefined;
        dueTimezone?: string | undefined;
        assignee?: GetTasksAssignee$.Outbound | undefined;
        createdBy?: GetTasksCreatedBy$.Outbound | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        labels?: Array<string> | undefined;
        comments?: Array<GetTasksComments$.Outbound> | undefined;
        attachments?: Array<GetTasksAttachments$.Outbound> | undefined;
        timeEstimate?: string | undefined;
        timeLogged?: string | undefined;
        subTaskIds?: Array<string> | undefined;
        parentTaskId?: string | undefined;
        dependOnTaskIds?: Array<string> | undefined;
        relatedToTaskId?: Array<string> | undefined;
        repeat?: string | undefined;
        customFields?: Array<GetTasksCustomFields$.Outbound> | undefined;
        watchers?: Array<GetTasksWatchers$.Outbound> | undefined;
        completionPercentage?: number | undefined;
        notifications?: Array<GetTasksNotifications$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetTasksUnified> = z
        .object({
            id: z.string().optional(),
            title: z.string().optional(),
            description: z.string().optional(),
            status: GetTasksStatus$.optional(),
            priority: GetTasksPriority$.optional(),
            dueDate: z.number().optional(),
            dueTimezone: z.string().optional(),
            assignee: z.lazy(() => GetTasksAssignee$.outboundSchema).optional(),
            createdBy: z.lazy(() => GetTasksCreatedBy$.outboundSchema).optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            labels: z.array(z.string()).optional(),
            comments: z.array(z.lazy(() => GetTasksComments$.outboundSchema)).optional(),
            attachments: z.array(z.lazy(() => GetTasksAttachments$.outboundSchema)).optional(),
            timeEstimate: z.string().optional(),
            timeLogged: z.string().optional(),
            subTaskIds: z.array(z.string()).optional(),
            parentTaskId: z.string().optional(),
            dependOnTaskIds: z.array(z.string()).optional(),
            relatedToTaskId: z.array(z.string()).optional(),
            repeat: z.string().optional(),
            customFields: z.array(z.lazy(() => GetTasksCustomFields$.outboundSchema)).optional(),
            watchers: z.array(z.lazy(() => GetTasksWatchers$.outboundSchema)).optional(),
            completionPercentage: z.number().optional(),
            notifications: z.array(z.lazy(() => GetTasksNotifications$.outboundSchema)).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.description === undefined ? null : { description: v.description }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.priority === undefined ? null : { priority: v.priority }),
                ...(v.dueDate === undefined ? null : { dueDate: v.dueDate }),
                ...(v.dueTimezone === undefined ? null : { dueTimezone: v.dueTimezone }),
                ...(v.assignee === undefined ? null : { assignee: v.assignee }),
                ...(v.createdBy === undefined ? null : { createdBy: v.createdBy }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.labels === undefined ? null : { labels: v.labels }),
                ...(v.comments === undefined ? null : { comments: v.comments }),
                ...(v.attachments === undefined ? null : { attachments: v.attachments }),
                ...(v.timeEstimate === undefined ? null : { timeEstimate: v.timeEstimate }),
                ...(v.timeLogged === undefined ? null : { timeLogged: v.timeLogged }),
                ...(v.subTaskIds === undefined ? null : { subTaskIds: v.subTaskIds }),
                ...(v.parentTaskId === undefined ? null : { parentTaskId: v.parentTaskId }),
                ...(v.dependOnTaskIds === undefined
                    ? null
                    : { dependOnTaskIds: v.dependOnTaskIds }),
                ...(v.relatedToTaskId === undefined
                    ? null
                    : { relatedToTaskId: v.relatedToTaskId }),
                ...(v.repeat === undefined ? null : { repeat: v.repeat }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                ...(v.watchers === undefined ? null : { watchers: v.watchers }),
                ...(v.completionPercentage === undefined
                    ? null
                    : { completionPercentage: v.completionPercentage }),
                ...(v.notifications === undefined ? null : { notifications: v.notifications }),
            };
        });
}

/** @internal */
export namespace GetTasksPassthrough$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<GetTasksPassthrough, z.ZodTypeDef, Inbound> = z.object(
        {}
    );

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetTasksPassthrough> = z.object(
        {}
    );
}

/** @internal */
export namespace GetTasksCache$ {
    export type Inbound = {
        hit?: boolean | undefined;
        ttl?: number | undefined;
        key?: string | undefined;
    };

    export const inboundSchema: z.ZodType<GetTasksCache, z.ZodTypeDef, Inbound> = z
        .object({
            hit: z.boolean().optional(),
            ttl: z.number().int().optional(),
            key: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.hit === undefined ? null : { hit: v.hit }),
                ...(v.ttl === undefined ? null : { ttl: v.ttl }),
                ...(v.key === undefined ? null : { key: v.key }),
            };
        });

    export type Outbound = {
        hit?: boolean | undefined;
        ttl?: number | undefined;
        key?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetTasksCache> = z
        .object({
            hit: z.boolean().optional(),
            ttl: z.number().int().optional(),
            key: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.hit === undefined ? null : { hit: v.hit }),
                ...(v.ttl === undefined ? null : { ttl: v.ttl }),
                ...(v.key === undefined ? null : { key: v.key }),
            };
        });
}

/** @internal */
export namespace GetTasksMeta$ {
    export type Inbound = {
        timestamp?: number | undefined;
        latency?: number | undefined;
        platformRateLimitRemaining?: number | undefined;
        rateLimitRemaining?: number | undefined;
        cache?: GetTasksCache$.Inbound | undefined;
        transactionKey?: string | undefined;
        txn?: string | undefined;
        platform?: string | undefined;
        platformVersion?: string | undefined;
        connectionDefinitionKey?: string | undefined;
        action?: string | undefined;
        commonModel?: string | undefined;
        commonModelVersion?: string | undefined;
        connectionKey?: string | undefined;
        hash?: string | undefined;
        heartbeats?: Array<string> | undefined;
        totalTransactions?: number | undefined;
    };

    export const inboundSchema: z.ZodType<GetTasksMeta, z.ZodTypeDef, Inbound> = z
        .object({
            timestamp: z.number().int().optional(),
            latency: z.number().int().optional(),
            platformRateLimitRemaining: z.number().int().optional(),
            rateLimitRemaining: z.number().int().optional(),
            cache: z.lazy(() => GetTasksCache$.inboundSchema).optional(),
            transactionKey: z.string().optional(),
            txn: z.string().optional(),
            platform: z.string().optional(),
            platformVersion: z.string().optional(),
            connectionDefinitionKey: z.string().optional(),
            action: z.string().optional(),
            commonModel: z.string().optional(),
            commonModelVersion: z.string().optional(),
            connectionKey: z.string().optional(),
            hash: z.string().optional(),
            heartbeats: z.array(z.string()).optional(),
            totalTransactions: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.timestamp === undefined ? null : { timestamp: v.timestamp }),
                ...(v.latency === undefined ? null : { latency: v.latency }),
                ...(v.platformRateLimitRemaining === undefined
                    ? null
                    : { platformRateLimitRemaining: v.platformRateLimitRemaining }),
                ...(v.rateLimitRemaining === undefined
                    ? null
                    : { rateLimitRemaining: v.rateLimitRemaining }),
                ...(v.cache === undefined ? null : { cache: v.cache }),
                ...(v.transactionKey === undefined ? null : { transactionKey: v.transactionKey }),
                ...(v.txn === undefined ? null : { txn: v.txn }),
                ...(v.platform === undefined ? null : { platform: v.platform }),
                ...(v.platformVersion === undefined
                    ? null
                    : { platformVersion: v.platformVersion }),
                ...(v.connectionDefinitionKey === undefined
                    ? null
                    : { connectionDefinitionKey: v.connectionDefinitionKey }),
                ...(v.action === undefined ? null : { action: v.action }),
                ...(v.commonModel === undefined ? null : { commonModel: v.commonModel }),
                ...(v.commonModelVersion === undefined
                    ? null
                    : { commonModelVersion: v.commonModelVersion }),
                ...(v.connectionKey === undefined ? null : { connectionKey: v.connectionKey }),
                ...(v.hash === undefined ? null : { hash: v.hash }),
                ...(v.heartbeats === undefined ? null : { heartbeats: v.heartbeats }),
                ...(v.totalTransactions === undefined
                    ? null
                    : { totalTransactions: v.totalTransactions }),
            };
        });

    export type Outbound = {
        timestamp?: number | undefined;
        latency?: number | undefined;
        platformRateLimitRemaining?: number | undefined;
        rateLimitRemaining?: number | undefined;
        cache?: GetTasksCache$.Outbound | undefined;
        transactionKey?: string | undefined;
        txn?: string | undefined;
        platform?: string | undefined;
        platformVersion?: string | undefined;
        connectionDefinitionKey?: string | undefined;
        action?: string | undefined;
        commonModel?: string | undefined;
        commonModelVersion?: string | undefined;
        connectionKey?: string | undefined;
        hash?: string | undefined;
        heartbeats?: Array<string> | undefined;
        totalTransactions?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetTasksMeta> = z
        .object({
            timestamp: z.number().int().optional(),
            latency: z.number().int().optional(),
            platformRateLimitRemaining: z.number().int().optional(),
            rateLimitRemaining: z.number().int().optional(),
            cache: z.lazy(() => GetTasksCache$.outboundSchema).optional(),
            transactionKey: z.string().optional(),
            txn: z.string().optional(),
            platform: z.string().optional(),
            platformVersion: z.string().optional(),
            connectionDefinitionKey: z.string().optional(),
            action: z.string().optional(),
            commonModel: z.string().optional(),
            commonModelVersion: z.string().optional(),
            connectionKey: z.string().optional(),
            hash: z.string().optional(),
            heartbeats: z.array(z.string()).optional(),
            totalTransactions: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.timestamp === undefined ? null : { timestamp: v.timestamp }),
                ...(v.latency === undefined ? null : { latency: v.latency }),
                ...(v.platformRateLimitRemaining === undefined
                    ? null
                    : { platformRateLimitRemaining: v.platformRateLimitRemaining }),
                ...(v.rateLimitRemaining === undefined
                    ? null
                    : { rateLimitRemaining: v.rateLimitRemaining }),
                ...(v.cache === undefined ? null : { cache: v.cache }),
                ...(v.transactionKey === undefined ? null : { transactionKey: v.transactionKey }),
                ...(v.txn === undefined ? null : { txn: v.txn }),
                ...(v.platform === undefined ? null : { platform: v.platform }),
                ...(v.platformVersion === undefined
                    ? null
                    : { platformVersion: v.platformVersion }),
                ...(v.connectionDefinitionKey === undefined
                    ? null
                    : { connectionDefinitionKey: v.connectionDefinitionKey }),
                ...(v.action === undefined ? null : { action: v.action }),
                ...(v.commonModel === undefined ? null : { commonModel: v.commonModel }),
                ...(v.commonModelVersion === undefined
                    ? null
                    : { commonModelVersion: v.commonModelVersion }),
                ...(v.connectionKey === undefined ? null : { connectionKey: v.connectionKey }),
                ...(v.hash === undefined ? null : { hash: v.hash }),
                ...(v.heartbeats === undefined ? null : { heartbeats: v.heartbeats }),
                ...(v.totalTransactions === undefined
                    ? null
                    : { totalTransactions: v.totalTransactions }),
            };
        });
}

/** @internal */
export namespace GetTasksPagination$ {
    export type Inbound = {
        cursor?: string | undefined;
        limit?: number | undefined;
    };

    export const inboundSchema: z.ZodType<GetTasksPagination, z.ZodTypeDef, Inbound> = z
        .object({
            cursor: z.string().optional(),
            limit: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.cursor === undefined ? null : { cursor: v.cursor }),
                ...(v.limit === undefined ? null : { limit: v.limit }),
            };
        });

    export type Outbound = {
        cursor?: string | undefined;
        limit?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetTasksPagination> = z
        .object({
            cursor: z.string().optional(),
            limit: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.cursor === undefined ? null : { cursor: v.cursor }),
                ...(v.limit === undefined ? null : { limit: v.limit }),
            };
        });
}

/** @internal */
export namespace GetTasksResponseBody$ {
    export type Inbound = {
        status?: string | undefined;
        statusCode?: GetTasksStatusCode | undefined;
        unified?: Array<GetTasksUnified$.Inbound> | undefined;
        passthrough?: GetTasksPassthrough$.Inbound | undefined;
        meta?: GetTasksMeta$.Inbound | undefined;
        pagination?: GetTasksPagination$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<GetTasksResponseBody, z.ZodTypeDef, Inbound> = z
        .object({
            status: z.string().optional(),
            statusCode: GetTasksStatusCode$.optional(),
            unified: z.array(z.lazy(() => GetTasksUnified$.inboundSchema)).optional(),
            passthrough: z.lazy(() => GetTasksPassthrough$.inboundSchema).optional(),
            meta: z.lazy(() => GetTasksMeta$.inboundSchema).optional(),
            pagination: z.lazy(() => GetTasksPagination$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.statusCode === undefined ? null : { statusCode: v.statusCode }),
                ...(v.unified === undefined ? null : { unified: v.unified }),
                ...(v.passthrough === undefined ? null : { passthrough: v.passthrough }),
                ...(v.meta === undefined ? null : { meta: v.meta }),
                ...(v.pagination === undefined ? null : { pagination: v.pagination }),
            };
        });

    export type Outbound = {
        status?: string | undefined;
        statusCode?: GetTasksStatusCode | undefined;
        unified?: Array<GetTasksUnified$.Outbound> | undefined;
        passthrough?: GetTasksPassthrough$.Outbound | undefined;
        meta?: GetTasksMeta$.Outbound | undefined;
        pagination?: GetTasksPagination$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetTasksResponseBody> = z
        .object({
            status: z.string().optional(),
            statusCode: GetTasksStatusCode$.optional(),
            unified: z.array(z.lazy(() => GetTasksUnified$.outboundSchema)).optional(),
            passthrough: z.lazy(() => GetTasksPassthrough$.outboundSchema).optional(),
            meta: z.lazy(() => GetTasksMeta$.outboundSchema).optional(),
            pagination: z.lazy(() => GetTasksPagination$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.statusCode === undefined ? null : { statusCode: v.statusCode }),
                ...(v.unified === undefined ? null : { unified: v.unified }),
                ...(v.passthrough === undefined ? null : { passthrough: v.passthrough }),
                ...(v.meta === undefined ? null : { meta: v.meta }),
                ...(v.pagination === undefined ? null : { pagination: v.pagination }),
            };
        });
}

/** @internal */
export namespace GetTasksResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        object?: GetTasksResponseBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<GetTasksResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => GetTasksResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: GetTasksResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetTasksResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z.lazy(() => GetTasksResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
