/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type GetCandidatesRequest = {
    /**
     * The unique identifier of a Connected Account
     */
    xIntegrationosConnectionKey: string;
};

export enum GetCandidatesStatusCode {
    TwoHundred = 200,
    FourHundred = 400,
    FiveHundred = 500,
}

export enum GetCandidatesCandidatesResponseType {
    String = "String",
    Number = "Number",
    Boolean = "Boolean",
    Date = "Date",
    Json = "Json",
    Array = "Array",
}

export type GetCandidatesMetadata = {
    id?: string | undefined;
    key?: string | undefined;
    value?: string | undefined;
    type?: GetCandidatesCandidatesResponseType | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    entityId?: string | undefined;
    entityType?: string | undefined;
};

export enum GetCandidatesEntityType {
    User = "User",
    Project = "Project",
    Message = "Message",
    Other = "Other",
}

export type GetCandidatesAssociatedWith = {
    entityId?: string | undefined;
    entityType?: GetCandidatesEntityType | undefined;
    attributes?: Array<string> | undefined;
};

export enum GetCandidatesAccessControlType {
    Rbac = "RBAC",
    Abac = "ABAC",
    Custom = "Custom",
    None = "None",
}

export enum GetCandidatesCandidatesResponse200ApplicationJSONType {
    User = "User",
    Group = "Group",
}

export type GetCandidatesAssigneeDetails = {
    identifier?: string | undefined;
    displayName?: string | undefined;
    type?: GetCandidatesCandidatesResponse200ApplicationJSONType | undefined;
};

export enum GetCandidatesIdentifierType {
    String = "String",
    Number = "Number",
}

export type GetCandidatesPermissions = {
    canView?: Array<string> | undefined;
    canEdit?: Array<string> | undefined;
    canDelete?: Array<string> | undefined;
    roles?: Array<string> | undefined;
    accessControlType?: GetCandidatesAccessControlType | undefined;
    assigneeDetails?: GetCandidatesAssigneeDetails | undefined;
    identifierType?: GetCandidatesIdentifierType | undefined;
};

export type GetCandidatesResume = {
    id?: string | undefined;
    fileName?: string | undefined;
    fileSize?: number | undefined;
    fileType?: string | undefined;
    url?: string | undefined;
    thumbnailUrl?: string | undefined;
    previewUrl?: string | undefined;
    content?: string | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    metadata?: GetCandidatesMetadata | undefined;
    associatedWith?: GetCandidatesAssociatedWith | undefined;
    permissions?: GetCandidatesPermissions | undefined;
};

export enum GetCandidatesCandidatesType {
    String = "String",
    Number = "Number",
    Boolean = "Boolean",
    Date = "Date",
    Json = "Json",
    Array = "Array",
}

export type GetCandidatesCandidatesMetadata = {
    id?: string | undefined;
    key?: string | undefined;
    value?: string | undefined;
    type?: GetCandidatesCandidatesType | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    entityId?: string | undefined;
    entityType?: string | undefined;
};

export enum GetCandidatesCandidatesEntityType {
    User = "User",
    Project = "Project",
    Message = "Message",
    Other = "Other",
}

export type GetCandidatesCandidatesAssociatedWith = {
    entityId?: string | undefined;
    entityType?: GetCandidatesCandidatesEntityType | undefined;
    attributes?: Array<string> | undefined;
};

export enum GetCandidatesCandidatesAccessControlType {
    Rbac = "RBAC",
    Abac = "ABAC",
    Custom = "Custom",
    None = "None",
}

export enum GetCandidatesCandidatesResponse200Type {
    User = "User",
    Group = "Group",
}

export type GetCandidatesCandidatesAssigneeDetails = {
    identifier?: string | undefined;
    displayName?: string | undefined;
    type?: GetCandidatesCandidatesResponse200Type | undefined;
};

export enum GetCandidatesCandidatesIdentifierType {
    String = "String",
    Number = "Number",
}

export type GetCandidatesCandidatesPermissions = {
    canView?: Array<string> | undefined;
    canEdit?: Array<string> | undefined;
    canDelete?: Array<string> | undefined;
    roles?: Array<string> | undefined;
    accessControlType?: GetCandidatesCandidatesAccessControlType | undefined;
    assigneeDetails?: GetCandidatesCandidatesAssigneeDetails | undefined;
    identifierType?: GetCandidatesCandidatesIdentifierType | undefined;
};

export type GetCandidatesCoverLetter = {
    id?: string | undefined;
    fileName?: string | undefined;
    fileSize?: number | undefined;
    fileType?: string | undefined;
    url?: string | undefined;
    thumbnailUrl?: string | undefined;
    previewUrl?: string | undefined;
    content?: string | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    metadata?: GetCandidatesCandidatesMetadata | undefined;
    associatedWith?: GetCandidatesCandidatesAssociatedWith | undefined;
    permissions?: GetCandidatesCandidatesPermissions | undefined;
};

export enum GetCandidatesMimeType {
    ImageJpeg = "image/jpeg",
    ImagePng = "image/png",
    ImageGif = "image/gif",
    ImageSvgPlusXml = "image/svg+xml",
    ImageWebp = "image/webp",
}

export type GetCandidatesProfilePicture = {
    id?: string | undefined;
    src?: string | undefined;
    altText?: string | undefined;
    width?: number | undefined;
    height?: number | undefined;
    thumbnailSrc?: string | undefined;
    caption?: string | undefined;
    title?: string | undefined;
    mimeType?: GetCandidatesMimeType | undefined;
    tags?: Array<string> | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    active?: boolean | undefined;
    deleted?: boolean | undefined;
};

export enum GetCandidatesType {
    Facebook = "facebook",
    Twitter = "twitter",
    Linkedin = "linkedin",
    Instagram = "instagram",
    Tiktok = "tiktok",
    Pinterest = "pinterest",
    Youtube = "youtube",
    Other = "other",
}

export type GetCandidatesAdditionalInfo = {};

export type GetCandidatesSocialProfiles = {
    type?: GetCandidatesType | undefined;
    username?: string | undefined;
    displayName?: string | undefined;
    url?: string | undefined;
    avatarUrl?: string | undefined;
    email?: string | undefined;
    additionalInfo?: GetCandidatesAdditionalInfo | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    active?: boolean | undefined;
    deleted?: boolean | undefined;
};

export type GetCandidatesEducations = {
    institution?: string | undefined;
    degree?: string | undefined;
    fieldOfStudy?: string | undefined;
    startDate?: number | undefined;
    endDate?: number | undefined;
    gpa?: number | undefined;
};

export type GetCandidatesWorkExperiences = {
    company?: string | undefined;
    position?: string | undefined;
    startDate?: number | undefined;
    endDate?: number | undefined;
    description?: string | undefined;
};

export type GetCandidatesReferences = {
    name?: string | undefined;
    relationship?: string | undefined;
    company?: string | undefined;
    position?: string | undefined;
    email?: string | undefined;
    phoneNumber?: string | undefined;
};

export enum GetCandidatesStatus {
    New = "New",
    InReview = "InReview",
    Interviewing = "Interviewing",
    OfferExtended = "OfferExtended",
    Hired = "Hired",
    NotSelected = "NotSelected",
}

export enum GetCandidatesFieldType {
    Text = "text",
    Number = "number",
    Date = "date",
    Boolean = "boolean",
    Enum = "enum",
    Json = "json",
    Array = "array",
}

export type GetCandidatesCustomFields = {
    id?: string | undefined;
    fieldName?: string | undefined;
    fieldValue?: string | undefined;
    fieldType?: GetCandidatesFieldType | undefined;
};

export enum GetCandidatesPriority {
    Low = "low",
    Medium = "medium",
    High = "high",
}

export type GetCandidatesAuthor = {};

export type GetCandidatesAttachments = {};

export type GetCandidatesSharedWith = {};

export enum GetCandidatesVisibility {
    Private = "private",
    Public = "public",
    Shared = "shared",
}

export enum GetCandidatesCandidatesStatus {
    Active = "active",
    Archived = "archived",
}

export type GetCandidatesNotes = {
    id?: string | undefined;
    title?: string | undefined;
    content?: string | undefined;
    createdAt?: number | undefined;
    updatedAt?: number | undefined;
    lastAccessed?: number | undefined;
    reminder?: number | undefined;
    color?: string | undefined;
    priority?: GetCandidatesPriority | undefined;
    author?: GetCandidatesAuthor | undefined;
    tags?: Array<string> | undefined;
    attachments?: Array<GetCandidatesAttachments> | undefined;
    sharedWith?: Array<GetCandidatesSharedWith> | undefined;
    visibility?: GetCandidatesVisibility | undefined;
    status?: GetCandidatesCandidatesStatus | undefined;
    metadata?: Array<string> | undefined;
};

export type GetCandidatesUnified = {
    id?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    email?: string | undefined;
    phoneNumber?: string | undefined;
    role?: string | undefined;
    jobId?: string | undefined;
    resume?: GetCandidatesResume | undefined;
    coverLetter?: GetCandidatesCoverLetter | undefined;
    profilePicture?: GetCandidatesProfilePicture | undefined;
    socialProfiles?: Array<GetCandidatesSocialProfiles> | undefined;
    websites?: Array<string> | undefined;
    skills?: Array<string> | undefined;
    languages?: Array<string> | undefined;
    certifications?: Array<string> | undefined;
    educations?: Array<GetCandidatesEducations> | undefined;
    workExperiences?: Array<GetCandidatesWorkExperiences> | undefined;
    references?: Array<GetCandidatesReferences> | undefined;
    availability?: Date | undefined;
    preferredWorkLocation?: string | undefined;
    status?: GetCandidatesStatus | undefined;
    customFields?: Array<GetCandidatesCustomFields> | undefined;
    notes?: Array<GetCandidatesNotes> | undefined;
    createdAt?: Date | undefined;
    updatedAt?: Date | undefined;
};

export type GetCandidatesPassthrough = {};

export type GetCandidatesCache = {
    hit?: boolean | undefined;
    ttl?: number | undefined;
    key?: string | undefined;
};

export type GetCandidatesMeta = {
    timestamp?: number | undefined;
    latency?: number | undefined;
    platformRateLimitRemaining?: number | undefined;
    rateLimitRemaining?: number | undefined;
    cache?: GetCandidatesCache | undefined;
    transactionKey?: string | undefined;
    txn?: string | undefined;
    platform?: string | undefined;
    platformVersion?: string | undefined;
    connectionDefinitionKey?: string | undefined;
    action?: string | undefined;
    commonModel?: string | undefined;
    commonModelVersion?: string | undefined;
    connectionKey?: string | undefined;
    hash?: string | undefined;
    heartbeats?: Array<string> | undefined;
    totalTransactions?: number | undefined;
};

export type GetCandidatesPagination = {
    cursor?: string | undefined;
    limit?: number | undefined;
};

/**
 * Successful response
 */
export type GetCandidatesResponseBody = {
    status?: string | undefined;
    statusCode?: GetCandidatesStatusCode | undefined;
    unified?: Array<GetCandidatesUnified> | undefined;
    passthrough?: GetCandidatesPassthrough | undefined;
    meta?: GetCandidatesMeta | undefined;
    pagination?: GetCandidatesPagination | undefined;
};

export type GetCandidatesResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Successful response
     */
    object?: GetCandidatesResponseBody | undefined;
};

/** @internal */
export namespace GetCandidatesRequest$ {
    export type Inbound = {
        "X-INTEGRATIONOS-CONNECTION-KEY": string;
    };

    export const inboundSchema: z.ZodType<GetCandidatesRequest, z.ZodTypeDef, Inbound> = z
        .object({
            "X-INTEGRATIONOS-CONNECTION-KEY": z.string(),
        })
        .transform((v) => {
            return {
                xIntegrationosConnectionKey: v["X-INTEGRATIONOS-CONNECTION-KEY"],
            };
        });

    export type Outbound = {
        "X-INTEGRATIONOS-CONNECTION-KEY": string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetCandidatesRequest> = z
        .object({
            xIntegrationosConnectionKey: z.string(),
        })
        .transform((v) => {
            return {
                "X-INTEGRATIONOS-CONNECTION-KEY": v.xIntegrationosConnectionKey,
            };
        });
}

/** @internal */
export const GetCandidatesStatusCode$ = z.nativeEnum(GetCandidatesStatusCode);

/** @internal */
export const GetCandidatesCandidatesResponseType$ = z.nativeEnum(
    GetCandidatesCandidatesResponseType
);

/** @internal */
export namespace GetCandidatesMetadata$ {
    export type Inbound = {
        id?: string | undefined;
        key?: string | undefined;
        value?: string | undefined;
        type?: GetCandidatesCandidatesResponseType | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        entityId?: string | undefined;
        entityType?: string | undefined;
    };

    export const inboundSchema: z.ZodType<GetCandidatesMetadata, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            key: z.string().optional(),
            value: z.string().optional(),
            type: GetCandidatesCandidatesResponseType$.optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            entityId: z.string().optional(),
            entityType: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.key === undefined ? null : { key: v.key }),
                ...(v.value === undefined ? null : { value: v.value }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.entityId === undefined ? null : { entityId: v.entityId }),
                ...(v.entityType === undefined ? null : { entityType: v.entityType }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        key?: string | undefined;
        value?: string | undefined;
        type?: GetCandidatesCandidatesResponseType | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        entityId?: string | undefined;
        entityType?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetCandidatesMetadata> = z
        .object({
            id: z.string().optional(),
            key: z.string().optional(),
            value: z.string().optional(),
            type: GetCandidatesCandidatesResponseType$.optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            entityId: z.string().optional(),
            entityType: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.key === undefined ? null : { key: v.key }),
                ...(v.value === undefined ? null : { value: v.value }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.entityId === undefined ? null : { entityId: v.entityId }),
                ...(v.entityType === undefined ? null : { entityType: v.entityType }),
            };
        });
}

/** @internal */
export const GetCandidatesEntityType$ = z.nativeEnum(GetCandidatesEntityType);

/** @internal */
export namespace GetCandidatesAssociatedWith$ {
    export type Inbound = {
        entityId?: string | undefined;
        entityType?: GetCandidatesEntityType | undefined;
        attributes?: Array<string> | undefined;
    };

    export const inboundSchema: z.ZodType<GetCandidatesAssociatedWith, z.ZodTypeDef, Inbound> = z
        .object({
            entityId: z.string().optional(),
            entityType: GetCandidatesEntityType$.optional(),
            attributes: z.array(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.entityId === undefined ? null : { entityId: v.entityId }),
                ...(v.entityType === undefined ? null : { entityType: v.entityType }),
                ...(v.attributes === undefined ? null : { attributes: v.attributes }),
            };
        });

    export type Outbound = {
        entityId?: string | undefined;
        entityType?: GetCandidatesEntityType | undefined;
        attributes?: Array<string> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetCandidatesAssociatedWith> = z
        .object({
            entityId: z.string().optional(),
            entityType: GetCandidatesEntityType$.optional(),
            attributes: z.array(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.entityId === undefined ? null : { entityId: v.entityId }),
                ...(v.entityType === undefined ? null : { entityType: v.entityType }),
                ...(v.attributes === undefined ? null : { attributes: v.attributes }),
            };
        });
}

/** @internal */
export const GetCandidatesAccessControlType$ = z.nativeEnum(GetCandidatesAccessControlType);

/** @internal */
export const GetCandidatesCandidatesResponse200ApplicationJSONType$ = z.nativeEnum(
    GetCandidatesCandidatesResponse200ApplicationJSONType
);

/** @internal */
export namespace GetCandidatesAssigneeDetails$ {
    export type Inbound = {
        identifier?: string | undefined;
        displayName?: string | undefined;
        type?: GetCandidatesCandidatesResponse200ApplicationJSONType | undefined;
    };

    export const inboundSchema: z.ZodType<GetCandidatesAssigneeDetails, z.ZodTypeDef, Inbound> = z
        .object({
            identifier: z.string().optional(),
            displayName: z.string().optional(),
            type: GetCandidatesCandidatesResponse200ApplicationJSONType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.identifier === undefined ? null : { identifier: v.identifier }),
                ...(v.displayName === undefined ? null : { displayName: v.displayName }),
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });

    export type Outbound = {
        identifier?: string | undefined;
        displayName?: string | undefined;
        type?: GetCandidatesCandidatesResponse200ApplicationJSONType | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetCandidatesAssigneeDetails> = z
        .object({
            identifier: z.string().optional(),
            displayName: z.string().optional(),
            type: GetCandidatesCandidatesResponse200ApplicationJSONType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.identifier === undefined ? null : { identifier: v.identifier }),
                ...(v.displayName === undefined ? null : { displayName: v.displayName }),
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });
}

/** @internal */
export const GetCandidatesIdentifierType$ = z.nativeEnum(GetCandidatesIdentifierType);

/** @internal */
export namespace GetCandidatesPermissions$ {
    export type Inbound = {
        canView?: Array<string> | undefined;
        canEdit?: Array<string> | undefined;
        canDelete?: Array<string> | undefined;
        roles?: Array<string> | undefined;
        accessControlType?: GetCandidatesAccessControlType | undefined;
        assigneeDetails?: GetCandidatesAssigneeDetails$.Inbound | undefined;
        identifierType?: GetCandidatesIdentifierType | undefined;
    };

    export const inboundSchema: z.ZodType<GetCandidatesPermissions, z.ZodTypeDef, Inbound> = z
        .object({
            canView: z.array(z.string()).optional(),
            canEdit: z.array(z.string()).optional(),
            canDelete: z.array(z.string()).optional(),
            roles: z.array(z.string()).optional(),
            accessControlType: GetCandidatesAccessControlType$.optional(),
            assigneeDetails: z.lazy(() => GetCandidatesAssigneeDetails$.inboundSchema).optional(),
            identifierType: GetCandidatesIdentifierType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.canView === undefined ? null : { canView: v.canView }),
                ...(v.canEdit === undefined ? null : { canEdit: v.canEdit }),
                ...(v.canDelete === undefined ? null : { canDelete: v.canDelete }),
                ...(v.roles === undefined ? null : { roles: v.roles }),
                ...(v.accessControlType === undefined
                    ? null
                    : { accessControlType: v.accessControlType }),
                ...(v.assigneeDetails === undefined
                    ? null
                    : { assigneeDetails: v.assigneeDetails }),
                ...(v.identifierType === undefined ? null : { identifierType: v.identifierType }),
            };
        });

    export type Outbound = {
        canView?: Array<string> | undefined;
        canEdit?: Array<string> | undefined;
        canDelete?: Array<string> | undefined;
        roles?: Array<string> | undefined;
        accessControlType?: GetCandidatesAccessControlType | undefined;
        assigneeDetails?: GetCandidatesAssigneeDetails$.Outbound | undefined;
        identifierType?: GetCandidatesIdentifierType | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetCandidatesPermissions> = z
        .object({
            canView: z.array(z.string()).optional(),
            canEdit: z.array(z.string()).optional(),
            canDelete: z.array(z.string()).optional(),
            roles: z.array(z.string()).optional(),
            accessControlType: GetCandidatesAccessControlType$.optional(),
            assigneeDetails: z.lazy(() => GetCandidatesAssigneeDetails$.outboundSchema).optional(),
            identifierType: GetCandidatesIdentifierType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.canView === undefined ? null : { canView: v.canView }),
                ...(v.canEdit === undefined ? null : { canEdit: v.canEdit }),
                ...(v.canDelete === undefined ? null : { canDelete: v.canDelete }),
                ...(v.roles === undefined ? null : { roles: v.roles }),
                ...(v.accessControlType === undefined
                    ? null
                    : { accessControlType: v.accessControlType }),
                ...(v.assigneeDetails === undefined
                    ? null
                    : { assigneeDetails: v.assigneeDetails }),
                ...(v.identifierType === undefined ? null : { identifierType: v.identifierType }),
            };
        });
}

/** @internal */
export namespace GetCandidatesResume$ {
    export type Inbound = {
        id?: string | undefined;
        fileName?: string | undefined;
        fileSize?: number | undefined;
        fileType?: string | undefined;
        url?: string | undefined;
        thumbnailUrl?: string | undefined;
        previewUrl?: string | undefined;
        content?: string | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        metadata?: GetCandidatesMetadata$.Inbound | undefined;
        associatedWith?: GetCandidatesAssociatedWith$.Inbound | undefined;
        permissions?: GetCandidatesPermissions$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<GetCandidatesResume, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            fileName: z.string().optional(),
            fileSize: z.number().optional(),
            fileType: z.string().optional(),
            url: z.string().optional(),
            thumbnailUrl: z.string().optional(),
            previewUrl: z.string().optional(),
            content: z.string().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            metadata: z.lazy(() => GetCandidatesMetadata$.inboundSchema).optional(),
            associatedWith: z.lazy(() => GetCandidatesAssociatedWith$.inboundSchema).optional(),
            permissions: z.lazy(() => GetCandidatesPermissions$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fileName === undefined ? null : { fileName: v.fileName }),
                ...(v.fileSize === undefined ? null : { fileSize: v.fileSize }),
                ...(v.fileType === undefined ? null : { fileType: v.fileType }),
                ...(v.url === undefined ? null : { url: v.url }),
                ...(v.thumbnailUrl === undefined ? null : { thumbnailUrl: v.thumbnailUrl }),
                ...(v.previewUrl === undefined ? null : { previewUrl: v.previewUrl }),
                ...(v.content === undefined ? null : { content: v.content }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                ...(v.associatedWith === undefined ? null : { associatedWith: v.associatedWith }),
                ...(v.permissions === undefined ? null : { permissions: v.permissions }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        fileName?: string | undefined;
        fileSize?: number | undefined;
        fileType?: string | undefined;
        url?: string | undefined;
        thumbnailUrl?: string | undefined;
        previewUrl?: string | undefined;
        content?: string | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        metadata?: GetCandidatesMetadata$.Outbound | undefined;
        associatedWith?: GetCandidatesAssociatedWith$.Outbound | undefined;
        permissions?: GetCandidatesPermissions$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetCandidatesResume> = z
        .object({
            id: z.string().optional(),
            fileName: z.string().optional(),
            fileSize: z.number().optional(),
            fileType: z.string().optional(),
            url: z.string().optional(),
            thumbnailUrl: z.string().optional(),
            previewUrl: z.string().optional(),
            content: z.string().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            metadata: z.lazy(() => GetCandidatesMetadata$.outboundSchema).optional(),
            associatedWith: z.lazy(() => GetCandidatesAssociatedWith$.outboundSchema).optional(),
            permissions: z.lazy(() => GetCandidatesPermissions$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fileName === undefined ? null : { fileName: v.fileName }),
                ...(v.fileSize === undefined ? null : { fileSize: v.fileSize }),
                ...(v.fileType === undefined ? null : { fileType: v.fileType }),
                ...(v.url === undefined ? null : { url: v.url }),
                ...(v.thumbnailUrl === undefined ? null : { thumbnailUrl: v.thumbnailUrl }),
                ...(v.previewUrl === undefined ? null : { previewUrl: v.previewUrl }),
                ...(v.content === undefined ? null : { content: v.content }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                ...(v.associatedWith === undefined ? null : { associatedWith: v.associatedWith }),
                ...(v.permissions === undefined ? null : { permissions: v.permissions }),
            };
        });
}

/** @internal */
export const GetCandidatesCandidatesType$ = z.nativeEnum(GetCandidatesCandidatesType);

/** @internal */
export namespace GetCandidatesCandidatesMetadata$ {
    export type Inbound = {
        id?: string | undefined;
        key?: string | undefined;
        value?: string | undefined;
        type?: GetCandidatesCandidatesType | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        entityId?: string | undefined;
        entityType?: string | undefined;
    };

    export const inboundSchema: z.ZodType<GetCandidatesCandidatesMetadata, z.ZodTypeDef, Inbound> =
        z
            .object({
                id: z.string().optional(),
                key: z.string().optional(),
                value: z.string().optional(),
                type: GetCandidatesCandidatesType$.optional(),
                createdAt: z.number().optional(),
                updatedAt: z.number().optional(),
                entityId: z.string().optional(),
                entityType: z.string().optional(),
            })
            .transform((v) => {
                return {
                    ...(v.id === undefined ? null : { id: v.id }),
                    ...(v.key === undefined ? null : { key: v.key }),
                    ...(v.value === undefined ? null : { value: v.value }),
                    ...(v.type === undefined ? null : { type: v.type }),
                    ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                    ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                    ...(v.entityId === undefined ? null : { entityId: v.entityId }),
                    ...(v.entityType === undefined ? null : { entityType: v.entityType }),
                };
            });

    export type Outbound = {
        id?: string | undefined;
        key?: string | undefined;
        value?: string | undefined;
        type?: GetCandidatesCandidatesType | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        entityId?: string | undefined;
        entityType?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetCandidatesCandidatesMetadata
    > = z
        .object({
            id: z.string().optional(),
            key: z.string().optional(),
            value: z.string().optional(),
            type: GetCandidatesCandidatesType$.optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            entityId: z.string().optional(),
            entityType: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.key === undefined ? null : { key: v.key }),
                ...(v.value === undefined ? null : { value: v.value }),
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.entityId === undefined ? null : { entityId: v.entityId }),
                ...(v.entityType === undefined ? null : { entityType: v.entityType }),
            };
        });
}

/** @internal */
export const GetCandidatesCandidatesEntityType$ = z.nativeEnum(GetCandidatesCandidatesEntityType);

/** @internal */
export namespace GetCandidatesCandidatesAssociatedWith$ {
    export type Inbound = {
        entityId?: string | undefined;
        entityType?: GetCandidatesCandidatesEntityType | undefined;
        attributes?: Array<string> | undefined;
    };

    export const inboundSchema: z.ZodType<
        GetCandidatesCandidatesAssociatedWith,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            entityId: z.string().optional(),
            entityType: GetCandidatesCandidatesEntityType$.optional(),
            attributes: z.array(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.entityId === undefined ? null : { entityId: v.entityId }),
                ...(v.entityType === undefined ? null : { entityType: v.entityType }),
                ...(v.attributes === undefined ? null : { attributes: v.attributes }),
            };
        });

    export type Outbound = {
        entityId?: string | undefined;
        entityType?: GetCandidatesCandidatesEntityType | undefined;
        attributes?: Array<string> | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetCandidatesCandidatesAssociatedWith
    > = z
        .object({
            entityId: z.string().optional(),
            entityType: GetCandidatesCandidatesEntityType$.optional(),
            attributes: z.array(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.entityId === undefined ? null : { entityId: v.entityId }),
                ...(v.entityType === undefined ? null : { entityType: v.entityType }),
                ...(v.attributes === undefined ? null : { attributes: v.attributes }),
            };
        });
}

/** @internal */
export const GetCandidatesCandidatesAccessControlType$ = z.nativeEnum(
    GetCandidatesCandidatesAccessControlType
);

/** @internal */
export const GetCandidatesCandidatesResponse200Type$ = z.nativeEnum(
    GetCandidatesCandidatesResponse200Type
);

/** @internal */
export namespace GetCandidatesCandidatesAssigneeDetails$ {
    export type Inbound = {
        identifier?: string | undefined;
        displayName?: string | undefined;
        type?: GetCandidatesCandidatesResponse200Type | undefined;
    };

    export const inboundSchema: z.ZodType<
        GetCandidatesCandidatesAssigneeDetails,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            identifier: z.string().optional(),
            displayName: z.string().optional(),
            type: GetCandidatesCandidatesResponse200Type$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.identifier === undefined ? null : { identifier: v.identifier }),
                ...(v.displayName === undefined ? null : { displayName: v.displayName }),
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });

    export type Outbound = {
        identifier?: string | undefined;
        displayName?: string | undefined;
        type?: GetCandidatesCandidatesResponse200Type | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetCandidatesCandidatesAssigneeDetails
    > = z
        .object({
            identifier: z.string().optional(),
            displayName: z.string().optional(),
            type: GetCandidatesCandidatesResponse200Type$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.identifier === undefined ? null : { identifier: v.identifier }),
                ...(v.displayName === undefined ? null : { displayName: v.displayName }),
                ...(v.type === undefined ? null : { type: v.type }),
            };
        });
}

/** @internal */
export const GetCandidatesCandidatesIdentifierType$ = z.nativeEnum(
    GetCandidatesCandidatesIdentifierType
);

/** @internal */
export namespace GetCandidatesCandidatesPermissions$ {
    export type Inbound = {
        canView?: Array<string> | undefined;
        canEdit?: Array<string> | undefined;
        canDelete?: Array<string> | undefined;
        roles?: Array<string> | undefined;
        accessControlType?: GetCandidatesCandidatesAccessControlType | undefined;
        assigneeDetails?: GetCandidatesCandidatesAssigneeDetails$.Inbound | undefined;
        identifierType?: GetCandidatesCandidatesIdentifierType | undefined;
    };

    export const inboundSchema: z.ZodType<
        GetCandidatesCandidatesPermissions,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            canView: z.array(z.string()).optional(),
            canEdit: z.array(z.string()).optional(),
            canDelete: z.array(z.string()).optional(),
            roles: z.array(z.string()).optional(),
            accessControlType: GetCandidatesCandidatesAccessControlType$.optional(),
            assigneeDetails: z
                .lazy(() => GetCandidatesCandidatesAssigneeDetails$.inboundSchema)
                .optional(),
            identifierType: GetCandidatesCandidatesIdentifierType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.canView === undefined ? null : { canView: v.canView }),
                ...(v.canEdit === undefined ? null : { canEdit: v.canEdit }),
                ...(v.canDelete === undefined ? null : { canDelete: v.canDelete }),
                ...(v.roles === undefined ? null : { roles: v.roles }),
                ...(v.accessControlType === undefined
                    ? null
                    : { accessControlType: v.accessControlType }),
                ...(v.assigneeDetails === undefined
                    ? null
                    : { assigneeDetails: v.assigneeDetails }),
                ...(v.identifierType === undefined ? null : { identifierType: v.identifierType }),
            };
        });

    export type Outbound = {
        canView?: Array<string> | undefined;
        canEdit?: Array<string> | undefined;
        canDelete?: Array<string> | undefined;
        roles?: Array<string> | undefined;
        accessControlType?: GetCandidatesCandidatesAccessControlType | undefined;
        assigneeDetails?: GetCandidatesCandidatesAssigneeDetails$.Outbound | undefined;
        identifierType?: GetCandidatesCandidatesIdentifierType | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetCandidatesCandidatesPermissions
    > = z
        .object({
            canView: z.array(z.string()).optional(),
            canEdit: z.array(z.string()).optional(),
            canDelete: z.array(z.string()).optional(),
            roles: z.array(z.string()).optional(),
            accessControlType: GetCandidatesCandidatesAccessControlType$.optional(),
            assigneeDetails: z
                .lazy(() => GetCandidatesCandidatesAssigneeDetails$.outboundSchema)
                .optional(),
            identifierType: GetCandidatesCandidatesIdentifierType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.canView === undefined ? null : { canView: v.canView }),
                ...(v.canEdit === undefined ? null : { canEdit: v.canEdit }),
                ...(v.canDelete === undefined ? null : { canDelete: v.canDelete }),
                ...(v.roles === undefined ? null : { roles: v.roles }),
                ...(v.accessControlType === undefined
                    ? null
                    : { accessControlType: v.accessControlType }),
                ...(v.assigneeDetails === undefined
                    ? null
                    : { assigneeDetails: v.assigneeDetails }),
                ...(v.identifierType === undefined ? null : { identifierType: v.identifierType }),
            };
        });
}

/** @internal */
export namespace GetCandidatesCoverLetter$ {
    export type Inbound = {
        id?: string | undefined;
        fileName?: string | undefined;
        fileSize?: number | undefined;
        fileType?: string | undefined;
        url?: string | undefined;
        thumbnailUrl?: string | undefined;
        previewUrl?: string | undefined;
        content?: string | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        metadata?: GetCandidatesCandidatesMetadata$.Inbound | undefined;
        associatedWith?: GetCandidatesCandidatesAssociatedWith$.Inbound | undefined;
        permissions?: GetCandidatesCandidatesPermissions$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<GetCandidatesCoverLetter, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            fileName: z.string().optional(),
            fileSize: z.number().optional(),
            fileType: z.string().optional(),
            url: z.string().optional(),
            thumbnailUrl: z.string().optional(),
            previewUrl: z.string().optional(),
            content: z.string().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            metadata: z.lazy(() => GetCandidatesCandidatesMetadata$.inboundSchema).optional(),
            associatedWith: z
                .lazy(() => GetCandidatesCandidatesAssociatedWith$.inboundSchema)
                .optional(),
            permissions: z.lazy(() => GetCandidatesCandidatesPermissions$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fileName === undefined ? null : { fileName: v.fileName }),
                ...(v.fileSize === undefined ? null : { fileSize: v.fileSize }),
                ...(v.fileType === undefined ? null : { fileType: v.fileType }),
                ...(v.url === undefined ? null : { url: v.url }),
                ...(v.thumbnailUrl === undefined ? null : { thumbnailUrl: v.thumbnailUrl }),
                ...(v.previewUrl === undefined ? null : { previewUrl: v.previewUrl }),
                ...(v.content === undefined ? null : { content: v.content }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                ...(v.associatedWith === undefined ? null : { associatedWith: v.associatedWith }),
                ...(v.permissions === undefined ? null : { permissions: v.permissions }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        fileName?: string | undefined;
        fileSize?: number | undefined;
        fileType?: string | undefined;
        url?: string | undefined;
        thumbnailUrl?: string | undefined;
        previewUrl?: string | undefined;
        content?: string | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        metadata?: GetCandidatesCandidatesMetadata$.Outbound | undefined;
        associatedWith?: GetCandidatesCandidatesAssociatedWith$.Outbound | undefined;
        permissions?: GetCandidatesCandidatesPermissions$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetCandidatesCoverLetter> = z
        .object({
            id: z.string().optional(),
            fileName: z.string().optional(),
            fileSize: z.number().optional(),
            fileType: z.string().optional(),
            url: z.string().optional(),
            thumbnailUrl: z.string().optional(),
            previewUrl: z.string().optional(),
            content: z.string().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            metadata: z.lazy(() => GetCandidatesCandidatesMetadata$.outboundSchema).optional(),
            associatedWith: z
                .lazy(() => GetCandidatesCandidatesAssociatedWith$.outboundSchema)
                .optional(),
            permissions: z
                .lazy(() => GetCandidatesCandidatesPermissions$.outboundSchema)
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fileName === undefined ? null : { fileName: v.fileName }),
                ...(v.fileSize === undefined ? null : { fileSize: v.fileSize }),
                ...(v.fileType === undefined ? null : { fileType: v.fileType }),
                ...(v.url === undefined ? null : { url: v.url }),
                ...(v.thumbnailUrl === undefined ? null : { thumbnailUrl: v.thumbnailUrl }),
                ...(v.previewUrl === undefined ? null : { previewUrl: v.previewUrl }),
                ...(v.content === undefined ? null : { content: v.content }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
                ...(v.associatedWith === undefined ? null : { associatedWith: v.associatedWith }),
                ...(v.permissions === undefined ? null : { permissions: v.permissions }),
            };
        });
}

/** @internal */
export const GetCandidatesMimeType$ = z.nativeEnum(GetCandidatesMimeType);

/** @internal */
export namespace GetCandidatesProfilePicture$ {
    export type Inbound = {
        id?: string | undefined;
        src?: string | undefined;
        altText?: string | undefined;
        width?: number | undefined;
        height?: number | undefined;
        thumbnailSrc?: string | undefined;
        caption?: string | undefined;
        title?: string | undefined;
        mimeType?: GetCandidatesMimeType | undefined;
        tags?: Array<string> | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<GetCandidatesProfilePicture, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            src: z.string().optional(),
            altText: z.string().optional(),
            width: z.number().optional(),
            height: z.number().optional(),
            thumbnailSrc: z.string().optional(),
            caption: z.string().optional(),
            title: z.string().optional(),
            mimeType: GetCandidatesMimeType$.optional(),
            tags: z.array(z.string()).optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.src === undefined ? null : { src: v.src }),
                ...(v.altText === undefined ? null : { altText: v.altText }),
                ...(v.width === undefined ? null : { width: v.width }),
                ...(v.height === undefined ? null : { height: v.height }),
                ...(v.thumbnailSrc === undefined ? null : { thumbnailSrc: v.thumbnailSrc }),
                ...(v.caption === undefined ? null : { caption: v.caption }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.mimeType === undefined ? null : { mimeType: v.mimeType }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        src?: string | undefined;
        altText?: string | undefined;
        width?: number | undefined;
        height?: number | undefined;
        thumbnailSrc?: string | undefined;
        caption?: string | undefined;
        title?: string | undefined;
        mimeType?: GetCandidatesMimeType | undefined;
        tags?: Array<string> | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetCandidatesProfilePicture> = z
        .object({
            id: z.string().optional(),
            src: z.string().optional(),
            altText: z.string().optional(),
            width: z.number().optional(),
            height: z.number().optional(),
            thumbnailSrc: z.string().optional(),
            caption: z.string().optional(),
            title: z.string().optional(),
            mimeType: GetCandidatesMimeType$.optional(),
            tags: z.array(z.string()).optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.src === undefined ? null : { src: v.src }),
                ...(v.altText === undefined ? null : { altText: v.altText }),
                ...(v.width === undefined ? null : { width: v.width }),
                ...(v.height === undefined ? null : { height: v.height }),
                ...(v.thumbnailSrc === undefined ? null : { thumbnailSrc: v.thumbnailSrc }),
                ...(v.caption === undefined ? null : { caption: v.caption }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.mimeType === undefined ? null : { mimeType: v.mimeType }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });
}

/** @internal */
export const GetCandidatesType$ = z.nativeEnum(GetCandidatesType);

/** @internal */
export namespace GetCandidatesAdditionalInfo$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<GetCandidatesAdditionalInfo, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetCandidatesAdditionalInfo> =
        z.object({});
}

/** @internal */
export namespace GetCandidatesSocialProfiles$ {
    export type Inbound = {
        type?: GetCandidatesType | undefined;
        username?: string | undefined;
        displayName?: string | undefined;
        url?: string | undefined;
        avatarUrl?: string | undefined;
        email?: string | undefined;
        additionalInfo?: GetCandidatesAdditionalInfo$.Inbound | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const inboundSchema: z.ZodType<GetCandidatesSocialProfiles, z.ZodTypeDef, Inbound> = z
        .object({
            type: GetCandidatesType$.optional(),
            username: z.string().optional(),
            displayName: z.string().optional(),
            url: z.string().optional(),
            avatarUrl: z.string().optional(),
            email: z.string().optional(),
            additionalInfo: z.lazy(() => GetCandidatesAdditionalInfo$.inboundSchema).optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.username === undefined ? null : { username: v.username }),
                ...(v.displayName === undefined ? null : { displayName: v.displayName }),
                ...(v.url === undefined ? null : { url: v.url }),
                ...(v.avatarUrl === undefined ? null : { avatarUrl: v.avatarUrl }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.additionalInfo === undefined ? null : { additionalInfo: v.additionalInfo }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });

    export type Outbound = {
        type?: GetCandidatesType | undefined;
        username?: string | undefined;
        displayName?: string | undefined;
        url?: string | undefined;
        avatarUrl?: string | undefined;
        email?: string | undefined;
        additionalInfo?: GetCandidatesAdditionalInfo$.Outbound | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        active?: boolean | undefined;
        deleted?: boolean | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetCandidatesSocialProfiles> = z
        .object({
            type: GetCandidatesType$.optional(),
            username: z.string().optional(),
            displayName: z.string().optional(),
            url: z.string().optional(),
            avatarUrl: z.string().optional(),
            email: z.string().optional(),
            additionalInfo: z.lazy(() => GetCandidatesAdditionalInfo$.outboundSchema).optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            active: z.boolean().optional(),
            deleted: z.boolean().optional(),
        })
        .transform((v) => {
            return {
                ...(v.type === undefined ? null : { type: v.type }),
                ...(v.username === undefined ? null : { username: v.username }),
                ...(v.displayName === undefined ? null : { displayName: v.displayName }),
                ...(v.url === undefined ? null : { url: v.url }),
                ...(v.avatarUrl === undefined ? null : { avatarUrl: v.avatarUrl }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.additionalInfo === undefined ? null : { additionalInfo: v.additionalInfo }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.active === undefined ? null : { active: v.active }),
                ...(v.deleted === undefined ? null : { deleted: v.deleted }),
            };
        });
}

/** @internal */
export namespace GetCandidatesEducations$ {
    export type Inbound = {
        institution?: string | undefined;
        degree?: string | undefined;
        fieldOfStudy?: string | undefined;
        startDate?: number | undefined;
        endDate?: number | undefined;
        gpa?: number | undefined;
    };

    export const inboundSchema: z.ZodType<GetCandidatesEducations, z.ZodTypeDef, Inbound> = z
        .object({
            institution: z.string().optional(),
            degree: z.string().optional(),
            fieldOfStudy: z.string().optional(),
            startDate: z.number().optional(),
            endDate: z.number().optional(),
            gpa: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.institution === undefined ? null : { institution: v.institution }),
                ...(v.degree === undefined ? null : { degree: v.degree }),
                ...(v.fieldOfStudy === undefined ? null : { fieldOfStudy: v.fieldOfStudy }),
                ...(v.startDate === undefined ? null : { startDate: v.startDate }),
                ...(v.endDate === undefined ? null : { endDate: v.endDate }),
                ...(v.gpa === undefined ? null : { gpa: v.gpa }),
            };
        });

    export type Outbound = {
        institution?: string | undefined;
        degree?: string | undefined;
        fieldOfStudy?: string | undefined;
        startDate?: number | undefined;
        endDate?: number | undefined;
        gpa?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetCandidatesEducations> = z
        .object({
            institution: z.string().optional(),
            degree: z.string().optional(),
            fieldOfStudy: z.string().optional(),
            startDate: z.number().optional(),
            endDate: z.number().optional(),
            gpa: z.number().optional(),
        })
        .transform((v) => {
            return {
                ...(v.institution === undefined ? null : { institution: v.institution }),
                ...(v.degree === undefined ? null : { degree: v.degree }),
                ...(v.fieldOfStudy === undefined ? null : { fieldOfStudy: v.fieldOfStudy }),
                ...(v.startDate === undefined ? null : { startDate: v.startDate }),
                ...(v.endDate === undefined ? null : { endDate: v.endDate }),
                ...(v.gpa === undefined ? null : { gpa: v.gpa }),
            };
        });
}

/** @internal */
export namespace GetCandidatesWorkExperiences$ {
    export type Inbound = {
        company?: string | undefined;
        position?: string | undefined;
        startDate?: number | undefined;
        endDate?: number | undefined;
        description?: string | undefined;
    };

    export const inboundSchema: z.ZodType<GetCandidatesWorkExperiences, z.ZodTypeDef, Inbound> = z
        .object({
            company: z.string().optional(),
            position: z.string().optional(),
            startDate: z.number().optional(),
            endDate: z.number().optional(),
            description: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.company === undefined ? null : { company: v.company }),
                ...(v.position === undefined ? null : { position: v.position }),
                ...(v.startDate === undefined ? null : { startDate: v.startDate }),
                ...(v.endDate === undefined ? null : { endDate: v.endDate }),
                ...(v.description === undefined ? null : { description: v.description }),
            };
        });

    export type Outbound = {
        company?: string | undefined;
        position?: string | undefined;
        startDate?: number | undefined;
        endDate?: number | undefined;
        description?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetCandidatesWorkExperiences> = z
        .object({
            company: z.string().optional(),
            position: z.string().optional(),
            startDate: z.number().optional(),
            endDate: z.number().optional(),
            description: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.company === undefined ? null : { company: v.company }),
                ...(v.position === undefined ? null : { position: v.position }),
                ...(v.startDate === undefined ? null : { startDate: v.startDate }),
                ...(v.endDate === undefined ? null : { endDate: v.endDate }),
                ...(v.description === undefined ? null : { description: v.description }),
            };
        });
}

/** @internal */
export namespace GetCandidatesReferences$ {
    export type Inbound = {
        name?: string | undefined;
        relationship?: string | undefined;
        company?: string | undefined;
        position?: string | undefined;
        email?: string | undefined;
        phoneNumber?: string | undefined;
    };

    export const inboundSchema: z.ZodType<GetCandidatesReferences, z.ZodTypeDef, Inbound> = z
        .object({
            name: z.string().optional(),
            relationship: z.string().optional(),
            company: z.string().optional(),
            position: z.string().optional(),
            email: z.string().optional(),
            phoneNumber: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.relationship === undefined ? null : { relationship: v.relationship }),
                ...(v.company === undefined ? null : { company: v.company }),
                ...(v.position === undefined ? null : { position: v.position }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.phoneNumber === undefined ? null : { phoneNumber: v.phoneNumber }),
            };
        });

    export type Outbound = {
        name?: string | undefined;
        relationship?: string | undefined;
        company?: string | undefined;
        position?: string | undefined;
        email?: string | undefined;
        phoneNumber?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetCandidatesReferences> = z
        .object({
            name: z.string().optional(),
            relationship: z.string().optional(),
            company: z.string().optional(),
            position: z.string().optional(),
            email: z.string().optional(),
            phoneNumber: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.name === undefined ? null : { name: v.name }),
                ...(v.relationship === undefined ? null : { relationship: v.relationship }),
                ...(v.company === undefined ? null : { company: v.company }),
                ...(v.position === undefined ? null : { position: v.position }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.phoneNumber === undefined ? null : { phoneNumber: v.phoneNumber }),
            };
        });
}

/** @internal */
export const GetCandidatesStatus$ = z.nativeEnum(GetCandidatesStatus);

/** @internal */
export const GetCandidatesFieldType$ = z.nativeEnum(GetCandidatesFieldType);

/** @internal */
export namespace GetCandidatesCustomFields$ {
    export type Inbound = {
        id?: string | undefined;
        fieldName?: string | undefined;
        fieldValue?: string | undefined;
        fieldType?: GetCandidatesFieldType | undefined;
    };

    export const inboundSchema: z.ZodType<GetCandidatesCustomFields, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            fieldName: z.string().optional(),
            fieldValue: z.string().optional(),
            fieldType: GetCandidatesFieldType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fieldName === undefined ? null : { fieldName: v.fieldName }),
                ...(v.fieldValue === undefined ? null : { fieldValue: v.fieldValue }),
                ...(v.fieldType === undefined ? null : { fieldType: v.fieldType }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        fieldName?: string | undefined;
        fieldValue?: string | undefined;
        fieldType?: GetCandidatesFieldType | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetCandidatesCustomFields> = z
        .object({
            id: z.string().optional(),
            fieldName: z.string().optional(),
            fieldValue: z.string().optional(),
            fieldType: GetCandidatesFieldType$.optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.fieldName === undefined ? null : { fieldName: v.fieldName }),
                ...(v.fieldValue === undefined ? null : { fieldValue: v.fieldValue }),
                ...(v.fieldType === undefined ? null : { fieldType: v.fieldType }),
            };
        });
}

/** @internal */
export const GetCandidatesPriority$ = z.nativeEnum(GetCandidatesPriority);

/** @internal */
export namespace GetCandidatesAuthor$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<GetCandidatesAuthor, z.ZodTypeDef, Inbound> = z.object(
        {}
    );

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetCandidatesAuthor> = z.object(
        {}
    );
}

/** @internal */
export namespace GetCandidatesAttachments$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<GetCandidatesAttachments, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetCandidatesAttachments> =
        z.object({});
}

/** @internal */
export namespace GetCandidatesSharedWith$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<GetCandidatesSharedWith, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetCandidatesSharedWith> =
        z.object({});
}

/** @internal */
export const GetCandidatesVisibility$ = z.nativeEnum(GetCandidatesVisibility);

/** @internal */
export const GetCandidatesCandidatesStatus$ = z.nativeEnum(GetCandidatesCandidatesStatus);

/** @internal */
export namespace GetCandidatesNotes$ {
    export type Inbound = {
        id?: string | undefined;
        title?: string | undefined;
        content?: string | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        lastAccessed?: number | undefined;
        reminder?: number | undefined;
        color?: string | undefined;
        priority?: GetCandidatesPriority | undefined;
        author?: GetCandidatesAuthor$.Inbound | undefined;
        tags?: Array<string> | undefined;
        attachments?: Array<GetCandidatesAttachments$.Inbound> | undefined;
        sharedWith?: Array<GetCandidatesSharedWith$.Inbound> | undefined;
        visibility?: GetCandidatesVisibility | undefined;
        status?: GetCandidatesCandidatesStatus | undefined;
        metadata?: Array<string> | undefined;
    };

    export const inboundSchema: z.ZodType<GetCandidatesNotes, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            title: z.string().optional(),
            content: z.string().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            lastAccessed: z.number().optional(),
            reminder: z.number().optional(),
            color: z.string().optional(),
            priority: GetCandidatesPriority$.optional(),
            author: z.lazy(() => GetCandidatesAuthor$.inboundSchema).optional(),
            tags: z.array(z.string()).optional(),
            attachments: z.array(z.lazy(() => GetCandidatesAttachments$.inboundSchema)).optional(),
            sharedWith: z.array(z.lazy(() => GetCandidatesSharedWith$.inboundSchema)).optional(),
            visibility: GetCandidatesVisibility$.optional(),
            status: GetCandidatesCandidatesStatus$.optional(),
            metadata: z.array(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.content === undefined ? null : { content: v.content }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.lastAccessed === undefined ? null : { lastAccessed: v.lastAccessed }),
                ...(v.reminder === undefined ? null : { reminder: v.reminder }),
                ...(v.color === undefined ? null : { color: v.color }),
                ...(v.priority === undefined ? null : { priority: v.priority }),
                ...(v.author === undefined ? null : { author: v.author }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
                ...(v.attachments === undefined ? null : { attachments: v.attachments }),
                ...(v.sharedWith === undefined ? null : { sharedWith: v.sharedWith }),
                ...(v.visibility === undefined ? null : { visibility: v.visibility }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        title?: string | undefined;
        content?: string | undefined;
        createdAt?: number | undefined;
        updatedAt?: number | undefined;
        lastAccessed?: number | undefined;
        reminder?: number | undefined;
        color?: string | undefined;
        priority?: GetCandidatesPriority | undefined;
        author?: GetCandidatesAuthor$.Outbound | undefined;
        tags?: Array<string> | undefined;
        attachments?: Array<GetCandidatesAttachments$.Outbound> | undefined;
        sharedWith?: Array<GetCandidatesSharedWith$.Outbound> | undefined;
        visibility?: GetCandidatesVisibility | undefined;
        status?: GetCandidatesCandidatesStatus | undefined;
        metadata?: Array<string> | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetCandidatesNotes> = z
        .object({
            id: z.string().optional(),
            title: z.string().optional(),
            content: z.string().optional(),
            createdAt: z.number().optional(),
            updatedAt: z.number().optional(),
            lastAccessed: z.number().optional(),
            reminder: z.number().optional(),
            color: z.string().optional(),
            priority: GetCandidatesPriority$.optional(),
            author: z.lazy(() => GetCandidatesAuthor$.outboundSchema).optional(),
            tags: z.array(z.string()).optional(),
            attachments: z.array(z.lazy(() => GetCandidatesAttachments$.outboundSchema)).optional(),
            sharedWith: z.array(z.lazy(() => GetCandidatesSharedWith$.outboundSchema)).optional(),
            visibility: GetCandidatesVisibility$.optional(),
            status: GetCandidatesCandidatesStatus$.optional(),
            metadata: z.array(z.string()).optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.title === undefined ? null : { title: v.title }),
                ...(v.content === undefined ? null : { content: v.content }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
                ...(v.lastAccessed === undefined ? null : { lastAccessed: v.lastAccessed }),
                ...(v.reminder === undefined ? null : { reminder: v.reminder }),
                ...(v.color === undefined ? null : { color: v.color }),
                ...(v.priority === undefined ? null : { priority: v.priority }),
                ...(v.author === undefined ? null : { author: v.author }),
                ...(v.tags === undefined ? null : { tags: v.tags }),
                ...(v.attachments === undefined ? null : { attachments: v.attachments }),
                ...(v.sharedWith === undefined ? null : { sharedWith: v.sharedWith }),
                ...(v.visibility === undefined ? null : { visibility: v.visibility }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.metadata === undefined ? null : { metadata: v.metadata }),
            };
        });
}

/** @internal */
export namespace GetCandidatesUnified$ {
    export type Inbound = {
        id?: string | undefined;
        firstName?: string | undefined;
        lastName?: string | undefined;
        email?: string | undefined;
        phoneNumber?: string | undefined;
        role?: string | undefined;
        jobId?: string | undefined;
        resume?: GetCandidatesResume$.Inbound | undefined;
        coverLetter?: GetCandidatesCoverLetter$.Inbound | undefined;
        profilePicture?: GetCandidatesProfilePicture$.Inbound | undefined;
        socialProfiles?: Array<GetCandidatesSocialProfiles$.Inbound> | undefined;
        websites?: Array<string> | undefined;
        skills?: Array<string> | undefined;
        languages?: Array<string> | undefined;
        certifications?: Array<string> | undefined;
        educations?: Array<GetCandidatesEducations$.Inbound> | undefined;
        workExperiences?: Array<GetCandidatesWorkExperiences$.Inbound> | undefined;
        references?: Array<GetCandidatesReferences$.Inbound> | undefined;
        availability?: string | undefined;
        preferredWorkLocation?: string | undefined;
        status?: GetCandidatesStatus | undefined;
        customFields?: Array<GetCandidatesCustomFields$.Inbound> | undefined;
        notes?: Array<GetCandidatesNotes$.Inbound> | undefined;
        createdAt?: string | undefined;
        updatedAt?: string | undefined;
    };

    export const inboundSchema: z.ZodType<GetCandidatesUnified, z.ZodTypeDef, Inbound> = z
        .object({
            id: z.string().optional(),
            firstName: z.string().optional(),
            lastName: z.string().optional(),
            email: z.string().optional(),
            phoneNumber: z.string().optional(),
            role: z.string().optional(),
            jobId: z.string().optional(),
            resume: z.lazy(() => GetCandidatesResume$.inboundSchema).optional(),
            coverLetter: z.lazy(() => GetCandidatesCoverLetter$.inboundSchema).optional(),
            profilePicture: z.lazy(() => GetCandidatesProfilePicture$.inboundSchema).optional(),
            socialProfiles: z
                .array(z.lazy(() => GetCandidatesSocialProfiles$.inboundSchema))
                .optional(),
            websites: z.array(z.string()).optional(),
            skills: z.array(z.string()).optional(),
            languages: z.array(z.string()).optional(),
            certifications: z.array(z.string()).optional(),
            educations: z.array(z.lazy(() => GetCandidatesEducations$.inboundSchema)).optional(),
            workExperiences: z
                .array(z.lazy(() => GetCandidatesWorkExperiences$.inboundSchema))
                .optional(),
            references: z.array(z.lazy(() => GetCandidatesReferences$.inboundSchema)).optional(),
            availability: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            preferredWorkLocation: z.string().optional(),
            status: GetCandidatesStatus$.optional(),
            customFields: z
                .array(z.lazy(() => GetCandidatesCustomFields$.inboundSchema))
                .optional(),
            notes: z.array(z.lazy(() => GetCandidatesNotes$.inboundSchema)).optional(),
            createdAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
            updatedAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.phoneNumber === undefined ? null : { phoneNumber: v.phoneNumber }),
                ...(v.role === undefined ? null : { role: v.role }),
                ...(v.jobId === undefined ? null : { jobId: v.jobId }),
                ...(v.resume === undefined ? null : { resume: v.resume }),
                ...(v.coverLetter === undefined ? null : { coverLetter: v.coverLetter }),
                ...(v.profilePicture === undefined ? null : { profilePicture: v.profilePicture }),
                ...(v.socialProfiles === undefined ? null : { socialProfiles: v.socialProfiles }),
                ...(v.websites === undefined ? null : { websites: v.websites }),
                ...(v.skills === undefined ? null : { skills: v.skills }),
                ...(v.languages === undefined ? null : { languages: v.languages }),
                ...(v.certifications === undefined ? null : { certifications: v.certifications }),
                ...(v.educations === undefined ? null : { educations: v.educations }),
                ...(v.workExperiences === undefined
                    ? null
                    : { workExperiences: v.workExperiences }),
                ...(v.references === undefined ? null : { references: v.references }),
                ...(v.availability === undefined ? null : { availability: v.availability }),
                ...(v.preferredWorkLocation === undefined
                    ? null
                    : { preferredWorkLocation: v.preferredWorkLocation }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                ...(v.notes === undefined ? null : { notes: v.notes }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
            };
        });

    export type Outbound = {
        id?: string | undefined;
        firstName?: string | undefined;
        lastName?: string | undefined;
        email?: string | undefined;
        phoneNumber?: string | undefined;
        role?: string | undefined;
        jobId?: string | undefined;
        resume?: GetCandidatesResume$.Outbound | undefined;
        coverLetter?: GetCandidatesCoverLetter$.Outbound | undefined;
        profilePicture?: GetCandidatesProfilePicture$.Outbound | undefined;
        socialProfiles?: Array<GetCandidatesSocialProfiles$.Outbound> | undefined;
        websites?: Array<string> | undefined;
        skills?: Array<string> | undefined;
        languages?: Array<string> | undefined;
        certifications?: Array<string> | undefined;
        educations?: Array<GetCandidatesEducations$.Outbound> | undefined;
        workExperiences?: Array<GetCandidatesWorkExperiences$.Outbound> | undefined;
        references?: Array<GetCandidatesReferences$.Outbound> | undefined;
        availability?: string | undefined;
        preferredWorkLocation?: string | undefined;
        status?: GetCandidatesStatus | undefined;
        customFields?: Array<GetCandidatesCustomFields$.Outbound> | undefined;
        notes?: Array<GetCandidatesNotes$.Outbound> | undefined;
        createdAt?: string | undefined;
        updatedAt?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetCandidatesUnified> = z
        .object({
            id: z.string().optional(),
            firstName: z.string().optional(),
            lastName: z.string().optional(),
            email: z.string().optional(),
            phoneNumber: z.string().optional(),
            role: z.string().optional(),
            jobId: z.string().optional(),
            resume: z.lazy(() => GetCandidatesResume$.outboundSchema).optional(),
            coverLetter: z.lazy(() => GetCandidatesCoverLetter$.outboundSchema).optional(),
            profilePicture: z.lazy(() => GetCandidatesProfilePicture$.outboundSchema).optional(),
            socialProfiles: z
                .array(z.lazy(() => GetCandidatesSocialProfiles$.outboundSchema))
                .optional(),
            websites: z.array(z.string()).optional(),
            skills: z.array(z.string()).optional(),
            languages: z.array(z.string()).optional(),
            certifications: z.array(z.string()).optional(),
            educations: z.array(z.lazy(() => GetCandidatesEducations$.outboundSchema)).optional(),
            workExperiences: z
                .array(z.lazy(() => GetCandidatesWorkExperiences$.outboundSchema))
                .optional(),
            references: z.array(z.lazy(() => GetCandidatesReferences$.outboundSchema)).optional(),
            availability: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            preferredWorkLocation: z.string().optional(),
            status: GetCandidatesStatus$.optional(),
            customFields: z
                .array(z.lazy(() => GetCandidatesCustomFields$.outboundSchema))
                .optional(),
            notes: z.array(z.lazy(() => GetCandidatesNotes$.outboundSchema)).optional(),
            createdAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
            updatedAt: z
                .date()
                .transform((v) => v.toISOString())
                .optional(),
        })
        .transform((v) => {
            return {
                ...(v.id === undefined ? null : { id: v.id }),
                ...(v.firstName === undefined ? null : { firstName: v.firstName }),
                ...(v.lastName === undefined ? null : { lastName: v.lastName }),
                ...(v.email === undefined ? null : { email: v.email }),
                ...(v.phoneNumber === undefined ? null : { phoneNumber: v.phoneNumber }),
                ...(v.role === undefined ? null : { role: v.role }),
                ...(v.jobId === undefined ? null : { jobId: v.jobId }),
                ...(v.resume === undefined ? null : { resume: v.resume }),
                ...(v.coverLetter === undefined ? null : { coverLetter: v.coverLetter }),
                ...(v.profilePicture === undefined ? null : { profilePicture: v.profilePicture }),
                ...(v.socialProfiles === undefined ? null : { socialProfiles: v.socialProfiles }),
                ...(v.websites === undefined ? null : { websites: v.websites }),
                ...(v.skills === undefined ? null : { skills: v.skills }),
                ...(v.languages === undefined ? null : { languages: v.languages }),
                ...(v.certifications === undefined ? null : { certifications: v.certifications }),
                ...(v.educations === undefined ? null : { educations: v.educations }),
                ...(v.workExperiences === undefined
                    ? null
                    : { workExperiences: v.workExperiences }),
                ...(v.references === undefined ? null : { references: v.references }),
                ...(v.availability === undefined ? null : { availability: v.availability }),
                ...(v.preferredWorkLocation === undefined
                    ? null
                    : { preferredWorkLocation: v.preferredWorkLocation }),
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.customFields === undefined ? null : { customFields: v.customFields }),
                ...(v.notes === undefined ? null : { notes: v.notes }),
                ...(v.createdAt === undefined ? null : { createdAt: v.createdAt }),
                ...(v.updatedAt === undefined ? null : { updatedAt: v.updatedAt }),
            };
        });
}

/** @internal */
export namespace GetCandidatesPassthrough$ {
    export type Inbound = {};

    export const inboundSchema: z.ZodType<GetCandidatesPassthrough, z.ZodTypeDef, Inbound> =
        z.object({});

    export type Outbound = {};

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetCandidatesPassthrough> =
        z.object({});
}

/** @internal */
export namespace GetCandidatesCache$ {
    export type Inbound = {
        hit?: boolean | undefined;
        ttl?: number | undefined;
        key?: string | undefined;
    };

    export const inboundSchema: z.ZodType<GetCandidatesCache, z.ZodTypeDef, Inbound> = z
        .object({
            hit: z.boolean().optional(),
            ttl: z.number().int().optional(),
            key: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.hit === undefined ? null : { hit: v.hit }),
                ...(v.ttl === undefined ? null : { ttl: v.ttl }),
                ...(v.key === undefined ? null : { key: v.key }),
            };
        });

    export type Outbound = {
        hit?: boolean | undefined;
        ttl?: number | undefined;
        key?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetCandidatesCache> = z
        .object({
            hit: z.boolean().optional(),
            ttl: z.number().int().optional(),
            key: z.string().optional(),
        })
        .transform((v) => {
            return {
                ...(v.hit === undefined ? null : { hit: v.hit }),
                ...(v.ttl === undefined ? null : { ttl: v.ttl }),
                ...(v.key === undefined ? null : { key: v.key }),
            };
        });
}

/** @internal */
export namespace GetCandidatesMeta$ {
    export type Inbound = {
        timestamp?: number | undefined;
        latency?: number | undefined;
        platformRateLimitRemaining?: number | undefined;
        rateLimitRemaining?: number | undefined;
        cache?: GetCandidatesCache$.Inbound | undefined;
        transactionKey?: string | undefined;
        txn?: string | undefined;
        platform?: string | undefined;
        platformVersion?: string | undefined;
        connectionDefinitionKey?: string | undefined;
        action?: string | undefined;
        commonModel?: string | undefined;
        commonModelVersion?: string | undefined;
        connectionKey?: string | undefined;
        hash?: string | undefined;
        heartbeats?: Array<string> | undefined;
        totalTransactions?: number | undefined;
    };

    export const inboundSchema: z.ZodType<GetCandidatesMeta, z.ZodTypeDef, Inbound> = z
        .object({
            timestamp: z.number().int().optional(),
            latency: z.number().int().optional(),
            platformRateLimitRemaining: z.number().int().optional(),
            rateLimitRemaining: z.number().int().optional(),
            cache: z.lazy(() => GetCandidatesCache$.inboundSchema).optional(),
            transactionKey: z.string().optional(),
            txn: z.string().optional(),
            platform: z.string().optional(),
            platformVersion: z.string().optional(),
            connectionDefinitionKey: z.string().optional(),
            action: z.string().optional(),
            commonModel: z.string().optional(),
            commonModelVersion: z.string().optional(),
            connectionKey: z.string().optional(),
            hash: z.string().optional(),
            heartbeats: z.array(z.string()).optional(),
            totalTransactions: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.timestamp === undefined ? null : { timestamp: v.timestamp }),
                ...(v.latency === undefined ? null : { latency: v.latency }),
                ...(v.platformRateLimitRemaining === undefined
                    ? null
                    : { platformRateLimitRemaining: v.platformRateLimitRemaining }),
                ...(v.rateLimitRemaining === undefined
                    ? null
                    : { rateLimitRemaining: v.rateLimitRemaining }),
                ...(v.cache === undefined ? null : { cache: v.cache }),
                ...(v.transactionKey === undefined ? null : { transactionKey: v.transactionKey }),
                ...(v.txn === undefined ? null : { txn: v.txn }),
                ...(v.platform === undefined ? null : { platform: v.platform }),
                ...(v.platformVersion === undefined
                    ? null
                    : { platformVersion: v.platformVersion }),
                ...(v.connectionDefinitionKey === undefined
                    ? null
                    : { connectionDefinitionKey: v.connectionDefinitionKey }),
                ...(v.action === undefined ? null : { action: v.action }),
                ...(v.commonModel === undefined ? null : { commonModel: v.commonModel }),
                ...(v.commonModelVersion === undefined
                    ? null
                    : { commonModelVersion: v.commonModelVersion }),
                ...(v.connectionKey === undefined ? null : { connectionKey: v.connectionKey }),
                ...(v.hash === undefined ? null : { hash: v.hash }),
                ...(v.heartbeats === undefined ? null : { heartbeats: v.heartbeats }),
                ...(v.totalTransactions === undefined
                    ? null
                    : { totalTransactions: v.totalTransactions }),
            };
        });

    export type Outbound = {
        timestamp?: number | undefined;
        latency?: number | undefined;
        platformRateLimitRemaining?: number | undefined;
        rateLimitRemaining?: number | undefined;
        cache?: GetCandidatesCache$.Outbound | undefined;
        transactionKey?: string | undefined;
        txn?: string | undefined;
        platform?: string | undefined;
        platformVersion?: string | undefined;
        connectionDefinitionKey?: string | undefined;
        action?: string | undefined;
        commonModel?: string | undefined;
        commonModelVersion?: string | undefined;
        connectionKey?: string | undefined;
        hash?: string | undefined;
        heartbeats?: Array<string> | undefined;
        totalTransactions?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetCandidatesMeta> = z
        .object({
            timestamp: z.number().int().optional(),
            latency: z.number().int().optional(),
            platformRateLimitRemaining: z.number().int().optional(),
            rateLimitRemaining: z.number().int().optional(),
            cache: z.lazy(() => GetCandidatesCache$.outboundSchema).optional(),
            transactionKey: z.string().optional(),
            txn: z.string().optional(),
            platform: z.string().optional(),
            platformVersion: z.string().optional(),
            connectionDefinitionKey: z.string().optional(),
            action: z.string().optional(),
            commonModel: z.string().optional(),
            commonModelVersion: z.string().optional(),
            connectionKey: z.string().optional(),
            hash: z.string().optional(),
            heartbeats: z.array(z.string()).optional(),
            totalTransactions: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.timestamp === undefined ? null : { timestamp: v.timestamp }),
                ...(v.latency === undefined ? null : { latency: v.latency }),
                ...(v.platformRateLimitRemaining === undefined
                    ? null
                    : { platformRateLimitRemaining: v.platformRateLimitRemaining }),
                ...(v.rateLimitRemaining === undefined
                    ? null
                    : { rateLimitRemaining: v.rateLimitRemaining }),
                ...(v.cache === undefined ? null : { cache: v.cache }),
                ...(v.transactionKey === undefined ? null : { transactionKey: v.transactionKey }),
                ...(v.txn === undefined ? null : { txn: v.txn }),
                ...(v.platform === undefined ? null : { platform: v.platform }),
                ...(v.platformVersion === undefined
                    ? null
                    : { platformVersion: v.platformVersion }),
                ...(v.connectionDefinitionKey === undefined
                    ? null
                    : { connectionDefinitionKey: v.connectionDefinitionKey }),
                ...(v.action === undefined ? null : { action: v.action }),
                ...(v.commonModel === undefined ? null : { commonModel: v.commonModel }),
                ...(v.commonModelVersion === undefined
                    ? null
                    : { commonModelVersion: v.commonModelVersion }),
                ...(v.connectionKey === undefined ? null : { connectionKey: v.connectionKey }),
                ...(v.hash === undefined ? null : { hash: v.hash }),
                ...(v.heartbeats === undefined ? null : { heartbeats: v.heartbeats }),
                ...(v.totalTransactions === undefined
                    ? null
                    : { totalTransactions: v.totalTransactions }),
            };
        });
}

/** @internal */
export namespace GetCandidatesPagination$ {
    export type Inbound = {
        cursor?: string | undefined;
        limit?: number | undefined;
    };

    export const inboundSchema: z.ZodType<GetCandidatesPagination, z.ZodTypeDef, Inbound> = z
        .object({
            cursor: z.string().optional(),
            limit: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.cursor === undefined ? null : { cursor: v.cursor }),
                ...(v.limit === undefined ? null : { limit: v.limit }),
            };
        });

    export type Outbound = {
        cursor?: string | undefined;
        limit?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetCandidatesPagination> = z
        .object({
            cursor: z.string().optional(),
            limit: z.number().int().optional(),
        })
        .transform((v) => {
            return {
                ...(v.cursor === undefined ? null : { cursor: v.cursor }),
                ...(v.limit === undefined ? null : { limit: v.limit }),
            };
        });
}

/** @internal */
export namespace GetCandidatesResponseBody$ {
    export type Inbound = {
        status?: string | undefined;
        statusCode?: GetCandidatesStatusCode | undefined;
        unified?: Array<GetCandidatesUnified$.Inbound> | undefined;
        passthrough?: GetCandidatesPassthrough$.Inbound | undefined;
        meta?: GetCandidatesMeta$.Inbound | undefined;
        pagination?: GetCandidatesPagination$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<GetCandidatesResponseBody, z.ZodTypeDef, Inbound> = z
        .object({
            status: z.string().optional(),
            statusCode: GetCandidatesStatusCode$.optional(),
            unified: z.array(z.lazy(() => GetCandidatesUnified$.inboundSchema)).optional(),
            passthrough: z.lazy(() => GetCandidatesPassthrough$.inboundSchema).optional(),
            meta: z.lazy(() => GetCandidatesMeta$.inboundSchema).optional(),
            pagination: z.lazy(() => GetCandidatesPagination$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.statusCode === undefined ? null : { statusCode: v.statusCode }),
                ...(v.unified === undefined ? null : { unified: v.unified }),
                ...(v.passthrough === undefined ? null : { passthrough: v.passthrough }),
                ...(v.meta === undefined ? null : { meta: v.meta }),
                ...(v.pagination === undefined ? null : { pagination: v.pagination }),
            };
        });

    export type Outbound = {
        status?: string | undefined;
        statusCode?: GetCandidatesStatusCode | undefined;
        unified?: Array<GetCandidatesUnified$.Outbound> | undefined;
        passthrough?: GetCandidatesPassthrough$.Outbound | undefined;
        meta?: GetCandidatesMeta$.Outbound | undefined;
        pagination?: GetCandidatesPagination$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetCandidatesResponseBody> = z
        .object({
            status: z.string().optional(),
            statusCode: GetCandidatesStatusCode$.optional(),
            unified: z.array(z.lazy(() => GetCandidatesUnified$.outboundSchema)).optional(),
            passthrough: z.lazy(() => GetCandidatesPassthrough$.outboundSchema).optional(),
            meta: z.lazy(() => GetCandidatesMeta$.outboundSchema).optional(),
            pagination: z.lazy(() => GetCandidatesPagination$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ...(v.status === undefined ? null : { status: v.status }),
                ...(v.statusCode === undefined ? null : { statusCode: v.statusCode }),
                ...(v.unified === undefined ? null : { unified: v.unified }),
                ...(v.passthrough === undefined ? null : { passthrough: v.passthrough }),
                ...(v.meta === undefined ? null : { meta: v.meta }),
                ...(v.pagination === undefined ? null : { pagination: v.pagination }),
            };
        });
}

/** @internal */
export namespace GetCandidatesResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        object?: GetCandidatesResponseBody$.Inbound | undefined;
    };

    export const inboundSchema: z.ZodType<GetCandidatesResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            object: z.lazy(() => GetCandidatesResponseBody$.inboundSchema).optional(),
        })
        .transform((v) => {
            return {
                contentType: v.ContentType,
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        object?: GetCandidatesResponseBody$.Outbound | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetCandidatesResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            object: z.lazy(() => GetCandidatesResponseBody$.outboundSchema).optional(),
        })
        .transform((v) => {
            return {
                ContentType: v.contentType,
                StatusCode: v.statusCode,
                RawResponse: v.rawResponse,
                ...(v.object === undefined ? null : { object: v.object }),
            };
        });
}
